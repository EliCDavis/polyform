package noise

import (
	"math"

	"github.com/EliCDavis/vector"
)

/*
 * Everything here is implemented from the blog post :
 * https://gpfault.net/posts/perlin-noise.txt.html
 */

var randvals = []float64{
	0.8704284167043097, 0.34381794949226285, 0.20347651223593433, 0.6936267453762557,
	0.31492088227316795, 0.17628107042323715, 0.5894548796802268, 0.36207042982046467,
	0.2098541259451625, 0.5368667694137306, 0.9079312480291066, 0.1447804291061865,
	0.9351266781348699, 0.19244789853112976, 0.027581673668102935, 0.4295947978719412,
	0.18247495259966917, 0.17805128506349477, 0.59218532812359, 0.5483899369985801,
	0.09254491901667805, 0.24688096571768492, 0.006756920935624189, 0.07987715815316698,
	0.32765522886116405, 0.04139438878897006, 0.8679133091761289, 0.19040201792272304,
	0.33829041945133254, 0.09766739566945581, 0.6960339535542752, 0.2339870411837779,
	0.6653001474197455, 0.5653375392106565, 0.5565825349563516, 0.6264984303415653,
	0.4817678133462635, 0.9137230156315765, 0.962977575242074, 0.7535576669131003,
	0.6590340877209775, 0.46414805881260235, 0.33272940446058796, 0.6877678129498426,
	0.45250947350649295, 0.20457744207199435, 0.5724448957536952, 0.9798893165112026,
	0.5222828303919786, 0.24993553784893008, 0.8824366757918849, 0.8860878035380997,
	0.8608275500278695, 0.2212425499070798, 0.7680678518299935, 0.31340332898263856,
	0.48618470548166615, 0.24275518320888922, 0.011942774692459412, 0.7628626815884714,
	0.31319696475398673, 0.30917928938524675, 0.9096478185771337, 0.535645268320293,
	0.3997949397424305, 0.7808287332826014, 0.8860462025898967, 0.5480879142285682,
	0.258917710199575, 0.7928514503858257, 0.7167293130403909, 0.45359254331078014,
	0.39811726219764787, 0.28598288854757237, 0.9363448337707183, 0.03586765363555644,
	0.5016599180934189, 0.8610121408298264, 0.7501892578071321, 0.9559837471978927,
	0.45319617482371055, 0.13782168400027106, 0.16246789640666304, 0.2780340080827213,
	0.25223352674235455, 0.6858641692298615, 0.05671201716621521, 0.9515571978580988,
	0.4662938761805062, 0.1413720403634111, 0.6425222116877194, 0.8742063490337564,
	0.2577796253795894, 0.5313520534852778, 0.9541957665881069, 0.36689843315556936,
	0.08714136476478629, 0.6979727712707209, 0.8665059177214127, 0.7891054924109948,
	0.6014078325321426, 0.4471632398461891, 0.8804372599856021, 0.6621434961551356,
	0.1438271311191448, 0.1674369161747027, 0.6941325365302466, 0.8428141235734272,
	0.6594071158885231, 0.45895338544786113, 0.688770464563643, 0.8006565616688901,
	0.6982693441194612, 0.9114509333793817, 0.38101020181205447, 0.9288700097660287,
	0.9177693606782669, 0.7920037275039264, 0.0367754890323877, 0.42157908169273584,
	0.723674161250542, 0.8492137248546607, 0.19135097453720906, 0.4279359002088332,
	0.928697310763485, 0.8940628044422461, 0.9196848730464706, 0.7777182797612412,
	0.4098584971008481, 0.8079786752988427, 0.8117403285389861, 0.18225588635292622,
	0.9689167856358409, 0.5822394209380057, 0.5087817829207337, 0.033148303304662674,
	0.5211438011211189, 0.2602665199471166, 0.5122497402695882, 0.9356743311694065,
	0.31713405136010486, 0.5508526804098395, 0.6029342740995718, 0.42211407205270435,
	0.03202701252677498, 0.109385626310468, 0.8436456638364529, 0.44803341910971617,
	0.2971287860337639, 0.9151367940440329, 0.8426361614284981, 0.9784186815538478,
	0.8028471322210211, 0.5213526126635832, 0.2002620080970987, 0.5490488087474357,
	0.5279504325839439, 0.006796722338321182, 0.5265218020955242, 0.8179928465123476,
	0.6057343244257596, 0.771278328736622, 0.41575684586903994, 0.3409806454285662,
	0.150747073673821, 0.1734683950008502, 0.45843929035518016, 0.46220423998422144,
	0.3816698057241863, 0.7877455792907055, 0.2179128675886266, 0.6241053797524747,
	0.5381105103546531, 0.41984301688737946, 0.9568855866333323, 0.6641537200359071,
	0.6377871025863648, 0.26691130413327, 0.8031592567165593, 0.8774295343626533,
	0.1939555539936748, 0.8612395586723123, 0.8020779045940338, 0.3265149904050053,
	0.8235432263781146, 0.6263749753699897, 0.2703337928924714, 0.7503830368949362,
	0.5090622936771221, 0.34991039142807834, 0.6424786447228512, 0.9197268591261023,
	0.28924334282373376, 0.841187651328485, 0.270962100501974, 0.756410041652152,
	0.6790131522181968, 0.724784473882375, 0.1366331831720342, 0.3746843061419438,
	0.42425371033267356, 0.05444160039644741, 0.2900592289904913, 0.15074865577097651,
	0.39039231052233636, 0.48451080612620956, 0.22350634951658144, 0.2654725344790494,
	0.30989248245248935, 0.03238716813412146, 0.7744753963120066, 0.2659481214864856,
	0.4827492208061901, 0.05025401123057338, 0.791289417934957, 0.8969404864201656,
	0.7805644166056944, 0.8831511439508759, 0.20065785507064948, 0.1590760918065608,
	0.5895324410174767, 0.6232674279536328, 0.4379293292182298, 0.708331150364883,
	0.04885480263475972, 0.04652842238575272, 0.9053855988598549, 0.3617416251026946,
	0.21541470870117507, 0.5797430276075937, 0.12468835555159852, 0.024796671162763628,
	0.07591891794777905, 0.3558664685922752, 0.45068302525520787, 0.30625455367271637,
	0.7905187566761203, 0.5280382647544786, 0.83027358073379, 0.39390697677746345,
	0.1268853620277801, 0.346362365423482, 0.985084118785369, 0.7476722131876661,
	0.11742369703699773, 0.4507068181589886, 0.5128875887645592, 0.4608293202864875,
	0.16675852053711648, 0.23259465618181574, 0.3754230072378064, 0.21166186674917586,
	0.5188597230718879, 0.5656091134135179, 0.5737223060700867,
}

func fade(t float64) float64 {
	return math.Pow(t, 3) * (t*(t*6-15) + 10)
}

func grad(p float64) float64 {
	if randvals[int(math.Round(p))%len(randvals)] > 0.5 {
		return 1.0
	}
	return -1.0
}

func grad2D(pDirty vector.Vector2) vector.Vector2 {
	p := vector.NewVector2(math.Abs(pDirty.X()), math.Abs(pDirty.Y()))
	width := float64(len(randvals))
	xVal := randvals[int(math.Round(p.X()))%len(randvals)]
	yVal := randvals[int(math.Round(p.Y()+(xVal*width)))%len(randvals)]
	zVal := randvals[int(math.Round(yVal*width))]
	wVal := randvals[int(math.Round(zVal*width))]
	v := vector.NewVector2(
		xVal,
		wVal,
	)
	return v.MultByConstant(2).
		Sub(vector.Vector2One()).
		Normalized()
}

func noise2D(p vector.Vector2, f func(float64) float64, g func(vector.Vector2) vector.Vector2) float64 {
	/* Calculate lattice points. */
	p0 := p.Floor()
	p1 := p0.Add(vector.Vector2Right())
	p2 := p0.Add(vector.Vector2Up())
	p3 := p0.Add(vector.Vector2One())

	/* Look up gradients at lattice points. */
	g0 := g(p0)
	g1 := g(p1)
	g2 := g(p2)
	g3 := g(p3)

	t0 := p.X() - p0.X()
	fade_t0 := f(t0) /* Used for interpolation in horizontal direction */

	t1 := p.Y() - p0.Y()
	fade_t1 := f(t1) /* Used for interpolation in vertical direction. */

	/* Calculate dot products and interpolate.*/
	p0p1 := (1.0-fade_t0)*g0.Dot(p.Sub(p0)) + fade_t0*g1.Dot(p.Sub(p1)) /* between upper two lattice points */
	p2p3 := (1.0-fade_t0)*g2.Dot(p.Sub(p2)) + fade_t0*g3.Dot(p.Sub(p3)) /* between lower two lattice points */

	/* Calculate final result */
	return ((1.0-fade_t1)*p0p1 + fade_t1*p2p3) + .5
}

// https://gpfault.net/posts/perlin-noise.txt.html
//
// (1 - F(p-p0))g(p0)(p-p0) + F(p-p0)g(p1)(p-p1)
func noise1D(p float64, f, g func(float64) float64) float64 {
	p0 := math.Floor(p)
	p1 := p0 + 1

	g0 := g(p0)
	g1 := g(p1)

	pm0 := p - p0
	pm1 := p - p1

	fv0 := f(pm0)

	return ((1. - fv0) * g0 * pm0) + (fv0 * g1 * pm1)
}

func Perlin1D(x float64) float64 {
	return noise1D(x, fade, grad)
}

func Perlin2D(v vector.Vector2) float64 {
	return noise2D(v, fade, grad2D)
}
