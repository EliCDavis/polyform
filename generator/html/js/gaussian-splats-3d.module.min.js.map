{"version":3,"file":"gaussian-splats-3d.module.min.js","sources":["../src/loaders/UncompressedSplatArray.js","../src/AbortablePromise.js","../src/Util.js","../src/loaders/SplatBuffer.js","../src/loaders/ply/CompressedPlyParser.js","../src/loaders/ply/PlyParser.js","../src/loaders/SplatPartitioner.js","../src/loaders/SplatBufferGenerator.js","../src/loaders/LoaderStatus.js","../src/Constants.js","../src/loaders/ply/PlyLoader.js","../src/loaders/splat/SplatParser.js","../src/loaders/splat/SplatLoader.js","../src/loaders/ksplat/KSplatLoader.js","../src/loaders/SceneFormat.js","../src/loaders/Utils.js","../src/OrbitControls.js","../src/ui/LoadingSpinner.js","../src/ui/Util.js","../src/ui/LoadingProgressBar.js","../src/ui/InfoPanel.js","../src/ArrowHelper.js","../src/SceneHelper.js","../src/raycaster/Ray.js","../src/raycaster/Hit.js","../src/raycaster/Raycaster.js","../src/SplatScene.js","../src/splattree/SplatTree.js","../src/three-shim/WebGLExtensions.js","../src/three-shim/WebGLCapabilities.js","../src/SceneRevealMode.js","../src/SplatMesh.js","../src/worker/SortWorker.js","../src/webxr/WebXRMode.js","../src/webxr/VRButton.js","../src/webxr/ARButton.js","../src/RenderMode.js","../src/Viewer.js","../src/worker/sorter.wasm","../src/DropInViewer.js"],"sourcesContent":["\r\nexport class UncompressedSplatArray {\r\n\r\n    static OFFSET = {\r\n        X: 0,\r\n        Y: 1,\r\n        Z: 2,\r\n        SCALE0: 3,\r\n        SCALE1: 4,\r\n        SCALE2: 5,\r\n        ROTATION0: 6,\r\n        ROTATION1: 7,\r\n        ROTATION2: 8,\r\n        ROTATION3: 9,\r\n        FDC0: 10,\r\n        FDC1: 11,\r\n        FDC2: 12,\r\n        OPACITY: 13\r\n    };\r\n\r\n    constructor() {\r\n        this.splats = [];\r\n        this.splatCount = 0;\r\n    }\r\n\r\n    static createSplat() {\r\n        return [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0];\r\n    }\r\n\r\n    addSplat(splat) {\r\n        this.splats.push(splat);\r\n        this.splatCount++;\r\n    }\r\n\r\n    getSplat(index) {\r\n        return this.splats[index];\r\n    }\r\n\r\n    addDefaultSplat() {\r\n        const newSplat = UncompressedSplatArray.createSplat();\r\n        this.addSplat(newSplat);\r\n        return newSplat;\r\n    }\r\n\r\n    addSplatFromComonents(x, y, z, scale0, scale1, scale2, rot0, rot1, rot2, rot3, r, g, b, opacity) {\r\n        const newSplat = [x, y, z, scale0, scale1, scale2, rot0, rot1, rot2, rot3, r, g, b, opacity];\r\n        this.addSplat(newSplat);\r\n        return newSplat;\r\n    }\r\n\r\n    addSplatFromArray(src, srcIndex) {\r\n        const srcSplat = src.splats[srcIndex];\r\n        this.addSplatFromComonents(srcSplat[0], srcSplat[1], srcSplat[2], srcSplat[3], srcSplat[4], srcSplat[5],\r\n                                   srcSplat[6], srcSplat[7], srcSplat[8], srcSplat[9],\r\n                                   srcSplat[10], srcSplat[11], srcSplat[12], srcSplat[13]);\r\n    }\r\n}\r\n","/**\r\n * AbortablePromise: A quick & dirty wrapper for JavaScript's Promise class that allows the underlying\r\n * asynchronous operation to be cancelled. It is only meant for simple situations where no complex promise\r\n * chaining or merging occurs. It needs a significant amount of work to truly replicate the full\r\n * functionality of JavaScript's Promise class. Look at Util.fetchWithProgress() for example usage.\r\n *\r\n * This class was primarily added to allow splat scene downloads to be cancelled. It has not been tested\r\n * very thoroughly and the implementation is kinda janky. If you can at all help it, please avoid using it :)\r\n */\r\nexport class AbortablePromise {\r\n\r\n    static idGen = 0;\r\n\r\n    constructor(promiseFunc, abortHandler) {\r\n\r\n        let promiseResolve;\r\n        let promiseReject;\r\n        this.promise = new Promise((resolve, reject) => {\r\n            promiseResolve = resolve.bind(this);\r\n            promiseReject = reject.bind(this);\r\n        });\r\n\r\n        const resolve = (...args) => {\r\n            promiseResolve(...args);\r\n        };\r\n\r\n        const reject = (error) => {\r\n            promiseReject(error);\r\n        };\r\n\r\n        promiseFunc(resolve.bind(this), reject.bind(this));\r\n        this.abortHandler = abortHandler;\r\n        this.id = AbortablePromise.idGen++;\r\n    }\r\n\r\n    then(onResolve) {\r\n        return new AbortablePromise((resolve, reject) => {\r\n            this.promise = this.promise\r\n            .then((...args) => {\r\n                const onResolveResult = onResolve(...args);\r\n                if (onResolveResult instanceof Promise || onResolveResult instanceof AbortablePromise) {\r\n                    onResolveResult.then((...args2) => {\r\n                        resolve(...args2);\r\n                    });\r\n                } else {\r\n                    resolve(onResolveResult);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                reject(error);\r\n            });\r\n        }, this.abortHandler);\r\n    }\r\n\r\n    catch(onFail) {\r\n        return new AbortablePromise((resolve) => {\r\n            this.promise = this.promise.then((...args) => {\r\n                resolve(...args);\r\n            })\r\n            .catch(onFail);\r\n        }, this.abortHandler);\r\n    }\r\n\r\n    abort() {\r\n        if (this.abortHandler) this.abortHandler();\r\n    }\r\n\r\n}\r\n\r\nexport class AbortedPromiseError extends Error {\r\n\r\n    constructor(msg) {\r\n        super(msg);\r\n    }\r\n\r\n}\r\n","import { AbortablePromise, AbortedPromiseError } from './AbortablePromise.js';\r\n\r\nexport const floatToHalf = function() {\r\n\r\n    const floatView = new Float32Array(1);\r\n    const int32View = new Int32Array(floatView.buffer);\r\n\r\n    return function(val) {\r\n        floatView[0] = val;\r\n        const x = int32View[0];\r\n\r\n        let bits = (x >> 16) & 0x8000;\r\n        let m = (x >> 12) & 0x07ff;\r\n        const e = (x >> 23) & 0xff;\r\n\r\n        if (e < 103) return bits;\r\n\r\n        if (e > 142) {\r\n            bits |= 0x7c00;\r\n            bits |= ((e == 255) ? 0 : 1) && (x & 0x007fffff);\r\n            return bits;\r\n        }\r\n\r\n        if (e < 113) {\r\n            m |= 0x0800;\r\n            bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\r\n            return bits;\r\n        }\r\n\r\n        bits |= (( e - 112) << 10) | (m >> 1);\r\n        bits += m & 1;\r\n        return bits;\r\n    };\r\n\r\n}();\r\n\r\nexport const uintEncodedFloat = function() {\r\n\r\n    const floatView = new Float32Array(1);\r\n    const int32View = new Int32Array(floatView.buffer);\r\n\r\n    return function(f) {\r\n        floatView[0] = f;\r\n        return int32View[0];\r\n    };\r\n\r\n}();\r\n\r\nexport const rgbaToInteger = function(r, g, b, a) {\r\n    return r + (g << 8) + (b << 16) + (a << 24);\r\n};\r\n\r\nexport const rgbaArrayToInteger = function(arr, offset) {\r\n    return arr[offset] + (arr[offset + 1] << 8) + (arr[offset + 2] << 16) + (arr[offset + 3] << 24);\r\n};\r\n\r\nexport const fetchWithProgress = function(path, onProgress, saveChunks = true) {\r\n\r\n    const abortController = new AbortController();\r\n    const signal = abortController.signal;\r\n    let aborted = false;\r\n    let rejectFunc = null;\r\n    const abortHandler = () => {\r\n        abortController.abort();\r\n        rejectFunc(new AbortedPromiseError('Fetch aborted.'));\r\n        aborted = true;\r\n    };\r\n\r\n    return new AbortablePromise((resolve, reject) => {\r\n        rejectFunc = reject;\r\n        fetch(path, { signal })\r\n        .then(async (data) => {\r\n            const reader = data.body.getReader();\r\n            let bytesDownloaded = 0;\r\n            let _fileSize = data.headers.get('Content-Length');\r\n            let fileSize = _fileSize ? parseInt(_fileSize) : undefined;\r\n\r\n            const chunks = [];\r\n\r\n            while (!aborted) {\r\n                try {\r\n                    const { value: chunk, done } = await reader.read();\r\n                    if (done) {\r\n                        if (onProgress) {\r\n                            onProgress(100, '100%', chunk, fileSize);\r\n                        }\r\n                        if (saveChunks) {\r\n                            const buffer = new Blob(chunks).arrayBuffer();\r\n                            resolve(buffer);\r\n                        } else {\r\n                            resolve();\r\n                        }\r\n                        break;\r\n                    }\r\n                    bytesDownloaded += chunk.length;\r\n                    let percent;\r\n                    let percentLabel;\r\n                    if (fileSize !== undefined) {\r\n                        percent = bytesDownloaded / fileSize * 100;\r\n                        percentLabel = `${percent.toFixed(2)}%`;\r\n                    }\r\n                    if (saveChunks) chunks.push(chunk);\r\n                    if (onProgress) {\r\n                        const cancelSaveChucnks = onProgress(percent, percentLabel, chunk, fileSize);\r\n                        if (cancelSaveChucnks) saveChunks = false;\r\n                    }\r\n                } catch (error) {\r\n                    reject(error);\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n    }, abortHandler);\r\n\r\n};\r\n\r\nexport const clamp = function(val, min, max) {\r\n    return Math.max(Math.min(val, max), min);\r\n};\r\n\r\nexport const getCurrentTime = function() {\r\n    return performance.now() / 1000;\r\n};\r\n\r\nexport const disposeAllMeshes = (object3D) => {\r\n    if (object3D.geometry) {\r\n        object3D.geometry.dispose();\r\n        object3D.geometry = null;\r\n    }\r\n    if (object3D.material) {\r\n        object3D.material.dispose();\r\n        object3D.material = null;\r\n    }\r\n    if (object3D.children) {\r\n        for (let child of object3D.children) {\r\n            disposeAllMeshes(child);\r\n        }\r\n    }\r\n};\r\n\r\nexport const delayedExecute = (func) => {\r\n    return new Promise((resolve) => {\r\n        window.setTimeout(() => {\r\n            resolve(func());\r\n        }, 1);\r\n    });\r\n};\r\n","import * as THREE from 'three';\r\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\r\nimport { clamp } from '../Util.js';\r\n\r\n/**\r\n * SplatBuffer: Container for splat data from a single scene/file and capable of (mediocre) compression.\r\n */\r\nexport class SplatBuffer {\r\n\r\n    static CurrentMajorVersion = 0;\r\n    static CurrentMinorVersion = 1;\r\n\r\n    static CenterComponentCount = 3;\r\n    static ScaleComponentCount = 3;\r\n    static RotationComponentCount = 4;\r\n    static ColorComponentCount = 4;\r\n    static CovarianceComponentCount = 6;\r\n\r\n    static SplatScaleOffsetFloat = 3;\r\n    static SplatRotationOffsetFloat = 6;\r\n\r\n    static CompressionLevels = {\r\n        0: {\r\n            BytesPerCenter: 12,\r\n            BytesPerColor: 4,\r\n            BytesPerScale: 12,\r\n            BytesPerRotation: 16,\r\n            BytesPerSplat: 44,\r\n            ScaleRange: 1\r\n        },\r\n        1: {\r\n            BytesPerCenter: 6,\r\n            BytesPerColor: 4,\r\n            BytesPerScale: 6,\r\n            BytesPerRotation: 8,\r\n            BytesPerSplat: 24,\r\n            ScaleRange: 32767\r\n        }\r\n    };\r\n\r\n    static CovarianceSizeFloats = 6;\r\n\r\n    static HeaderSizeBytes = 4096;\r\n    static SectionHeaderSizeBytes = 1024;\r\n\r\n    static BucketStorageSizeBytes = 12;\r\n    static BucketStorageSizeFloats = 3;\r\n\r\n    static BucketBlockSize = 5.0;\r\n    static BucketSize = 256;\r\n\r\n    constructor(bufferData, secLoadedCountsToMax = true) {\r\n        this.constructFromBuffer(bufferData, secLoadedCountsToMax);\r\n    }\r\n\r\n    fbf(f) {\r\n        if (this.compressionLevel === 0) {\r\n            return f;\r\n        } else {\r\n            return THREE.DataUtils.fromHalfFloat(f);\r\n        }\r\n    };\r\n\r\n    getSplatCount() {\r\n        return this.splatCount;\r\n    }\r\n\r\n    getMaxSplatCount() {\r\n        return this.maxSplatCount;\r\n    }\r\n\r\n    getBucketIndex(section, localSplatIndex) {\r\n        let bucketIndex;\r\n        const maxSplatIndexInFullBuckets = section.fullBucketCount * section.bucketSize;\r\n        if (localSplatIndex < maxSplatIndexInFullBuckets) {\r\n            bucketIndex = Math.floor(localSplatIndex / section.bucketSize);\r\n        } else {\r\n            let bucketSplatIndex = maxSplatIndexInFullBuckets;\r\n            bucketIndex = section.fullBucketCount;\r\n            let partiallyFullBucketIndex = 0;\r\n            while (bucketSplatIndex < section.splatCount) {\r\n                let currentPartiallyFilledBucketSize = section.partiallyFilledBucketLengths[partiallyFullBucketIndex];\r\n                if (localSplatIndex >= bucketSplatIndex && localSplatIndex < bucketSplatIndex + currentPartiallyFilledBucketSize) {\r\n                    break;\r\n                }\r\n                bucketSplatIndex += currentPartiallyFilledBucketSize;\r\n                bucketIndex++;\r\n                partiallyFullBucketIndex++;\r\n            }\r\n        }\r\n        return bucketIndex;\r\n    }\r\n\r\n    getSplatCenter(globalSplatIndex, outCenter, transform) {\r\n        const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\r\n        const section = this.sections[sectionIndex];\r\n        const localSplatIndex = globalSplatIndex - section.splatCountOffset;\r\n        if (this.compressionLevel === 1) {\r\n            const centerBase = localSplatIndex * this.uint16PerSplat;\r\n            const bucketIndex = this.getBucketIndex(section, localSplatIndex);\r\n            const bucketBase = bucketIndex * SplatBuffer.BucketStorageSizeFloats;\r\n            const sf = section.compressionScaleFactor;\r\n            const sr = section.compressionScaleRange;\r\n            outCenter.x = (section.dataArrayUint16[centerBase] - sr) * sf + section.bucketArray[bucketBase];\r\n            outCenter.y = (section.dataArrayUint16[centerBase + 1] - sr) * sf + section.bucketArray[bucketBase + 1];\r\n            outCenter.z = (section.dataArrayUint16[centerBase + 2] - sr) * sf + section.bucketArray[bucketBase + 2];\r\n        } else {\r\n            const centerBase = localSplatIndex * this.float32PerSplat;\r\n            outCenter.x = section.dataArrayFloat32[centerBase];\r\n            outCenter.y = section.dataArrayFloat32[centerBase + 1];\r\n            outCenter.z = section.dataArrayFloat32[centerBase + 2];\r\n        }\r\n        if (transform) outCenter.applyMatrix4(transform);\r\n    }\r\n\r\n    getSplatScaleAndRotation = function() {\r\n\r\n        const scaleMatrix = new THREE.Matrix4();\r\n        const rotationMatrix = new THREE.Matrix4();\r\n        const tempMatrix = new THREE.Matrix4();\r\n        const tempPosition = new THREE.Vector3();\r\n\r\n        return function(index, outScale, outRotation, transform) {\r\n            const sectionIndex = this.globalSplatIndexToSectionMap[index];\r\n            const section = this.sections[sectionIndex];\r\n            const localSplatIndex = index - section.splatCountOffset;\r\n\r\n            const floatsPerSplat = this.compressionLevel === 1 ? this.uint16PerSplat : this.float32PerSplat;\r\n\r\n            const sectionFloatArray = this.compressionLevel === 1 ? section.dataArrayUint16 : section.dataArrayFloat32;\r\n            const splatFloatBase = floatsPerSplat * localSplatIndex;\r\n\r\n            const scaleBase = splatFloatBase + SplatBuffer.SplatScaleOffsetFloat;\r\n            outScale.set(this.fbf(sectionFloatArray[scaleBase]),\r\n                         this.fbf(sectionFloatArray[scaleBase + 1]),\r\n                         this.fbf(sectionFloatArray[scaleBase + 2]));\r\n\r\n            const rotationBase = splatFloatBase + SplatBuffer.SplatRotationOffsetFloat;\r\n            outRotation.set(this.fbf(sectionFloatArray[rotationBase + 1]),\r\n                            this.fbf(sectionFloatArray[rotationBase + 2]),\r\n                            this.fbf(sectionFloatArray[rotationBase + 3]),\r\n                            this.fbf(sectionFloatArray[rotationBase]));\r\n\r\n            if (transform) {\r\n                scaleMatrix.makeScale(outScale.x, outScale.y, outScale.z);\r\n                rotationMatrix.makeRotationFromQuaternion(outRotation);\r\n                tempMatrix.copy(scaleMatrix).multiply(rotationMatrix).multiply(transform);\r\n                tempMatrix.decompose(tempPosition, outRotation, outScale);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    getSplatColor(globalSplatIndex, outColor, transform) {\r\n        const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\r\n        const section = this.sections[sectionIndex];\r\n        const localSplatIndex = globalSplatIndex - section.splatCountOffset;\r\n        const colorBase = this.bytesPerSplat * localSplatIndex + this.bytesPerCenter + this.bytesPerScale + this.bytesPerRotation;\r\n        outColor.set(section.dataArrayUint8[colorBase], section.dataArrayUint8[colorBase + 1],\r\n                     section.dataArrayUint8[colorBase + 2], section.dataArrayUint8[colorBase + 3]);\r\n        // TODO: apply transform for spherical harmonics\r\n    }\r\n\r\n    fillSplatCenterArray(outCenterArray, transform, srcFrom, srcTo, destFrom) {\r\n        const splatCount = this.splatCount;\r\n\r\n        srcFrom = srcFrom || 0;\r\n        srcTo = srcTo || splatCount - 1;\r\n        if (destFrom === undefined) destFrom = srcFrom;\r\n\r\n        const center = new THREE.Vector3();\r\n        for (let i = srcFrom; i <= srcTo; i++) {\r\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\r\n            const section = this.sections[sectionIndex];\r\n            const localSplatIndex = i - section.splatCountOffset;\r\n            const centerDestBase = (i - srcFrom + destFrom) * SplatBuffer.CenterComponentCount;\r\n            if (this.compressionLevel === 1) {\r\n                const centerBase = localSplatIndex * this.uint16PerSplat;\r\n                const bucketIndex = this.getBucketIndex(section, localSplatIndex);\r\n                const bucketBase = bucketIndex * SplatBuffer.BucketStorageSizeFloats;\r\n                const sf = section.compressionScaleFactor;\r\n                const sr = section.compressionScaleRange;\r\n                center.x = (section.dataArrayUint16[centerBase] - sr) * sf + section.bucketArray[bucketBase];\r\n                center.y = (section.dataArrayUint16[centerBase + 1] - sr) * sf + section.bucketArray[bucketBase + 1];\r\n                center.z = (section.dataArrayUint16[centerBase + 2] - sr) * sf + section.bucketArray[bucketBase + 2];\r\n            } else {\r\n                const centerBase = localSplatIndex * this.float32PerSplat;\r\n                center.x = section.dataArrayFloat32[centerBase];\r\n                center.y = section.dataArrayFloat32[centerBase + 1];\r\n                center.z = section.dataArrayFloat32[centerBase + 2];\r\n            }\r\n            if (transform) {\r\n                center.applyMatrix4(transform);\r\n            }\r\n            outCenterArray[centerDestBase] = center.x;\r\n            outCenterArray[centerDestBase + 1] = center.y;\r\n            outCenterArray[centerDestBase + 2] = center.z;\r\n        }\r\n    }\r\n\r\n    static computeCovariance = function() {\r\n\r\n        const tempMatrix4 = new THREE.Matrix4();\r\n        const scaleMatrix = new THREE.Matrix3();\r\n        const rotationMatrix = new THREE.Matrix3();\r\n        const covarianceMatrix = new THREE.Matrix3();\r\n        const transformedCovariance = new THREE.Matrix3();\r\n        const transform3x3 = new THREE.Matrix3();\r\n        const transform3x3Transpose = new THREE.Matrix3();\r\n        const thf = THREE.DataUtils.toHalfFloat.bind(THREE.DataUtils);\r\n\r\n        return function(scale, rotation, transform, outCovariance, outOffset = 0, desiredOutputCompressionLevel) {\r\n\r\n            tempMatrix4.makeScale(scale.x, scale.y, scale.z);\r\n            scaleMatrix.setFromMatrix4(tempMatrix4);\r\n\r\n            tempMatrix4.makeRotationFromQuaternion(rotation);\r\n            rotationMatrix.setFromMatrix4(tempMatrix4);\r\n\r\n            covarianceMatrix.copy(rotationMatrix).multiply(scaleMatrix);\r\n            transformedCovariance.copy(covarianceMatrix).transpose().premultiply(covarianceMatrix);\r\n\r\n            if (transform) {\r\n                transform3x3.setFromMatrix4(transform);\r\n                transform3x3Transpose.copy(transform3x3).transpose();\r\n                transformedCovariance.multiply(transform3x3Transpose);\r\n                transformedCovariance.premultiply(transform3x3);\r\n            }\r\n\r\n            if (desiredOutputCompressionLevel === 1) {\r\n                outCovariance[outOffset] = thf(transformedCovariance.elements[0]);\r\n                outCovariance[outOffset + 1] = thf(transformedCovariance.elements[3]);\r\n                outCovariance[outOffset + 2] = thf(transformedCovariance.elements[6]);\r\n                outCovariance[outOffset + 3] = thf(transformedCovariance.elements[4]);\r\n                outCovariance[outOffset + 4] = thf(transformedCovariance.elements[7]);\r\n                outCovariance[outOffset + 5] = thf(transformedCovariance.elements[8]);\r\n            } else {\r\n                outCovariance[outOffset] = transformedCovariance.elements[0];\r\n                outCovariance[outOffset + 1] = transformedCovariance.elements[3];\r\n                outCovariance[outOffset + 2] = transformedCovariance.elements[6];\r\n                outCovariance[outOffset + 3] = transformedCovariance.elements[4];\r\n                outCovariance[outOffset + 4] = transformedCovariance.elements[7];\r\n                outCovariance[outOffset + 5] = transformedCovariance.elements[8];\r\n            }\r\n\r\n        };\r\n\r\n    }();\r\n\r\n    fillSplatCovarianceArray(covarianceArray, transform, srcFrom, srcTo, destFrom, desiredOutputCompressionLevel) {\r\n        const splatCount = this.splatCount;\r\n\r\n        const scale = new THREE.Vector3();\r\n        const rotation = new THREE.Quaternion();\r\n\r\n        srcFrom = srcFrom || 0;\r\n        srcTo = srcTo || splatCount - 1;\r\n        if (destFrom === undefined) destFrom = srcFrom;\r\n        const floatsPerSplat = this.compressionLevel === 1 ? this.uint16PerSplat : this.float32PerSplat;\r\n\r\n        for (let i = srcFrom; i <= srcTo; i++) {\r\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\r\n            const section = this.sections[sectionIndex];\r\n            const localSplatIndex = i - section.splatCountOffset;\r\n\r\n            const sectionFloatArray = this.compressionLevel === 1 ? section.dataArrayUint16 : section.dataArrayFloat32;\r\n            const splatFloatBase = floatsPerSplat * localSplatIndex;\r\n            const covarianceDestBase = (i - srcFrom + destFrom) * SplatBuffer.CovarianceComponentCount;\r\n\r\n            const scaleBase = splatFloatBase + SplatBuffer.SplatScaleOffsetFloat;\r\n            scale.set(this.fbf(sectionFloatArray[scaleBase]),\r\n                      this.fbf(sectionFloatArray[scaleBase + 1]),\r\n                      this.fbf(sectionFloatArray[scaleBase + 2]));\r\n\r\n            const rotationBase = splatFloatBase + SplatBuffer.SplatRotationOffsetFloat;\r\n            rotation.set(this.fbf(sectionFloatArray[rotationBase + 1]),\r\n                         this.fbf(sectionFloatArray[rotationBase + 2]),\r\n                         this.fbf(sectionFloatArray[rotationBase + 3]),\r\n                         this.fbf(sectionFloatArray[rotationBase]));\r\n\r\n            SplatBuffer.computeCovariance(scale, rotation, transform, covarianceArray, covarianceDestBase, desiredOutputCompressionLevel);\r\n        }\r\n    }\r\n\r\n    fillSplatColorArray(outColorArray, minimumAlpha, transform, srcFrom, srcTo, destFrom) {\r\n        const splatCount = this.splatCount;\r\n\r\n        srcFrom = srcFrom || 0;\r\n        srcTo = srcTo || splatCount - 1;\r\n        if (destFrom === undefined) destFrom = srcFrom;\r\n        const splatColorOffset = this.bytesPerCenter + this.bytesPerScale + this.bytesPerRotation;\r\n\r\n        for (let i = srcFrom; i <= srcTo; i++) {\r\n\r\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\r\n            const section = this.sections[sectionIndex];\r\n            const localSplatIndex = i - section.splatCountOffset;\r\n\r\n            const colorSrcBase = this.bytesPerSplat * localSplatIndex + splatColorOffset;\r\n            const colorDestBase = (i - srcFrom + destFrom) * SplatBuffer.ColorComponentCount;\r\n\r\n            let alpha = section.dataArrayUint8[colorSrcBase + 3];\r\n            alpha = (alpha >= minimumAlpha) ? alpha : 0;\r\n\r\n            outColorArray[colorDestBase] = section.dataArrayUint8[colorSrcBase];\r\n            outColorArray[colorDestBase + 1] = section.dataArrayUint8[colorSrcBase + 1];\r\n            outColorArray[colorDestBase + 2] = section.dataArrayUint8[colorSrcBase + 2];\r\n            outColorArray[colorDestBase + 3] = alpha;\r\n\r\n            // TODO: implement application of transform for spherical harmonics\r\n        }\r\n    }\r\n\r\n    static parseHeader(buffer) {\r\n        const headerArrayUint8 = new Uint8Array(buffer, 0, SplatBuffer.HeaderSizeBytes);\r\n        const headerArrayUint16 = new Uint16Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 2);\r\n        const headerArrayUint32 = new Uint32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\r\n        const headerArrayFloat32 = new Float32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\r\n        const versionMajor = headerArrayUint8[0];\r\n        const versionMinor = headerArrayUint8[1];\r\n        const maxSectionCount = headerArrayUint32[1];\r\n        const sectionCount = headerArrayUint32[2];\r\n        const maxSplatCount = headerArrayUint32[3];\r\n        const splatCount = headerArrayUint32[4];\r\n        const compressionLevel = headerArrayUint16[10];\r\n        const sceneCenter = new THREE.Vector3(headerArrayFloat32[6], headerArrayFloat32[7], headerArrayFloat32[8]);\r\n\r\n        return {\r\n            versionMajor,\r\n            versionMinor,\r\n            maxSectionCount,\r\n            sectionCount,\r\n            maxSplatCount,\r\n            splatCount,\r\n            compressionLevel,\r\n            sceneCenter\r\n        };\r\n    }\r\n\r\n    static writeHeaderCountsToBuffer(sectionCount, splatCount, buffer) {\r\n        const headerArrayUint32 = new Uint32Array(buffer);\r\n        headerArrayUint32[2] = sectionCount;\r\n        headerArrayUint32[4] = splatCount;\r\n    }\r\n\r\n    static writeHeaderToBuffer(header, buffer) {\r\n        const headerArrayUint8 = new Uint8Array(buffer);\r\n        const headerArrayUint32 = new Uint32Array(buffer);\r\n        const headerArrayFloat32 = new Float32Array(buffer);\r\n        const headerArrayUint16 = new Uint16Array(buffer);\r\n        headerArrayUint8[0] = header.versionMajor;\r\n        headerArrayUint8[1] = header.versionMinor;\r\n        headerArrayUint8[2] = 0; // unused for now\r\n        headerArrayUint8[3] = 0; // unused for now\r\n        headerArrayUint32[1] = header.maxSectionCount;\r\n        headerArrayUint32[2] = header.sectionCount;\r\n        headerArrayUint32[3] = header.maxSplatCount;\r\n        headerArrayUint32[4] = header.splatCount;\r\n        headerArrayUint16[10] = header.compressionLevel;\r\n        headerArrayFloat32[6] = header.sceneCenter.x;\r\n        headerArrayFloat32[7] = header.sceneCenter.y;\r\n        headerArrayFloat32[8] = header.sceneCenter.z;\r\n    }\r\n\r\n    static parseSectionHeaders(header, buffer, offset = 0, secLoadedCountsToMax) {\r\n        const compressionLevel = header.compressionLevel;\r\n        const bytesPerCenter = SplatBuffer.CompressionLevels[compressionLevel].BytesPerCenter;\r\n        const bytesPerColor = SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\r\n        const bytesPerScale = SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\r\n        const bytesPerRotation = SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\r\n\r\n        const maxSectionCount = header.maxSectionCount;\r\n        const sectionHeaderArrayUint16 = new Uint16Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 2);\r\n        const sectionHeaderArrayUint32 = new Uint32Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 4);\r\n        const sectionHeaderArrayFloat32 = new Float32Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 4);\r\n\r\n        const sectionHeaders = [];\r\n        let sectionHeaderBase = 0;\r\n        let sectionHeaderBaseUint16 = sectionHeaderBase / 2;\r\n        let sectionHeaderBaseUint32 = sectionHeaderBase / 4;\r\n        let sectionBase = SplatBuffer.HeaderSizeBytes + header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes;\r\n        let splatCountOffset = 0;\r\n        for (let i = 0; i < maxSectionCount; i++) {\r\n            const maxSplatCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 1];\r\n            const bucketSize = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 2];\r\n            const bucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 3];\r\n            const bucketBlockSize = sectionHeaderArrayFloat32[sectionHeaderBaseUint32 + 4];\r\n            const halfBucketBlockSize = bucketBlockSize / 2.0;\r\n            const bucketStorageSizeBytes = sectionHeaderArrayUint16[sectionHeaderBaseUint16 + 10];\r\n            const compressionScaleRange = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 6] ||\r\n                                          SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\r\n            const fullBucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 8];\r\n            const partiallyFilledBucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 9];\r\n            const bucketsMetaDataSizeBytes = partiallyFilledBucketCount * 4;\r\n            const bucketsStorageSizeBytes = bucketStorageSizeBytes * bucketCount + bucketsMetaDataSizeBytes;\r\n\r\n            const splatDataStorageSizeBytes = (bytesPerCenter + bytesPerScale + bytesPerRotation + bytesPerColor) * maxSplatCount;\r\n            const storageSizeBytes = splatDataStorageSizeBytes + bucketsStorageSizeBytes;\r\n            const sectionHeader = {\r\n                splatCountOffset: splatCountOffset,\r\n                splatCount: secLoadedCountsToMax ? maxSplatCount : 0,\r\n                maxSplatCount: maxSplatCount,\r\n                bucketSize: bucketSize,\r\n                bucketCount: bucketCount,\r\n                bucketBlockSize: bucketBlockSize,\r\n                halfBucketBlockSize: halfBucketBlockSize,\r\n                bucketStorageSizeBytes: bucketStorageSizeBytes,\r\n                bucketsStorageSizeBytes: bucketsStorageSizeBytes,\r\n                splatDataStorageSizeBytes: splatDataStorageSizeBytes,\r\n                storageSizeBytes: storageSizeBytes,\r\n                compressionScaleRange: compressionScaleRange,\r\n                compressionScaleFactor: halfBucketBlockSize / compressionScaleRange,\r\n                base: sectionBase,\r\n                bucketsBase: sectionBase + bucketsMetaDataSizeBytes,\r\n                dataBase: sectionBase + bucketsStorageSizeBytes,\r\n                fullBucketCount: fullBucketCount,\r\n                partiallyFilledBucketCount: partiallyFilledBucketCount\r\n            };\r\n            sectionHeaders[i] = sectionHeader;\r\n            sectionBase += storageSizeBytes;\r\n            sectionHeaderBase += SplatBuffer.SectionHeaderSizeBytes;\r\n            sectionHeaderBaseUint16 = sectionHeaderBase / 2;\r\n            sectionHeaderBaseUint32 = sectionHeaderBase / 4;\r\n            splatCountOffset += maxSplatCount;\r\n        }\r\n\r\n        return sectionHeaders;\r\n    }\r\n\r\n\r\n    static writeSectionHeaderToBuffer(sectionHeader, compressionLevel, buffer, offset = 0) {\r\n        const sectionHeadeArrayUint16 = new Uint16Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 2);\r\n        const sectionHeadeArrayUint32 = new Uint32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\r\n        const sectionHeadeArrayFloat32 = new Float32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\r\n\r\n        sectionHeadeArrayUint32[0] = sectionHeader.splatCount;\r\n        sectionHeadeArrayUint32[1] = sectionHeader.maxSplatCount;\r\n        sectionHeadeArrayUint32[2] = compressionLevel === 1 ? sectionHeader.bucketSize : 0;\r\n        sectionHeadeArrayUint32[3] = compressionLevel === 1 ? sectionHeader.bucketCount : 0;\r\n        sectionHeadeArrayFloat32[4] = compressionLevel === 1 ? sectionHeader.bucketBlockSize : 0.0;\r\n        sectionHeadeArrayUint16[10] = compressionLevel === 1 ? SplatBuffer.BucketStorageSizeBytes : 0;\r\n        sectionHeadeArrayUint32[6] = compressionLevel === 1 ? sectionHeader.compressionScaleRange : 0;\r\n        sectionHeadeArrayUint32[7] = sectionHeader.storageSizeBytes;\r\n        sectionHeadeArrayUint32[8] = compressionLevel === 1 ? sectionHeader.fullBucketCount : 0;\r\n        sectionHeadeArrayUint32[9] = compressionLevel === 1 ? sectionHeader.partiallyFilledBucketCount : 0;\r\n    }\r\n\r\n    static writeSectionHeaderSplatCountToBuffer(splatCount, buffer, offset = 0) {\r\n        const sectionHeadeArrayUint32 = new Uint32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\r\n        sectionHeadeArrayUint32[0] = splatCount;\r\n    }\r\n\r\n    constructFromBuffer(bufferData, secLoadedCountsToMax) {\r\n        this.bufferData = bufferData;\r\n\r\n        this.globalSplatIndexToLocalSplatIndexMap = [];\r\n        this.globalSplatIndexToSectionMap = [];\r\n\r\n        const header = SplatBuffer.parseHeader(this.bufferData);\r\n        this.versionMajor = header.versionMajor;\r\n        this.versionMinor = header.versionMinor;\r\n        this.maxSectionCount = header.maxSectionCount;\r\n        this.sectionCount = secLoadedCountsToMax ? header.maxSectionCount : 0;\r\n        this.maxSplatCount = header.maxSplatCount;\r\n        this.splatCount = secLoadedCountsToMax ? header.maxSplatCount : 0;\r\n        this.compressionLevel = header.compressionLevel;\r\n        this.sceneCenter = new THREE.Vector3().copy(header.sceneCenter);\r\n\r\n        this.bytesPerCenter = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerCenter;\r\n        this.bytesPerScale = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerScale;\r\n        this.bytesPerRotation = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerRotation;\r\n        this.bytesPerColor = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerColor;\r\n        this.bytesPerSplat = this.bytesPerCenter + this.bytesPerScale + this.bytesPerRotation + this.bytesPerColor;\r\n\r\n        this.float32PerSplat = this.bytesPerSplat / 4;\r\n        this.uint32PerSplat = this.bytesPerSplat / 4;\r\n        this.uint16PerSplat = this.bytesPerSplat / 2;\r\n\r\n        this.sections = SplatBuffer.parseSectionHeaders(header, this.bufferData, SplatBuffer.HeaderSizeBytes, secLoadedCountsToMax);\r\n\r\n        this.linkBufferArrays();\r\n        this.buildMaps();\r\n    }\r\n\r\n\r\n    linkBufferArrays() {\r\n        for (let i = 0; i < this.maxSectionCount; i++) {\r\n            const section = this.sections[i];\r\n            section.dataArrayUint8 = new Uint8Array(this.bufferData, section.dataBase, section.maxSplatCount * this.bytesPerSplat);\r\n            section.dataArrayUint16 = new Uint16Array(this.bufferData, section.dataBase, section.maxSplatCount * this.uint16PerSplat);\r\n            section.dataArrayUint32 = new Uint32Array(this.bufferData, section.dataBase, section.maxSplatCount * this.uint32PerSplat);\r\n            section.dataArrayFloat32 = new Float32Array(this.bufferData, section.dataBase, section.maxSplatCount * this.float32PerSplat);\r\n            section.bucketArray = new Float32Array(this.bufferData, section.bucketsBase,\r\n                                                   section.bucketCount * SplatBuffer.BucketStorageSizeFloats);\r\n            if (section.partiallyFilledBucketCount > 0) {\r\n                section.partiallyFilledBucketLengths = new Uint32Array(this.bufferData, section.base,\r\n                                                                       section.partiallyFilledBucketCount);\r\n            }\r\n        }\r\n    }\r\n\r\n    buildMaps() {\r\n        let cumulativeSplatCount = 0;\r\n        for (let i = 0; i < this.maxSectionCount; i++) {\r\n            const section = this.sections[i];\r\n            for (let j = 0; j < section.maxSplatCount; j++) {\r\n                const globalSplatIndex = cumulativeSplatCount + j;\r\n                this.globalSplatIndexToLocalSplatIndexMap[globalSplatIndex] = j;\r\n                this.globalSplatIndexToSectionMap[globalSplatIndex] = i;\r\n            }\r\n            cumulativeSplatCount += section.maxSplatCount;\r\n        }\r\n    }\r\n\r\n    updateLoadedCounts(newSectionCount, newSplatCount) {\r\n        SplatBuffer.writeHeaderCountsToBuffer(newSectionCount, newSplatCount, this.bufferData);\r\n        this.sectionCount = newSectionCount;\r\n        this.splatCount = newSplatCount;\r\n    }\r\n\r\n    updateSectionLoadedCounts(sectionIndex, newSplatCount) {\r\n        const sectionHeaderOffset = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * sectionIndex;\r\n        SplatBuffer.writeSectionHeaderSplatCountToBuffer(newSplatCount, this.bufferData, sectionHeaderOffset);\r\n        this.sections[sectionIndex].splatCount = newSplatCount;\r\n    }\r\n\r\n    static generateFromUncompressedSplatArrays(splatArrays, minimumAlpha, compressionLevel,\r\n                                               sceneCenter, blockSize, bucketSize, options = []) {\r\n\r\n        const bytesPerCenter = SplatBuffer.CompressionLevels[compressionLevel].BytesPerCenter;\r\n        const bytesPerScale = SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\r\n        const bytesPerRotation = SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\r\n        const bytesPerColor = SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\r\n        const bytesPerSplat = bytesPerCenter + bytesPerScale + bytesPerRotation + bytesPerColor;\r\n        const compressionScaleRange = SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\r\n\r\n        const sectionBuffers = [];\r\n        const sectionHeaderBuffers = [];\r\n        let totalSplatCount = 0;\r\n\r\n        const tempRotation = new THREE.Quaternion();\r\n        const thf = THREE.DataUtils.toHalfFloat.bind(THREE.DataUtils);\r\n\r\n        for (let sa = 0; sa < splatArrays.length; sa ++) {\r\n            const splatArray = splatArrays[sa];\r\n\r\n            const sectionOptions = options[sa] || {};\r\n\r\n            const sectionBlockSize = (sectionOptions.blockSizeFactor || 1) * (blockSize || SplatBuffer.BucketBlockSize);\r\n            const sectionBucketSize = Math.ceil((sectionOptions.bucketSizeFactor || 1) * (bucketSize || SplatBuffer.BucketSize));\r\n\r\n            const validSplats = new UncompressedSplatArray();\r\n\r\n            for (let i = 0; i < splatArray.splatCount; i++) {\r\n                const targetSplat = splatArray.splats[i];\r\n                let alpha;\r\n                if (targetSplat[UncompressedSplatArray.OFFSET.OPACITY]) {\r\n                    alpha = targetSplat[UncompressedSplatArray.OFFSET.OPACITY];\r\n                } else {\r\n                    alpha = 255;\r\n                }\r\n                if (alpha >= minimumAlpha) {\r\n                    validSplats.addSplatFromComonents(targetSplat[UncompressedSplatArray.OFFSET.X],\r\n                                                      targetSplat[UncompressedSplatArray.OFFSET.Y],\r\n                                                      targetSplat[UncompressedSplatArray.OFFSET.Z],\r\n                                                      targetSplat[UncompressedSplatArray.OFFSET.SCALE0],\r\n                                                      targetSplat[UncompressedSplatArray.OFFSET.SCALE1],\r\n                                                      targetSplat[UncompressedSplatArray.OFFSET.SCALE2],\r\n                                                      targetSplat[UncompressedSplatArray.OFFSET.ROTATION0],\r\n                                                      targetSplat[UncompressedSplatArray.OFFSET.ROTATION1],\r\n                                                      targetSplat[UncompressedSplatArray.OFFSET.ROTATION2],\r\n                                                      targetSplat[UncompressedSplatArray.OFFSET.ROTATION3],\r\n                                                      targetSplat[UncompressedSplatArray.OFFSET.FDC0],\r\n                                                      targetSplat[UncompressedSplatArray.OFFSET.FDC1],\r\n                                                      targetSplat[UncompressedSplatArray.OFFSET.FDC2],\r\n                                                      targetSplat[UncompressedSplatArray.OFFSET.OPACITY]);\r\n                }\r\n            }\r\n\r\n            const bucketInfo = SplatBuffer.computeBucketsForUncompressedSplatArray(validSplats, sectionBlockSize, sectionBucketSize);\r\n            const fullBucketCount = bucketInfo.fullBuckets.length;\r\n            const partiallyFullBucketLengths = bucketInfo.partiallyFullBuckets.map((bucket) => bucket.splats.length);\r\n            const partiallyFilledBucketCount = partiallyFullBucketLengths.length;\r\n            const buckets = [...bucketInfo.fullBuckets, ...bucketInfo.partiallyFullBuckets];\r\n\r\n            const sectionDataSizeBytes = validSplats.splats.length * bytesPerSplat;\r\n            const bucketMetaDataSizeBytes = partiallyFilledBucketCount * 4;\r\n            const bucketDataBytes = compressionLevel === 1 ? buckets.length *\r\n                                                             SplatBuffer.BucketStorageSizeBytes + bucketMetaDataSizeBytes : 0;\r\n            const sectionSizeBytes = sectionDataSizeBytes + bucketDataBytes;\r\n            const sectionBuffer = new ArrayBuffer(sectionSizeBytes);\r\n\r\n            const blockHalfSize = sectionBlockSize / 2.0;\r\n            const compressionScaleFactor = compressionScaleRange / blockHalfSize;\r\n            const doubleCompressionScaleRange = compressionScaleRange * 2 + 1;\r\n\r\n            const bucketCenter = new THREE.Vector3();\r\n            const bucketCenterDelta = new THREE.Vector3();\r\n            let outSplatCount = 0;\r\n            for (let b = 0; b < buckets.length; b++) {\r\n                const bucket = buckets[b];\r\n                bucketCenter.fromArray(bucket.center);\r\n                for (let i = 0; i < bucket.splats.length; i++) {\r\n                    let row = bucket.splats[i];\r\n                    const targetSplat = validSplats.splats[row];\r\n\r\n                    const centerBase = bucketDataBytes + outSplatCount * bytesPerSplat;\r\n                    const scaleBase = centerBase + bytesPerCenter;\r\n                    const rotationBase = scaleBase + bytesPerScale;\r\n                    const colorBase = rotationBase + bytesPerRotation;\r\n                    if (compressionLevel === 0) {\r\n                        const center = new Float32Array(sectionBuffer, centerBase, SplatBuffer.CenterComponentCount);\r\n                        const rot = new Float32Array(sectionBuffer, rotationBase, SplatBuffer.RotationComponentCount);\r\n                        const scale = new Float32Array(sectionBuffer, scaleBase, SplatBuffer.ScaleComponentCount);\r\n                        if (targetSplat[UncompressedSplatArray.OFFSET.SCALE0] !== undefined) {\r\n                            tempRotation.set(targetSplat[UncompressedSplatArray.OFFSET.ROTATION0],\r\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION1],\r\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION2],\r\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION3]);\r\n                            tempRotation.normalize();\r\n                            rot.set([tempRotation.x, tempRotation.y, tempRotation.z, tempRotation.w]);\r\n                            scale.set([targetSplat[UncompressedSplatArray.OFFSET.SCALE0],\r\n                                       targetSplat[UncompressedSplatArray.OFFSET.SCALE1],\r\n                                       targetSplat[UncompressedSplatArray.OFFSET.SCALE2]]);\r\n                        } else {\r\n                            rot.set([1.0, 0.0, 0.0, 0.0]);\r\n                            scale.set([0.01, 0.01, 0.01]);\r\n                        }\r\n                        center.set([targetSplat[UncompressedSplatArray.OFFSET.X],\r\n                                    targetSplat[UncompressedSplatArray.OFFSET.Y],\r\n                                    targetSplat[UncompressedSplatArray.OFFSET.Z]]);\r\n                    } else {\r\n                        const center = new Uint16Array(sectionBuffer, centerBase, SplatBuffer.CenterComponentCount);\r\n                        const rot = new Uint16Array(sectionBuffer, rotationBase, SplatBuffer.RotationComponentCount);\r\n                        const scale = new Uint16Array(sectionBuffer, scaleBase, SplatBuffer.ScaleComponentCount);\r\n\r\n                        if (targetSplat[UncompressedSplatArray.OFFSET.SCALE0] !== undefined) {\r\n                            tempRotation.set(targetSplat[UncompressedSplatArray.OFFSET.ROTATION0],\r\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION1],\r\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION2],\r\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION3]);\r\n                            tempRotation.normalize();\r\n                            rot.set([thf(tempRotation.x), thf(tempRotation.y), thf(tempRotation.z), thf(tempRotation.w)]);\r\n                            scale.set([thf(targetSplat[UncompressedSplatArray.OFFSET.SCALE0]),\r\n                                       thf(targetSplat[UncompressedSplatArray.OFFSET.SCALE1]),\r\n                                       thf(targetSplat[UncompressedSplatArray.OFFSET.SCALE2])]);\r\n                        } else {\r\n                            rot.set([thf(1.), 0, 0, 0]);\r\n                            scale.set([thf(0.01), thf(0.01), thf(0.01)]);\r\n                        }\r\n                        bucketCenterDelta.set(targetSplat[UncompressedSplatArray.OFFSET.X],\r\n                                              targetSplat[UncompressedSplatArray.OFFSET.Y],\r\n                                              targetSplat[UncompressedSplatArray.OFFSET.Z]).sub(bucketCenter);\r\n                        bucketCenterDelta.x = Math.round(bucketCenterDelta.x * compressionScaleFactor) + compressionScaleRange;\r\n                        bucketCenterDelta.x = clamp(bucketCenterDelta.x, 0, doubleCompressionScaleRange);\r\n                        bucketCenterDelta.y = Math.round(bucketCenterDelta.y * compressionScaleFactor) + compressionScaleRange;\r\n                        bucketCenterDelta.y = clamp(bucketCenterDelta.y, 0, doubleCompressionScaleRange);\r\n                        bucketCenterDelta.z = Math.round(bucketCenterDelta.z * compressionScaleFactor) + compressionScaleRange;\r\n                        bucketCenterDelta.z = clamp(bucketCenterDelta.z, 0, doubleCompressionScaleRange);\r\n                        center.set([bucketCenterDelta.x, bucketCenterDelta.y, bucketCenterDelta.z]);\r\n                    }\r\n\r\n                    const rgba = new Uint8ClampedArray(sectionBuffer, colorBase, 4);\r\n\r\n                    if (targetSplat[UncompressedSplatArray.OFFSET.FDC0] !== undefined) {\r\n                        rgba.set([targetSplat[UncompressedSplatArray.OFFSET.FDC0],\r\n                                  targetSplat[UncompressedSplatArray.OFFSET.FDC1],\r\n                                  targetSplat[UncompressedSplatArray.OFFSET.FDC2]]);\r\n                    } else {\r\n                        rgba.set([255, 0, 0]);\r\n                    }\r\n                    if (targetSplat[UncompressedSplatArray.OFFSET.OPACITY] !== undefined) {\r\n                        rgba[3] = targetSplat[UncompressedSplatArray.OFFSET.OPACITY];\r\n                    } else {\r\n                        rgba[3] = 255;\r\n                    }\r\n\r\n                    outSplatCount++;\r\n                }\r\n            }\r\n            totalSplatCount += outSplatCount;\r\n\r\n            if (compressionLevel === 1) {\r\n                const bucketMetaDataArray = new Uint32Array(sectionBuffer);\r\n                for (let pfb = 0; pfb < partiallyFullBucketLengths.length; pfb ++) {\r\n                    bucketMetaDataArray[pfb] = partiallyFullBucketLengths[pfb];\r\n                }\r\n                const bucketArray = new Float32Array(sectionBuffer, bucketMetaDataSizeBytes,\r\n                                                     buckets.length * SplatBuffer.BucketStorageSizeFloats);\r\n                for (let b = 0; b < buckets.length; b++) {\r\n                    const bucket = buckets[b];\r\n                    const base = b * 3;\r\n                    bucketArray[base] = bucket.center[0];\r\n                    bucketArray[base + 1] = bucket.center[1];\r\n                    bucketArray[base + 2] = bucket.center[2];\r\n                }\r\n            }\r\n            sectionBuffers.push(sectionBuffer);\r\n\r\n            const sectionHeaderBuffer = new ArrayBuffer(SplatBuffer.SectionHeaderSizeBytes);\r\n            SplatBuffer.writeSectionHeaderToBuffer({\r\n                maxSplatCount: outSplatCount,\r\n                splatCount: outSplatCount,\r\n                bucketSize: sectionBucketSize,\r\n                bucketCount: buckets.length,\r\n                bucketBlockSize: sectionBlockSize,\r\n                compressionScaleRange: compressionScaleRange,\r\n                storageSizeBytes: sectionSizeBytes,\r\n                fullBucketCount: fullBucketCount,\r\n                partiallyFilledBucketCount: partiallyFilledBucketCount\r\n            }, compressionLevel, sectionHeaderBuffer, 0);\r\n            sectionHeaderBuffers.push(sectionHeaderBuffer);\r\n\r\n        }\r\n\r\n        let sectionsCumulativeSizeBytes = 0;\r\n        for (let sectionBuffer of sectionBuffers) sectionsCumulativeSizeBytes += sectionBuffer.byteLength;\r\n        const unifiedBufferSize = SplatBuffer.HeaderSizeBytes +\r\n                                  SplatBuffer.SectionHeaderSizeBytes * sectionBuffers.length + sectionsCumulativeSizeBytes;\r\n        const unifiedBuffer = new ArrayBuffer(unifiedBufferSize);\r\n\r\n        SplatBuffer.writeHeaderToBuffer({\r\n            versionMajor: 0,\r\n            versionMinor: 1,\r\n            maxSectionCount: sectionBuffers.length,\r\n            sectionCount: sectionBuffers.length,\r\n            maxSplatCount: totalSplatCount,\r\n            splatCount: totalSplatCount,\r\n            compressionLevel: compressionLevel,\r\n            sceneCenter: sceneCenter\r\n        }, unifiedBuffer);\r\n\r\n        let currentUnifiedBase = SplatBuffer.HeaderSizeBytes;\r\n        for (let sectionHeaderBuffer of sectionHeaderBuffers) {\r\n            new Uint8Array(unifiedBuffer, currentUnifiedBase, SplatBuffer.SectionHeaderSizeBytes).set(new Uint8Array(sectionHeaderBuffer));\r\n            currentUnifiedBase += SplatBuffer.SectionHeaderSizeBytes;\r\n        }\r\n\r\n        for (let sectionBuffer of sectionBuffers) {\r\n            new Uint8Array(unifiedBuffer, currentUnifiedBase, sectionBuffer.byteLength).set(new Uint8Array(sectionBuffer));\r\n            currentUnifiedBase += sectionBuffer.byteLength;\r\n        }\r\n\r\n        const splatBuffer = new SplatBuffer(unifiedBuffer);\r\n        return splatBuffer;\r\n    }\r\n\r\n    static computeBucketsForUncompressedSplatArray(splatArray, blockSize, bucketSize) {\r\n        let splatCount = splatArray.splatCount;\r\n        const halfBlockSize = blockSize / 2.0;\r\n\r\n        const min = new THREE.Vector3();\r\n        const max = new THREE.Vector3();\r\n\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const targetSplat = splatArray.splats[i];\r\n            const center = [targetSplat[UncompressedSplatArray.OFFSET.X],\r\n                            targetSplat[UncompressedSplatArray.OFFSET.Y],\r\n                            targetSplat[UncompressedSplatArray.OFFSET.Z]];\r\n            if (i === 0 || center[0] < min.x) min.x = center[0];\r\n            if (i === 0 || center[0] > max.x) max.x = center[0];\r\n            if (i === 0 || center[1] < min.y) min.y = center[1];\r\n            if (i === 0 || center[1] > max.y) max.y = center[1];\r\n            if (i === 0 || center[2] < min.z) min.z = center[2];\r\n            if (i === 0 || center[2] > max.z) max.z = center[2];\r\n        }\r\n\r\n        const dimensions = new THREE.Vector3().copy(max).sub(min);\r\n        const yBlocks = Math.ceil(dimensions.y / blockSize);\r\n        const zBlocks = Math.ceil(dimensions.z / blockSize);\r\n\r\n        const blockCenter = new THREE.Vector3();\r\n        const fullBuckets = [];\r\n        const partiallyFullBuckets = {};\r\n\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const targetSplat = splatArray.splats[i];\r\n            const center = [targetSplat[UncompressedSplatArray.OFFSET.X],\r\n                            targetSplat[UncompressedSplatArray.OFFSET.Y],\r\n                            targetSplat[UncompressedSplatArray.OFFSET.Z]];\r\n            const xBlock = Math.floor((center[0] - min.x) / blockSize);\r\n            const yBlock = Math.floor((center[1] - min.y) / blockSize);\r\n            const zBlock = Math.floor((center[2] - min.z) / blockSize);\r\n\r\n            blockCenter.x = xBlock * blockSize + min.x + halfBlockSize;\r\n            blockCenter.y = yBlock * blockSize + min.y + halfBlockSize;\r\n            blockCenter.z = zBlock * blockSize + min.z + halfBlockSize;\r\n\r\n            const bucketId = xBlock * (yBlocks * zBlocks) + yBlock * zBlocks + zBlock;\r\n            let bucket = partiallyFullBuckets[bucketId];\r\n            if (!bucket) {\r\n                partiallyFullBuckets[bucketId] = bucket = {\r\n                    'splats': [],\r\n                    'center': blockCenter.toArray()\r\n                };\r\n            }\r\n\r\n            bucket.splats.push(i);\r\n            if (bucket.splats.length >= bucketSize) {\r\n                fullBuckets.push(bucket);\r\n                partiallyFullBuckets[bucketId] = null;\r\n            }\r\n        }\r\n\r\n        const partiallyFullBucketArray = [];\r\n        for (let bucketId in partiallyFullBuckets) {\r\n            if (partiallyFullBuckets.hasOwnProperty(bucketId)) {\r\n                const bucket = partiallyFullBuckets[bucketId];\r\n                if (bucket) {\r\n                    partiallyFullBucketArray.push(bucket);\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            'fullBuckets': fullBuckets,\r\n            'partiallyFullBuckets': partiallyFullBucketArray,\r\n        };\r\n    }\r\n\r\n}\r\n","import { UncompressedSplatArray } from '../UncompressedSplatArray.js';\r\nimport { SplatBuffer } from '../SplatBuffer.js';\r\nimport { clamp } from '../../Util.js';\r\nimport * as THREE from 'three';\r\n\r\nconst HeaderMagicBytes = new Uint8Array([112, 108, 121, 10]);\r\nconst HeaderEndTokenBytes = new Uint8Array([10, 101, 110, 100, 95, 104, 101, 97, 100, 101, 114, 10]);\r\nconst HeaderEndToken = 'end_header';\r\n\r\nconst DataTypeMap = new Map([\r\n  ['char', Int8Array],\r\n  ['uchar', Uint8Array],\r\n  ['short', Int16Array],\r\n  ['ushort', Uint16Array],\r\n  ['int', Int32Array],\r\n  ['uint', Uint32Array],\r\n  ['float', Float32Array],\r\n  ['double', Float64Array],\r\n]);\r\n\r\nconst unpackUnorm = (value, bits) => {\r\n  const t = (1 << bits) - 1;\r\n  return (value & t) / t;\r\n};\r\n\r\nconst unpack111011 = (result, value) => {\r\n  result.x = unpackUnorm(value >>> 21, 11);\r\n  result.y = unpackUnorm(value >>> 11, 10);\r\n  result.z = unpackUnorm(value, 11);\r\n};\r\n\r\nconst unpack8888 = (result, value) => {\r\n  result.x = unpackUnorm(value >>> 24, 8);\r\n  result.y = unpackUnorm(value >>> 16, 8);\r\n  result.z = unpackUnorm(value >>> 8, 8);\r\n  result.w = unpackUnorm(value, 8);\r\n};\r\n\r\n// unpack quaternion with 2,10,10,10 format (largest element, 3x10bit element)\r\nconst unpackRot = (result, value) => {\r\n  const norm = 1.0 / (Math.sqrt(2) * 0.5);\r\n  const a = (unpackUnorm(value >>> 20, 10) - 0.5) * norm;\r\n  const b = (unpackUnorm(value >>> 10, 10) - 0.5) * norm;\r\n  const c = (unpackUnorm(value, 10) - 0.5) * norm;\r\n  const m = Math.sqrt(1.0 - (a * a + b * b + c * c));\r\n\r\n  switch (value >>> 30) {\r\n    case 0:\r\n      result.set(m, a, b, c);\r\n      break;\r\n    case 1:\r\n      result.set(a, m, b, c);\r\n      break;\r\n    case 2:\r\n      result.set(a, b, m, c);\r\n      break;\r\n    case 3:\r\n      result.set(a, b, c, m);\r\n      break;\r\n  }\r\n};\r\n\r\nconst lerp = (a, b, t) => {\r\n  return a * (1 - t) + b * t;\r\n};\r\n\r\nconst getElementPropStorage = (element, name) => {\r\n  return element.properties.find((p) => p.name === name && p.storage)\r\n    ?.storage;\r\n};\r\n\r\nexport class CompressedPlyParser {\r\n\r\n  static decodeHeaderText(headerText) {\r\n\r\n    let element;\r\n    let chunkElement;\r\n    let vertexElement;\r\n\r\n    const headerLines = headerText.split('\\n').filter((line) => !line.startsWith('comment '));\r\n\r\n    let bytesPerSplat = 0;\r\n    let done = false;\r\n    for (let i = 1; i < headerLines.length; ++i) {\r\n      const words = headerLines[i].split(' ');\r\n\r\n      switch (words[0]) {\r\n        case 'format':\r\n          if (words[1] !== 'binary_little_endian') {\r\n            throw new Error('Unsupported ply format');\r\n          }\r\n          break;\r\n        case 'element':\r\n          element = {\r\n            name: words[1],\r\n            count: parseInt(words[2], 10),\r\n            properties: [],\r\n            storageSizeBytes: 0\r\n          };\r\n          if (element.name === 'chunk') chunkElement = element;\r\n          else if (element.name === 'vertex') vertexElement = element;\r\n          break;\r\n        case 'property': {\r\n          if (!DataTypeMap.has(words[1])) {\r\n            throw new Error(\r\n              `Unrecognized property data type '${words[1]}' in ply header`\r\n            );\r\n          }\r\n          const StorageType = DataTypeMap.get(words[1]);\r\n          const storageSizeByes = StorageType.BYTES_PER_ELEMENT * element.count;\r\n          if (element.name === 'vertex') bytesPerSplat += StorageType.BYTES_PER_ELEMENT;\r\n          element.properties.push({\r\n            type: words[1],\r\n            name: words[2],\r\n            storage: null,\r\n            byteSize: StorageType.BYTES_PER_ELEMENT,\r\n            storageSizeByes: storageSizeByes\r\n          });\r\n          element.storageSizeBytes += storageSizeByes;\r\n          break;\r\n        }\r\n        case HeaderEndToken:\r\n          done = true;\r\n        break;\r\n        default:\r\n          throw new Error(\r\n            `Unrecognized header value '${words[0]}' in ply header`\r\n          );\r\n      }\r\n      if (done) break;\r\n    }\r\n\r\n    return {\r\n      'chunkElement': chunkElement,\r\n      'vertexElement': vertexElement,\r\n      'bytesPerSplat': bytesPerSplat,\r\n      'headerSizeBytes': headerText.indexOf(HeaderEndToken) + HeaderEndToken.length + 1,\r\n    };\r\n  }\r\n\r\n  static decodeHeader(plyBuffer) {\r\n\r\n    /**\r\n     * Searches for the first occurrence of a sequence within a buffer.\r\n     * @example\r\n     * find(new Uint8Array([1, 2, 3, 4]), new Uint8Array([3, 4])); // 2\r\n     * @param {Uint8Array} buf - The buffer in which to search.\r\n     * @param {Uint8Array} search - The sequence to search for.\r\n     * @return {number} The index of the first occurrence of the search sequence in the buffer, or -1 if not found.\r\n     */\r\n    const find = (buf, search) => {\r\n      const endIndex = buf.length - search.length;\r\n      let i;\r\n      let j;\r\n      for (i = 0; i <= endIndex; ++i) {\r\n        for (j = 0; j < search.length; ++j) {\r\n          if (buf[i + j] !== search[j]) {\r\n            break;\r\n          }\r\n        }\r\n        if (j === search.length) {\r\n          return i;\r\n        }\r\n      }\r\n      return -1;\r\n    };\r\n\r\n    /**\r\n     * Checks if array 'a' starts with the same elements as array 'b'.\r\n     * @example\r\n     * startsWith(new Uint8Array([1, 2, 3, 4]), new Uint8Array([1, 2])); // true\r\n     * @param {Uint8Array} a - The array to check against.\r\n     * @param {Uint8Array} b - The array of elements to look for at the start of 'a'.\r\n     * @return {boolean} - True if 'a' starts with all elements of 'b', otherwise false.\r\n     */\r\n    const startsWith = (a, b) => {\r\n      if (a.length < b.length) {\r\n        return false;\r\n      }\r\n\r\n      for (let i = 0; i < b.length; ++i) {\r\n        if (a[i] !== b[i]) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    };\r\n\r\n    let buf = new Uint8Array(plyBuffer);\r\n    let endHeaderTokenOffset;\r\n\r\n    if (buf.length >= HeaderMagicBytes.length && !startsWith(buf, HeaderMagicBytes)) {\r\n      throw new Error('Invalid PLY header');\r\n    }\r\n\r\n    endHeaderTokenOffset = find(buf, HeaderEndTokenBytes);\r\n    if (endHeaderTokenOffset === -1) {\r\n      throw new Error('End of PLY header not found');\r\n    }\r\n\r\n    const headerText = new TextDecoder('ascii').decode(\r\n      buf.slice(0, endHeaderTokenOffset)\r\n    );\r\n\r\n    const {chunkElement, vertexElement, bytesPerSplat} = CompressedPlyParser.decodeHeaderText(headerText);\r\n\r\n    return {\r\n      'headerSizeBytes': endHeaderTokenOffset + HeaderEndTokenBytes.length,\r\n      'bytesPerSplat': bytesPerSplat,\r\n      'chunkElement': chunkElement,\r\n      'vertexElement': vertexElement\r\n    };\r\n  }\r\n\r\n  static readElementData(element, readBuffer, readOffset, fromIndex, toIndex, propertyFilter = null) {\r\n\r\n    let dataView = readBuffer instanceof DataView ? readBuffer : new DataView(readBuffer);\r\n\r\n    fromIndex = fromIndex || 0;\r\n    toIndex = toIndex || element.count - 1;\r\n    for (let e = fromIndex; e <= toIndex; ++e) {\r\n      for (let j = 0; j < element.properties.length; ++j) {\r\n        const property = element.properties[j];\r\n\r\n        const StorageType = DataTypeMap.get(property.type);\r\n        const requiredStorageSizeBytes = StorageType.BYTES_PER_ELEMENT * element.count;\r\n        if ((!property.storage || property.storage.byteLength < requiredStorageSizeBytes) &&\r\n            (!propertyFilter || propertyFilter(property.name))) {\r\n          property.storage = new StorageType(element.count);\r\n        }\r\n\r\n        if (property.storage) {\r\n          switch (property.type) {\r\n            case 'char':\r\n              property.storage[e] = dataView.getInt8(readOffset);\r\n              break;\r\n            case 'uchar':\r\n              property.storage[e] = dataView.getUint8(readOffset);\r\n              break;\r\n            case 'short':\r\n              property.storage[e] = dataView.getInt16(readOffset, true);\r\n              break;\r\n            case 'ushort':\r\n              property.storage[e] = dataView.getUint16(readOffset, true);\r\n              break;\r\n            case 'int':\r\n              property.storage[e] = dataView.getInt32(readOffset, true);\r\n              break;\r\n            case 'uint':\r\n              property.storage[e] = dataView.getUint32(readOffset, true);\r\n              break;\r\n            case 'float':\r\n              property.storage[e] = dataView.getFloat32(readOffset, true);\r\n              break;\r\n            case 'double':\r\n              property.storage[e] = dataView.getFloat64(readOffset, true);\r\n              break;\r\n          }\r\n        }\r\n\r\n        readOffset += property.byteSize;\r\n      }\r\n    }\r\n\r\n    return readOffset;\r\n  }\r\n\r\n  static readPly(plyBuffer, propertyFilter = null) {\r\n\r\n    const header = CompressedPlyParser.decodeHeader(plyBuffer);\r\n\r\n    let readIndex = CompressedPlyParser.readElementData(header.chunkElement, plyBuffer, header.headerSizeBytes, null, null, propertyFilter);\r\n    CompressedPlyParser.readElementData(header.vertexElement, plyBuffer, readIndex, null, null, propertyFilter);\r\n\r\n    return {\r\n      'chunkElement': header.chunkElement,\r\n      'vertexElement': header.vertexElement\r\n    };\r\n  }\r\n\r\n  static getElementStorageArrays(chunkElement, vertexElement) {\r\n    const minX = getElementPropStorage(chunkElement, 'min_x');\r\n    const minY = getElementPropStorage(chunkElement, 'min_y');\r\n    const minZ = getElementPropStorage(chunkElement, 'min_z');\r\n    const maxX = getElementPropStorage(chunkElement, 'max_x');\r\n    const maxY = getElementPropStorage(chunkElement, 'max_y');\r\n    const maxZ = getElementPropStorage(chunkElement, 'max_z');\r\n    const minScaleX = getElementPropStorage(chunkElement, 'min_scale_x');\r\n    const minScaleY = getElementPropStorage(chunkElement, 'min_scale_y');\r\n    const minScaleZ = getElementPropStorage(chunkElement, 'min_scale_z');\r\n    const maxScaleX = getElementPropStorage(chunkElement, 'max_scale_x');\r\n    const maxScaleY = getElementPropStorage(chunkElement, 'max_scale_y');\r\n    const maxScaleZ = getElementPropStorage(chunkElement, 'max_scale_z');\r\n    const position = getElementPropStorage(vertexElement, 'packed_position');\r\n    const rotation = getElementPropStorage(vertexElement, 'packed_rotation');\r\n    const scale = getElementPropStorage(vertexElement, 'packed_scale');\r\n    const color = getElementPropStorage(vertexElement, 'packed_color');\r\n    return {\r\n      positionExtremes: {\r\n        minX, maxX,\r\n        minY, maxY,\r\n        minZ, maxZ\r\n      },\r\n      scaleExtremes: {\r\n        minScaleX, maxScaleX, minScaleY,\r\n        maxScaleY, minScaleZ, maxScaleZ\r\n      },\r\n      position,\r\n      rotation,\r\n      scale,\r\n      color\r\n    };\r\n  }\r\n\r\n  static decompressSplat = function() {\r\n\r\n    const p = new THREE.Vector3();\r\n    const r = new THREE.Quaternion();\r\n    const s = new THREE.Vector3();\r\n    const c = new THREE.Vector4();\r\n\r\n    const OFFSET = UncompressedSplatArray.OFFSET;\r\n\r\n    return function(index, chunkSplatIndexOffset, positionArray, positionExtremes, scaleArray, scaleExtremes,\r\n                    rotationArray, colorArray, outSplat) {\r\n      outSplat = outSplat || UncompressedSplatArray.createSplat();\r\n\r\n      const chunkIndex = Math.floor((chunkSplatIndexOffset + index) / 256);\r\n\r\n      unpack111011(p, positionArray[index]);\r\n      unpackRot(r, rotationArray[index]);\r\n      unpack111011(s, scaleArray[index]);\r\n      unpack8888(c, colorArray[index]);\r\n\r\n      outSplat[OFFSET.X] = lerp(positionExtremes.minX[chunkIndex], positionExtremes.maxX[chunkIndex], p.x);\r\n      outSplat[OFFSET.Y] = lerp(positionExtremes.minY[chunkIndex], positionExtremes.maxY[chunkIndex], p.y);\r\n      outSplat[OFFSET.Z] = lerp(positionExtremes.minZ[chunkIndex], positionExtremes.maxZ[chunkIndex], p.z);\r\n\r\n      outSplat[OFFSET.ROTATION0] = r.x;\r\n      outSplat[OFFSET.ROTATION1] = r.y;\r\n      outSplat[OFFSET.ROTATION2] = r.z;\r\n      outSplat[OFFSET.ROTATION3] = r.w;\r\n\r\n      outSplat[OFFSET.SCALE0] = Math.exp(lerp(scaleExtremes.minScaleX[chunkIndex], scaleExtremes.maxScaleX[chunkIndex], s.x));\r\n      outSplat[OFFSET.SCALE1] = Math.exp(lerp(scaleExtremes.minScaleY[chunkIndex], scaleExtremes.maxScaleY[chunkIndex], s.y));\r\n      outSplat[OFFSET.SCALE2] = Math.exp(lerp(scaleExtremes.minScaleZ[chunkIndex], scaleExtremes.maxScaleZ[chunkIndex], s.z));\r\n\r\n      outSplat[OFFSET.FDC0] = clamp(Math.floor(c.x * 255), 0, 255);\r\n      outSplat[OFFSET.FDC1] = clamp(Math.floor(c.y * 255), 0, 255);\r\n      outSplat[OFFSET.FDC2] = clamp(Math.floor(c.z * 255), 0, 255);\r\n      outSplat[OFFSET.OPACITY] = clamp(Math.floor(c.w * 255), 0, 255);\r\n\r\n      return outSplat;\r\n    };\r\n\r\n  }();\r\n\r\n  static parseToUncompressedSplatBufferSection(chunkElement, vertexElement, fromIndex, toIndex, chunkSplatIndexOffset,\r\n                                               vertexDataBuffer, veretxReadOffset, outBuffer, outOffset, propertyFilter = null) {\r\n\r\n    CompressedPlyParser.readElementData(vertexElement, vertexDataBuffer, veretxReadOffset, fromIndex, toIndex, propertyFilter);\r\n\r\n    const outBytesPerCenter = SplatBuffer.CompressionLevels[0].BytesPerCenter;\r\n    const outBytesPerScale = SplatBuffer.CompressionLevels[0].BytesPerScale;\r\n    const outBytesPerRotation = SplatBuffer.CompressionLevels[0].BytesPerRotation;\r\n    const outBytesPerSplat = SplatBuffer.CompressionLevels[0].BytesPerSplat;\r\n\r\n    const { positionExtremes, scaleExtremes, position, rotation, scale, color } =\r\n      CompressedPlyParser.getElementStorageArrays(chunkElement, vertexElement);\r\n\r\n    const OFFSET = UncompressedSplatArray.OFFSET;\r\n    const tempSplat = UncompressedSplatArray.createSplat();\r\n\r\n    for (let i = fromIndex; i <= toIndex; ++i) {\r\n\r\n      CompressedPlyParser.decompressSplat(i, chunkSplatIndexOffset, position, positionExtremes,\r\n                                          scale, scaleExtremes, rotation, color, tempSplat);\r\n\r\n      const outBase = i * outBytesPerSplat + outOffset;\r\n      const outCenter = new Float32Array(outBuffer, outBase, 3);\r\n      const outScale = new Float32Array(outBuffer, outBase + outBytesPerCenter, 3);\r\n      const outRotation = new Float32Array(outBuffer, outBase + outBytesPerCenter + outBytesPerScale, 4);\r\n      const outColor = new Uint8Array(outBuffer, outBase + outBytesPerCenter + outBytesPerScale + outBytesPerRotation, 4);\r\n\r\n      outCenter[0] = tempSplat[OFFSET.X];\r\n      outCenter[1] = tempSplat[OFFSET.Y];\r\n      outCenter[2] = tempSplat[OFFSET.Z];\r\n\r\n      outScale[0] = tempSplat[OFFSET.SCALE0];\r\n      outScale[1] = tempSplat[OFFSET.SCALE1];\r\n      outScale[2] = tempSplat[OFFSET.SCALE2];\r\n\r\n      outRotation[0] = tempSplat[OFFSET.ROTATION0];\r\n      outRotation[1] = tempSplat[OFFSET.ROTATION1];\r\n      outRotation[2] = tempSplat[OFFSET.ROTATION2];\r\n      outRotation[3] = tempSplat[OFFSET.ROTATION3];\r\n\r\n      outColor[0] = tempSplat[OFFSET.FDC0];\r\n      outColor[1] = tempSplat[OFFSET.FDC1];\r\n      outColor[2] = tempSplat[OFFSET.FDC2];\r\n      outColor[3] = tempSplat[OFFSET.OPACITY];\r\n    }\r\n  }\r\n\r\n  static parseToUncompressedSplatArray(plyBuffer) {\r\n    const { chunkElement, vertexElement } = CompressedPlyParser.readPly(plyBuffer);\r\n\r\n    const splatArray = new UncompressedSplatArray();\r\n\r\n    const { positionExtremes, scaleExtremes, position, rotation, scale, color } =\r\n      CompressedPlyParser.getElementStorageArrays(chunkElement, vertexElement);\r\n\r\n    for (let i = 0; i < vertexElement.count; ++i) {\r\n\r\n      splatArray.addDefaultSplat();\r\n      const newSplat = splatArray.getSplat(splatArray.splatCount - 1);\r\n\r\n      CompressedPlyParser.decompressSplat(i, 0, position, positionExtremes, scale, scaleExtremes, rotation, color, newSplat);\r\n    }\r\n\r\n    const mat = new THREE.Matrix4();\r\n    mat.identity();\r\n\r\n    return splatArray;\r\n  }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\r\nimport { CompressedPlyParser } from './CompressedPlyParser.js';\r\nimport { SplatBuffer } from '../SplatBuffer.js';\r\nimport { clamp } from '../../Util.js';\r\n\r\nexport class PlyParser {\r\n\r\n    static HeaderEndToken = 'end_header';\r\n\r\n    static Fields = ['scale_0', 'scale_1', 'scale_2', 'rot_0', 'rot_1', 'rot_2', 'rot_3',\r\n                     'x', 'y', 'z', 'f_dc_0', 'f_dc_1', 'f_dc_2', 'red', 'green', 'blue', 'opacity'];\r\n\r\n    static checkTextForEndHeader(endHeaderTestText) {\r\n        if (endHeaderTestText.includes(PlyParser.HeaderEndToken)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static checkBufferForEndHeader(buffer, searchOfset, chunkSize, decoder) {\r\n        const endHeaderTestChunk = new Uint8Array(buffer, Math.max(0, searchOfset - chunkSize), chunkSize);\r\n        const endHeaderTestText = decoder.decode(endHeaderTestChunk);\r\n        return PlyParser.checkTextForEndHeader(endHeaderTestText);\r\n    }\r\n\r\n    static decodeHeaderText(headerText) {\r\n        const headerLines = headerText.split('\\n');\r\n\r\n        const prunedLines = [];\r\n\r\n        let splatCount = 0;\r\n        let propertyTypes = {};\r\n        let compressed = false;\r\n\r\n        for (let i = 0; i < headerLines.length; i++) {\r\n            const line = headerLines[i].trim();\r\n            prunedLines.push(line);\r\n            if (line.startsWith('element chunk') || line.match(/[A-Za-z]*packed_[A-Za-z]*/)) {\r\n                compressed = true;\r\n            } else if (line.startsWith('element vertex')) {\r\n                const splatCountMatch = line.match(/\\d+/);\r\n                if (splatCountMatch) {\r\n                    splatCount = parseInt(splatCountMatch[0]);\r\n                }\r\n            } else if (line.startsWith('property')) {\r\n                const propertyMatch = line.match(/(\\w+)\\s+(\\w+)\\s+(\\w+)/);\r\n                if (propertyMatch) {\r\n                    const propertyType = propertyMatch[2];\r\n                    const propertyName = propertyMatch[3];\r\n                    propertyTypes[propertyName] = propertyType;\r\n                }\r\n            } else if (line === PlyParser.HeaderEndToken) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        let bytesPerSplat = 0;\r\n        let fieldOffsets = {};\r\n        const fieldSize = {\r\n            'double': 8,\r\n            'int': 4,\r\n            'uint': 4,\r\n            'float': 4,\r\n            'short': 2,\r\n            'ushort': 2,\r\n            'uchar': 1,\r\n        };\r\n\r\n        for (let fieldName in propertyTypes) {\r\n            if (propertyTypes.hasOwnProperty(fieldName)) {\r\n                const type = propertyTypes[fieldName];\r\n                fieldOffsets[fieldName] = bytesPerSplat;\r\n                bytesPerSplat += fieldSize[type];\r\n            }\r\n        }\r\n\r\n        return {\r\n            'splatCount': splatCount,\r\n            'propertyTypes': propertyTypes,\r\n            'compressed': compressed,\r\n            'headerText': headerText,\r\n            'headerLines': prunedLines,\r\n            'headerSizeBytes': headerText.indexOf(PlyParser.HeaderEndToken) + PlyParser.HeaderEndToken.length + 1,\r\n            'bytesPerSplat': bytesPerSplat,\r\n            'fieldOffsets': fieldOffsets\r\n        };\r\n    }\r\n\r\n    static decodeHeadeFromBuffer(plyBuffer) {\r\n        const decoder = new TextDecoder();\r\n        let headerOffset = 0;\r\n        let headerText = '';\r\n        const readChunkSize = 100;\r\n\r\n        while (true) {\r\n            if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\r\n                throw new Error('End of file reached while searching for end of header');\r\n            }\r\n            const headerChunk = new Uint8Array(plyBuffer, headerOffset, readChunkSize);\r\n            headerText += decoder.decode(headerChunk);\r\n            headerOffset += readChunkSize;\r\n\r\n            if (PlyParser.checkBufferForEndHeader(plyBuffer, headerOffset, readChunkSize * 2, decoder)) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return PlyParser.decodeHeaderText(headerText);\r\n\r\n    }\r\n\r\n    static findVertexData(plyBuffer, header) {\r\n        return new DataView(plyBuffer, header.headerSizeBytes);\r\n    }\r\n\r\n    static readRawVertexFast(vertexData, offset, fieldOffsets, propertiesToRead, propertyTypes, outVertex) {\r\n        let rawVertex = outVertex || {};\r\n        for (let property of propertiesToRead) {\r\n            const propertyType = propertyTypes[property];\r\n            if (propertyType === 'float') {\r\n                rawVertex[property] = vertexData.getFloat32(offset + fieldOffsets[property], true);\r\n            } else if (propertyType === 'uchar') {\r\n                rawVertex[property] = vertexData.getUint8(offset + fieldOffsets[property]) / 255.0;\r\n            }\r\n        }\r\n    }\r\n\r\n    static parseToUncompressedSplatBufferSection(header, fromSplat, toSplat, vertexData, vertexDataOffset, toBuffer, toOffset) {\r\n        const outBytesPerCenter = SplatBuffer.CompressionLevels[0].BytesPerCenter;\r\n        const outBytesPerScale = SplatBuffer.CompressionLevels[0].BytesPerScale;\r\n        const outBytesPerRotation = SplatBuffer.CompressionLevels[0].BytesPerRotation;\r\n        const outBytesPerSplat = SplatBuffer.CompressionLevels[0].BytesPerSplat;\r\n\r\n        for (let i = fromSplat; i <= toSplat; i++) {\r\n\r\n            const parsedSplat = PlyParser.parseToUncompressedSplat(vertexData, i, header, vertexDataOffset);\r\n\r\n            const outBase = i * outBytesPerSplat + toOffset;\r\n            const outCenter = new Float32Array(toBuffer, outBase, 3);\r\n            const outScale = new Float32Array(toBuffer, outBase + outBytesPerCenter, 3);\r\n            const outRotation = new Float32Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale, 4);\r\n            const outColor = new Uint8Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale + outBytesPerRotation, 4);\r\n\r\n            outCenter[0] = parsedSplat[UncompressedSplatArray.OFFSET.X];\r\n            outCenter[1] = parsedSplat[UncompressedSplatArray.OFFSET.Y];\r\n            outCenter[2] = parsedSplat[UncompressedSplatArray.OFFSET.Z];\r\n\r\n            outScale[0] = parsedSplat[UncompressedSplatArray.OFFSET.SCALE0];\r\n            outScale[1] = parsedSplat[UncompressedSplatArray.OFFSET.SCALE1];\r\n            outScale[2] = parsedSplat[UncompressedSplatArray.OFFSET.SCALE2];\r\n\r\n            outRotation[0] = parsedSplat[UncompressedSplatArray.OFFSET.ROTATION0];\r\n            outRotation[1] = parsedSplat[UncompressedSplatArray.OFFSET.ROTATION1];\r\n            outRotation[2] = parsedSplat[UncompressedSplatArray.OFFSET.ROTATION2];\r\n            outRotation[3] = parsedSplat[UncompressedSplatArray.OFFSET.ROTATION3];\r\n\r\n            outColor[0] = parsedSplat[UncompressedSplatArray.OFFSET.FDC0];\r\n            outColor[1] = parsedSplat[UncompressedSplatArray.OFFSET.FDC1];\r\n            outColor[2] = parsedSplat[UncompressedSplatArray.OFFSET.FDC2];\r\n            outColor[3] = parsedSplat[UncompressedSplatArray.OFFSET.OPACITY];\r\n        }\r\n    }\r\n\r\n    static parseToUncompressedSplat = function() {\r\n\r\n        let rawVertex = {};\r\n        const tempRotation = new THREE.Quaternion();\r\n\r\n        return function(vertexData, row, header, vertexDataOffset = 0) {\r\n            PlyParser.readRawVertexFast(vertexData, row * header.bytesPerSplat + vertexDataOffset, header.fieldOffsets,\r\n                                        PlyParser.Fields, header.propertyTypes, rawVertex);\r\n            const newSplat = UncompressedSplatArray.createSplat();\r\n            if (rawVertex['scale_0'] !== undefined) {\r\n                newSplat[UncompressedSplatArray.OFFSET.SCALE0] = Math.exp(rawVertex['scale_0']);\r\n                newSplat[UncompressedSplatArray.OFFSET.SCALE1] = Math.exp(rawVertex['scale_1']);\r\n                newSplat[UncompressedSplatArray.OFFSET.SCALE2] = Math.exp(rawVertex['scale_2']);\r\n            } else {\r\n                newSplat[UncompressedSplatArray.OFFSET.SCALE0] = 0.01;\r\n                newSplat[UncompressedSplatArray.OFFSET.SCALE1] = 0.01;\r\n                newSplat[UncompressedSplatArray.OFFSET.SCALE2] = 0.01;\r\n            }\r\n\r\n            if (rawVertex['f_dc_0'] !== undefined) {\r\n                const SH_C0 = 0.28209479177387814;\r\n                newSplat[UncompressedSplatArray.OFFSET.FDC0] = (0.5 + SH_C0 * rawVertex['f_dc_0']) * 255;\r\n                newSplat[UncompressedSplatArray.OFFSET.FDC1] = (0.5 + SH_C0 * rawVertex['f_dc_1']) * 255;\r\n                newSplat[UncompressedSplatArray.OFFSET.FDC2] = (0.5 + SH_C0 * rawVertex['f_dc_2']) * 255;\r\n            } else if (rawVertex['red'] !== undefined) {\r\n                newSplat[UncompressedSplatArray.OFFSET.FDC0] = rawVertex['red'] * 255;\r\n                newSplat[UncompressedSplatArray.OFFSET.FDC1] = rawVertex['green'] * 255;\r\n                newSplat[UncompressedSplatArray.OFFSET.FDC2] = rawVertex['blue'] * 255;\r\n            } else {\r\n                newSplat[UncompressedSplatArray.OFFSET.FDC0] = 0;\r\n                newSplat[UncompressedSplatArray.OFFSET.FDC1] = 0;\r\n                newSplat[UncompressedSplatArray.OFFSET.FDC2] = 0;\r\n            }\r\n            if (rawVertex['opacity'] !== undefined) {\r\n                newSplat[UncompressedSplatArray.OFFSET.OPACITY] = (1 / (1 + Math.exp(-rawVertex['opacity']))) * 255;\r\n            }\r\n\r\n            newSplat[UncompressedSplatArray.OFFSET.FDC0] = clamp(Math.floor(newSplat[UncompressedSplatArray.OFFSET.FDC0]), 0, 255);\r\n            newSplat[UncompressedSplatArray.OFFSET.FDC1] = clamp(Math.floor(newSplat[UncompressedSplatArray.OFFSET.FDC1]), 0, 255);\r\n            newSplat[UncompressedSplatArray.OFFSET.FDC2] = clamp(Math.floor(newSplat[UncompressedSplatArray.OFFSET.FDC2]), 0, 255);\r\n            newSplat[UncompressedSplatArray.OFFSET.OPACITY] = clamp(Math.floor(newSplat[UncompressedSplatArray.OFFSET.OPACITY]), 0, 255);\r\n\r\n            tempRotation.set(rawVertex['rot_0'], rawVertex['rot_1'], rawVertex['rot_2'], rawVertex['rot_3']);\r\n            tempRotation.normalize();\r\n\r\n            newSplat[UncompressedSplatArray.OFFSET.ROTATION0] = tempRotation.x;\r\n            newSplat[UncompressedSplatArray.OFFSET.ROTATION1] = tempRotation.y;\r\n            newSplat[UncompressedSplatArray.OFFSET.ROTATION2] = tempRotation.z;\r\n            newSplat[UncompressedSplatArray.OFFSET.ROTATION3] = tempRotation.w;\r\n\r\n            newSplat[UncompressedSplatArray.OFFSET.X] = rawVertex['x'];\r\n            newSplat[UncompressedSplatArray.OFFSET.Y] = rawVertex['y'];\r\n            newSplat[UncompressedSplatArray.OFFSET.Z] = rawVertex['z'];\r\n\r\n            return newSplat;\r\n        };\r\n\r\n    }();\r\n\r\n    static parseToUncompressedSplatArray(plyBuffer) {\r\n\r\n        const header = PlyParser.decodeHeadeFromBuffer(plyBuffer);\r\n\r\n        if (header.compressed) {\r\n\r\n            return CompressedPlyParser.parseToUncompressedSplatArray(plyBuffer);\r\n\r\n        } else {\r\n\r\n            const splatCount = header.splatCount;\r\n\r\n            const vertexData = PlyParser.findVertexData(plyBuffer, header);\r\n\r\n            // TODO: Eventually properly support multiple degree spherical harmonics\r\n            // figure out the SH degree from the number of coefficients\r\n            /* let nRestCoeffs = 0;\r\n            for (const propertyName in header.propertyTypes) {\r\n                if (propertyName.startsWith('f_rest_')) {\r\n                    nRestCoeffs += 1;\r\n                }\r\n            }\r\n            const nCoeffsPerColor = nRestCoeffs / 3;*/\r\n\r\n            // const sphericalHarmonicsDegree = Math.sqrt(nCoeffsPerColor + 1) - 1;\r\n            // const sphericalHarmonicsDegree = 0;\r\n            // console.log('Detected degree', sphericalHarmonicsDegree, 'with ', nCoeffsPerColor, 'coefficients per color');\r\n\r\n            // figure out the order in which spherical harmonics should be read\r\n            /* const shFeatureOrder = [];\r\n            for (let rgb = 0; rgb < 3; ++rgb) {\r\n                shFeatureOrder.push(`f_dc_${rgb}`);\r\n            }\r\n            for (let i = 0; i < nCoeffsPerColor; ++i) {\r\n                for (let rgb = 0; rgb < 3; ++rgb) {\r\n                    shFeatureOrder.push(`f_rest_${rgb * nCoeffsPerColor + i}`);\r\n                }\r\n            }*/\r\n\r\n            const splatArray = new UncompressedSplatArray();\r\n\r\n            for (let row = 0; row < splatCount; row++) {\r\n                const newSplat = PlyParser.parseToUncompressedSplat(vertexData, row, header);\r\n                splatArray.addSplat(newSplat);\r\n            }\r\n\r\n            return splatArray;\r\n        }\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\r\nimport { SplatBuffer } from './SplatBuffer.js';\r\n\r\nexport class SplatPartitioner {\r\n\r\n    constructor(sectionCount, sectionFilters, groupingParameters, partitionGenerator) {\r\n        this.sectionCount = sectionCount;\r\n        this.sectionFilters = sectionFilters;\r\n        this.groupingParameters = groupingParameters;\r\n        this.partitionGenerator = partitionGenerator;\r\n    }\r\n\r\n    partitionUncompressedSplatArray(splatArray) {\r\n        let groupingParameters;\r\n        let sectionCount;\r\n        let sectionFilters;\r\n        if (this.partitionGenerator) {\r\n            const results = this.partitionGenerator(splatArray);\r\n            groupingParameters = results.groupingParameters;\r\n            sectionCount = results.sectionCount;\r\n            sectionFilters = results.sectionFilters;\r\n        } else {\r\n            groupingParameters = this.groupingParameters;\r\n            sectionCount = this.sectionCount;\r\n            sectionFilters = this.sectionFilters;\r\n        }\r\n\r\n        const newArrays = [];\r\n        for (let s = 0; s < sectionCount; s++) {\r\n            const sectionSplats = new UncompressedSplatArray();\r\n            const sectionFilter = sectionFilters[s];\r\n            for (let i = 0; i < splatArray.splatCount; i++) {\r\n                if (sectionFilter(i)) {\r\n                    sectionSplats.addSplatFromArray(splatArray, i);\r\n                }\r\n            }\r\n            newArrays.push(sectionSplats);\r\n        }\r\n        return {\r\n            splatArrays: newArrays,\r\n            parameters: groupingParameters\r\n        };\r\n    }\r\n\r\n    static getStandardPartitioner(partitionSize = 0, sceneCenter = new THREE.Vector3(),\r\n                                  blockSize = SplatBuffer.BucketBlockSize, bucketSize = SplatBuffer.BucketSize) {\r\n        const partitionGenerator = (splatArray) => {\r\n\r\n            if (partitionSize <= 0) partitionSize = splatArray.splatCount;\r\n\r\n            const centerA = new THREE.Vector3();\r\n            const centerB = new THREE.Vector3();\r\n            const clampDistance = 0.5;\r\n            const clampPoint = (point) => {\r\n                point.x = Math.floor(point.x / clampDistance) * clampDistance;\r\n                point.y = Math.floor(point.y / clampDistance) * clampDistance;\r\n                point.z = Math.floor(point.z / clampDistance) * clampDistance;\r\n            };\r\n            splatArray.splats.sort((a, b) => {\r\n                centerA.set(a[UncompressedSplatArray.OFFSET.X],\r\n                            a[UncompressedSplatArray.OFFSET.Y],\r\n                            a[UncompressedSplatArray.OFFSET.Z]).sub(sceneCenter);\r\n                clampPoint(centerA);\r\n                const centerADist = centerA.lengthSq();\r\n                centerB.set(b[UncompressedSplatArray.OFFSET.X],\r\n                            b[UncompressedSplatArray.OFFSET.Y],\r\n                            b[UncompressedSplatArray.OFFSET.Z]).sub(sceneCenter);\r\n                clampPoint(centerB);\r\n                const centerBDist = centerB.lengthSq();\r\n                if (centerADist > centerBDist) return 1;\r\n                else return -1;\r\n            });\r\n\r\n            const sectionFilters = [];\r\n            const groupingParameters = [];\r\n            partitionSize = Math.min(splatArray.splatCount, partitionSize);\r\n            const patitionCount = Math.ceil(splatArray.splatCount / partitionSize);\r\n            let currentStartSplat = 0;\r\n            for (let i = 0; i < patitionCount; i ++) {\r\n                let startSplat = currentStartSplat;\r\n                sectionFilters.push((splatIndex) => {\r\n                    return splatIndex >= startSplat && splatIndex < startSplat + partitionSize;\r\n                });\r\n                groupingParameters.push({\r\n                    'blocksSize': blockSize,\r\n                    'bucketSize': bucketSize,\r\n                });\r\n                currentStartSplat += partitionSize;\r\n            }\r\n            return {\r\n                'sectionCount': sectionFilters.length,\r\n                sectionFilters,\r\n                groupingParameters\r\n            };\r\n        };\r\n        return new SplatPartitioner(undefined, undefined, undefined, partitionGenerator);\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { SplatPartitioner } from './SplatPartitioner.js';\r\nimport { SplatBuffer } from './SplatBuffer.js';\r\n\r\nexport class SplatBufferGenerator {\r\n\r\n    constructor(splatPartitioner, alphaRemovalThreshold, compressionLevel, sectionSize, sceneCenter, blockSize, bucketSize) {\r\n        this.splatPartitioner = splatPartitioner;\r\n        this.alphaRemovalThreshold = alphaRemovalThreshold;\r\n        this.compressionLevel = compressionLevel;\r\n        this.sectionSize = sectionSize;\r\n        this.sceneCenter = sceneCenter ? new THREE.Vector3().copy(sceneCenter) : undefined;\r\n        this.blockSize = blockSize;\r\n        this.bucketSize = bucketSize;\r\n    }\r\n\r\n    generateFromUncompressedSplatArray(splatArray) {\r\n        const partitionResults = this.splatPartitioner.partitionUncompressedSplatArray(splatArray);\r\n        return SplatBuffer.generateFromUncompressedSplatArrays(partitionResults.splatArrays,\r\n                                                               this.alphaRemovalThreshold, this.compressionLevel,\r\n                                                               this.sceneCenter, this.blockSize, this.bucketSize,\r\n                                                               partitionResults.parameters);\r\n    }\r\n\r\n    static getStandardGenerator(alphaRemovalThreshold = 1, compressionLevel = 1, sectionSize = 0, sceneCenter = new THREE.Vector3(),\r\n                                blockSize = SplatBuffer.BucketBlockSize, bucketSize = SplatBuffer.BucketSize) {\r\n        const splatPartitioner = SplatPartitioner.getStandardPartitioner(sectionSize, sceneCenter, blockSize, bucketSize);\r\n        return new SplatBufferGenerator(splatPartitioner, alphaRemovalThreshold, compressionLevel,\r\n                                        sectionSize, sceneCenter, blockSize, bucketSize);\r\n    }\r\n}\r\n","export const LoaderStatus = {\r\n    'Downloading': 0,\r\n    'Processing': 1,\r\n    'Done': 2\r\n};\r\n","export class Constants {\r\n\r\n    static DepthMapRange = 1 << 16;\r\n    static MemoryPageSize = 65536;\r\n    static BytesPerFloat = 4;\r\n    static BytesPerInt = 4;\r\n    static MaxScenes = 32;\r\n    static StreamingSectionSize = 524288;\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { PlyParser } from './PlyParser.js';\r\nimport { CompressedPlyParser } from './CompressedPlyParser.js';\r\nimport { fetchWithProgress, delayedExecute } from '../../Util.js';\r\nimport { SplatBuffer } from '../SplatBuffer.js';\r\nimport { SplatBufferGenerator } from '../SplatBufferGenerator.js';\r\nimport { LoaderStatus } from '../LoaderStatus.js';\r\nimport { Constants } from '../../Constants.js';\r\n\r\nfunction storeChunksInBuffer(chunks, buffer) {\r\n    let inBytes = 0;\r\n    for (let chunk of chunks) inBytes += chunk.sizeBytes;\r\n\r\n    if (!buffer || buffer.byteLength < inBytes) {\r\n        buffer = new ArrayBuffer(inBytes);\r\n    }\r\n\r\n    let offset = 0;\r\n    for (let chunk of chunks) {\r\n        new Uint8Array(buffer, offset, chunk.sizeBytes).set(chunk.data);\r\n        offset += chunk.sizeBytes;\r\n    }\r\n\r\n    return buffer;\r\n}\r\n\r\nexport class PlyLoader {\r\n\r\n    static loadFromURL(fileName, onProgress, streamLoadData, onStreamedSectionProgress, minimumAlpha, compressionLevel,\r\n                       sectionSize, sceneCenter, blockSize, bucketSize) {\r\n\r\n        const streamedSectionSizeBytes = Constants.StreamingSectionSize;\r\n        const splatDataOffsetBytes = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes;\r\n        const sectionCount = 1;\r\n\r\n        let streamBufferIn;\r\n        let streamBufferOut;\r\n        let streamedSplatBuffer;\r\n        let compressedPlyHeaderChunksBuffer;\r\n        let maxSplatCount = 0;\r\n        let splatCount = 0;\r\n\r\n        let headerLoaded = false;\r\n        let readyToLoadSplatData = false;\r\n        let compressed = false;\r\n\r\n        let streamLoadCompleteResolver;\r\n        let streamLoadPromise = new Promise((resolve) => {\r\n            streamLoadCompleteResolver = resolve;\r\n        });\r\n\r\n        let numBytesStreamed = 0;\r\n        let numBytesParsed = 0;\r\n        let numBytesDownloaded = 0;\r\n        let headerText = '';\r\n        let header = null;\r\n        let chunks = [];\r\n\r\n        const textDecoder = new TextDecoder();\r\n\r\n        const localOnProgress = (percent, percentLabel, chunkData) => {\r\n            const loadComplete = percent >= 100;\r\n            if (streamLoadData) {\r\n\r\n                if (chunkData) {\r\n                    chunks.push({\r\n                        'data': chunkData,\r\n                        'sizeBytes': chunkData.byteLength,\r\n                        'startBytes': numBytesDownloaded,\r\n                        'endBytes': numBytesDownloaded + chunkData.byteLength\r\n                    });\r\n                    numBytesDownloaded += chunkData.byteLength;\r\n                }\r\n\r\n                if (!headerLoaded) {\r\n                    headerText += textDecoder.decode(chunkData);\r\n                    if (PlyParser.checkTextForEndHeader(headerText)) {\r\n                        header = PlyParser.decodeHeaderText(headerText);\r\n                        compressed = header.compressed;\r\n\r\n                        if (compressed) {\r\n                            header = CompressedPlyParser.decodeHeaderText(headerText);\r\n                            maxSplatCount = header.vertexElement.count;\r\n                        } else {\r\n                            maxSplatCount = header.splatCount;\r\n                            readyToLoadSplatData = true;\r\n                        }\r\n\r\n                        const splatBufferSizeBytes = splatDataOffsetBytes + SplatBuffer.CompressionLevels[0].BytesPerSplat * maxSplatCount;\r\n                        streamBufferOut = new ArrayBuffer(splatBufferSizeBytes);\r\n                        SplatBuffer.writeHeaderToBuffer({\r\n                            versionMajor: SplatBuffer.CurrentMajorVersion,\r\n                            versionMinor: SplatBuffer.CurrentMinorVersion,\r\n                            maxSectionCount: sectionCount,\r\n                            sectionCount: sectionCount,\r\n                            maxSplatCount: maxSplatCount,\r\n                            splatCount: splatCount,\r\n                            compressionLevel: 0,\r\n                            sceneCenter: new THREE.Vector3()\r\n                        }, streamBufferOut);\r\n\r\n                        numBytesStreamed = header.headerSizeBytes;\r\n                        numBytesParsed = header.headerSizeBytes;\r\n                        headerLoaded = true;\r\n                    }\r\n                } else if (compressed && !readyToLoadSplatData) {\r\n                    const sizeRequiredForHeaderAndChunks = header.headerSizeBytes + header.chunkElement.storageSizeBytes;\r\n                    compressedPlyHeaderChunksBuffer = storeChunksInBuffer(chunks, compressedPlyHeaderChunksBuffer);\r\n                    if (compressedPlyHeaderChunksBuffer.byteLength >= sizeRequiredForHeaderAndChunks) {\r\n                        CompressedPlyParser.readElementData(header.chunkElement, compressedPlyHeaderChunksBuffer, header.headerSizeBytes);\r\n                        numBytesStreamed = sizeRequiredForHeaderAndChunks;\r\n                        numBytesParsed = sizeRequiredForHeaderAndChunks;\r\n                        readyToLoadSplatData = true;\r\n                    }\r\n                }\r\n\r\n                if (headerLoaded && readyToLoadSplatData) {\r\n\r\n                    if (chunks.length > 0) {\r\n\r\n                        streamBufferIn = storeChunksInBuffer(chunks, streamBufferIn);\r\n\r\n                        const bytesLoadedSinceLastStreamedSection = numBytesDownloaded - numBytesStreamed;\r\n                        if (bytesLoadedSinceLastStreamedSection > streamedSectionSizeBytes || loadComplete) {\r\n                            const numBytesToProcess = numBytesDownloaded - numBytesParsed;\r\n                            const addedSplatCount = Math.floor(numBytesToProcess / header.bytesPerSplat);\r\n                            const numBytesToParse = addedSplatCount * header.bytesPerSplat;\r\n                            const numBytesLeftOver = numBytesToProcess - numBytesToParse;\r\n                            const newSplatCount = splatCount + addedSplatCount;\r\n                            const parsedDataViewOffset = numBytesParsed - chunks[0].startBytes;\r\n                            const dataToParse = new DataView(streamBufferIn, parsedDataViewOffset, numBytesToParse);\r\n\r\n                            const outOffset = splatCount * SplatBuffer.CompressionLevels[0].BytesPerSplat + splatDataOffsetBytes;\r\n\r\n                            if (compressed) {\r\n                                CompressedPlyParser.parseToUncompressedSplatBufferSection(header.chunkElement, header.vertexElement, 0,\r\n                                                                                          addedSplatCount - 1, splatCount,\r\n                                                                                          dataToParse, 0, streamBufferOut, outOffset);\r\n                            } else {\r\n                                PlyParser.parseToUncompressedSplatBufferSection(header, 0, addedSplatCount - 1,\r\n                                                                                dataToParse, 0, streamBufferOut, outOffset);\r\n                            }\r\n\r\n                            splatCount = newSplatCount;\r\n                            if (!streamedSplatBuffer) {\r\n                                SplatBuffer.writeSectionHeaderToBuffer({\r\n                                    maxSplatCount: maxSplatCount,\r\n                                    splatCount: splatCount,\r\n                                    bucketSize: 0,\r\n                                    bucketCount: 0,\r\n                                    bucketBlockSize: 0,\r\n                                    compressionScaleRange: 0,\r\n                                    storageSizeBytes: 0,\r\n                                    fullBucketCount: 0,\r\n                                    partiallyFilledBucketCount: 0\r\n                                }, 0, streamBufferOut, SplatBuffer.HeaderSizeBytes);\r\n                                streamedSplatBuffer = new SplatBuffer(streamBufferOut, false);\r\n                            }\r\n                            streamedSplatBuffer.updateLoadedCounts(1, splatCount);\r\n                            onStreamedSectionProgress(streamedSplatBuffer, loadComplete);\r\n                            numBytesStreamed += streamedSectionSizeBytes;\r\n                            numBytesParsed += numBytesToParse;\r\n\r\n                            if (numBytesLeftOver === 0) {\r\n                                chunks = [];\r\n                            } else {\r\n                                let keepChunks = [];\r\n                                let keepSize = 0;\r\n                                for (let i = chunks.length - 1; i >= 0; i--) {\r\n                                    const chunk = chunks[i];\r\n                                    keepSize += chunk.sizeBytes;\r\n                                    keepChunks.unshift(chunk);\r\n                                    if (keepSize >= numBytesLeftOver) break;\r\n                                }\r\n                                chunks = keepChunks;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (loadComplete) {\r\n                        streamLoadCompleteResolver(streamedSplatBuffer);\r\n                    }\r\n                }\r\n\r\n            }\r\n            if (onProgress) onProgress(percent, percentLabel, LoaderStatus.Downloading);\r\n        };\r\n\r\n        return fetchWithProgress(fileName, localOnProgress, !streamLoadData).then((plyFileData) => {\r\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\r\n            const loadPromise = streamLoadData ? streamLoadPromise : PlyLoader.loadFromFileData(plyFileData, minimumAlpha, compressionLevel,\r\n                                                                                        sectionSize, sceneCenter, blockSize, bucketSize);\r\n            return loadPromise.then((splatBuffer) => {\r\n                if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\r\n                return splatBuffer;\r\n            });\r\n        });\r\n    }\r\n\r\n    static loadFromFileData(plyFileData, minimumAlpha, compressionLevel, sectionSize, sceneCenter, blockSize, bucketSize) {\r\n        return delayedExecute(() => {\r\n            return PlyParser.parseToUncompressedSplatArray(plyFileData);\r\n        })\r\n        .then((splatArray) => {\r\n            const splatBufferGenerator = SplatBufferGenerator.getStandardGenerator(minimumAlpha, compressionLevel, sectionSize,\r\n                                                                                   sceneCenter, blockSize, bucketSize);\r\n            return splatBufferGenerator.generateFromUncompressedSplatArray(splatArray);\r\n        });\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { SplatBuffer } from '../SplatBuffer.js';\r\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\r\n\r\nexport class SplatParser {\r\n\r\n    static RowSizeBytes = 32;\r\n    static CenterSizeBytes = 12;\r\n    static ScaleSizeBytes = 12;\r\n    static RotationSizeBytes = 4;\r\n    static ColorSizeBytes = 4;\r\n\r\n    static parseToUncompressedSplatBufferSection(fromSplat, toSplat, fromBuffer, fromOffset, toBuffer, toOffset) {\r\n\r\n        const outBytesPerCenter = SplatBuffer.CompressionLevels[0].BytesPerCenter;\r\n        const outBytesPerScale = SplatBuffer.CompressionLevels[0].BytesPerScale;\r\n        const outBytesPerRotation = SplatBuffer.CompressionLevels[0].BytesPerRotation;\r\n        const outBytesPerSplat = SplatBuffer.CompressionLevels[0].BytesPerSplat;\r\n\r\n        for (let i = fromSplat; i <= toSplat; i++) {\r\n            const inBase = i * SplatParser.RowSizeBytes + fromOffset;\r\n            const inCenter = new Float32Array(fromBuffer, inBase, 3);\r\n            const inScale = new Float32Array(fromBuffer, inBase + SplatParser.CenterSizeBytes, 3);\r\n            const inColor = new Uint8Array(fromBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes, 4);\r\n            const inRotation = new Uint8Array(fromBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes +\r\n                                              SplatParser.RotationSizeBytes, 4);\r\n\r\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\r\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\r\n            quat.normalize();\r\n\r\n            const outBase = i * outBytesPerSplat + toOffset;\r\n            const outCenter = new Float32Array(toBuffer, outBase, 3);\r\n            const outScale = new Float32Array(toBuffer, outBase + outBytesPerCenter, 3);\r\n            const outRotation = new Float32Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale, 4);\r\n            const outColor = new Uint8Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale + outBytesPerRotation, 4);\r\n\r\n            outCenter[0] = inCenter[0];\r\n            outCenter[1] = inCenter[1];\r\n            outCenter[2] = inCenter[2];\r\n\r\n            outScale[0] = inScale[0];\r\n            outScale[1] = inScale[1];\r\n            outScale[2] = inScale[2];\r\n\r\n            outRotation[0] = quat.w;\r\n            outRotation[1] = quat.x;\r\n            outRotation[2] = quat.y;\r\n            outRotation[3] = quat.z;\r\n\r\n            outColor[0] = inColor[0];\r\n            outColor[1] = inColor[1];\r\n            outColor[2] = inColor[2];\r\n            outColor[3] = inColor[3];\r\n        }\r\n    }\r\n\r\n    static parseStandardSplatToUncompressedSplatArray(inBuffer) {\r\n        // Standard .splat row layout:\r\n        // XYZ - Position (Float32)\r\n        // XYZ - Scale (Float32)\r\n        // RGBA - colors (uint8)\r\n        // IJKL - quaternion/rot (uint8)\r\n\r\n        const splatCount = inBuffer.byteLength / SplatParser.RowSizeBytes;\r\n\r\n        const splatArray = new UncompressedSplatArray();\r\n\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const inBase = i * SplatParser.RowSizeBytes;\r\n            const inCenter = new Float32Array(inBuffer, inBase, 3);\r\n            const inScale = new Float32Array(inBuffer, inBase + SplatParser.CenterSizeBytes, 3);\r\n            const inColor = new Uint8Array(inBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes, 4);\r\n            const inRotation = new Uint8Array(inBuffer, inBase + SplatParser.CenterSizeBytes +\r\n                                              SplatParser.ScaleSizeBytes + SplatParser.ColorSizeBytes, 4);\r\n\r\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\r\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\r\n            quat.normalize();\r\n\r\n            splatArray.addSplatFromComonents(inCenter[0], inCenter[1], inCenter[2], inScale[0], inScale[1], inScale[2],\r\n                                             quat.w, quat.x, quat.y, quat.z, inColor[0], inColor[1], inColor[2], inColor[3]);\r\n        }\r\n\r\n        return splatArray;\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { SplatBuffer } from '../SplatBuffer.js';\r\nimport { SplatBufferGenerator } from '../SplatBufferGenerator.js';\r\nimport { SplatParser } from './SplatParser.js';\r\nimport { fetchWithProgress, delayedExecute } from '../../Util.js';\r\nimport { LoaderStatus } from '../LoaderStatus.js';\r\nimport { Constants } from '../../Constants.js';\r\n\r\nexport class SplatLoader {\r\n\r\n    static loadFromURL(fileName, onProgress, streamLoadData, onStreamedSectionProgress, minimumAlpha, compressionLevel,\r\n                       optimizeSplatData, sectionSize, sceneCenter, blockSize, bucketSize) {\r\n\r\n        const splatDataOffsetBytes = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes;\r\n        const streamSectionSizeBytes = Constants.StreamingSectionSize;\r\n        const sectionCount = 1;\r\n\r\n        let streamBufferIn;\r\n        let streamBufferOut;\r\n        let streamSplatBuffer;\r\n        let maxSplatCount = 0;\r\n        let splatCount = 0;\r\n\r\n        let streamLoadCompleteResolver;\r\n        let streamLoadPromise = new Promise((resolve) => {\r\n            streamLoadCompleteResolver = resolve;\r\n        });\r\n\r\n        let numBytesStreamed = 0;\r\n        let numBytesLoaded = 0;\r\n        let chunks = [];\r\n\r\n        const localOnProgress = (percent, percentStr, chunk, fileSize) => {\r\n            const loadComplete = percent >= 100;\r\n            if (!fileSize) streamLoadData = false;\r\n            if (streamLoadData) {\r\n                if (!streamBufferIn) {\r\n                    maxSplatCount = fileSize / SplatParser.RowSizeBytes;\r\n                    streamBufferIn = new ArrayBuffer(fileSize);\r\n                    const splatBufferSizeBytes = splatDataOffsetBytes + SplatBuffer.CompressionLevels[0].BytesPerSplat * maxSplatCount;\r\n                    streamBufferOut = new ArrayBuffer(splatBufferSizeBytes);\r\n                    SplatBuffer.writeHeaderToBuffer({\r\n                        versionMajor: SplatBuffer.CurrentMajorVersion,\r\n                        versionMinor: SplatBuffer.CurrentMinorVersion,\r\n                        maxSectionCount: sectionCount,\r\n                        sectionCount: sectionCount,\r\n                        maxSplatCount: maxSplatCount,\r\n                        splatCount: splatCount,\r\n                        compressionLevel: 0,\r\n                        sceneCenter: new THREE.Vector3()\r\n                    }, streamBufferOut);\r\n                }\r\n\r\n                if (chunk) {\r\n                    chunks.push(chunk);\r\n                    new Uint8Array(streamBufferIn, numBytesLoaded, chunk.byteLength).set(new Uint8Array(chunk));\r\n                    numBytesLoaded += chunk.byteLength;\r\n\r\n                    const bytesLoadedSinceLastSection = numBytesLoaded - numBytesStreamed;\r\n                    if (bytesLoadedSinceLastSection > streamSectionSizeBytes || loadComplete) {\r\n                        const bytesToUpdate = loadComplete ? bytesLoadedSinceLastSection : streamSectionSizeBytes;\r\n                        const addedSplatCount = bytesToUpdate / SplatParser.RowSizeBytes;\r\n                        const newSplatCount = splatCount + addedSplatCount;\r\n                        SplatParser.parseToUncompressedSplatBufferSection(splatCount, newSplatCount - 1, streamBufferIn, 0,\r\n                                                                          streamBufferOut, splatDataOffsetBytes);\r\n                        splatCount = newSplatCount;\r\n                        if (!streamSplatBuffer) {\r\n                            SplatBuffer.writeSectionHeaderToBuffer({\r\n                                maxSplatCount: maxSplatCount,\r\n                                splatCount: splatCount,\r\n                                bucketSize: 0,\r\n                                bucketCount: 0,\r\n                                bucketBlockSize: 0,\r\n                                compressionScaleRange: 0,\r\n                                storageSizeBytes: 0,\r\n                                fullBucketCount: 0,\r\n                                partiallyFilledBucketCount: 0\r\n                            }, 0, streamBufferOut, SplatBuffer.HeaderSizeBytes);\r\n                            streamSplatBuffer = new SplatBuffer(streamBufferOut, false);\r\n                        }\r\n                        streamSplatBuffer.updateLoadedCounts(1, splatCount);\r\n                        onStreamedSectionProgress(streamSplatBuffer, loadComplete);\r\n                        numBytesStreamed += streamSectionSizeBytes;\r\n                    }\r\n                }\r\n                if (loadComplete) {\r\n                    streamLoadCompleteResolver(streamSplatBuffer);\r\n                }\r\n            }\r\n            if (onProgress) onProgress(percent, percentStr, LoaderStatus.Downloading);\r\n            return streamLoadData;\r\n        };\r\n\r\n        return fetchWithProgress(fileName, localOnProgress, true).then((fullBuffer) => {\r\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\r\n            const loadPromise = streamLoadData ? streamLoadPromise :\r\n                SplatLoader.loadFromFileData(fullBuffer, minimumAlpha, compressionLevel, optimizeSplatData,\r\n                                             sectionSize, sceneCenter, blockSize, bucketSize);\r\n            return loadPromise.then((splatBuffer) => {\r\n                if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\r\n                return splatBuffer;\r\n            });\r\n        });\r\n    }\r\n\r\n    static loadFromFileData(splatFileData, minimumAlpha, compressionLevel, optimizeSplatData,\r\n                            sectionSize, sceneCenter, blockSize, bucketSize) {\r\n        return delayedExecute(() => {\r\n            const splatArray = SplatParser.parseStandardSplatToUncompressedSplatArray(splatFileData);\r\n            if (optimizeSplatData) {\r\n                const splatBufferGenerator = SplatBufferGenerator.getStandardGenerator(minimumAlpha, compressionLevel,\r\n                                                                                       sectionSize, sceneCenter, blockSize,\r\n                                                                                       bucketSize);\r\n                return splatBufferGenerator.generateFromUncompressedSplatArray(splatArray);\r\n            } else {\r\n                return SplatBuffer.generateFromUncompressedSplatArrays([splatArray], minimumAlpha, 0, new THREE.Vector3());\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n","import { SplatBuffer } from '../SplatBuffer.js';\r\nimport { fetchWithProgress, delayedExecute } from '../../Util.js';\r\nimport { LoaderStatus } from '../LoaderStatus.js';\r\nimport { Constants } from '../../Constants.js';\r\n\r\nexport class KSplatLoader {\r\n\r\n   static checkVersion(buffer) {\r\n        const minVersionMajor = SplatBuffer.CurrentMajorVersion;\r\n        const minVersionMinor = SplatBuffer.CurrentMinorVersion;\r\n        const header = SplatBuffer.parseHeader(buffer);\r\n        if (header.versionMajor === minVersionMajor &&\r\n            header.versionMinor >= minVersionMinor ||\r\n            header.versionMajor > minVersionMajor) {\r\n           return true;\r\n        } else {\r\n            throw new Error(`KSplat version not supported: v${header.versionMajor}.${header.versionMinor}. ` +\r\n                            `Minimum required: v${minVersionMajor}.${minVersionMinor}`);\r\n        }\r\n    };\r\n\r\n    static loadFromURL(fileName, onProgress, streamLoadData, onSectionBuilt) {\r\n        let streamBuffer;\r\n        let streamSplatBuffer;\r\n\r\n        let headerBuffer;\r\n        let header;\r\n        let headerLoaded = false;\r\n        let headerLoading = false;\r\n\r\n        let sectionHeadersBuffer;\r\n        let sectionHeaders = [];\r\n        let sectionHeadersLoaded = false;\r\n        let sectionHeadersLoading = false;\r\n\r\n        let numBytesLoaded = 0;\r\n        let numBytesStreamed = 0;\r\n        let streamSectionSizeBytes = Constants.StreamingSectionSize;\r\n        let totalBytesToDownload = 0;\r\n\r\n        let loadComplete = false;\r\n\r\n        let chunks = [];\r\n\r\n        let streamLoadCompleteResolver;\r\n        let streamLoadPromise = new Promise((resolve) => {\r\n            streamLoadCompleteResolver = resolve;\r\n        });\r\n\r\n        const checkAndLoadHeader = () => {\r\n            if (!headerLoaded && !headerLoading && numBytesLoaded >= SplatBuffer.HeaderSizeBytes) {\r\n                headerLoading = true;\r\n                const headerAssemblyPromise = new Blob(chunks).arrayBuffer();\r\n                headerAssemblyPromise.then((bufferData) => {\r\n                    headerBuffer = new ArrayBuffer(SplatBuffer.HeaderSizeBytes);\r\n                    new Uint8Array(headerBuffer).set(new Uint8Array(bufferData, 0, SplatBuffer.HeaderSizeBytes));\r\n                    KSplatLoader.checkVersion(headerBuffer);\r\n                    headerLoading = false;\r\n                    headerLoaded = true;\r\n                    header = SplatBuffer.parseHeader(headerBuffer);\r\n                    window.setTimeout(() => {\r\n                        checkAndLoadSectionHeaders();\r\n                    }, 1);\r\n                });\r\n            }\r\n        };\r\n\r\n        let queuedCheckAndLoadSectionsCount = 0;\r\n        const queueCheckAndLoadSections = () => {\r\n            if (queuedCheckAndLoadSectionsCount === 0) {\r\n                queuedCheckAndLoadSectionsCount++;\r\n                window.setTimeout(() => {\r\n                    queuedCheckAndLoadSectionsCount--;\r\n                    checkAndLoadSections(true);\r\n                }, 1);\r\n            }\r\n        };\r\n\r\n        const checkAndLoadSectionHeaders = () => {\r\n            const performLoad = () => {\r\n                sectionHeadersLoading = true;\r\n                const sectionHeadersAssemblyPromise = new Blob(chunks).arrayBuffer();\r\n                sectionHeadersAssemblyPromise.then((bufferData) => {\r\n                    sectionHeadersLoading = false;\r\n                    sectionHeadersLoaded = true;\r\n                    sectionHeadersBuffer = new ArrayBuffer(header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes);\r\n                    new Uint8Array(sectionHeadersBuffer).set(new Uint8Array(bufferData, SplatBuffer.HeaderSizeBytes,\r\n                                                                            header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes));\r\n                    sectionHeaders = SplatBuffer.parseSectionHeaders(header, sectionHeadersBuffer, 0, false);\r\n                    let totalSectionStorageStorageByes = 0;\r\n                    for (let i = 0; i < header.maxSectionCount; i++) {\r\n                        totalSectionStorageStorageByes += sectionHeaders[i].storageSizeBytes;\r\n                    }\r\n                    const totalStorageSizeBytes = SplatBuffer.HeaderSizeBytes + header.maxSectionCount *\r\n                                                  SplatBuffer.SectionHeaderSizeBytes + totalSectionStorageStorageByes;\r\n                    if (!streamBuffer) {\r\n                        streamBuffer = new ArrayBuffer(totalStorageSizeBytes);\r\n                        let offset = 0;\r\n                        for (let i = 0; i < chunks.length; i++) {\r\n                            const chunk = chunks[i];\r\n                            new Uint8Array(streamBuffer, offset, chunk.byteLength).set(new Uint8Array(chunk));\r\n                            offset += chunk.byteLength;\r\n                        }\r\n                    }\r\n\r\n                    totalBytesToDownload = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount;\r\n                    for (let i = 0; i <= sectionHeaders.length && i < header.maxSectionCount; i++) {\r\n                        totalBytesToDownload += sectionHeaders[i].storageSizeBytes;\r\n                    }\r\n\r\n                    queueCheckAndLoadSections();\r\n                });\r\n            };\r\n\r\n            if (!sectionHeadersLoading && !sectionHeadersLoaded && headerLoaded &&\r\n                numBytesLoaded >= SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount) {\r\n                performLoad();\r\n            }\r\n        };\r\n\r\n        const checkAndLoadSections = () => {\r\n            if (sectionHeadersLoaded) {\r\n\r\n                if (loadComplete) return;\r\n\r\n                loadComplete = numBytesLoaded >= totalBytesToDownload;\r\n\r\n                const bytesLoadedSinceLastSection = numBytesLoaded - numBytesStreamed;\r\n                if (bytesLoadedSinceLastSection > streamSectionSizeBytes || loadComplete) {\r\n\r\n                    numBytesStreamed = numBytesLoaded;\r\n\r\n                    if (!streamSplatBuffer) streamSplatBuffer = new SplatBuffer(streamBuffer, false);\r\n\r\n                    const baseDataOffset = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount;\r\n                    let sectionBase = 0;\r\n                    let reachedSections = 0;\r\n                    let loadedSplatCount = 0;\r\n                    for (let i = 0; i < header.maxSectionCount; i++) {\r\n                        const sectionHeader = sectionHeaders[i];\r\n                        const bucketsDataOffset = sectionBase + sectionHeader.partiallyFilledBucketCount * 4 +\r\n                                                  sectionHeader.bucketStorageSizeBytes * sectionHeader.bucketCount;\r\n                        const bytesRequiredToReachSectionSplatData = baseDataOffset + bucketsDataOffset;\r\n                        if (numBytesLoaded >= bytesRequiredToReachSectionSplatData) {\r\n                            reachedSections++;\r\n                            const bytesPastSSectionSplatDataStart = numBytesLoaded - bytesRequiredToReachSectionSplatData;\r\n                            const bytesPerSplat = SplatBuffer.CompressionLevels[header.compressionLevel].BytesPerSplat;\r\n                            let loadedSplatsForSection = Math.floor(bytesPastSSectionSplatDataStart / bytesPerSplat);\r\n                            loadedSplatsForSection = Math.min(loadedSplatsForSection, sectionHeader.maxSplatCount);\r\n                            loadedSplatCount += loadedSplatsForSection;\r\n                            streamSplatBuffer.updateLoadedCounts(reachedSections, loadedSplatCount);\r\n                            streamSplatBuffer.updateSectionLoadedCounts(i, loadedSplatsForSection);\r\n                        } else {\r\n                            break;\r\n                        }\r\n                        sectionBase += sectionHeader.storageSizeBytes;\r\n                    }\r\n\r\n                    onSectionBuilt(streamSplatBuffer, loadComplete);\r\n\r\n                    if (loadComplete) {\r\n                        streamLoadCompleteResolver(streamSplatBuffer);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        const localOnProgress = (percent, percentStr, chunk) => {\r\n            if (chunk) {\r\n                chunks.push(chunk);\r\n                if (streamBuffer) {\r\n                    new Uint8Array(streamBuffer, numBytesLoaded, chunk.byteLength).set(new Uint8Array(chunk));\r\n                }\r\n                numBytesLoaded += chunk.byteLength;\r\n            }\r\n            if (streamLoadData) {\r\n                checkAndLoadHeader();\r\n                checkAndLoadSectionHeaders();\r\n                checkAndLoadSections();\r\n            }\r\n            if (onProgress) onProgress(percent, percentStr, LoaderStatus.Downloading);\r\n        };\r\n\r\n        return fetchWithProgress(fileName, localOnProgress, !streamLoadData).then((fullBuffer) => {\r\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\r\n            const loadPromise = streamLoadData ? streamLoadPromise : KSplatLoader.loadFromFileData(fullBuffer);\r\n            return loadPromise.then((splatBuffer) => {\r\n                if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\r\n                return splatBuffer;\r\n            });\r\n        });\r\n    }\r\n\r\n    static loadFromFileData(fileData) {\r\n        return delayedExecute(() => {\r\n            KSplatLoader.checkVersion(fileData);\r\n            return new SplatBuffer(fileData);\r\n        });\r\n    }\r\n\r\n    static downloadFile = function() {\r\n\r\n        let downLoadLink;\r\n\r\n        return function(splatBuffer, fileName) {\r\n            const blob = new Blob([splatBuffer.bufferData], {\r\n                type: 'application/octet-stream',\r\n            });\r\n\r\n            if (!downLoadLink) {\r\n                downLoadLink = document.createElement('a');\r\n                document.body.appendChild(downLoadLink);\r\n            }\r\n            downLoadLink.download = fileName;\r\n            downLoadLink.href = URL.createObjectURL(blob);\r\n            downLoadLink.click();\r\n        };\r\n\r\n    }();\r\n\r\n}\r\n","export const SceneFormat = {\r\n    'Splat': 0,\r\n    'KSplat': 1,\r\n    'Ply': 2\r\n};\r\n","import { SceneFormat } from './SceneFormat.js';\r\n\r\nexport const sceneFormatFromPath = (path) => {\r\n    if (path.endsWith('.ply')) return SceneFormat.Ply;\r\n    else if (path.endsWith('.splat')) return SceneFormat.Splat;\r\n    else if (path.endsWith('.ksplat')) return SceneFormat.KSplat;\r\n    return null;\r\n};\r\n","/*\r\nCopyright © 2010-2024 three.js authors & Mark Kellogg\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n*/\r\n\r\nimport {\r\n    EventDispatcher,\r\n    MOUSE,\r\n    Quaternion,\r\n    Spherical,\r\n    TOUCH,\r\n    Vector2,\r\n    Vector3,\r\n    Plane,\r\n    Ray,\r\n    MathUtils\r\n} from 'three';\r\n\r\n// OrbitControls performs orbiting, dollying (zooming), and panning.\r\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\r\n//\r\n//    Orbit - left mouse / touch: one-finger move\r\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\r\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\r\n\r\nconst _changeEvent = { type: 'change' };\r\nconst _startEvent = { type: 'start' };\r\nconst _endEvent = { type: 'end' };\r\nconst _ray = new Ray();\r\nconst _plane = new Plane();\r\nconst TILT_LIMIT = Math.cos( 70 * MathUtils.DEG2RAD );\r\n\r\nclass OrbitControls extends EventDispatcher {\r\n\r\n    constructor( object, domElement ) {\r\n\r\n        super();\r\n\r\n        this.object = object;\r\n        this.domElement = domElement;\r\n        this.domElement.style.touchAction = 'none'; // disable touch scroll\r\n\r\n        // Set to false to disable this control\r\n        this.enabled = true;\r\n\r\n        // \"target\" sets the location of focus, where the object orbits around\r\n        this.target = new Vector3();\r\n\r\n        // How far you can dolly in and out ( PerspectiveCamera only )\r\n        this.minDistance = 0;\r\n        this.maxDistance = Infinity;\r\n\r\n        // How far you can zoom in and out ( OrthographicCamera only )\r\n        this.minZoom = 0;\r\n        this.maxZoom = Infinity;\r\n\r\n        // How far you can orbit vertically, upper and lower limits.\r\n        // Range is 0 to Math.PI radians.\r\n        this.minPolarAngle = 0; // radians\r\n        this.maxPolarAngle = Math.PI; // radians\r\n\r\n        // How far you can orbit horizontally, upper and lower limits.\r\n        // If set, the interval [min, max] must be a sub-interval of [- 2 PI, 2 PI], with ( max - min < 2 PI )\r\n        this.minAzimuthAngle = - Infinity; // radians\r\n        this.maxAzimuthAngle = Infinity; // radians\r\n\r\n        // Set to true to enable damping (inertia)\r\n        // If damping is enabled, you must call controls.update() in your animation loop\r\n        this.enableDamping = false;\r\n        this.dampingFactor = 0.05;\r\n\r\n        // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\r\n        // Set to false to disable zooming\r\n        this.enableZoom = true;\r\n        this.zoomSpeed = 1.0;\r\n\r\n        // Set to false to disable rotating\r\n        this.enableRotate = true;\r\n        this.rotateSpeed = 1.0;\r\n\r\n        // Set to false to disable panning\r\n        this.enablePan = true;\r\n        this.panSpeed = 1.0;\r\n        this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\r\n        this.keyPanSpeed = 7.0; // pixels moved per arrow key push\r\n        this.zoomToCursor = false;\r\n\r\n        // Set to true to automatically rotate around the target\r\n        // If auto-rotate is enabled, you must call controls.update() in your animation loop\r\n        this.autoRotate = false;\r\n        this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\r\n\r\n        // The four arrow keys\r\n        this.keys = { LEFT: 'KeyA', UP: 'KeyW', RIGHT: 'KeyD', BOTTOM: 'KeyS' };\r\n\r\n        // Mouse buttons\r\n        this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\r\n\r\n        // Touch fingers\r\n        this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\r\n\r\n        // for reset\r\n        this.target0 = this.target.clone();\r\n        this.position0 = this.object.position.clone();\r\n        this.zoom0 = this.object.zoom;\r\n\r\n        // the target DOM element for key events\r\n        this._domElementKeyEvents = null;\r\n\r\n        //\r\n        // public methods\r\n        //\r\n\r\n        this.getPolarAngle = function() {\r\n\r\n            return spherical.phi;\r\n\r\n        };\r\n\r\n        this.getAzimuthalAngle = function() {\r\n\r\n            return spherical.theta;\r\n\r\n        };\r\n\r\n        this.getDistance = function() {\r\n\r\n            return this.object.position.distanceTo( this.target );\r\n\r\n        };\r\n\r\n        this.listenToKeyEvents = function( domElement ) {\r\n\r\n            domElement.addEventListener( 'keydown', onKeyDown );\r\n            this._domElementKeyEvents = domElement;\r\n\r\n        };\r\n\r\n        this.stopListenToKeyEvents = function() {\r\n\r\n            this._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\r\n            this._domElementKeyEvents = null;\r\n\r\n        };\r\n\r\n        this.saveState = function() {\r\n\r\n            scope.target0.copy( scope.target );\r\n            scope.position0.copy( scope.object.position );\r\n            scope.zoom0 = scope.object.zoom;\r\n\r\n        };\r\n\r\n        this.reset = function() {\r\n\r\n            scope.target.copy( scope.target0 );\r\n            scope.object.position.copy( scope.position0 );\r\n            scope.object.zoom = scope.zoom0;\r\n\r\n            scope.object.updateProjectionMatrix();\r\n            scope.dispatchEvent( _changeEvent );\r\n\r\n            scope.update();\r\n\r\n            state = STATE.NONE;\r\n\r\n        };\r\n\r\n        // this method is exposed, but perhaps it would be better if we can make it private...\r\n        this.update = function() {\r\n\r\n            const offset = new Vector3();\r\n\r\n            // so camera.up is the orbit axis\r\n            const quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\r\n            const quatInverse = quat.clone().invert();\r\n\r\n            const lastPosition = new Vector3();\r\n            const lastQuaternion = new Quaternion();\r\n            const lastTargetPosition = new Vector3();\r\n\r\n            const twoPI = 2 * Math.PI;\r\n\r\n            return function update() {\r\n\r\n                quat.setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\r\n                quatInverse.copy(quat).invert();\r\n\r\n                const position = scope.object.position;\r\n\r\n                offset.copy( position ).sub( scope.target );\r\n\r\n                // rotate offset to \"y-axis-is-up\" space\r\n                offset.applyQuaternion( quat );\r\n\r\n                // angle from z-axis around y-axis\r\n                spherical.setFromVector3( offset );\r\n\r\n                if ( scope.autoRotate && state === STATE.NONE ) {\r\n\r\n                    rotateLeft( getAutoRotationAngle() );\r\n\r\n                }\r\n\r\n                if ( scope.enableDamping ) {\r\n\r\n                    spherical.theta += sphericalDelta.theta * scope.dampingFactor;\r\n                    spherical.phi += sphericalDelta.phi * scope.dampingFactor;\r\n\r\n                } else {\r\n\r\n                    spherical.theta += sphericalDelta.theta;\r\n                    spherical.phi += sphericalDelta.phi;\r\n\r\n                }\r\n\r\n                // restrict theta to be between desired limits\r\n\r\n                let min = scope.minAzimuthAngle;\r\n                let max = scope.maxAzimuthAngle;\r\n\r\n                if ( isFinite( min ) && isFinite( max ) ) {\r\n\r\n                    if ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\r\n\r\n                    if ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\r\n\r\n                    if ( min <= max ) {\r\n\r\n                        spherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\r\n\r\n                    } else {\r\n\r\n                        spherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\r\n                            Math.max( min, spherical.theta ) :\r\n                            Math.min( max, spherical.theta );\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                // restrict phi to be between desired limits\r\n                spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\r\n\r\n                spherical.makeSafe();\r\n\r\n\r\n                // move target to panned location\r\n\r\n                if ( scope.enableDamping === true ) {\r\n\r\n                    scope.target.addScaledVector( panOffset, scope.dampingFactor );\r\n\r\n                } else {\r\n\r\n                    scope.target.add( panOffset );\r\n\r\n                }\r\n\r\n                // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\r\n                // we adjust zoom later in these cases\r\n                if ( scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera ) {\r\n\r\n                    spherical.radius = clampDistance( spherical.radius );\r\n\r\n                } else {\r\n\r\n                    spherical.radius = clampDistance( spherical.radius * scale );\r\n\r\n                }\r\n\r\n\r\n                offset.setFromSpherical( spherical );\r\n\r\n                // rotate offset back to \"camera-up-vector-is-up\" space\r\n                offset.applyQuaternion( quatInverse );\r\n\r\n                position.copy( scope.target ).add( offset );\r\n\r\n                scope.object.lookAt( scope.target );\r\n\r\n                if ( scope.enableDamping === true ) {\r\n\r\n                    sphericalDelta.theta *= ( 1 - scope.dampingFactor );\r\n                    sphericalDelta.phi *= ( 1 - scope.dampingFactor );\r\n\r\n                    panOffset.multiplyScalar( 1 - scope.dampingFactor );\r\n\r\n                } else {\r\n\r\n                    sphericalDelta.set( 0, 0, 0 );\r\n\r\n                    panOffset.set( 0, 0, 0 );\r\n\r\n                }\r\n\r\n                // adjust camera position\r\n                let zoomChanged = false;\r\n                if ( scope.zoomToCursor && performCursorZoom ) {\r\n\r\n                    let newRadius = null;\r\n                    if ( scope.object.isPerspectiveCamera ) {\r\n\r\n                        // move the camera down the pointer ray\r\n                        // this method avoids floating point error\r\n                        const prevRadius = offset.length();\r\n                        newRadius = clampDistance( prevRadius * scale );\r\n\r\n                        const radiusDelta = prevRadius - newRadius;\r\n                        scope.object.position.addScaledVector( dollyDirection, radiusDelta );\r\n                        scope.object.updateMatrixWorld();\r\n\r\n                    } else if ( scope.object.isOrthographicCamera ) {\r\n\r\n                        // adjust the ortho camera position based on zoom changes\r\n                        const mouseBefore = new Vector3( mouse.x, mouse.y, 0 );\r\n                        mouseBefore.unproject( scope.object );\r\n\r\n                        scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\r\n                        scope.object.updateProjectionMatrix();\r\n                        zoomChanged = true;\r\n\r\n                        const mouseAfter = new Vector3( mouse.x, mouse.y, 0 );\r\n                        mouseAfter.unproject( scope.object );\r\n\r\n                        scope.object.position.sub( mouseAfter ).add( mouseBefore );\r\n                        scope.object.updateMatrixWorld();\r\n\r\n                        newRadius = offset.length();\r\n\r\n                    } else {\r\n\r\n                        console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.' );\r\n                        scope.zoomToCursor = false;\r\n\r\n                    }\r\n\r\n                    // handle the placement of the target\r\n                    if ( newRadius !== null ) {\r\n\r\n                        if ( this.screenSpacePanning ) {\r\n\r\n                            // position the orbit target in front of the new camera position\r\n                            scope.target.set( 0, 0, - 1 )\r\n                                .transformDirection( scope.object.matrix )\r\n                                .multiplyScalar( newRadius )\r\n                                .add( scope.object.position );\r\n\r\n                        } else {\r\n\r\n                            // get the ray and translation plane to compute target\r\n                            _ray.origin.copy( scope.object.position );\r\n                            _ray.direction.set( 0, 0, - 1 ).transformDirection( scope.object.matrix );\r\n\r\n                            // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\r\n                            // extremely large values\r\n                            if ( Math.abs( scope.object.up.dot( _ray.direction ) ) < TILT_LIMIT ) {\r\n\r\n                                object.lookAt( scope.target );\r\n\r\n                            } else {\r\n\r\n                                _plane.setFromNormalAndCoplanarPoint( scope.object.up, scope.target );\r\n                                _ray.intersectPlane( _plane, scope.target );\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                } else if ( scope.object.isOrthographicCamera ) {\r\n\r\n                    scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\r\n                    scope.object.updateProjectionMatrix();\r\n                    zoomChanged = true;\r\n\r\n                }\r\n\r\n                scale = 1;\r\n                performCursorZoom = false;\r\n\r\n                // update condition is:\r\n                // min(camera displacement, camera rotation in radians)^2 > EPS\r\n                // using small-angle approximation cos(x/2) = 1 - x^2 / 8\r\n\r\n                if ( zoomChanged ||\r\n                    lastPosition.distanceToSquared( scope.object.position ) > EPS ||\r\n                    8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ||\r\n                    lastTargetPosition.distanceToSquared( scope.target ) > 0 ) {\r\n\r\n                    scope.dispatchEvent( _changeEvent );\r\n\r\n                    lastPosition.copy( scope.object.position );\r\n                    lastQuaternion.copy( scope.object.quaternion );\r\n                    lastTargetPosition.copy( scope.target );\r\n\r\n                    zoomChanged = false;\r\n\r\n                    return true;\r\n\r\n                }\r\n\r\n                return false;\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        this.dispose = function() {\r\n\r\n            scope.domElement.removeEventListener( 'contextmenu', onContextMenu );\r\n\r\n            scope.domElement.removeEventListener( 'pointerdown', onPointerDown );\r\n            scope.domElement.removeEventListener( 'pointercancel', onPointerUp );\r\n            scope.domElement.removeEventListener( 'wheel', onMouseWheel );\r\n\r\n            scope.domElement.removeEventListener( 'pointermove', onPointerMove );\r\n            scope.domElement.removeEventListener( 'pointerup', onPointerUp );\r\n\r\n\r\n            if ( scope._domElementKeyEvents !== null ) {\r\n\r\n                scope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\r\n                scope._domElementKeyEvents = null;\r\n\r\n            }\r\n\r\n        };\r\n\r\n        //\r\n        // internals\r\n        //\r\n\r\n        const scope = this;\r\n\r\n        const STATE = {\r\n            NONE: - 1,\r\n            ROTATE: 0,\r\n            DOLLY: 1,\r\n            PAN: 2,\r\n            TOUCH_ROTATE: 3,\r\n            TOUCH_PAN: 4,\r\n            TOUCH_DOLLY_PAN: 5,\r\n            TOUCH_DOLLY_ROTATE: 6\r\n        };\r\n\r\n        let state = STATE.NONE;\r\n\r\n        const EPS = 0.000001;\r\n\r\n        // current position in spherical coordinates\r\n        const spherical = new Spherical();\r\n        const sphericalDelta = new Spherical();\r\n\r\n        let scale = 1;\r\n        const panOffset = new Vector3();\r\n\r\n        const rotateStart = new Vector2();\r\n        const rotateEnd = new Vector2();\r\n        const rotateDelta = new Vector2();\r\n\r\n        const panStart = new Vector2();\r\n        const panEnd = new Vector2();\r\n        const panDelta = new Vector2();\r\n\r\n        const dollyStart = new Vector2();\r\n        const dollyEnd = new Vector2();\r\n        const dollyDelta = new Vector2();\r\n\r\n        const dollyDirection = new Vector3();\r\n        const mouse = new Vector2();\r\n        let performCursorZoom = false;\r\n\r\n        const pointers = [];\r\n        const pointerPositions = {};\r\n\r\n        function getAutoRotationAngle() {\r\n\r\n            return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\r\n\r\n        }\r\n\r\n        function getZoomScale() {\r\n\r\n            return Math.pow( 0.95, scope.zoomSpeed );\r\n\r\n        }\r\n\r\n        function rotateLeft( angle ) {\r\n\r\n            sphericalDelta.theta -= angle;\r\n\r\n        }\r\n\r\n        function rotateUp( angle ) {\r\n\r\n            sphericalDelta.phi -= angle;\r\n\r\n        }\r\n\r\n        const panLeft = function() {\r\n\r\n            const v = new Vector3();\r\n\r\n            return function panLeft( distance, objectMatrix ) {\r\n\r\n                v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\r\n                v.multiplyScalar( - distance );\r\n\r\n                panOffset.add( v );\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        const panUp = function() {\r\n\r\n            const v = new Vector3();\r\n\r\n            return function panUp( distance, objectMatrix ) {\r\n\r\n                if ( scope.screenSpacePanning === true ) {\r\n\r\n                    v.setFromMatrixColumn( objectMatrix, 1 );\r\n\r\n                } else {\r\n\r\n                    v.setFromMatrixColumn( objectMatrix, 0 );\r\n                    v.crossVectors( scope.object.up, v );\r\n\r\n                }\r\n\r\n                v.multiplyScalar( distance );\r\n\r\n                panOffset.add( v );\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        // deltaX and deltaY are in pixels; right and down are positive\r\n        const pan = function() {\r\n\r\n            const offset = new Vector3();\r\n\r\n            return function pan( deltaX, deltaY ) {\r\n\r\n                const element = scope.domElement;\r\n\r\n                if ( scope.object.isPerspectiveCamera ) {\r\n\r\n                    // perspective\r\n                    const position = scope.object.position;\r\n                    offset.copy( position ).sub( scope.target );\r\n                    let targetDistance = offset.length();\r\n\r\n                    // half of the fov is center to top of screen\r\n                    targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\r\n\r\n                    // we use only clientHeight here so aspect ratio does not distort speed\r\n                    panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\r\n                    panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\r\n\r\n                } else if ( scope.object.isOrthographicCamera ) {\r\n\r\n                    // orthographic\r\n                    panLeft( deltaX * ( scope.object.right - scope.object.left ) /\r\n                                        scope.object.zoom / element.clientWidth, scope.object.matrix );\r\n                    panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom /\r\n                                      element.clientHeight, scope.object.matrix );\r\n\r\n                } else {\r\n\r\n                    // camera neither orthographic nor perspective\r\n                    console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\r\n                    scope.enablePan = false;\r\n\r\n                }\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        function dollyOut( dollyScale ) {\r\n\r\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\r\n\r\n                scale /= dollyScale;\r\n\r\n            } else {\r\n\r\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\r\n                scope.enableZoom = false;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function dollyIn( dollyScale ) {\r\n\r\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\r\n\r\n                scale *= dollyScale;\r\n\r\n            } else {\r\n\r\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\r\n                scope.enableZoom = false;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function updateMouseParameters( event ) {\r\n\r\n            if ( ! scope.zoomToCursor ) {\r\n\r\n                return;\r\n\r\n            }\r\n\r\n            performCursorZoom = true;\r\n\r\n            const rect = scope.domElement.getBoundingClientRect();\r\n            const x = event.clientX - rect.left;\r\n            const y = event.clientY - rect.top;\r\n            const w = rect.width;\r\n            const h = rect.height;\r\n\r\n            mouse.x = ( x / w ) * 2 - 1;\r\n            mouse.y = - ( y / h ) * 2 + 1;\r\n\r\n            dollyDirection.set( mouse.x, mouse.y, 1 ).unproject( object ).sub( object.position ).normalize();\r\n\r\n        }\r\n\r\n        function clampDistance( dist ) {\r\n\r\n            return Math.max( scope.minDistance, Math.min( scope.maxDistance, dist ) );\r\n\r\n        }\r\n\r\n        //\r\n        // event callbacks - update the object state\r\n        //\r\n\r\n        function handleMouseDownRotate( event ) {\r\n\r\n            rotateStart.set( event.clientX, event.clientY );\r\n\r\n        }\r\n\r\n        function handleMouseDownDolly( event ) {\r\n\r\n            updateMouseParameters( event );\r\n            dollyStart.set( event.clientX, event.clientY );\r\n\r\n        }\r\n\r\n        function handleMouseDownPan( event ) {\r\n\r\n            panStart.set( event.clientX, event.clientY );\r\n\r\n        }\r\n\r\n        function handleMouseMoveRotate( event ) {\r\n\r\n            rotateEnd.set( event.clientX, event.clientY );\r\n\r\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\r\n\r\n            const element = scope.domElement;\r\n\r\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\r\n\r\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\r\n\r\n            rotateStart.copy( rotateEnd );\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleMouseMoveDolly( event ) {\r\n\r\n            dollyEnd.set( event.clientX, event.clientY );\r\n\r\n            dollyDelta.subVectors( dollyEnd, dollyStart );\r\n\r\n            if ( dollyDelta.y > 0 ) {\r\n\r\n                dollyOut( getZoomScale() );\r\n\r\n            } else if ( dollyDelta.y < 0 ) {\r\n\r\n                dollyIn( getZoomScale() );\r\n\r\n            }\r\n\r\n            dollyStart.copy( dollyEnd );\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleMouseMovePan( event ) {\r\n\r\n            panEnd.set( event.clientX, event.clientY );\r\n\r\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\r\n\r\n            pan( panDelta.x, panDelta.y );\r\n\r\n            panStart.copy( panEnd );\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleMouseWheel( event ) {\r\n\r\n            updateMouseParameters( event );\r\n\r\n            if ( event.deltaY < 0 ) {\r\n\r\n                dollyIn( getZoomScale() );\r\n\r\n            } else if ( event.deltaY > 0 ) {\r\n\r\n                dollyOut( getZoomScale() );\r\n\r\n            }\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleKeyDown( event ) {\r\n\r\n            let needsUpdate = false;\r\n\r\n            switch ( event.code ) {\r\n\r\n                case scope.keys.UP:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateUp( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( 0, scope.keyPanSpeed );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n                case scope.keys.BOTTOM:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateUp( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( 0, - scope.keyPanSpeed );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n                case scope.keys.LEFT:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateLeft( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( scope.keyPanSpeed, 0 );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n                case scope.keys.RIGHT:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateLeft( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( - scope.keyPanSpeed, 0 );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n            }\r\n\r\n            if ( needsUpdate ) {\r\n\r\n                // prevent the browser from scrolling on cursor keys\r\n                event.preventDefault();\r\n\r\n                scope.update();\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n        function handleTouchStartRotate() {\r\n\r\n            if ( pointers.length === 1 ) {\r\n\r\n                rotateStart.set( pointers[0].pageX, pointers[0].pageY );\r\n\r\n            } else {\r\n\r\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\r\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\r\n\r\n                rotateStart.set( x, y );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function handleTouchStartPan() {\r\n\r\n            if ( pointers.length === 1 ) {\r\n\r\n                panStart.set( pointers[0].pageX, pointers[0].pageY );\r\n\r\n            } else {\r\n\r\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\r\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\r\n\r\n                panStart.set( x, y );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function handleTouchStartDolly() {\r\n\r\n            const dx = pointers[0].pageX - pointers[1].pageX;\r\n            const dy = pointers[0].pageY - pointers[1].pageY;\r\n\r\n            const distance = Math.sqrt( dx * dx + dy * dy );\r\n\r\n            dollyStart.set( 0, distance );\r\n\r\n        }\r\n\r\n        function handleTouchStartDollyPan() {\r\n\r\n            if ( scope.enableZoom ) handleTouchStartDolly();\r\n\r\n            if ( scope.enablePan ) handleTouchStartPan();\r\n\r\n        }\r\n\r\n        function handleTouchStartDollyRotate() {\r\n\r\n            if ( scope.enableZoom ) handleTouchStartDolly();\r\n\r\n            if ( scope.enableRotate ) handleTouchStartRotate();\r\n\r\n        }\r\n\r\n        function handleTouchMoveRotate( event ) {\r\n\r\n            if ( pointers.length == 1 ) {\r\n\r\n                rotateEnd.set( event.pageX, event.pageY );\r\n\r\n            } else {\r\n\r\n                const position = getSecondPointerPosition( event );\r\n\r\n                const x = 0.5 * ( event.pageX + position.x );\r\n                const y = 0.5 * ( event.pageY + position.y );\r\n\r\n                rotateEnd.set( x, y );\r\n\r\n            }\r\n\r\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\r\n\r\n            const element = scope.domElement;\r\n\r\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\r\n\r\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\r\n\r\n            rotateStart.copy( rotateEnd );\r\n\r\n        }\r\n\r\n        function handleTouchMovePan( event ) {\r\n\r\n            if ( pointers.length === 1 ) {\r\n\r\n                panEnd.set( event.pageX, event.pageY );\r\n\r\n            } else {\r\n\r\n                const position = getSecondPointerPosition( event );\r\n\r\n                const x = 0.5 * ( event.pageX + position.x );\r\n                const y = 0.5 * ( event.pageY + position.y );\r\n\r\n                panEnd.set( x, y );\r\n\r\n            }\r\n\r\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\r\n\r\n            pan( panDelta.x, panDelta.y );\r\n\r\n            panStart.copy( panEnd );\r\n\r\n        }\r\n\r\n        function handleTouchMoveDolly( event ) {\r\n\r\n            const position = getSecondPointerPosition( event );\r\n\r\n            const dx = event.pageX - position.x;\r\n            const dy = event.pageY - position.y;\r\n\r\n            const distance = Math.sqrt( dx * dx + dy * dy );\r\n\r\n            dollyEnd.set( 0, distance );\r\n\r\n            dollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\r\n\r\n            dollyOut( dollyDelta.y );\r\n\r\n            dollyStart.copy( dollyEnd );\r\n\r\n        }\r\n\r\n        function handleTouchMoveDollyPan( event ) {\r\n\r\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\r\n\r\n            if ( scope.enablePan ) handleTouchMovePan( event );\r\n\r\n        }\r\n\r\n        function handleTouchMoveDollyRotate( event ) {\r\n\r\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\r\n\r\n            if ( scope.enableRotate ) handleTouchMoveRotate( event );\r\n\r\n        }\r\n\r\n        //\r\n        // event handlers - FSM: listen for events and reset state\r\n        //\r\n\r\n        function onPointerDown( event ) {\r\n\r\n            if ( scope.enabled === false ) return;\r\n\r\n            if ( pointers.length === 0 ) {\r\n\r\n                scope.domElement.setPointerCapture( event.pointerId );\r\n\r\n                scope.domElement.addEventListener( 'pointermove', onPointerMove );\r\n                scope.domElement.addEventListener( 'pointerup', onPointerUp );\r\n\r\n            }\r\n\r\n            //\r\n\r\n            addPointer( event );\r\n\r\n            if ( event.pointerType === 'touch' ) {\r\n\r\n                onTouchStart( event );\r\n\r\n            } else {\r\n\r\n                onMouseDown( event );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onPointerMove( event ) {\r\n\r\n            if ( scope.enabled === false ) return;\r\n\r\n            if ( event.pointerType === 'touch' ) {\r\n\r\n                onTouchMove( event );\r\n\r\n            } else {\r\n\r\n                onMouseMove( event );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onPointerUp( event ) {\r\n\r\n            removePointer( event );\r\n\r\n            if ( pointers.length === 0 ) {\r\n\r\n                scope.domElement.releasePointerCapture( event.pointerId );\r\n\r\n                scope.domElement.removeEventListener( 'pointermove', onPointerMove );\r\n                scope.domElement.removeEventListener( 'pointerup', onPointerUp );\r\n\r\n            }\r\n\r\n            scope.dispatchEvent( _endEvent );\r\n\r\n            state = STATE.NONE;\r\n\r\n        }\r\n\r\n        function onMouseDown( event ) {\r\n\r\n            let mouseAction;\r\n\r\n            switch ( event.button ) {\r\n\r\n                case 0:\r\n\r\n                    mouseAction = scope.mouseButtons.LEFT;\r\n                    break;\r\n\r\n                case 1:\r\n\r\n                    mouseAction = scope.mouseButtons.MIDDLE;\r\n                    break;\r\n\r\n                case 2:\r\n\r\n                    mouseAction = scope.mouseButtons.RIGHT;\r\n                    break;\r\n\r\n                default:\r\n\r\n                    mouseAction = - 1;\r\n\r\n            }\r\n\r\n            switch ( mouseAction ) {\r\n\r\n                case MOUSE.DOLLY:\r\n\r\n                    if ( scope.enableZoom === false ) return;\r\n\r\n                    handleMouseDownDolly( event );\r\n\r\n                    state = STATE.DOLLY;\r\n\r\n                    break;\r\n\r\n                case MOUSE.ROTATE:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        if ( scope.enablePan === false ) return;\r\n\r\n                        handleMouseDownPan( event );\r\n\r\n                        state = STATE.PAN;\r\n\r\n                    } else {\r\n\r\n                        if ( scope.enableRotate === false ) return;\r\n\r\n                        handleMouseDownRotate( event );\r\n\r\n                        state = STATE.ROTATE;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                case MOUSE.PAN:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        if ( scope.enableRotate === false ) return;\r\n\r\n                        handleMouseDownRotate( event );\r\n\r\n                        state = STATE.ROTATE;\r\n\r\n                    } else {\r\n\r\n                        if ( scope.enablePan === false ) return;\r\n\r\n                        handleMouseDownPan( event );\r\n\r\n                        state = STATE.PAN;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                default:\r\n\r\n                    state = STATE.NONE;\r\n\r\n            }\r\n\r\n            if ( state !== STATE.NONE ) {\r\n\r\n                scope.dispatchEvent( _startEvent );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onMouseMove( event ) {\r\n\r\n            switch ( state ) {\r\n\r\n                case STATE.ROTATE:\r\n\r\n                    if ( scope.enableRotate === false ) return;\r\n\r\n                    handleMouseMoveRotate( event );\r\n\r\n                    break;\r\n\r\n                case STATE.DOLLY:\r\n\r\n                    if ( scope.enableZoom === false ) return;\r\n\r\n                    handleMouseMoveDolly( event );\r\n\r\n                    break;\r\n\r\n                case STATE.PAN:\r\n\r\n                    if ( scope.enablePan === false ) return;\r\n\r\n                    handleMouseMovePan( event );\r\n\r\n                    break;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onMouseWheel( event ) {\r\n\r\n            if ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;\r\n\r\n            event.preventDefault();\r\n\r\n            scope.dispatchEvent( _startEvent );\r\n\r\n            handleMouseWheel( event );\r\n\r\n            scope.dispatchEvent( _endEvent );\r\n\r\n        }\r\n\r\n        function onKeyDown( event ) {\r\n\r\n            if ( scope.enabled === false || scope.enablePan === false ) return;\r\n\r\n            handleKeyDown( event );\r\n\r\n        }\r\n\r\n        function onTouchStart( event ) {\r\n\r\n            trackPointer( event );\r\n\r\n            switch ( pointers.length ) {\r\n\r\n                case 1:\r\n\r\n                    switch ( scope.touches.ONE ) {\r\n\r\n                        case TOUCH.ROTATE:\r\n\r\n                            if ( scope.enableRotate === false ) return;\r\n\r\n                            handleTouchStartRotate();\r\n\r\n                            state = STATE.TOUCH_ROTATE;\r\n\r\n                            break;\r\n\r\n                        case TOUCH.PAN:\r\n\r\n                            if ( scope.enablePan === false ) return;\r\n\r\n                            handleTouchStartPan();\r\n\r\n                            state = STATE.TOUCH_PAN;\r\n\r\n                            break;\r\n\r\n                        default:\r\n\r\n                            state = STATE.NONE;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                case 2:\r\n\r\n                    switch ( scope.touches.TWO ) {\r\n\r\n                        case TOUCH.DOLLY_PAN:\r\n\r\n                            if ( scope.enableZoom === false && scope.enablePan === false ) return;\r\n\r\n                            handleTouchStartDollyPan();\r\n\r\n                            state = STATE.TOUCH_DOLLY_PAN;\r\n\r\n                            break;\r\n\r\n                        case TOUCH.DOLLY_ROTATE:\r\n\r\n                            if ( scope.enableZoom === false && scope.enableRotate === false ) return;\r\n\r\n                            handleTouchStartDollyRotate();\r\n\r\n                            state = STATE.TOUCH_DOLLY_ROTATE;\r\n\r\n                            break;\r\n\r\n                        default:\r\n\r\n                            state = STATE.NONE;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                default:\r\n\r\n                    state = STATE.NONE;\r\n\r\n            }\r\n\r\n            if ( state !== STATE.NONE ) {\r\n\r\n                scope.dispatchEvent( _startEvent );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onTouchMove( event ) {\r\n\r\n            trackPointer( event );\r\n\r\n            switch ( state ) {\r\n\r\n                case STATE.TOUCH_ROTATE:\r\n\r\n                    if ( scope.enableRotate === false ) return;\r\n\r\n                    handleTouchMoveRotate( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                case STATE.TOUCH_PAN:\r\n\r\n                    if ( scope.enablePan === false ) return;\r\n\r\n                    handleTouchMovePan( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                case STATE.TOUCH_DOLLY_PAN:\r\n\r\n                    if ( scope.enableZoom === false && scope.enablePan === false ) return;\r\n\r\n                    handleTouchMoveDollyPan( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                case STATE.TOUCH_DOLLY_ROTATE:\r\n\r\n                    if ( scope.enableZoom === false && scope.enableRotate === false ) return;\r\n\r\n                    handleTouchMoveDollyRotate( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                default:\r\n\r\n                    state = STATE.NONE;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onContextMenu( event ) {\r\n\r\n            if ( scope.enabled === false ) return;\r\n\r\n            event.preventDefault();\r\n\r\n        }\r\n\r\n        function addPointer( event ) {\r\n\r\n            pointers.push( event );\r\n\r\n        }\r\n\r\n        function removePointer( event ) {\r\n\r\n            delete pointerPositions[event.pointerId];\r\n\r\n            for ( let i = 0; i < pointers.length; i ++ ) {\r\n\r\n                if ( pointers[i].pointerId == event.pointerId ) {\r\n\r\n                    pointers.splice( i, 1 );\r\n                    return;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function trackPointer( event ) {\r\n\r\n            let position = pointerPositions[event.pointerId];\r\n\r\n            if ( position === undefined ) {\r\n\r\n                position = new Vector2();\r\n                pointerPositions[event.pointerId] = position;\r\n\r\n            }\r\n\r\n            position.set( event.pageX, event.pageY );\r\n\r\n        }\r\n\r\n        function getSecondPointerPosition( event ) {\r\n\r\n            const pointer = ( event.pointerId === pointers[0].pointerId ) ? pointers[1] : pointers[0];\r\n\r\n            return pointerPositions[pointer.pointerId];\r\n\r\n        }\r\n\r\n        //\r\n\r\n        scope.domElement.addEventListener( 'contextmenu', onContextMenu );\r\n\r\n        scope.domElement.addEventListener( 'pointerdown', onPointerDown );\r\n        scope.domElement.addEventListener( 'pointercancel', onPointerUp );\r\n        scope.domElement.addEventListener( 'wheel', onMouseWheel, { passive: false } );\r\n\r\n        // force an update at start\r\n\r\n        this.update();\r\n\r\n    }\r\n\r\n}\r\n\r\nexport { OrbitControls };\r\n","import { fadeElement } from './Util.js';\r\n\r\nconst STANDARD_FADE_DURATION = 500;\r\n\r\nexport class LoadingSpinner {\r\n\r\n    static elementIDGen = 0;\r\n\r\n    constructor(message, container) {\r\n\r\n        this.taskIDGen = 0;\r\n        this.elementID = LoadingSpinner.elementIDGen++;\r\n\r\n        this.tasks = [];\r\n\r\n        this.message = message || 'Loading...';\r\n        this.container = container || document.body;\r\n\r\n        this.spinnerContainerOuter = document.createElement('div');\r\n        this.spinnerContainerOuter.className = `spinnerOuterContainer${this.elementID}`;\r\n        this.spinnerContainerOuter.style.display = 'none';\r\n\r\n        this.spinnerContainerPrimary = document.createElement('div');\r\n        this.spinnerContainerPrimary.className = `spinnerContainerPrimary${this.elementID}`;\r\n        this.spinnerPrimary = document.createElement('div');\r\n        this.spinnerPrimary.classList.add(`spinner${this.elementID}`, `spinnerPrimary${this.elementID}`);\r\n        this.messageContainerPrimary = document.createElement('div');\r\n        this.messageContainerPrimary.classList.add(`messageContainer${this.elementID}`, `messageContainerPrimary${this.elementID}`);\r\n        this.messageContainerPrimary.innerHTML = this.message;\r\n\r\n        this.spinnerContainerMin = document.createElement('div');\r\n        this.spinnerContainerMin.className = `spinnerContainerMin${this.elementID}`;\r\n        this.spinnerMin = document.createElement('div');\r\n        this.spinnerMin.classList.add(`spinner${this.elementID}`, `spinnerMin${this.elementID}`);\r\n        this.messageContainerMin = document.createElement('div');\r\n        this.messageContainerMin.classList.add(`messageContainer${this.elementID}`, `messageContainerMin${this.elementID}`);\r\n        this.messageContainerMin.innerHTML = this.message;\r\n\r\n        this.spinnerContainerPrimary.appendChild(this.spinnerPrimary);\r\n        this.spinnerContainerPrimary.appendChild(this.messageContainerPrimary);\r\n        this.spinnerContainerOuter.appendChild(this.spinnerContainerPrimary);\r\n\r\n        this.spinnerContainerMin.appendChild(this.spinnerMin);\r\n        this.spinnerContainerMin.appendChild(this.messageContainerMin);\r\n        this.spinnerContainerOuter.appendChild(this.spinnerContainerMin);\r\n\r\n        const style = document.createElement('style');\r\n        style.innerHTML = `\r\n\r\n            .spinnerOuterContainer${this.elementID} {\r\n                width: 100%;\r\n                height: 100%;\r\n                margin: 0;\r\n                top: 0;\r\n                left: 0;\r\n                position: absolute;\r\n                pointer-events: none;\r\n            }\r\n\r\n            .messageContainer${this.elementID} {\r\n                height: 20px;\r\n                font-family: arial;\r\n                font-size: 12pt;\r\n                color: #ffffff;\r\n                text-align: center;\r\n                vertical-align: middle;\r\n            }\r\n\r\n            .spinner${this.elementID} {\r\n                padding: 15px;\r\n                background: #07e8d6;\r\n                z-index:99999;\r\n            \r\n                aspect-ratio: 1;\r\n                border-radius: 50%;\r\n                --_m: \r\n                    conic-gradient(#0000,#000),\r\n                    linear-gradient(#000 0 0) content-box;\r\n                -webkit-mask: var(--_m);\r\n                    mask: var(--_m);\r\n                -webkit-mask-composite: source-out;\r\n                    mask-composite: subtract;\r\n                box-sizing: border-box;\r\n                animation: load 1s linear infinite;\r\n            }\r\n\r\n            .spinnerContainerPrimary${this.elementID} {\r\n                z-index:99999;\r\n                background-color: rgba(128, 128, 128, 0.75);\r\n                border: #666666 1px solid;\r\n                border-radius: 5px;\r\n                padding-top: 20px;\r\n                padding-bottom: 10px;\r\n                margin: 0;\r\n                position: absolute;\r\n                top: 50%;\r\n                left: 50%;\r\n                transform: translate(-80px, -80px);\r\n                width: 180px;\r\n                pointer-events: auto;\r\n            }\r\n\r\n            .spinnerPrimary${this.elementID} {\r\n                width: 120px;\r\n                margin-left: 30px;\r\n            }\r\n\r\n            .messageContainerPrimary${this.elementID} {\r\n                padding-top: 15px;\r\n            }\r\n\r\n            .spinnerContainerMin${this.elementID} {\r\n                z-index:99999;\r\n                background-color: rgba(128, 128, 128, 0.75);\r\n                border: #666666 1px solid;\r\n                border-radius: 5px;\r\n                padding-top: 20px;\r\n                padding-bottom: 15px;\r\n                margin: 0;\r\n                position: absolute;\r\n                bottom: 50px;\r\n                left: 50%;\r\n                transform: translate(-50%, 0);\r\n                display: flex;\r\n                flex-direction: left;\r\n                pointer-events: auto;\r\n                min-width: 250px;\r\n            }\r\n\r\n            .messageContainerMin${this.elementID} {\r\n                margin-right: 15px;\r\n            }\r\n\r\n            .spinnerMin${this.elementID} {\r\n                width: 50px;\r\n                height: 50px;\r\n                margin-left: 15px;\r\n                margin-right: 25px;\r\n            }\r\n\r\n            .messageContainerMin${this.elementID} {\r\n                padding-top: 15px;\r\n            }\r\n            \r\n            @keyframes load {\r\n                to{transform: rotate(1turn)}\r\n            }\r\n\r\n        `;\r\n        this.spinnerContainerOuter.appendChild(style);\r\n        this.container.appendChild(this.spinnerContainerOuter);\r\n\r\n        this.setMinimized(false, true);\r\n\r\n        this.fadeTransitions = [];\r\n    }\r\n\r\n    addTask(message) {\r\n        const newTask = {\r\n            'message': message,\r\n            'id': this.taskIDGen++\r\n        };\r\n        this.tasks.push(newTask);\r\n        this.update();\r\n        return newTask.id;\r\n    }\r\n\r\n    removeTask(id) {\r\n        let index = 0;\r\n        for (let task of this.tasks) {\r\n            if (task.id === id) {\r\n                this.tasks.splice(index, 1);\r\n                break;\r\n            }\r\n            index++;\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    removeAllTasks() {\r\n        this.tasks = [];\r\n        this.update();\r\n    }\r\n\r\n    setMessageForTask(id, message) {\r\n        for (let task of this.tasks) {\r\n            if (task.id === id) {\r\n                task.message = message;\r\n                break;\r\n            }\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    update() {\r\n        if (this.tasks.length > 0) {\r\n            this.show();\r\n            this.setMessage(this.tasks[this.tasks.length - 1].message);\r\n        } else {\r\n            this.hide();\r\n        }\r\n    }\r\n\r\n    show() {\r\n        this.spinnerContainerOuter.style.display = 'block';\r\n        this.visible = true;\r\n    }\r\n\r\n    hide() {\r\n        this.spinnerContainerOuter.style.display = 'none';\r\n        this.visible = false;\r\n    }\r\n\r\n    setContainer(container) {\r\n        if (this.container) {\r\n            this.container.removeChild(this.spinnerContainerOuter);\r\n        }\r\n        if (container) {\r\n            this.container = container;\r\n            this.container.appendChild(this.spinnerContainerOuter);\r\n            this.spinnerContainerOuter.style.zIndex = this.container.style.zIndex + 1;\r\n        }\r\n    }\r\n\r\n    setMinimized(minimized, instant) {\r\n        const showHideSpinner = (element, show, instant, displayStyle, fadeTransitionsIndex) => {\r\n            if (instant) {\r\n                element.style.display = show ? displayStyle : 'none';\r\n            } else {\r\n                this.fadeTransitions[fadeTransitionsIndex] = fadeElement(element, !show, displayStyle, STANDARD_FADE_DURATION, () => {\r\n                    this.fadeTransitions[fadeTransitionsIndex] = null;\r\n                });\r\n            }\r\n        };\r\n        showHideSpinner(this.spinnerContainerPrimary, !minimized, instant, 'block', 0);\r\n        showHideSpinner(this.spinnerContainerMin, minimized, instant, 'flex', 1);\r\n        this.minimized = minimized;\r\n    }\r\n\r\n    setMessage(msg) {\r\n        this.messageContainerPrimary.innerHTML = msg;\r\n        this.messageContainerMin.innerHTML = msg;\r\n    }\r\n}\r\n","export const fadeElement = (element, out, displayStyle, duration, onComplete) => {\r\n    const startTime = performance.now();\r\n\r\n    let startOpacity = element.style.display === 'none' ? 0 : parseFloat(element.style.opacity);\r\n    if (isNaN(startOpacity)) startOpacity = 1;\r\n\r\n    const interval = window.setInterval(() => {\r\n        const currentTime = performance.now();\r\n        const elapsed = currentTime - startTime;\r\n\r\n        let t = Math.min(elapsed / duration, 1.0);\r\n        if (t > 0.999) t = 1;\r\n\r\n        let opacity;\r\n        if (out) {\r\n            opacity = (1.0 - t) * startOpacity;\r\n            if (opacity < 0.0001) opacity = 0;\r\n        } else {\r\n            opacity = (1.0 - startOpacity) * t + startOpacity;\r\n        }\r\n\r\n        if (opacity > 0) {\r\n            element.style.display = displayStyle;\r\n            element.style.opacity = opacity;\r\n        } else {\r\n            element.style.display = 'none';\r\n        }\r\n\r\n        if (t >= 1) {\r\n            if (onComplete) onComplete();\r\n            window.clearInterval(interval);\r\n        }\r\n    }, 16);\r\n    return interval;\r\n};\r\n\r\nexport const cancelFade = (interval) => {\r\n    window.clearInterval(interval);\r\n};\r\n","export class LoadingProgressBar {\r\n\r\n    constructor(container) {\r\n\r\n        this.idGen = 0;\r\n\r\n        this.tasks = [];\r\n\r\n        this.container = container || document.body;\r\n\r\n        this.progressBarContainerOuter = document.createElement('div');\r\n        this.progressBarContainerOuter.className = 'progressBarOuterContainer';\r\n        this.progressBarContainerOuter.style.display = 'none';\r\n\r\n        this.progressBarBox = document.createElement('div');\r\n        this.progressBarBox.className = 'progressBarBox';\r\n\r\n        this.progressBarBackground = document.createElement('div');\r\n        this.progressBarBackground.className = 'progressBarBackground';\r\n\r\n        this.progressBar = document.createElement('div');\r\n        this.progressBar.className = 'progressBar';\r\n\r\n        this.progressBarBackground.appendChild(this.progressBar);\r\n        this.progressBarBox.appendChild(this.progressBarBackground);\r\n        this.progressBarContainerOuter.appendChild(this.progressBarBox);\r\n\r\n        const style = document.createElement('style');\r\n        style.innerHTML = `\r\n\r\n            .progressBarOuterContainer {\r\n                width: 100%;\r\n                height: 100%;\r\n                margin: 0;\r\n                top: 0;\r\n                left: 0;\r\n                position: absolute;\r\n                pointer-events: none;\r\n            }\r\n\r\n            .progressBarBox {\r\n                z-index:99999;\r\n                padding: 7px 9px 5px 7px;\r\n                background-color: rgba(190, 190, 190, 0.75);\r\n                border: #555555 1px solid;\r\n                border-radius: 15px;\r\n                margin: 0;\r\n                position: absolute;\r\n                bottom: 50px;\r\n                left: 50%;\r\n                transform: translate(-50%, 0);\r\n                width: 180px;\r\n                height: 30px;\r\n                pointer-events: auto;\r\n            }\r\n\r\n            .progressBarBackground {\r\n                width: 100%;\r\n                height: 25px;\r\n                border-radius:10px;\r\n                background-color: rgba(128, 128, 128, 0.75);\r\n                border: #444444 1px solid;\r\n                box-shadow: inset 0 0 10px #333333;\r\n            }\r\n\r\n            .progressBar {\r\n                height: 25px;\r\n                width: 0px;\r\n                border-radius:10px;\r\n                background-color: rgba(0, 200, 0, 0.75);\r\n                box-shadow: inset 0 0 10px #003300;\r\n            }\r\n\r\n        `;\r\n        this.progressBarContainerOuter.appendChild(style);\r\n        this.container.appendChild(this.progressBarContainerOuter);\r\n    }\r\n\r\n    show() {\r\n        this.progressBarContainerOuter.style.display = 'block';\r\n    }\r\n\r\n    hide() {\r\n        this.progressBarContainerOuter.style.display = 'none';\r\n    }\r\n\r\n    setProgress(progress) {\r\n        this.progressBar.style.width = progress + '%';\r\n    }\r\n\r\n    setContainer(container) {\r\n        if (this.container) {\r\n            this.container.removeChild(this.progressBarContainerOuter);\r\n        }\r\n        if (container) {\r\n            this.container = container;\r\n            this.container.appendChild(this.progressBarContainerOuter);\r\n            this.progressBarContainerOuter.style.zIndex = this.container.style.zIndex + 1;\r\n        }\r\n    }\r\n\r\n}\r\n","export class InfoPanel {\r\n\r\n    constructor(container) {\r\n\r\n        this.container = container || document.body;\r\n\r\n        this.infoCells = {};\r\n\r\n        const layout = [\r\n            ['Camera position', 'cameraPosition'],\r\n            ['Camera look-at', 'cameraLookAt'],\r\n            ['Camera up', 'cameraUp'],\r\n            ['Cursor position', 'cursorPosition'],\r\n            ['FPS', 'fps'],\r\n            ['Rendering:', 'renderSplatCount'],\r\n            ['Sort time', 'sortTime'],\r\n            ['Render window', 'renderWindow'],\r\n            ['Focal adjustment', 'focalAdjustment']\r\n        ];\r\n\r\n        this.infoPanelContainer = document.createElement('div');\r\n        const style = document.createElement('style');\r\n        style.innerHTML = `\r\n\r\n            .infoPanel {\r\n                width: 430px;\r\n                padding: 10px;\r\n                background-color: rgba(50, 50, 50, 0.85);\r\n                border: #555555 2px solid;\r\n                color: #dddddd;\r\n                border-radius: 10px;\r\n                z-index: 9999;\r\n                font-family: arial;\r\n                font-size: 11pt;\r\n                text-align: left;\r\n                margin: 0;\r\n                top: 10px;\r\n                left:10px;\r\n                position: absolute;\r\n                pointer-events: auto;\r\n            }\r\n\r\n            .info-panel-cell {\r\n                margin-bottom: 5px;\r\n                padding-bottom: 2px;\r\n            }\r\n\r\n            .label-cell {\r\n                font-weight: bold;\r\n                font-size: 12pt;\r\n                width: 140px;\r\n            }\r\n\r\n        `;\r\n        this.infoPanelContainer.append(style);\r\n\r\n        this.infoPanel = document.createElement('div');\r\n        this.infoPanel.className = 'infoPanel';\r\n\r\n        const infoTable = document.createElement('div');\r\n        infoTable.style.display = 'table';\r\n\r\n        for (let layoutEntry of layout) {\r\n            const row = document.createElement('div');\r\n            row.style.display = 'table-row';\r\n            row.className = 'info-panel-row';\r\n\r\n            const labelCell = document.createElement('div');\r\n            labelCell.style.display = 'table-cell';\r\n            labelCell.innerHTML = `${layoutEntry[0]}: `;\r\n            labelCell.classList.add('info-panel-cell', 'label-cell');\r\n\r\n            const spacerCell = document.createElement('div');\r\n            spacerCell.style.display = 'table-cell';\r\n            spacerCell.style.width = '10px';\r\n            spacerCell.innerHTML = ' ';\r\n            spacerCell.className = 'info-panel-cell';\r\n\r\n            const infoCell = document.createElement('div');\r\n            infoCell.style.display = 'table-cell';\r\n            infoCell.innerHTML = '';\r\n            infoCell.className = 'info-panel-cell';\r\n\r\n            this.infoCells[layoutEntry[1]] = infoCell;\r\n\r\n            row.appendChild(labelCell);\r\n            row.appendChild(spacerCell);\r\n            row.appendChild(infoCell);\r\n\r\n            infoTable.appendChild(row);\r\n        }\r\n\r\n        this.infoPanel.appendChild(infoTable);\r\n        this.infoPanelContainer.append(this.infoPanel);\r\n        this.infoPanelContainer.style.display = 'none';\r\n        this.container.appendChild(this.infoPanelContainer);\r\n\r\n        this.visible = false;\r\n    }\r\n\r\n    update = function(renderDimensions, cameraPosition, cameraLookAtPosition, cameraUp,\r\n                      meshCursorPosition, currentFPS, splatCount, splatRenderCount, splatRenderCountPct, lastSortTime, focalAdjustment) {\r\n\r\n        const cameraPosString = `${cameraPosition.x.toFixed(5)}, ${cameraPosition.y.toFixed(5)}, ${cameraPosition.z.toFixed(5)}`;\r\n        if (this.infoCells.cameraPosition.innerHTML !== cameraPosString) {\r\n            this.infoCells.cameraPosition.innerHTML = cameraPosString;\r\n        }\r\n\r\n        if (cameraLookAtPosition) {\r\n            const cla = cameraLookAtPosition;\r\n            const cameraLookAtString = `${cla.x.toFixed(5)}, ${cla.y.toFixed(5)}, ${cla.z.toFixed(5)}`;\r\n            if (this.infoCells.cameraLookAt.innerHTML !== cameraLookAtString) {\r\n                this.infoCells.cameraLookAt.innerHTML = cameraLookAtString;\r\n            }\r\n        }\r\n\r\n        const cameraUpString = `${cameraUp.x.toFixed(5)}, ${cameraUp.y.toFixed(5)}, ${cameraUp.z.toFixed(5)}`;\r\n        if (this.infoCells.cameraUp.innerHTML !== cameraUpString) {\r\n            this.infoCells.cameraUp.innerHTML = cameraUpString;\r\n        }\r\n\r\n        if (meshCursorPosition) {\r\n            const cursPos = meshCursorPosition;\r\n            const cursorPosString = `${cursPos.x.toFixed(5)}, ${cursPos.y.toFixed(5)}, ${cursPos.z.toFixed(5)}`;\r\n            this.infoCells.cursorPosition.innerHTML = cursorPosString;\r\n        } else {\r\n            this.infoCells.cursorPosition.innerHTML = 'N/A';\r\n        }\r\n\r\n        this.infoCells.fps.innerHTML = currentFPS;\r\n        this.infoCells.renderWindow.innerHTML = `${renderDimensions.x} x ${renderDimensions.y}`;\r\n\r\n        this.infoCells.renderSplatCount.innerHTML =\r\n            `${splatRenderCount} splats out of ${splatCount} (${splatRenderCountPct.toFixed(2)}%)`;\r\n\r\n        this.infoCells.sortTime.innerHTML = `${lastSortTime.toFixed(3)} ms`;\r\n\r\n        this.infoCells.focalAdjustment.innerHTML = `${focalAdjustment.toFixed(3)}`;\r\n    };\r\n\r\n    setContainer(container) {\r\n        if (this.container) {\r\n            this.container.removeChild(this.infoPanelContainer);\r\n        }\r\n        if (container) {\r\n            this.container = container;\r\n            this.container.appendChild(this.infoPanelContainer);\r\n            this.infoPanelContainer.style.zIndex = this.container.style.zIndex + 1;\r\n        }\r\n    }\r\n\r\n    show() {\r\n        this.infoPanelContainer.style.display = 'block';\r\n        this.visible = true;\r\n    }\r\n\r\n    hide() {\r\n        this.infoPanelContainer.style.display = 'none';\r\n        this.visible = false;\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\n\r\nexport class ArrowHelper extends THREE.Object3D {\r\n\r\n    constructor(dir = new THREE.Vector3(0, 0, 1), origin = new THREE.Vector3(0, 0, 0), length = 1,\r\n                radius = 0.1, color = 0xffff00, headLength = length * 0.2, headRadius = headLength * 0.2) {\r\n        super();\r\n\r\n        this.type = 'ArrowHelper';\r\n\r\n        const lineGeometry = new THREE.CylinderGeometry(radius, radius, length, 32);\r\n        lineGeometry.translate(0, length / 2.0, 0);\r\n        const coneGeometry = new THREE.CylinderGeometry( 0, headRadius, headLength, 32);\r\n        coneGeometry.translate(0, length, 0);\r\n\r\n        this.position.copy( origin );\r\n\r\n        this.line = new THREE.Mesh(lineGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\r\n        this.line.matrixAutoUpdate = false;\r\n        this.add(this.line);\r\n\r\n        this.cone = new THREE.Mesh(coneGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\r\n        this.cone.matrixAutoUpdate = false;\r\n        this.add(this.cone);\r\n\r\n        this.setDirection(dir);\r\n    }\r\n\r\n    setDirection( dir ) {\r\n        if (dir.y > 0.99999) {\r\n            this.quaternion.set(0, 0, 0, 1);\r\n        } else if (dir.y < - 0.99999) {\r\n            this.quaternion.set(1, 0, 0, 0);\r\n        } else {\r\n            _axis.set(dir.z, 0, -dir.x).normalize();\r\n            const radians = Math.acos(dir.y);\r\n            this.quaternion.setFromAxisAngle(_axis, radians);\r\n        }\r\n    }\r\n\r\n    setColor( color ) {\r\n        this.line.material.color.set(color);\r\n        this.cone.material.color.set(color);\r\n    }\r\n\r\n    copy(source) {\r\n        super.copy(source, false);\r\n        this.line.copy(source.line);\r\n        this.cone.copy(source.cone);\r\n        return this;\r\n    }\r\n\r\n    dispose() {\r\n        this.line.geometry.dispose();\r\n        this.line.material.dispose();\r\n        this.cone.geometry.dispose();\r\n        this.cone.material.dispose();\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { ArrowHelper } from './ArrowHelper.js';\r\nimport { disposeAllMeshes } from './Util.js';\r\n\r\nexport class SceneHelper {\r\n\r\n    constructor(threeScene) {\r\n        this.threeScene = threeScene;\r\n        this.splatRenderTarget = null;\r\n        this.renderTargetCopyQuad = null;\r\n        this.renderTargetCopyCamera = null;\r\n        this.meshCursor = null;\r\n        this.focusMarker = null;\r\n        this.controlPlane = null;\r\n        this.debugRoot = null;\r\n        this.secondaryDebugRoot = null;\r\n    }\r\n\r\n    updateSplatRenderTargetForRenderDimensions(width, height) {\r\n        this.destroySplatRendertarget();\r\n        this.splatRenderTarget = new THREE.WebGLRenderTarget(width, height, {\r\n            format: THREE.RGBAFormat,\r\n            stencilBuffer: false,\r\n            depthBuffer: true,\r\n\r\n        });\r\n        this.splatRenderTarget.depthTexture = new THREE.DepthTexture(width, height);\r\n        this.splatRenderTarget.depthTexture.format = THREE.DepthFormat;\r\n        this.splatRenderTarget.depthTexture.type = THREE.UnsignedIntType;\r\n    }\r\n\r\n    destroySplatRendertarget() {\r\n        if (this.splatRenderTarget) {\r\n            this.splatRenderTarget = null;\r\n        }\r\n    }\r\n\r\n    setupRenderTargetCopyObjects() {\r\n        const uniforms = {\r\n            'sourceColorTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'sourceDepthTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n        };\r\n        const renderTargetCopyMaterial = new THREE.ShaderMaterial({\r\n            vertexShader: `\r\n                varying vec2 vUv;\r\n                void main() {\r\n                    vUv = uv;\r\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \r\n                }\r\n            `,\r\n            fragmentShader: `\r\n                #include <common>\r\n                #include <packing>\r\n                varying vec2 vUv;\r\n                uniform sampler2D sourceColorTexture;\r\n                uniform sampler2D sourceDepthTexture;\r\n                void main() {\r\n                    vec4 color = texture2D(sourceColorTexture, vUv);\r\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\r\n                    gl_FragDepth = fragDepth;\r\n                    gl_FragColor = vec4(color.rgb, color.a * 2.0);\r\n              }\r\n            `,\r\n            uniforms: uniforms,\r\n            depthWrite: false,\r\n            depthTest: false,\r\n            transparent: true,\r\n            blending: THREE.CustomBlending,\r\n            blendSrc: THREE.SrcAlphaFactor,\r\n            blendSrcAlpha: THREE.SrcAlphaFactor,\r\n            blendDst: THREE.OneMinusSrcAlphaFactor,\r\n            blendDstAlpha: THREE.OneMinusSrcAlphaFactor\r\n        });\r\n        renderTargetCopyMaterial.extensions.fragDepth = true;\r\n        this.renderTargetCopyQuad = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), renderTargetCopyMaterial);\r\n        this.renderTargetCopyCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\r\n    }\r\n\r\n    destroyRenderTargetCopyObjects() {\r\n        if (this.renderTargetCopyQuad) {\r\n            disposeAllMeshes(this.renderTargetCopyQuad);\r\n            this.renderTargetCopyQuad = null;\r\n        }\r\n    }\r\n\r\n    setupMeshCursor() {\r\n        if (!this.meshCursor) {\r\n            const coneGeometry = new THREE.ConeGeometry(0.5, 1.5, 32);\r\n            const coneMaterial = new THREE.MeshBasicMaterial({color: 0xFFFFFF});\r\n\r\n            const downArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            downArrow.rotation.set(0, 0, Math.PI);\r\n            downArrow.position.set(0, 1, 0);\r\n            const upArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            upArrow.position.set(0, -1, 0);\r\n            const leftArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            leftArrow.rotation.set(0, 0, Math.PI / 2.0);\r\n            leftArrow.position.set(1, 0, 0);\r\n            const rightArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            rightArrow.rotation.set(0, 0, -Math.PI / 2.0);\r\n            rightArrow.position.set(-1, 0, 0);\r\n\r\n            this.meshCursor = new THREE.Object3D();\r\n            this.meshCursor.add(downArrow);\r\n            this.meshCursor.add(upArrow);\r\n            this.meshCursor.add(leftArrow);\r\n            this.meshCursor.add(rightArrow);\r\n            this.meshCursor.scale.set(0.1, 0.1, 0.1);\r\n            this.threeScene.add(this.meshCursor);\r\n            this.meshCursor.visible = false;\r\n        }\r\n    }\r\n\r\n    destroyMeshCursor() {\r\n        if (this.meshCursor) {\r\n            disposeAllMeshes(this.meshCursor);\r\n            this.threeScene.remove(this.meshCursor);\r\n            this.meshCursor = null;\r\n        }\r\n    }\r\n\r\n    setMeshCursorVisibility(visible) {\r\n        this.meshCursor.visible = visible;\r\n    }\r\n\r\n    getMeschCursorVisibility() {\r\n        return this.meshCursor.visible;\r\n    }\r\n\r\n    setMeshCursorPosition(position) {\r\n        this.meshCursor.position.copy(position);\r\n    }\r\n\r\n    positionAndOrientMeshCursor(position, camera) {\r\n        this.meshCursor.position.copy(position);\r\n        this.meshCursor.up.copy(camera.up);\r\n        this.meshCursor.lookAt(camera.position);\r\n    }\r\n\r\n    setupFocusMarker() {\r\n        if (!this.focusMarker) {\r\n            const sphereGeometry = new THREE.SphereGeometry(.5, 32, 32);\r\n            const focusMarkerMaterial = SceneHelper.buildFocusMarkerMaterial();\r\n            focusMarkerMaterial.depthTest = false;\r\n            focusMarkerMaterial.depthWrite = false;\r\n            focusMarkerMaterial.transparent = true;\r\n            this.focusMarker = new THREE.Mesh(sphereGeometry, focusMarkerMaterial);\r\n        }\r\n    }\r\n\r\n    destroyFocusMarker() {\r\n        if (this.focusMarker) {\r\n            disposeAllMeshes(this.focusMarker);\r\n            this.focusMarker = null;\r\n        }\r\n    }\r\n\r\n    updateFocusMarker = function() {\r\n\r\n        const tempPosition = new THREE.Vector3();\r\n        const tempMatrix = new THREE.Matrix4();\r\n\r\n        return function(position, camera, viewport) {\r\n            tempMatrix.copy(camera.matrixWorld).invert();\r\n            tempPosition.copy(position).applyMatrix4(tempMatrix);\r\n            tempPosition.normalize().multiplyScalar(10);\r\n            tempPosition.applyMatrix4(camera.matrixWorld);\r\n            this.focusMarker.position.copy(tempPosition);\r\n            this.focusMarker.material.uniforms.realFocusPosition.value.copy(position);\r\n            this.focusMarker.material.uniforms.viewport.value.copy(viewport);\r\n            this.focusMarker.material.uniformsNeedUpdate = true;\r\n        };\r\n\r\n    }();\r\n\r\n    setFocusMarkerVisibility(visible) {\r\n        this.focusMarker.visible = visible;\r\n    }\r\n\r\n    setFocusMarkerOpacity(opacity) {\r\n        this.focusMarker.material.uniforms.opacity.value = opacity;\r\n        this.focusMarker.material.uniformsNeedUpdate = true;\r\n    }\r\n\r\n    getFocusMarkerOpacity() {\r\n        return this.focusMarker.material.uniforms.opacity.value;\r\n    }\r\n\r\n    setupControlPlane() {\r\n        if (!this.controlPlane) {\r\n            const planeGeometry = new THREE.PlaneGeometry(1, 1);\r\n            planeGeometry.rotateX(-Math.PI / 2);\r\n            const planeMaterial = new THREE.MeshBasicMaterial({color: 0xffffff});\r\n            planeMaterial.transparent = true;\r\n            planeMaterial.opacity = 0.6;\r\n            planeMaterial.depthTest = false;\r\n            planeMaterial.depthWrite = false;\r\n            planeMaterial.side = THREE.DoubleSide;\r\n            const planeMesh = new THREE.Mesh(planeGeometry, planeMaterial);\r\n\r\n            const arrowDir = new THREE.Vector3(0, 1, 0);\r\n            arrowDir.normalize();\r\n            const arrowOrigin = new THREE.Vector3(0, 0, 0);\r\n            const arrowLength = 0.5;\r\n            const arrowRadius = 0.01;\r\n            const arrowColor = 0x00dd00;\r\n            const arrowHelper = new ArrowHelper(arrowDir, arrowOrigin, arrowLength, arrowRadius, arrowColor, 0.1, 0.03);\r\n\r\n            this.controlPlane = new THREE.Object3D();\r\n            this.controlPlane.add(planeMesh);\r\n            this.controlPlane.add(arrowHelper);\r\n        }\r\n    }\r\n\r\n    destroyControlPlane() {\r\n        if (this.controlPlane) {\r\n            disposeAllMeshes(this.controlPlane);\r\n            this.controlPlane = null;\r\n        }\r\n    }\r\n\r\n    setControlPlaneVisibility(visible) {\r\n        this.controlPlane.visible = visible;\r\n    }\r\n\r\n    positionAndOrientControlPlane = function() {\r\n\r\n        const tempQuaternion = new THREE.Quaternion();\r\n        const defaultUp = new THREE.Vector3(0, 1, 0);\r\n\r\n        return function(position, up) {\r\n            tempQuaternion.setFromUnitVectors(defaultUp, up);\r\n            this.controlPlane.position.copy(position);\r\n            this.controlPlane.quaternion.copy(tempQuaternion);\r\n        };\r\n\r\n    }();\r\n\r\n    addDebugMeshes() {\r\n        this.debugRoot = this.createDebugMeshes();\r\n        this.secondaryDebugRoot = this.createSecondaryDebugMeshes();\r\n        this.threeScene.add(this.debugRoot);\r\n        this.threeScene.add(this.secondaryDebugRoot);\r\n    }\r\n\r\n    destroyDebugMeshes() {\r\n        for (let debugRoot of [this.debugRoot, this.secondaryDebugRoot]) {\r\n            if (debugRoot) {\r\n                disposeAllMeshes(debugRoot);\r\n                this.threeScene.remove(debugRoot);\r\n            }\r\n        }\r\n        this.debugRoot = null;\r\n        this.secondaryDebugRoot = null;\r\n    }\r\n\r\n    createDebugMeshes(renderOrder) {\r\n        const sphereGeometry = new THREE.SphereGeometry(1, 32, 32);\r\n        const debugMeshRoot = new THREE.Object3D();\r\n\r\n        const createMesh = (color, position) => {\r\n            let sphereMesh = new THREE.Mesh(sphereGeometry, SceneHelper.buildDebugMaterial(color));\r\n            sphereMesh.renderOrder = renderOrder;\r\n            debugMeshRoot.add(sphereMesh);\r\n            sphereMesh.position.fromArray(position);\r\n        };\r\n\r\n        createMesh(0xff0000, [-50, 0, 0]);\r\n        createMesh(0xff0000, [50, 0, 0]);\r\n        createMesh(0x00ff00, [0, 0, -50]);\r\n        createMesh(0x00ff00, [0, 0, 50]);\r\n        createMesh(0xffaa00, [5, 0, 5]);\r\n\r\n        return debugMeshRoot;\r\n    }\r\n\r\n    createSecondaryDebugMeshes(renderOrder) {\r\n        const boxGeometry = new THREE.BoxGeometry(3, 3, 3);\r\n        const debugMeshRoot = new THREE.Object3D();\r\n\r\n        let boxColor = 0xBBBBBB;\r\n        const createMesh = (position) => {\r\n            let boxMesh = new THREE.Mesh(boxGeometry, SceneHelper.buildDebugMaterial(boxColor));\r\n            boxMesh.renderOrder = renderOrder;\r\n            debugMeshRoot.add(boxMesh);\r\n            boxMesh.position.fromArray(position);\r\n        };\r\n\r\n        let separation = 10;\r\n        createMesh([-separation, 0, -separation]);\r\n        createMesh([-separation, 0, separation]);\r\n        createMesh([separation, 0, -separation]);\r\n        createMesh([separation, 0, separation]);\r\n\r\n        return debugMeshRoot;\r\n    }\r\n\r\n    static buildDebugMaterial(color) {\r\n        const vertexShaderSource = `\r\n            #include <common>\r\n            varying float ndcDepth;\r\n\r\n            void main() {\r\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\r\n                ndcDepth = gl_Position.z / gl_Position.w;\r\n                gl_Position.x = gl_Position.x / gl_Position.w;\r\n                gl_Position.y = gl_Position.y / gl_Position.w;\r\n                gl_Position.z = 0.0;\r\n                gl_Position.w = 1.0;\r\n    \r\n            }\r\n        `;\r\n\r\n        const fragmentShaderSource = `\r\n            #include <common>\r\n            uniform vec3 color;\r\n            varying float ndcDepth;\r\n            void main() {\r\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\r\n                gl_FragColor = vec4(color.rgb, 0.0);\r\n            }\r\n        `;\r\n\r\n        const uniforms = {\r\n            'color': {\r\n                'type': 'v3',\r\n                'value': new THREE.Color(color)\r\n            },\r\n        };\r\n\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: vertexShaderSource,\r\n            fragmentShader: fragmentShaderSource,\r\n            transparent: false,\r\n            depthTest: true,\r\n            depthWrite: true,\r\n            side: THREE.FrontSide\r\n        });\r\n        material.extensions.fragDepth = true;\r\n\r\n        return material;\r\n    }\r\n\r\n    static buildFocusMarkerMaterial(color) {\r\n        const vertexShaderSource = `\r\n            #include <common>\r\n\r\n            uniform vec2 viewport;\r\n            uniform vec3 realFocusPosition;\r\n\r\n            varying vec4 ndcPosition;\r\n            varying vec4 ndcCenter;\r\n            varying vec4 ndcFocusPosition;\r\n\r\n            void main() {\r\n                float radius = 0.01;\r\n\r\n                vec4 viewPosition = modelViewMatrix * vec4(position.xyz, 1.0);\r\n                vec4 viewCenter = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\r\n\r\n                vec4 viewFocusPosition = modelViewMatrix * vec4(realFocusPosition, 1.0);\r\n\r\n                ndcPosition = projectionMatrix * viewPosition;\r\n                ndcPosition = ndcPosition * vec4(1.0 / ndcPosition.w);\r\n                ndcCenter = projectionMatrix * viewCenter;\r\n                ndcCenter = ndcCenter * vec4(1.0 / ndcCenter.w);\r\n\r\n                ndcFocusPosition = projectionMatrix * viewFocusPosition;\r\n                ndcFocusPosition = ndcFocusPosition * vec4(1.0 / ndcFocusPosition.w);\r\n\r\n                gl_Position = projectionMatrix * viewPosition;\r\n\r\n            }\r\n        `;\r\n\r\n        const fragmentShaderSource = `\r\n            #include <common>\r\n            uniform vec3 color;\r\n            uniform vec2 viewport;\r\n            uniform float opacity;\r\n\r\n            varying vec4 ndcPosition;\r\n            varying vec4 ndcCenter;\r\n            varying vec4 ndcFocusPosition;\r\n\r\n            void main() {\r\n                vec2 screenPosition = vec2(ndcPosition) * viewport;\r\n                vec2 screenCenter = vec2(ndcCenter) * viewport;\r\n\r\n                vec2 screenVec = screenPosition - screenCenter;\r\n\r\n                float projectedRadius = length(screenVec);\r\n\r\n                float lineWidth = 0.0005 * viewport.y;\r\n                float aaRange = 0.0025 * viewport.y;\r\n                float radius = 0.06 * viewport.y;\r\n                float radDiff = abs(projectedRadius - radius) - lineWidth;\r\n                float alpha = 1.0 - clamp(radDiff / 5.0, 0.0, 1.0); \r\n\r\n                gl_FragColor = vec4(color.rgb, alpha * opacity);\r\n            }\r\n        `;\r\n\r\n        const uniforms = {\r\n            'color': {\r\n                'type': 'v3',\r\n                'value': new THREE.Color(color)\r\n            },\r\n            'realFocusPosition': {\r\n                'type': 'v3',\r\n                'value': new THREE.Vector3()\r\n            },\r\n            'viewport': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'opacity': {\r\n                'value': 0.0\r\n            }\r\n        };\r\n\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: vertexShaderSource,\r\n            fragmentShader: fragmentShaderSource,\r\n            transparent: true,\r\n            depthTest: false,\r\n            depthWrite: false,\r\n            side: THREE.FrontSide\r\n        });\r\n\r\n        return material;\r\n    }\r\n\r\n    dispose() {\r\n        this.destroyMeshCursor();\r\n        this.destroyFocusMarker();\r\n        this.destroyDebugMeshes();\r\n        this.destroyControlPlane();\r\n        this.destroyRenderTargetCopyObjects();\r\n        this.destroySplatRendertarget();\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\n\r\nconst VectorRight = new THREE.Vector3(1, 0, 0);\r\nconst VectorUp = new THREE.Vector3(0, 1, 0);\r\nconst VectorBackward = new THREE.Vector3(0, 0, 1);\r\n\r\nexport class Ray {\r\n\r\n    constructor(origin = new THREE.Vector3(), direction = new THREE.Vector3()) {\r\n        this.origin = new THREE.Vector3();\r\n        this.direction = new THREE.Vector3();\r\n        this.setParameters(origin, direction);\r\n    }\r\n\r\n    setParameters(origin, direction) {\r\n        this.origin.copy(origin);\r\n        this.direction.copy(direction).normalize();\r\n    }\r\n\r\n    boxContainsPoint(box, point, epsilon) {\r\n        return point.x < box.min.x - epsilon || point.x > box.max.x + epsilon ||\r\n               point.y < box.min.y - epsilon || point.y > box.max.y + epsilon ||\r\n               point.z < box.min.z - epsilon || point.z > box.max.z + epsilon ? false : true;\r\n    }\r\n\r\n    intersectBox = function() {\r\n\r\n        const planeIntersectionPoint = new THREE.Vector3();\r\n        const planeIntersectionPointArray = [];\r\n        const originArray = [];\r\n        const directionArray = [];\r\n\r\n        return function(box, outHit) {\r\n\r\n            originArray[0] = this.origin.x;\r\n            originArray[1] = this.origin.y;\r\n            originArray[2] = this.origin.z;\r\n            directionArray[0] = this.direction.x;\r\n            directionArray[1] = this.direction.y;\r\n            directionArray[2] = this.direction.z;\r\n\r\n            if (this.boxContainsPoint(box, this.origin, 0.0001)) {\r\n                if (outHit) {\r\n                    outHit.origin.copy(this.origin);\r\n                    outHit.normal.set(0, 0, 0);\r\n                    outHit.distance = -1;\r\n                }\r\n                return true;\r\n            }\r\n\r\n            for (let i = 0; i < 3; i++) {\r\n                if (directionArray[i] == 0.0) continue;\r\n\r\n                const hitNormal = i == 0 ? VectorRight : i == 1 ? VectorUp : VectorBackward;\r\n                const extremeVec = directionArray[i] < 0 ? box.max : box.min;\r\n                let multiplier = -Math.sign(directionArray[i]);\r\n                planeIntersectionPointArray[0] = i == 0 ? extremeVec.x : i == 1 ? extremeVec.y : extremeVec.z;\r\n                let toSide = planeIntersectionPointArray[0] - originArray[i];\r\n\r\n                if (toSide * multiplier < 0) {\r\n                    const idx1 = (i + 1) % 3;\r\n                    const idx2 = (i + 2) % 3;\r\n                    planeIntersectionPointArray[2] = directionArray[idx1] / directionArray[i] * toSide + originArray[idx1];\r\n                    planeIntersectionPointArray[1] = directionArray[idx2] / directionArray[i] * toSide + originArray[idx2];\r\n                    planeIntersectionPoint.set(planeIntersectionPointArray[i],\r\n                                               planeIntersectionPointArray[idx2],\r\n                                               planeIntersectionPointArray[idx1]);\r\n                    if (this.boxContainsPoint(box, planeIntersectionPoint, 0.0001)) {\r\n                        if (outHit) {\r\n                            outHit.origin.copy(planeIntersectionPoint);\r\n                            outHit.normal.copy(hitNormal).multiplyScalar(multiplier);\r\n                            outHit.distance = planeIntersectionPoint.sub(this.origin).length();\r\n                        }\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n    }();\r\n\r\n    intersectSphere = function() {\r\n\r\n        const toSphereCenterVec = new THREE.Vector3();\r\n\r\n        return function(center, radius, outHit) {\r\n            toSphereCenterVec.copy(center).sub(this.origin);\r\n            const toClosestApproach = toSphereCenterVec.dot(this.direction);\r\n            const toClosestApproachSq = toClosestApproach * toClosestApproach;\r\n            const toSphereCenterSq = toSphereCenterVec.dot(toSphereCenterVec);\r\n            const diffSq = toSphereCenterSq - toClosestApproachSq;\r\n            const radiusSq = radius * radius;\r\n\r\n            if (diffSq > radiusSq) return false;\r\n\r\n            const thc = Math.sqrt(radiusSq - diffSq);\r\n            const t0 = toClosestApproach - thc;\r\n            const t1 = toClosestApproach + thc;\r\n\r\n            if (t1 < 0) return false;\r\n            let t = t0 < 0 ? t1 : t0;\r\n\r\n            if (outHit) {\r\n                outHit.origin.copy(this.origin).addScaledVector(this.direction, t);\r\n                outHit.normal.copy(outHit.origin).sub(center).normalize();\r\n                outHit.distance = t;\r\n            }\r\n            return true;\r\n        };\r\n\r\n    }();\r\n}\r\n","import * as THREE from 'three';\r\n\r\nexport class Hit {\r\n\r\n    constructor() {\r\n        this.origin = new THREE.Vector3();\r\n        this.normal = new THREE.Vector3();\r\n        this.distance = 0;\r\n        this.splatIndex = 0;\r\n    }\r\n\r\n    set(origin, normal, distance, splatIndex) {\r\n        this.origin.copy(origin);\r\n        this.normal.copy(normal);\r\n        this.distance = distance;\r\n        this.splatIndex = splatIndex;\r\n    }\r\n\r\n    clone() {\r\n        const hitClone = new Hit();\r\n        hitClone.origin.copy(this.origin);\r\n        hitClone.normal.copy(this.normal);\r\n        hitClone.distance = this.distance;\r\n        hitClone.splatIndex = this.splatIndex;\r\n        return hitClone;\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { Ray } from './Ray.js';\r\nimport { Hit } from './Hit.js';\r\n\r\nexport class Raycaster {\r\n\r\n    constructor(origin, direction, raycastAgainstTrueSplatEllipsoid = false) {\r\n        this.ray = new Ray(origin, direction);\r\n        this.raycastAgainstTrueSplatEllipsoid = raycastAgainstTrueSplatEllipsoid;\r\n    }\r\n\r\n    setFromCameraAndScreenPosition = function() {\r\n\r\n        const ndcCoords = new THREE.Vector2();\r\n\r\n        return function(camera, screenPosition, screenDimensions) {\r\n            ndcCoords.x = screenPosition.x / screenDimensions.x * 2.0 - 1.0;\r\n            ndcCoords.y = (screenDimensions.y - screenPosition.y) / screenDimensions.y * 2.0 - 1.0;\r\n            if (camera.isPerspectiveCamera) {\r\n                this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\r\n                this.ray.direction.set(ndcCoords.x, ndcCoords.y, 0.5 ).unproject(camera).sub(this.ray.origin).normalize();\r\n                this.camera = camera;\r\n            } else if (camera.isOrthographicCamera) {\r\n                this.ray.origin.set(screenPosition.x, screenPosition.y,\r\n                                   (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera);\r\n                this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\r\n                this.camera = camera;\r\n            } else {\r\n                throw new Error('Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type');\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    intersectSplatMesh = function() {\r\n\r\n        const toLocal = new THREE.Matrix4();\r\n        const fromLocal = new THREE.Matrix4();\r\n        const sceneTransform = new THREE.Matrix4();\r\n        const localRay = new Ray();\r\n        const tempPoint = new THREE.Vector3();\r\n\r\n        return function(splatMesh, outHits = []) {\r\n            const splatTree = splatMesh.getSplatTree();\r\n\r\n            if (!splatTree) return;\r\n\r\n            for (let s = 0; s < splatTree.subTrees.length; s++) {\r\n                const subTree = splatTree.subTrees[s];\r\n\r\n                fromLocal.copy(splatMesh.matrixWorld);\r\n                if (splatMesh.dynamicMode) {\r\n                    splatMesh.getSceneTransform(s, sceneTransform);\r\n                    fromLocal.multiply(sceneTransform);\r\n                }\r\n                toLocal.copy(fromLocal).invert();\r\n\r\n                localRay.origin.copy(this.ray.origin).applyMatrix4(toLocal);\r\n                localRay.direction.copy(this.ray.origin).add(this.ray.direction);\r\n                localRay.direction.applyMatrix4(toLocal).sub(localRay.origin).normalize();\r\n\r\n                const outHitsForSubTree = [];\r\n                if (subTree.rootNode) {\r\n                    this.castRayAtSplatTreeNode(localRay, splatTree, subTree.rootNode, outHitsForSubTree);\r\n                }\r\n\r\n                outHitsForSubTree.forEach((hit) => {\r\n                    hit.origin.applyMatrix4(fromLocal);\r\n                    hit.normal.applyMatrix4(fromLocal).normalize();\r\n                    hit.distance = tempPoint.copy(hit.origin).sub(this.ray.origin).length();\r\n                });\r\n\r\n                outHits.push(...outHitsForSubTree);\r\n            }\r\n\r\n            outHits.sort((a, b) => {\r\n                if (a.distance > b.distance) return 1;\r\n                else return -1;\r\n            });\r\n\r\n            return outHits;\r\n        };\r\n\r\n    }();\r\n\r\n    castRayAtSplatTreeNode = function() {\r\n\r\n        const tempColor = new THREE.Vector4();\r\n        const tempCenter = new THREE.Vector3();\r\n        const tempScale = new THREE.Vector3();\r\n        const tempRotation = new THREE.Quaternion();\r\n        const tempHit = new Hit();\r\n        const scaleEpsilon = 0.0000001;\r\n\r\n        const origin = new THREE.Vector3(0, 0, 0);\r\n        const uniformScaleMatrix = new THREE.Matrix4();\r\n        const scaleMatrix = new THREE.Matrix4();\r\n        const rotationMatrix = new THREE.Matrix4();\r\n        const toSphereSpace = new THREE.Matrix4();\r\n        const fromSphereSpace = new THREE.Matrix4();\r\n        const tempRay = new Ray();\r\n\r\n        return function(ray, splatTree, node, outHits = []) {\r\n            if (!ray.intersectBox(node.boundingBox)) {\r\n                return;\r\n            }\r\n            if (node.data && node.data.indexes && node.data.indexes.length > 0) {\r\n                for (let i = 0; i < node.data.indexes.length; i++) {\r\n                    const splatGlobalIndex = node.data.indexes[i];\r\n                    splatTree.splatMesh.getSplatColor(splatGlobalIndex, tempColor);\r\n                    splatTree.splatMesh.getSplatCenter(splatGlobalIndex, tempCenter);\r\n                    splatTree.splatMesh.getSplatScaleAndRotation(splatGlobalIndex, tempScale, tempRotation);\r\n\r\n                    if (tempScale.x <= scaleEpsilon || tempScale.y <= scaleEpsilon || tempScale.z <= scaleEpsilon) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (!this.raycastAgainstTrueSplatEllipsoid) {\r\n                        const radius = (tempScale.x + tempScale.y + tempScale.z) / 3;\r\n                        if (ray.intersectSphere(tempCenter, radius, tempHit)) {\r\n                            const hitClone = tempHit.clone();\r\n                            hitClone.splatIndex = splatGlobalIndex;\r\n                            outHits.push(hitClone);\r\n                        }\r\n                    } else {\r\n                        scaleMatrix.makeScale(tempScale.x, tempScale.y, tempScale.z);\r\n                        rotationMatrix.makeRotationFromQuaternion(tempRotation);\r\n                        const uniformScale = Math.log10(tempColor.w) * 2.0;\r\n                        uniformScaleMatrix.makeScale(uniformScale, uniformScale, uniformScale);\r\n                        fromSphereSpace.copy(uniformScaleMatrix).multiply(rotationMatrix).multiply(scaleMatrix);\r\n                        toSphereSpace.copy(fromSphereSpace).invert();\r\n                        tempRay.origin.copy(ray.origin).sub(tempCenter).applyMatrix4(toSphereSpace);\r\n                        tempRay.direction.copy(ray.origin).add(ray.direction).sub(tempCenter);\r\n                        tempRay.direction.applyMatrix4(toSphereSpace).sub(tempRay.origin).normalize();\r\n                        if (tempRay.intersectSphere(origin, 1.0, tempHit)) {\r\n                            const hitClone = tempHit.clone();\r\n                            hitClone.splatIndex = splatGlobalIndex;\r\n                            hitClone.origin.applyMatrix4(fromSphereSpace).add(tempCenter);\r\n                            outHits.push(hitClone);\r\n                        }\r\n                    }\r\n                }\r\n             }\r\n            if (node.children && node.children.length > 0) {\r\n                for (let child of node.children) {\r\n                    this.castRayAtSplatTreeNode(ray, splatTree, child, outHits);\r\n                }\r\n            }\r\n            return outHits;\r\n        };\r\n\r\n    }();\r\n}\r\n","import * as THREE from 'three';\r\n\r\n/**\r\n * SplatScene: Descriptor for a single splat scene managed by an instance of SplatMesh.\r\n */\r\nexport class SplatScene {\r\n\r\n    constructor(splatBuffer, position = new THREE.Vector3(), quaternion = new THREE.Quaternion(),\r\n                scale = new THREE.Vector3(1, 1, 1), minimumAlpha = 1) {\r\n        this.splatBuffer = splatBuffer;\r\n        this.position = position.clone();\r\n        this.quaternion = quaternion.clone();\r\n        this.scale = scale.clone();\r\n        this.transform = new THREE.Matrix4();\r\n        this.minimumAlpha = minimumAlpha;\r\n        this.updateTransform();\r\n    }\r\n\r\n    copyTransformData(otherScene) {\r\n        this.position.copy(otherScene.position);\r\n        this.quaternion.copy(otherScene.quaternion);\r\n        this.scale.copy(otherScene.scale);\r\n        this.transform.copy(otherScene.transform);\r\n    }\r\n\r\n    updateTransform() {\r\n        this.transform.compose(this.position, this.quaternion, this.scale);\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { delayedExecute } from '../Util.js';\r\n\r\nclass SplatTreeNode {\r\n\r\n    static idGen = 0;\r\n\r\n    constructor(min, max, depth, id) {\r\n        this.min = new THREE.Vector3().copy(min);\r\n        this.max = new THREE.Vector3().copy(max);\r\n        this.boundingBox = new THREE.Box3(this.min, this.max);\r\n        this.center = new THREE.Vector3().copy(this.max).sub(this.min).multiplyScalar(0.5).add(this.min);\r\n        this.depth = depth;\r\n        this.children = [];\r\n        this.data = null;\r\n        this.id = id || SplatTreeNode.idGen++;\r\n    }\r\n\r\n}\r\n\r\nclass SplatSubTree {\r\n\r\n    constructor(maxDepth, maxCentersPerNode) {\r\n        this.maxDepth = maxDepth;\r\n        this.maxCentersPerNode = maxCentersPerNode;\r\n        this.sceneDimensions = new THREE.Vector3();\r\n        this.sceneMin = new THREE.Vector3();\r\n        this.sceneMax = new THREE.Vector3();\r\n        this.rootNode = null;\r\n        this.nodesWithIndexes = [];\r\n        this.splatMesh = null;\r\n    }\r\n\r\n    static convertWorkerSubTreeNode(workerSubTreeNode) {\r\n        const minVector = new THREE.Vector3().fromArray(workerSubTreeNode.min);\r\n        const maxVector = new THREE.Vector3().fromArray(workerSubTreeNode.max);\r\n        const convertedNode = new SplatTreeNode(minVector, maxVector, workerSubTreeNode.depth, workerSubTreeNode.id);\r\n        if (workerSubTreeNode.data.indexes) {\r\n            convertedNode.data = {\r\n                'indexes': []\r\n            };\r\n            for (let index of workerSubTreeNode.data.indexes) {\r\n                convertedNode.data.indexes.push(index);\r\n            }\r\n        }\r\n        if (workerSubTreeNode.children) {\r\n            for (let child of workerSubTreeNode.children) {\r\n                convertedNode.children.push(SplatSubTree.convertWorkerSubTreeNode(child));\r\n            }\r\n        }\r\n        return convertedNode;\r\n    }\r\n\r\n    static convertWorkerSubTree(workerSubTree, splatMesh) {\r\n        const convertedSubTree = new SplatSubTree(workerSubTree.maxDepth, workerSubTree.maxCentersPerNode);\r\n        convertedSubTree.sceneMin = new THREE.Vector3().fromArray(workerSubTree.sceneMin);\r\n        convertedSubTree.sceneMax = new THREE.Vector3().fromArray(workerSubTree.sceneMax);\r\n\r\n        convertedSubTree.splatMesh = splatMesh;\r\n        convertedSubTree.rootNode = SplatSubTree.convertWorkerSubTreeNode(workerSubTree.rootNode);\r\n\r\n\r\n        const visitLeavesFromNode = (node, visitFunc) => {\r\n            if (node.children.length === 0) visitFunc(node);\r\n            for (let child of node.children) {\r\n                visitLeavesFromNode(child, visitFunc);\r\n            }\r\n        };\r\n\r\n        convertedSubTree.nodesWithIndexes = [];\r\n        visitLeavesFromNode(convertedSubTree.rootNode, (node) => {\r\n            if (node.data && node.data.indexes && node.data.indexes.length > 0) {\r\n                convertedSubTree.nodesWithIndexes.push(node);\r\n            }\r\n        });\r\n\r\n        return convertedSubTree;\r\n    }\r\n}\r\n\r\nlet splatTreeWorker;\r\nfunction createSplatTreeWorker(self) {\r\n\r\n    let WorkerSplatTreeNodeIDGen = 0;\r\n\r\n    class WorkerBox3 {\r\n\r\n        constructor(min, max) {\r\n            this.min = [min[0], min[1], min[2]];\r\n            this.max = [max[0], max[1], max[2]];\r\n        }\r\n\r\n        containsPoint(point) {\r\n            return point[0] >= this.min[0] && point[0] <= this.max[0] &&\r\n                   point[1] >= this.min[1] && point[1] <= this.max[1] &&\r\n                   point[2] >= this.min[2] && point[2] <= this.max[2];\r\n        }\r\n    }\r\n\r\n    class WorkerSplatSubTree {\r\n\r\n        constructor(maxDepth, maxCentersPerNode) {\r\n            this.maxDepth = maxDepth;\r\n            this.maxCentersPerNode = maxCentersPerNode;\r\n            this.sceneDimensions = [];\r\n            this.sceneMin = [];\r\n            this.sceneMax = [];\r\n            this.rootNode = null;\r\n            this.addedIndexes = {};\r\n            this.nodesWithIndexes = [];\r\n            this.splatMesh = null;\r\n        }\r\n\r\n    }\r\n\r\n    class WorkerSplatTreeNode {\r\n\r\n        constructor(min, max, depth, id) {\r\n            this.min = [min[0], min[1], min[2]];\r\n            this.max = [max[0], max[1], max[2]];\r\n            this.center = [(max[0] - min[0]) * 0.5 + min[0],\r\n                           (max[1] - min[1]) * 0.5 + min[1],\r\n                           (max[2] - min[2]) * 0.5 + min[2]];\r\n            this.depth = depth;\r\n            this.children = [];\r\n            this.data = null;\r\n            this.id = id || WorkerSplatTreeNodeIDGen++;\r\n        }\r\n\r\n    }\r\n\r\n    processSplatTreeNode = function(tree, node, indexToCenter, sceneCenters) {\r\n        const splatCount = node.data.indexes.length;\r\n\r\n        if (splatCount < tree.maxCentersPerNode || node.depth > tree.maxDepth) {\r\n            const newIndexes = [];\r\n            for (let i = 0; i < node.data.indexes.length; i++) {\r\n                if (!tree.addedIndexes[node.data.indexes[i]]) {\r\n                    newIndexes.push(node.data.indexes[i]);\r\n                    tree.addedIndexes[node.data.indexes[i]] = true;\r\n                }\r\n            }\r\n            node.data.indexes = newIndexes;\r\n            node.data.indexes.sort((a, b) => {\r\n                if (a > b) return 1;\r\n                else return -1;\r\n            });\r\n            tree.nodesWithIndexes.push(node);\r\n            return;\r\n        }\r\n\r\n        const nodeDimensions = [node.max[0] - node.min[0],\r\n                                node.max[1] - node.min[1],\r\n                                node.max[2] - node.min[2]];\r\n        const halfDimensions = [nodeDimensions[0] * 0.5,\r\n                                nodeDimensions[1] * 0.5,\r\n                                nodeDimensions[2] * 0.5];\r\n        const nodeCenter = [node.min[0] + halfDimensions[0],\r\n                            node.min[1] + halfDimensions[1],\r\n                            node.min[2] + halfDimensions[2]];\r\n\r\n        const childrenBounds = [\r\n            // top section, clockwise from upper-left (looking from above, +Y)\r\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1], nodeCenter[2] - halfDimensions[2]],\r\n                           [nodeCenter[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2]]),\r\n            new WorkerBox3([nodeCenter[0], nodeCenter[1], nodeCenter[2] - halfDimensions[2]],\r\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2]]),\r\n            new WorkerBox3([nodeCenter[0], nodeCenter[1], nodeCenter[2]],\r\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2] + halfDimensions[2]]),\r\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1], nodeCenter[2]],\r\n                           [nodeCenter[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2] + halfDimensions[2]]),\r\n\r\n            // bottom section, clockwise from lower-left (looking from above, +Y)\r\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2] - halfDimensions[2]],\r\n                           [nodeCenter[0], nodeCenter[1], nodeCenter[2]]),\r\n            new WorkerBox3([nodeCenter[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2] - halfDimensions[2]],\r\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1], nodeCenter[2]]),\r\n            new WorkerBox3([nodeCenter[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2]],\r\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1], nodeCenter[2] + halfDimensions[2]]),\r\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2]],\r\n                           [nodeCenter[0], nodeCenter[1], nodeCenter[2] + halfDimensions[2]]),\r\n        ];\r\n\r\n        const splatCounts = [];\r\n        const baseIndexes = [];\r\n        for (let i = 0; i < childrenBounds.length; i++) {\r\n            splatCounts[i] = 0;\r\n            baseIndexes[i] = [];\r\n        }\r\n\r\n        const center = [0, 0, 0];\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const splatGlobalIndex = node.data.indexes[i];\r\n            const centerBase = indexToCenter[splatGlobalIndex];\r\n            center[0] = sceneCenters[centerBase];\r\n            center[1] = sceneCenters[centerBase + 1];\r\n            center[2] = sceneCenters[centerBase + 2];\r\n            for (let j = 0; j < childrenBounds.length; j++) {\r\n                if (childrenBounds[j].containsPoint(center)) {\r\n                    splatCounts[j]++;\r\n                    baseIndexes[j].push(splatGlobalIndex);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < childrenBounds.length; i++) {\r\n            const childNode = new WorkerSplatTreeNode(childrenBounds[i].min, childrenBounds[i].max, node.depth + 1);\r\n            childNode.data = {\r\n                'indexes': baseIndexes[i]\r\n            };\r\n            node.children.push(childNode);\r\n        }\r\n\r\n        node.data = {};\r\n        for (let child of node.children) {\r\n            processSplatTreeNode(tree, child, indexToCenter, sceneCenters);\r\n        }\r\n        return;\r\n    };\r\n\r\n    const buildSubTree = (sceneCenters, maxDepth, maxCentersPerNode) => {\r\n\r\n        const sceneMin = [0, 0, 0];\r\n        const sceneMax = [0, 0, 0];\r\n        const indexes = [];\r\n        const centerCount = Math.floor(sceneCenters.length / 4);\r\n        for ( let i = 0; i < centerCount; i ++) {\r\n            const base = i * 4;\r\n            const x = sceneCenters[base];\r\n            const y = sceneCenters[base + 1];\r\n            const z = sceneCenters[base + 2];\r\n            const index = Math.round(sceneCenters[base + 3]);\r\n            if (i === 0 || x < sceneMin[0]) sceneMin[0] = x;\r\n            if (i === 0 || x > sceneMax[0]) sceneMax[0] = x;\r\n            if (i === 0 || y < sceneMin[1]) sceneMin[1] = y;\r\n            if (i === 0 || y > sceneMax[1]) sceneMax[1] = y;\r\n            if (i === 0 || z < sceneMin[2]) sceneMin[2] = z;\r\n            if (i === 0 || z > sceneMax[2]) sceneMax[2] = z;\r\n            indexes.push(index);\r\n        }\r\n        const subTree = new WorkerSplatSubTree(maxDepth, maxCentersPerNode);\r\n        subTree.sceneMin = sceneMin;\r\n        subTree.sceneMax = sceneMax;\r\n        subTree.rootNode = new WorkerSplatTreeNode(subTree.sceneMin, subTree.sceneMax, 0);\r\n        subTree.rootNode.data = {\r\n            'indexes': indexes\r\n        };\r\n\r\n        return subTree;\r\n    };\r\n\r\n    function createSplatTree(allCenters, maxDepth, maxCentersPerNode) {\r\n        const indexToCenter = [];\r\n        for (let sceneCenters of allCenters) {\r\n            const centerCount = Math.floor(sceneCenters.length / 4);\r\n            for ( let i = 0; i < centerCount; i ++) {\r\n                const base = i * 4;\r\n                const index = Math.round(sceneCenters[base + 3]);\r\n                indexToCenter[index] = base;\r\n            }\r\n        }\r\n        const subTrees = [];\r\n        for (let sceneCenters of allCenters) {\r\n            const subTree = buildSubTree(sceneCenters, maxDepth, maxCentersPerNode);\r\n            subTrees.push(subTree);\r\n            processSplatTreeNode(subTree, subTree.rootNode, indexToCenter, sceneCenters);\r\n        }\r\n        self.postMessage({\r\n            'subTrees': subTrees\r\n        });\r\n    }\r\n\r\n    self.onmessage = (e) => {\r\n        if (e.data.process) {\r\n            createSplatTree(e.data.process.centers, e.data.process.maxDepth, e.data.process.maxCentersPerNode);\r\n        }\r\n    };\r\n}\r\n\r\nfunction workerProcessCenters(centers, transferBuffers, maxDepth, maxCentersPerNode) {\r\n    splatTreeWorker.postMessage({\r\n        'process': {\r\n            'centers': centers,\r\n            'maxDepth': maxDepth,\r\n            'maxCentersPerNode': maxCentersPerNode\r\n        }\r\n    }, transferBuffers);\r\n}\r\n\r\nfunction checkAndCreateWorker() {\r\n    if (!splatTreeWorker) {\r\n        splatTreeWorker = new Worker(\r\n            URL.createObjectURL(\r\n                new Blob(['(', createSplatTreeWorker.toString(), ')(self)'], {\r\n                    type: 'application/javascript',\r\n                }),\r\n            ),\r\n        );\r\n    }\r\n}\r\n\r\n/**\r\n * SplatTree: Octree tailored to splat data from a SplatMesh instance\r\n */\r\nexport class SplatTree {\r\n\r\n    constructor(maxDepth, maxCentersPerNode) {\r\n        this.maxDepth = maxDepth;\r\n        this.maxCentersPerNode = maxCentersPerNode;\r\n        this.subTrees = [];\r\n        this.splatMesh = null;\r\n    }\r\n\r\n    /**\r\n     * Construct this instance of SplatTree from an instance of SplatMesh.\r\n     *\r\n     * @param {SplatMesh} splatMesh The instance of SplatMesh from which to construct this splat tree.\r\n     * @param {function} filterFunc Optional function to filter out unwanted splats.\r\n     * @param {function} onIndexesUpload Function to be called when the upload of splat centers to the splat tree\r\n     *                            builder worker starts and finishes.\r\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\r\n     *                                    the format produced by the splat tree builder worker starts and ends.\r\n     * @return {undefined}\r\n     */\r\n    processSplatMesh = function(splatMesh, filterFunc = () => true, onIndexesUpload, onSplatTreeConstruction) {\r\n        checkAndCreateWorker();\r\n\r\n        this.splatMesh = splatMesh;\r\n        this.subTrees = [];\r\n        const center = new THREE.Vector3();\r\n\r\n        const addCentersForScene = (splatOffset, splatCount) => {\r\n            const sceneCenters = new Float32Array(splatCount * 4);\r\n            let addedCount = 0;\r\n            for (let i = 0; i < splatCount; i++) {\r\n                const globalSplatIndex = i + splatOffset;\r\n                if (filterFunc(globalSplatIndex)) {\r\n                    splatMesh.getSplatCenter(globalSplatIndex, center);\r\n                    const addBase = addedCount * 4;\r\n                    sceneCenters[addBase] = center.x;\r\n                    sceneCenters[addBase + 1] = center.y;\r\n                    sceneCenters[addBase + 2] = center.z;\r\n                    sceneCenters[addBase + 3] = globalSplatIndex;\r\n                    addedCount++;\r\n                }\r\n            }\r\n            return sceneCenters;\r\n        };\r\n\r\n        const diposeSplatTreeWorker = () => {\r\n            splatTreeWorker.terminate();\r\n            splatTreeWorker = null;\r\n        };\r\n\r\n        const checkForEarlyExit = (resolve) => {\r\n            if (splatMesh.disposed) {\r\n                diposeSplatTreeWorker();\r\n                resolve();\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n\r\n        return new Promise((resolve) => {\r\n\r\n            if (onIndexesUpload) onIndexesUpload(false);\r\n\r\n            delayedExecute(() => {\r\n\r\n                if (checkForEarlyExit(resolve)) return;\r\n\r\n                const allCenters = [];\r\n                if (splatMesh.dynamicMode) {\r\n                    let splatOffset = 0;\r\n                    for (let s = 0; s < splatMesh.scenes.length; s++) {\r\n                        const scene = splatMesh.getScene(s);\r\n                        const splatCount = scene.splatBuffer.getSplatCount();\r\n                        const sceneCenters = addCentersForScene(splatOffset, splatCount);\r\n                        allCenters.push(sceneCenters);\r\n                        splatOffset += splatCount;\r\n                    }\r\n                } else {\r\n                    const sceneCenters = addCentersForScene(0, splatMesh.getSplatCount());\r\n                    allCenters.push(sceneCenters);\r\n                }\r\n\r\n                splatTreeWorker.onmessage = (e) => {\r\n\r\n                    if (checkForEarlyExit(resolve)) return;\r\n\r\n                    if (e.data.subTrees) {\r\n\r\n                        if (onSplatTreeConstruction) onSplatTreeConstruction(false);\r\n\r\n                        delayedExecute(() => {\r\n\r\n                            if (checkForEarlyExit(resolve)) return;\r\n\r\n                            for (let workerSubTree of e.data.subTrees) {\r\n                                const convertedSubTree = SplatSubTree.convertWorkerSubTree(workerSubTree, splatMesh);\r\n                                this.subTrees.push(convertedSubTree);\r\n                            }\r\n                            diposeSplatTreeWorker();\r\n\r\n                            if (onSplatTreeConstruction) onSplatTreeConstruction(true);\r\n\r\n                            delayedExecute(() => {\r\n                                resolve();\r\n                            });\r\n\r\n                        });\r\n                    }\r\n                };\r\n\r\n                delayedExecute(() => {\r\n                    if (checkForEarlyExit(resolve)) return;\r\n                    if (onIndexesUpload) onIndexesUpload(true);\r\n                    const transferBuffers = allCenters.map((array) => array.buffer);\r\n                    workerProcessCenters(allCenters, transferBuffers, this.maxDepth, this.maxCentersPerNode);\r\n                });\r\n\r\n            });\r\n\r\n        });\r\n\r\n    };\r\n\r\n    countLeaves() {\r\n\r\n        let leafCount = 0;\r\n        this.visitLeaves(() => {\r\n            leafCount++;\r\n        });\r\n\r\n        return leafCount;\r\n    }\r\n\r\n    visitLeaves(visitFunc) {\r\n\r\n        const visitLeavesFromNode = (node, visitFunc) => {\r\n            if (node.children.length === 0) visitFunc(node);\r\n            for (let child of node.children) {\r\n                visitLeavesFromNode(child, visitFunc);\r\n            }\r\n        };\r\n\r\n        for (let subTree of this.subTrees) {\r\n            visitLeavesFromNode(subTree.rootNode, visitFunc);\r\n        }\r\n    }\r\n\r\n}\r\n","function WebGLExtensions( gl ) {\r\n\r\n    const extensions = {};\r\n\r\n    function getExtension( name ) {\r\n\r\n        if ( extensions[name] !== undefined ) {\r\n\r\n            return extensions[name];\r\n\r\n        }\r\n\r\n        let extension;\r\n\r\n        switch ( name ) {\r\n\r\n            case 'WEBGL_depth_texture':\r\n                extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) ||\r\n                            gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\r\n                break;\r\n\r\n            case 'EXT_texture_filter_anisotropic':\r\n                extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) ||\r\n                            gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) ||\r\n                            gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\r\n                break;\r\n\r\n            case 'WEBGL_compressed_texture_s3tc':\r\n                extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) ||\r\n                            gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) ||\r\n                            gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\r\n                break;\r\n\r\n            case 'WEBGL_compressed_texture_pvrtc':\r\n                extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) ||\r\n                           gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\r\n                break;\r\n\r\n            default:\r\n                extension = gl.getExtension( name );\r\n\r\n        }\r\n\r\n        extensions[name] = extension;\r\n\r\n        return extension;\r\n\r\n    }\r\n\r\n    return {\r\n\r\n        has: function( name ) {\r\n\r\n            return getExtension( name ) !== null;\r\n\r\n        },\r\n\r\n        init: function( capabilities ) {\r\n\r\n            if ( capabilities.isWebGL2 ) {\r\n\r\n                getExtension( 'EXT_color_buffer_float' );\r\n                getExtension( 'WEBGL_clip_cull_distance' );\r\n\r\n            } else {\r\n\r\n                getExtension( 'WEBGL_depth_texture' );\r\n                getExtension( 'OES_texture_float' );\r\n                getExtension( 'OES_texture_half_float' );\r\n                getExtension( 'OES_texture_half_float_linear' );\r\n                getExtension( 'OES_standard_derivatives' );\r\n                getExtension( 'OES_element_index_uint' );\r\n                getExtension( 'OES_vertex_array_object' );\r\n                getExtension( 'ANGLE_instanced_arrays' );\r\n\r\n            }\r\n\r\n            getExtension( 'OES_texture_float_linear' );\r\n            getExtension( 'EXT_color_buffer_half_float' );\r\n            getExtension( 'WEBGL_multisampled_render_to_texture' );\r\n\r\n        },\r\n\r\n        get: function( name ) {\r\n\r\n            const extension = getExtension( name );\r\n\r\n            if ( extension === null ) {\r\n\r\n                console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\r\n\r\n            }\r\n\r\n            return extension;\r\n\r\n        }\r\n\r\n    };\r\n\r\n}\r\n\r\nexport { WebGLExtensions };\r\n","function WebGLCapabilities( gl, extensions, parameters ) {\r\n\r\n    let maxAnisotropy;\r\n\r\n    function getMaxAnisotropy() {\r\n\r\n        if ( maxAnisotropy !== undefined ) return maxAnisotropy;\r\n\r\n        if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\r\n\r\n            const extension = extensions.get( 'EXT_texture_filter_anisotropic' );\r\n\r\n            maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\r\n\r\n        } else {\r\n\r\n            maxAnisotropy = 0;\r\n\r\n        }\r\n\r\n        return maxAnisotropy;\r\n\r\n    }\r\n\r\n    function getMaxPrecision( precision ) {\r\n\r\n        if ( precision === 'highp' ) {\r\n\r\n            if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\r\n                gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\r\n\r\n                return 'highp';\r\n\r\n            }\r\n\r\n            precision = 'mediump';\r\n\r\n        }\r\n\r\n        if ( precision === 'mediump' ) {\r\n\r\n            if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\r\n                gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\r\n\r\n                return 'mediump';\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return 'lowp';\r\n\r\n    }\r\n\r\n    const isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl.constructor.name === 'WebGL2RenderingContext';\r\n\r\n    let precision = parameters.precision !== undefined ? parameters.precision : 'highp';\r\n    const maxPrecision = getMaxPrecision( precision );\r\n\r\n    if ( maxPrecision !== precision ) {\r\n\r\n        console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\r\n        precision = maxPrecision;\r\n\r\n    }\r\n\r\n    const drawBuffers = isWebGL2 || extensions.has( 'WEBGL_draw_buffers' );\r\n\r\n    const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\r\n\r\n    const maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\r\n    const maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\r\n    const maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\r\n    const maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\r\n\r\n    const maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\r\n    const maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\r\n    const maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\r\n    const maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\r\n\r\n    const vertexTextures = maxVertexTextures > 0;\r\n    const floatFragmentTextures = isWebGL2 || extensions.has( 'OES_texture_float' );\r\n    const floatVertexTextures = vertexTextures && floatFragmentTextures;\r\n\r\n    const maxSamples = isWebGL2 ? gl.getParameter( gl.MAX_SAMPLES ) : 0;\r\n\r\n    return {\r\n\r\n        isWebGL2: isWebGL2,\r\n\r\n        drawBuffers: drawBuffers,\r\n\r\n        getMaxAnisotropy: getMaxAnisotropy,\r\n        getMaxPrecision: getMaxPrecision,\r\n\r\n        precision: precision,\r\n        logarithmicDepthBuffer: logarithmicDepthBuffer,\r\n\r\n        maxTextures: maxTextures,\r\n        maxVertexTextures: maxVertexTextures,\r\n        maxTextureSize: maxTextureSize,\r\n        maxCubemapSize: maxCubemapSize,\r\n\r\n        maxAttributes: maxAttributes,\r\n        maxVertexUniforms: maxVertexUniforms,\r\n        maxVaryings: maxVaryings,\r\n        maxFragmentUniforms: maxFragmentUniforms,\r\n\r\n        vertexTextures: vertexTextures,\r\n        floatFragmentTextures: floatFragmentTextures,\r\n        floatVertexTextures: floatVertexTextures,\r\n\r\n        maxSamples: maxSamples\r\n\r\n    };\r\n\r\n}\r\n\r\n\r\nexport { WebGLCapabilities };\r\n","export const SceneRevealMode = {\r\n    Default: 0,\r\n    Gradual: 1,\r\n    Instant: 2\r\n};\r\n","import * as THREE from 'three';\r\nimport { SplatScene } from './SplatScene.js';\r\nimport { SplatTree } from './splattree/SplatTree.js';\r\nimport { WebGLExtensions } from './three-shim/WebGLExtensions.js';\r\nimport { WebGLCapabilities } from './three-shim/WebGLCapabilities.js';\r\nimport { uintEncodedFloat, rgbaArrayToInteger } from './Util.js';\r\nimport { Constants } from './Constants.js';\r\nimport { SceneRevealMode } from './SceneRevealMode.js';\r\n\r\nconst dummyGeometry = new THREE.BufferGeometry();\r\nconst dummyMaterial = new THREE.MeshBasicMaterial();\r\n\r\nconst COVARIANCES_ELEMENTS_PER_SPLAT = 6;\r\nconst CENTER_COLORS_ELEMENTS_PER_SPLAT = 4;\r\n\r\nconst SCENE_FADEIN_RATE_FAST = 0.012;\r\nconst SCENE_FADEIN_RATE_GRADUAL = 0.003;\r\n\r\nconst VISIBLE_REGION_EXPANSION_DELTA = 1;\r\n\r\n/**\r\n * SplatMesh: Container for one or more splat scenes, abstracting them into a single unified container for\r\n * splat data. Additionally contains data structures and code to make the splat data renderable as a Three.js mesh.\r\n */\r\nexport class SplatMesh extends THREE.Mesh {\r\n\r\n    constructor(dynamicMode = true, halfPrecisionCovariancesOnGPU = false, devicePixelRatio = 1,\r\n                enableDistancesComputationOnGPU = true, integerBasedDistancesComputation = false,\r\n                antialiased = false, maxScreenSpaceSplatSize = 2048) {\r\n        super(dummyGeometry, dummyMaterial);\r\n        // Reference to a Three.js renderer\r\n        this.renderer = undefined;\r\n        // Use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\r\n        this.halfPrecisionCovariancesOnGPU = halfPrecisionCovariancesOnGPU;\r\n        // When 'dynamicMode' is true, scenes are assumed to be non-static. Dynamic scenes are handled differently\r\n        // and certain optimizations cannot be made for them. Additionally, by default, all splat data retrieved from\r\n        // this splat mesh will not have their scene transform applied to them if the splat mesh is dynamic. That\r\n        // can be overriden via parameters to the individual functions that are used to retrieve splat data.\r\n        this.dynamicMode = dynamicMode;\r\n        // Ratio of the resolution in physical pixels to the resolution in CSS pixels for the current display device\r\n        this.devicePixelRatio = devicePixelRatio;\r\n        // Use a transform feedback to calculate splat distances from the camera\r\n        this.enableDistancesComputationOnGPU = enableDistancesComputationOnGPU;\r\n        // Use a faster integer-based approach for calculating splat distances from the camera\r\n        this.integerBasedDistancesComputation = integerBasedDistancesComputation;\r\n        // When true, will perform additional steps during rendering to address artifacts caused by the rendering of gaussians at a\r\n        // substantially different resolution than that at which they were rendered during training. This will only work correctly\r\n        // for models that were trained using a process that utilizes this compensation calculation. For more details:\r\n        // https://github.com/nerfstudio-project/gsplat/pull/117\r\n        // https://github.com/graphdeco-inria/gaussian-splatting/issues/294#issuecomment-1772688093\r\n        this.antialiased = antialiased;\r\n        // Specify the maximum clip space splat size, can help deal with large splats that get too unwieldy\r\n        this.maxScreenSpaceSplatSize = maxScreenSpaceSplatSize;\r\n        // The individual splat scenes stored in this splat mesh, each containing their own transform\r\n        this.scenes = [];\r\n        // Special octree tailored to SplatMesh instances\r\n        this.splatTree = null;\r\n        // Textures in which splat data will be stored for rendering\r\n        this.splatDataTextures = {};\r\n        this.distancesTransformFeedback = {\r\n            'id': null,\r\n            'vertexShader': null,\r\n            'fragmentShader': null,\r\n            'program': null,\r\n            'centersBuffer': null,\r\n            'transformIndexesBuffer': null,\r\n            'outDistancesBuffer': null,\r\n            'centersLoc': -1,\r\n            'modelViewProjLoc': -1,\r\n            'transformIndexesLoc': -1,\r\n            'transformsLocs': []\r\n        };\r\n        this.globalSplatIndexToLocalSplatIndexMap = [];\r\n        this.globalSplatIndexToSceneIndexMap = [];\r\n\r\n        this.lastBuildSplatCount = 0;\r\n        this.lastBuildScenes = [];\r\n        this.lastBuildMaxSplatCount = 0;\r\n        this.lastBuildSceneCount = 0;\r\n        this.firstRenderTime = -1;\r\n        this.finalBuild = false;\r\n\r\n        this.webGLUtils = null;\r\n\r\n        this.boundingBox = new THREE.Box3();\r\n        this.calculatedSceneCenter = new THREE.Vector3();\r\n        this.maxSplatDistanceFromSceneCenter = 0;\r\n        this.visibleRegionBufferRadius = 0;\r\n        this.visibleRegionRadius = 0;\r\n        this.visibleRegionFadeStartRadius = 0;\r\n        this.visibleRegionChanging = false;\r\n\r\n        this.disposed = false;\r\n    }\r\n\r\n    /**\r\n     * Build the Three.js material that is used to render the splats.\r\n     * @param {number} dynamicMode If true, it means the scene geometry represented by this splat mesh is not stationary or\r\n     *                             that the splat count might change\r\n     * @param {boolean} antialiased If true, calculate compensation factor to deal with gaussians being rendered at a significantly\r\n     *                              different resolution than that of their training\r\n     * @param {number} maxScreenSpaceSplatSize The maximum clip space splat size\r\n     * @return {THREE.ShaderMaterial}\r\n     */\r\n    static buildMaterial(dynamicMode = false, antialiased = false, maxScreenSpaceSplatSize = 2048) {\r\n\r\n        // Contains the code to project 3D covariance to 2D and from there calculate the quad (using the eigen vectors of the\r\n        // 2D covariance) that is ultimately rasterized\r\n        let vertexShaderSource = `\r\n            precision highp float;\r\n            #include <common>\r\n\r\n            attribute uint splatIndex;\r\n\r\n            uniform highp sampler2D covariancesTexture;\r\n            uniform highp usampler2D centersColorsTexture;`;\r\n\r\n        if (dynamicMode) {\r\n            vertexShaderSource += `\r\n                uniform highp usampler2D transformIndexesTexture;\r\n                uniform highp mat4 transforms[${Constants.MaxScenes}];\r\n                uniform vec2 transformIndexesTextureSize;\r\n            `;\r\n        }\r\n\r\n        vertexShaderSource += `\r\n            uniform vec2 focal;\r\n            uniform float inverseFocalAdjustment;\r\n            uniform vec2 viewport;\r\n            uniform vec2 basisViewport;\r\n            uniform vec2 covariancesTextureSize;\r\n            uniform vec2 centersColorsTextureSize;\r\n            uniform float visibleRegionRadius;\r\n            uniform float visibleRegionFadeStartRadius;\r\n            uniform float firstRenderTime;\r\n            uniform float currentTime;\r\n            uniform int fadeInComplete;\r\n            uniform vec3 sceneCenter;\r\n\r\n            varying vec4 vColor;\r\n            varying vec2 vUv;\r\n\r\n            varying vec2 vPosition;\r\n\r\n            const float sqrt8 = sqrt(8.0);\r\n            const float minAlpha = 1.0 / 255.0;\r\n\r\n            const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\r\n            const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));\r\n            const uvec4 shift4 = uvec4(0, 8, 16, 24);\r\n            vec4 uintToRGBAVec (uint u) {\r\n               uvec4 urgba = mask4 & u;\r\n               urgba = urgba >> shift4;\r\n               vec4 rgba = vec4(urgba) * encodeNorm4;\r\n               return rgba;\r\n            }\r\n\r\n            vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\r\n                vec2 samplerUV = vec2(0.0, 0.0);\r\n                float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\r\n                samplerUV.y = float(floor(d)) / dimensions.y;\r\n                samplerUV.x = fract(d);\r\n                return samplerUV;\r\n            }\r\n\r\n            void main () {\r\n\r\n                uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));\r\n                vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));`;\r\n\r\n            if (dynamicMode) {\r\n                vertexShaderSource += `\r\n                    uint transformIndex = texture(transformIndexesTexture, getDataUV(1, 0, transformIndexesTextureSize)).r;\r\n                    mat4 transform = transforms[transformIndex];\r\n                    mat4 transformModelViewMatrix = modelViewMatrix * transform;\r\n                `;\r\n            } else {\r\n                vertexShaderSource += `mat4 transformModelViewMatrix = modelViewMatrix;`;\r\n            }\r\n\r\n            vertexShaderSource += `\r\n                vec4 viewCenter = transformModelViewMatrix * vec4(splatCenter, 1.0);\r\n\r\n                vec4 clipCenter = projectionMatrix * viewCenter;\r\n\r\n                float clip = 1.2 * clipCenter.w;\r\n                if (clipCenter.z < -clip || clipCenter.x < -clip || clipCenter.x > clip || clipCenter.y < -clip || clipCenter.y > clip) {\r\n                    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\r\n                    return;\r\n                }\r\n\r\n                vPosition = position.xy;\r\n                vColor = uintToRGBAVec(sampledCenterColor.r);\r\n\r\n                vec2 sampledCovarianceA = texture(covariancesTexture, getDataUV(3, 0, covariancesTextureSize)).rg;\r\n                vec2 sampledCovarianceB = texture(covariancesTexture, getDataUV(3, 1, covariancesTextureSize)).rg;\r\n                vec2 sampledCovarianceC = texture(covariancesTexture, getDataUV(3, 2, covariancesTextureSize)).rg;\r\n\r\n                vec3 cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rg, sampledCovarianceB.r);\r\n                vec3 cov3D_M22_M23_M33 = vec3(sampledCovarianceB.g, sampledCovarianceC.rg);\r\n\r\n                // Construct the 3D covariance matrix\r\n                mat3 Vrk = mat3(\r\n                    cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\r\n                    cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\r\n                    cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\r\n                );\r\n\r\n                // Construct the Jacobian of the affine approximation of the projection matrix. It will be used to transform the\r\n                // 3D covariance matrix instead of using the actual projection matrix because that transformation would\r\n                // require a non-linear component (perspective division) which would yield a non-gaussian result. (This assumes\r\n                // the current projection is a perspective projection).\r\n\r\n                float s = 1.0 / (viewCenter.z * viewCenter.z);\r\n                mat3 J = mat3(\r\n                    focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) * s,\r\n                    0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) * s,\r\n                    0., 0., 0.\r\n                );\r\n\r\n                // Concatenate the projection approximation with the model-view transformation\r\n                mat3 W = transpose(mat3(transformModelViewMatrix));\r\n                mat3 T = W * J;\r\n\r\n                // Transform the 3D covariance matrix (Vrk) to compute the 2D covariance matrix\r\n                mat3 cov2Dm = transpose(T) * Vrk * T;\r\n                `;\r\n\r\n            if (antialiased) {\r\n                vertexShaderSource += `\r\n                    float detOrig = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\r\n                    cov2Dm[0][0] += 0.3;\r\n                    cov2Dm[1][1] += 0.3;\r\n                    float detBlur = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\r\n                    float compensation = sqrt(max(detOrig / detBlur, 0.0));\r\n                `;\r\n            } else {\r\n                vertexShaderSource += `\r\n                    cov2Dm[0][0] += 0.3;\r\n                    cov2Dm[1][1] += 0.3;\r\n                    float compensation = 1.0;\r\n                `;\r\n            }\r\n\r\n            vertexShaderSource += `\r\n\r\n                vColor.a *= compensation;\r\n\r\n                if (vColor.a < minAlpha) return;\r\n\r\n                // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\r\n                // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\r\n                // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\r\n                // need cov2Dm[1][0] because it is a symetric matrix.\r\n                vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\r\n\r\n                vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\r\n\r\n                // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\r\n                // so that we can determine the 2D basis for the splat. This is done using the method described\r\n                // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\r\n                // After calculating the eigen-values and eigen-vectors, we calculate the basis for rendering the splat\r\n                // by normalizing the eigen-vectors and then multiplying them by (sqrt(8) * eigen-value), which is\r\n                // equal to scaling them by sqrt(8) standard deviations.\r\n                //\r\n                // This is a different approach than in the original work at INRIA. In that work they compute the\r\n                // max extents of the projected splat in screen space to form a screen-space aligned bounding rectangle\r\n                // which forms the geometry that is actually rasterized. The dimensions of that bounding box are 3.0\r\n                // times the maximum eigen-value, or 3 standard deviations. They then use the inverse 2D covariance\r\n                // matrix (called 'conic') in the CUDA rendering thread to determine fragment opacity by calculating the\r\n                // full gaussian: exp(-0.5 * (X - mean) * conic * (X - mean)) * splat opacity\r\n                float a = cov2Dv.x;\r\n                float d = cov2Dv.z;\r\n                float b = cov2Dv.y;\r\n                float D = a * d - b * b;\r\n                float trace = a + d;\r\n                float traceOver2 = 0.5 * trace;\r\n                float term2 = sqrt(max(0.1f, traceOver2 * traceOver2 - D));\r\n                float eigenValue1 = traceOver2 + term2;\r\n                float eigenValue2 = traceOver2 - term2;\r\n\r\n                if (eigenValue2 <= 0.0) return;\r\n\r\n                vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\r\n                // since the eigen vectors are orthogonal, we derive the second one from the first\r\n                vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);\r\n\r\n                // We use sqrt(8) standard deviations instead of 3 to eliminate more of the splat with a very low opacity.\r\n                vec2 basisVector1 = eigenVector1 * min(sqrt8 * sqrt(eigenValue1), ${parseInt(maxScreenSpaceSplatSize)}.0);\r\n                vec2 basisVector2 = eigenVector2 * min(sqrt8 * sqrt(eigenValue2), ${parseInt(maxScreenSpaceSplatSize)}.0);\r\n\r\n                if (fadeInComplete == 0) {\r\n                    float opacityAdjust = 1.0;\r\n                    float centerDist = length(splatCenter - sceneCenter);\r\n                    float renderTime = max(currentTime - firstRenderTime, 0.0);\r\n\r\n                    float fadeDistance = 0.75;\r\n                    float distanceLoadFadeInFactor = step(visibleRegionFadeStartRadius, centerDist);\r\n                    distanceLoadFadeInFactor = (1.0 - distanceLoadFadeInFactor) +\r\n                                               (1.0 - clamp((centerDist - visibleRegionFadeStartRadius) / fadeDistance, 0.0, 1.0)) *\r\n                                               distanceLoadFadeInFactor;\r\n                    opacityAdjust *= distanceLoadFadeInFactor;\r\n                    vColor.a *= opacityAdjust;\r\n                }\r\n\r\n                vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) *\r\n                                 basisViewport * 2.0 * inverseFocalAdjustment;\r\n                gl_Position = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\r\n\r\n                // Scale the position data we send to the fragment shader\r\n                vPosition *= sqrt8;\r\n            }`;\r\n\r\n        const fragmentShaderSource = `\r\n            precision highp float;\r\n            #include <common>\r\n \r\n            uniform vec3 debugColor;\r\n\r\n            varying vec4 vColor;\r\n            varying vec2 vUv;\r\n\r\n            varying vec2 vPosition;\r\n\r\n            void main () {\r\n                // Compute the positional squared distance from the center of the splat to the current fragment.\r\n                float A = dot(vPosition, vPosition);\r\n                // Since the positional data in vPosition has been scaled by sqrt(8), the squared result will be\r\n                // scaled by a factor of 8. If the squared result is larger than 8, it means it is outside the ellipse\r\n                // defined by the rectangle formed by vPosition. It also means it's farther\r\n                // away than sqrt(8) standard deviations from the mean.\r\n                if (A > 8.0) discard;\r\n                vec3 color = vColor.rgb;\r\n\r\n                // Since the rendered splat is scaled by sqrt(8), the inverse covariance matrix that is part of\r\n                // the gaussian formula becomes the identity matrix. We're then left with (X - mean) * (X - mean),\r\n                // and since 'mean' is zero, we have X * X, which is the same as A:\r\n                float opacity = exp(-0.5 * A) * vColor.a;\r\n\r\n                gl_FragColor = vec4(color.rgb, opacity);\r\n            }`;\r\n\r\n        const uniforms = {\r\n            'sceneCenter': {\r\n                'type': 'v3',\r\n                'value': new THREE.Vector3()\r\n            },\r\n            'fadeInComplete': {\r\n                'type': 'i',\r\n                'value': 0\r\n            },\r\n            'visibleRegionFadeStartRadius': {\r\n                'type': 'f',\r\n                'value': 0.0\r\n            },\r\n            'visibleRegionRadius': {\r\n                'type': 'f',\r\n                'value': 0.0\r\n            },\r\n            'currentTime': {\r\n                'type': 'f',\r\n                'value': 0.0\r\n            },\r\n            'firstRenderTime': {\r\n                'type': 'f',\r\n                'value': 0.0\r\n            },\r\n            'covariancesTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'centersColorsTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'focal': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'inverseFocalAdjustment': {\r\n                'type': 'f',\r\n                'value': 1.0\r\n            },\r\n            'viewport': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'basisViewport': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'debugColor': {\r\n                'type': 'v3',\r\n                'value': new THREE.Color()\r\n            },\r\n            'covariancesTextureSize': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2(1024, 1024)\r\n            },\r\n            'centersColorsTextureSize': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2(1024, 1024)\r\n            }\r\n        };\r\n\r\n        if (dynamicMode) {\r\n            uniforms['transformIndexesTexture'] = {\r\n                'type': 't',\r\n                'value': null\r\n            };\r\n            const transformMatrices = [];\r\n            for (let i = 0; i < Constants.MaxScenes; i++) {\r\n                transformMatrices.push(new THREE.Matrix4());\r\n            }\r\n            uniforms['transforms'] = {\r\n                'type': 'mat4',\r\n                'value': transformMatrices\r\n            };\r\n            uniforms['transformIndexesTextureSize'] = {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2(1024, 1024)\r\n            };\r\n        }\r\n\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: vertexShaderSource,\r\n            fragmentShader: fragmentShaderSource,\r\n            transparent: true,\r\n            alphaTest: 1.0,\r\n            blending: THREE.NormalBlending,\r\n            depthTest: true,\r\n            depthWrite: false,\r\n            side: THREE.DoubleSide\r\n        });\r\n\r\n        return material;\r\n    }\r\n\r\n    /**\r\n     * Build the Three.js geometry that will be used to render the splats. The geometry is instanced and is made up of\r\n     * vertices for a single quad as well as an attribute buffer for the splat indexes.\r\n     * @param {number} maxSplatCount The maximum number of splats that the geometry will need to accomodate\r\n     * @return {THREE.InstancedBufferGeometry}\r\n     */\r\n    static buildGeomtery(maxSplatCount) {\r\n\r\n        const baseGeometry = new THREE.BufferGeometry();\r\n        baseGeometry.setIndex([0, 1, 2, 0, 2, 3]);\r\n\r\n        // Vertices for the instanced quad\r\n        const positionsArray = new Float32Array(4 * 3);\r\n        const positions = new THREE.BufferAttribute(positionsArray, 3);\r\n        baseGeometry.setAttribute('position', positions);\r\n        positions.setXYZ(0, -1.0, -1.0, 0.0);\r\n        positions.setXYZ(1, -1.0, 1.0, 0.0);\r\n        positions.setXYZ(2, 1.0, 1.0, 0.0);\r\n        positions.setXYZ(3, 1.0, -1.0, 0.0);\r\n        positions.needsUpdate = true;\r\n\r\n        const geometry = new THREE.InstancedBufferGeometry().copy(baseGeometry);\r\n\r\n        // Splat index buffer\r\n        const splatIndexArray = new Uint32Array(maxSplatCount);\r\n        const splatIndexes = new THREE.InstancedBufferAttribute(splatIndexArray, 1, false);\r\n        splatIndexes.setUsage(THREE.DynamicDrawUsage);\r\n        geometry.setAttribute('splatIndex', splatIndexes);\r\n\r\n        geometry.instanceCount = 0;\r\n\r\n        return geometry;\r\n    }\r\n\r\n    /**\r\n     * Build a container for each scene managed by this splat mesh based on an instance of SplatBuffer, along with optional\r\n     * transform data (position, scale, rotation) passed to the splat mesh during the build process.\r\n     * @param {Array<THREE.Matrix4>} splatBuffers SplatBuffer instances containing splats for each scene\r\n     * @param {Array<object>} sceneOptions Array of options objects: {\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     * }\r\n     * @return {Array<THREE.Matrix4>}\r\n     */\r\n    static buildScenes(splatBuffers, sceneOptions) {\r\n        const scenes = [];\r\n        scenes.length = splatBuffers.length;\r\n        for (let i = 0; i < splatBuffers.length; i++) {\r\n            const splatBuffer = splatBuffers[i];\r\n            const options = sceneOptions[i] || {};\r\n            let positionArray = options['position'] || [0, 0, 0];\r\n            let rotationArray = options['rotation'] || [0, 0, 0, 1];\r\n            let scaleArray = options['scale'] || [1, 1, 1];\r\n            const position = new THREE.Vector3().fromArray(positionArray);\r\n            const rotation = new THREE.Quaternion().fromArray(rotationArray);\r\n            const scale = new THREE.Vector3().fromArray(scaleArray);\r\n            scenes[i] = SplatMesh.createScene(splatBuffer, position, rotation, scale, options.splatAlphaRemovalThreshold || 1);\r\n        }\r\n        return scenes;\r\n    }\r\n\r\n    static createScene(splatBuffer, position, rotation, scale, minimumAlpha) {\r\n        return new SplatScene(splatBuffer, position, rotation, scale, minimumAlpha);\r\n    }\r\n\r\n    /**\r\n     * Build data structures that map global splat indexes (based on a unified index across all splat buffers) to\r\n     * local data within a single scene.\r\n     * @param {Array<SplatBuffer>} splatBuffers Instances of SplatBuffer off which to build the maps\r\n     * @return {object}\r\n     */\r\n    static buildSplatIndexMaps(splatBuffers) {\r\n        const localSplatIndexMap = [];\r\n        const sceneIndexMap = [];\r\n        let totalSplatCount = 0;\r\n        for (let s = 0; s < splatBuffers.length; s++) {\r\n            const splatBuffer = splatBuffers[s];\r\n            const maxSplatCount = splatBuffer.getMaxSplatCount();\r\n            for (let i = 0; i < maxSplatCount; i++) {\r\n                localSplatIndexMap[totalSplatCount] = i;\r\n                sceneIndexMap[totalSplatCount] = s;\r\n                totalSplatCount++;\r\n            }\r\n        }\r\n        return {\r\n            localSplatIndexMap,\r\n            sceneIndexMap\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Build an instance of SplatTree (a specialized octree) for the given splat mesh.\r\n     * @param {SplatMesh} splatMesh SplatMesh instance for which the splat tree will be built\r\n     * @param {Array<number>} minAlphas Array of minimum splat slphas for each scene\r\n     * @param {function} onSplatTreeIndexesUpload Function to be called when the upload of splat centers to the splat tree\r\n     *                                            builder worker starts and finishes.\r\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\r\n     *                                           the format produced by the splat tree builder worker starts and ends.\r\n     * @return {SplatTree}\r\n     */\r\n    static buildSplatTree = function(splatMesh, minAlphas = [], onSplatTreeIndexesUpload, onSplatTreeConstruction) {\r\n        return new Promise((resolve) => {\r\n            // TODO: expose SplatTree constructor parameters (maximumDepth and maxCentersPerNode) so that they can\r\n            // be configured on a per-scene basis\r\n            const splatTree = new SplatTree(8, 1000);\r\n            console.time('SplatTree build');\r\n            const splatColor = new THREE.Vector4();\r\n            splatTree.processSplatMesh(splatMesh, (splatIndex) => {\r\n                splatMesh.getSplatColor(splatIndex, splatColor);\r\n                const sceneIndex = splatMesh.getSceneIndexForSplat(splatIndex);\r\n                const minAlpha = minAlphas[sceneIndex] || 1;\r\n                return splatColor.w >= minAlpha;\r\n            }, onSplatTreeIndexesUpload, onSplatTreeConstruction)\r\n            .then(() => {\r\n                console.timeEnd('SplatTree build');\r\n\r\n                let leavesWithVertices = 0;\r\n                let avgSplatCount = 0;\r\n                let maxSplatCount = 0;\r\n                let nodeCount = 0;\r\n\r\n                splatTree.visitLeaves((node) => {\r\n                    const nodeSplatCount = node.data.indexes.length;\r\n                    if (nodeSplatCount > 0) {\r\n                        avgSplatCount += nodeSplatCount;\r\n                        maxSplatCount = Math.max(maxSplatCount, nodeSplatCount);\r\n                        nodeCount++;\r\n                        leavesWithVertices++;\r\n                    }\r\n                });\r\n                console.log(`SplatTree leaves: ${splatTree.countLeaves()}`);\r\n                console.log(`SplatTree leaves with splats:${leavesWithVertices}`);\r\n                avgSplatCount = avgSplatCount / nodeCount;\r\n                console.log(`Avg splat count per node: ${avgSplatCount}`);\r\n                console.log(`Total splat count: ${splatMesh.getSplatCount()}`);\r\n                resolve(splatTree);\r\n            });\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Construct this instance of SplatMesh.\r\n     * @param {Array<SplatBuffer>} splatBuffers The base splat data, instances of SplatBuffer\r\n     * @param {Array<object>} sceneOptions Dynamic options for each scene {\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     *\r\n     * }\r\n     * @param {boolean} keepSceneTransforms For a scene that already exists and is being overwritten, this flag\r\n     *                                      says to keep the transform from the existing scene.\r\n     * @param {boolean} finalBuild Will the splat mesh be in its final state after this build?\r\n     * @param {function} onSplatTreeIndexesUpload Function to be called when the upload of splat centers to the splat tree\r\n     *                                            builder worker starts and finishes.\r\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\r\n     *                                           the format produced by the splat tree builder worker starts and ends.\r\n     */\r\n    build(splatBuffers, sceneOptions, keepSceneTransforms = true, finalBuild = false,\r\n          onSplatTreeIndexesUpload, onSplatTreeConstruction) {\r\n\r\n        this.finalBuild = finalBuild;\r\n\r\n        const maxSplatCount = SplatMesh.getTotalMaxSplatCountForSplatBuffers(splatBuffers);\r\n\r\n        const newScenes = SplatMesh.buildScenes(splatBuffers, sceneOptions);\r\n        if (keepSceneTransforms) {\r\n            for (let i = 0; i < this.scenes.length && i < newScenes.length; i++) {\r\n                const newScene = newScenes[i];\r\n                const existingScene = this.getScene(i);\r\n                newScene.copyTransformData(existingScene);\r\n            }\r\n        }\r\n        this.scenes = newScenes;\r\n\r\n        let isUpdateBuild = true;\r\n        if (this.scenes.length > 1 ||\r\n            this.lastBuildSceneCount !== this.scenes.length ||\r\n            this.lastBuildMaxSplatCount !== maxSplatCount ||\r\n            this.scenes[0].splatBuffer !== this.lastBuildScenes[0].splatBuffer) {\r\n                isUpdateBuild = false;\r\n       }\r\n       if (!isUpdateBuild) {\r\n            isUpdateBuild = false;\r\n            this.boundingBox = new THREE.Box3();\r\n            this.maxSplatDistanceFromSceneCenter = 0;\r\n            this.visibleRegionBufferRadius = 0;\r\n            this.visibleRegionRadius = 0;\r\n            this.visibleRegionFadeStartRadius = 0;\r\n            this.firstRenderTime = -1;\r\n            this.lastBuildScenes = [];\r\n            this.lastBuildSplatCount = 0;\r\n            this.lastBuildMaxSplatCount = 0;\r\n            this.disposeMeshData();\r\n            this.geometry = SplatMesh.buildGeomtery(maxSplatCount);\r\n            this.material = SplatMesh.buildMaterial(this.dynamicMode, this.antialiased, this.maxScreenSpaceSplatSize);\r\n            const indexMaps = SplatMesh.buildSplatIndexMaps(splatBuffers);\r\n            this.globalSplatIndexToLocalSplatIndexMap = indexMaps.localSplatIndexMap;\r\n            this.globalSplatIndexToSceneIndexMap = indexMaps.sceneIndexMap;\r\n        }\r\n\r\n        if (this.enableDistancesComputationOnGPU) this.setupDistancesComputationTransformFeedback();\r\n        this.resetGPUDataFromSplatBuffers(isUpdateBuild);\r\n\r\n        for (let i = 0; i < this.scenes.length; i++) {\r\n            this.lastBuildScenes[i] = this.scenes[i];\r\n        }\r\n        this.lastBuildSplatCount = this.getSplatCount();\r\n        this.lastBuildMaxSplatCount = this.getMaxSplatCount();\r\n        this.lastBuildSceneCount = this.scenes.length;\r\n\r\n        if (finalBuild) {\r\n            this.disposeSplatTree();\r\n            SplatMesh.buildSplatTree(this, sceneOptions.map(options => options.splatAlphaRemovalThreshold || 1),\r\n                                     onSplatTreeIndexesUpload, onSplatTreeConstruction)\r\n            .then((splatTree) => {\r\n                this.splatTree = splatTree;\r\n                if (this.onSplatTreeReadyCallback) this.onSplatTreeReadyCallback(this.splatTree);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose all resources held by the splat mesh\r\n     */\r\n    dispose() {\r\n        this.disposeMeshData();\r\n        this.disposeTextures();\r\n        this.disposeSplatTree();\r\n        if (this.enableDistancesComputationOnGPU) {\r\n            this.disposeDistancesComputationGPUResources();\r\n        }\r\n        this.disposed = true;\r\n    }\r\n\r\n    /**\r\n     * Dispose of only the Three.js mesh resources (geometry, material, and texture)\r\n     */\r\n    disposeMeshData() {\r\n        if (this.geometry && this.geometry !== dummyGeometry) {\r\n            this.geometry.dispose();\r\n            this.geometry = null;\r\n        }\r\n        if (this.material) {\r\n            this.material.dispose();\r\n            this.material = null;\r\n        }\r\n    }\r\n\r\n    disposeTextures() {\r\n        for (let textureKey in this.splatDataTextures) {\r\n            if (this.splatDataTextures.hasOwnProperty(textureKey)) {\r\n                const textureContainer = this.splatDataTextures[textureKey];\r\n                if (textureContainer.texture) {\r\n                    textureContainer.texture.dispose();\r\n                    textureContainer.texture = null;\r\n                }\r\n            }\r\n        }\r\n        this.splatDataTextures = null;\r\n    }\r\n\r\n    disposeSplatTree() {\r\n        this.splatTree = null;\r\n    }\r\n\r\n    getSplatTree() {\r\n        return this.splatTree;\r\n    }\r\n\r\n    onSplatTreeReady(callback) {\r\n        this.onSplatTreeReadyCallback = callback;\r\n    }\r\n    /**\r\n     * Refresh data textures and GPU buffers for splat distance pre-computation with data from the splat buffers for this mesh.\r\n     * @param {boolean} isUpdateBuild Specify whether or not to only update for splats that have been added since the last build.\r\n     */\r\n    resetGPUDataFromSplatBuffers(isUpdateBuild) {\r\n        this.uploadSplatDataToTextures(isUpdateBuild);\r\n        if (this.enableDistancesComputationOnGPU) {\r\n            this.updateGPUCentersBufferForDistancesComputation(isUpdateBuild);\r\n            this.updateGPUTransformIndexesBufferForDistancesComputation();\r\n        }\r\n    }\r\n\r\n    static computeTextureUpdateRegion(startSplat, endSplat, textureWidth, textureHeight, elementsPerTexel, elementsPerSplat) {\r\n        const texelsPerSplat = elementsPerSplat / elementsPerTexel;\r\n\r\n        const startSplatTexels = startSplat * texelsPerSplat;\r\n        const startRow = Math.floor(startSplatTexels / textureWidth);\r\n        const startRowElement = startRow * textureWidth * elementsPerTexel;\r\n\r\n        const endSplatTexels = endSplat * texelsPerSplat;\r\n        const endRow = Math.floor(endSplatTexels / textureWidth);\r\n        const endRowEndElement = endRow * textureWidth * elementsPerTexel + (textureWidth * elementsPerTexel);\r\n\r\n        return {\r\n            'dataStart': startRowElement,\r\n            'dataEnd': endRowEndElement,\r\n            'startRow': startRow,\r\n            'endRow': endRow\r\n        };\r\n    }\r\n\r\n     updateDataTexture(paddedData, textureDesc, textureProps, elementsPerTexel, elementsPerSplat, bytesPerElement) {\r\n        const splatCount = this.getSplatCount();\r\n        const gl = this.renderer.getContext();\r\n        const updateRegion = SplatMesh.computeTextureUpdateRegion(this.lastBuildSplatCount, splatCount - 1, textureDesc.size.x,\r\n                                                                  textureDesc.size.y, elementsPerTexel, elementsPerSplat);\r\n        const updateElementCount = updateRegion.dataEnd - updateRegion.dataStart;\r\n        const updateDataView = new paddedData.constructor(paddedData.buffer,\r\n                                                          updateRegion.dataStart * bytesPerElement, updateElementCount);\r\n        const updateHeight = updateRegion.endRow - updateRegion.startRow + 1;\r\n        const dataTexture = textureDesc.texture;\r\n        const glType = this.webGLUtils.convert(dataTexture.type);\r\n        const glFormat = this.webGLUtils.convert(dataTexture.format, dataTexture.colorSpace);\r\n        const currentTexture = gl.getParameter(gl.TEXTURE_BINDING_2D);\r\n        gl.bindTexture(gl.TEXTURE_2D, textureProps.__webglTexture);\r\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, updateRegion.startRow,\r\n                         textureDesc.size.x, updateHeight, glFormat, glType, updateDataView);\r\n        gl.bindTexture(gl.TEXTURE_2D, currentTexture);\r\n    }\r\n\r\n    /**\r\n     * Refresh data textures with data from the splat buffers for this mesh.\r\n     * @param {boolean} isUpdateBuild Specify whether or not to only update for splats that have been added since the last build.\r\n     */\r\n    uploadSplatDataToTextures(isUpdateBuild) {\r\n\r\n        this.checkForMultiSceneUpdateCondition(isUpdateBuild, 'uploadSplatDataToTextures', 'isUpdateBuild');\r\n\r\n        const COVARIANCES_ELEMENTS_PER_TEXEL = 2;\r\n        const CENTER_COLORS_ELEMENTS_PER_TEXEL = 4;\r\n        const TRANSFORM_INDEXES_ELEMENTS_PER_TEXEL = 1;\r\n\r\n        const maxSplatCount = this.getMaxSplatCount();\r\n        const splatCount = this.getSplatCount();\r\n\r\n        const updateCenterColorsPaddedData = (to, from, centers, colors, paddedCenterColors) => {\r\n            for (let c = to; c < from; c++) {\r\n                const colorsBase = c * 4;\r\n                const centersBase = c * 3;\r\n                const centerColorsBase = c * 4;\r\n                paddedCenterColors[centerColorsBase] = rgbaArrayToInteger(colors, colorsBase);\r\n                paddedCenterColors[centerColorsBase + 1] = uintEncodedFloat(centers[centersBase]);\r\n                paddedCenterColors[centerColorsBase + 2] = uintEncodedFloat(centers[centersBase + 1]);\r\n                paddedCenterColors[centerColorsBase + 3] = uintEncodedFloat(centers[centersBase + 2]);\r\n            }\r\n        };\r\n\r\n        const computeDataTextureSize = (elementsPerTexel, elementsPerSplatl) => {\r\n            const texSize = new THREE.Vector2(4096, 1024);\r\n            while (texSize.x * texSize.y * elementsPerTexel < maxSplatCount * elementsPerSplatl) texSize.y *= 2;\r\n            return texSize;\r\n        };\r\n\r\n        if (!isUpdateBuild) {\r\n\r\n            this.disposeTextures();\r\n\r\n            const covariances = new Float32Array(maxSplatCount * COVARIANCES_ELEMENTS_PER_SPLAT);\r\n            const centers = new Float32Array(maxSplatCount * 3);\r\n            const colors = new Uint8Array(maxSplatCount * 4);\r\n            this.fillSplatDataArrays(covariances, centers, colors);\r\n\r\n            // set up covariances data texture\r\n            const covTexSize = computeDataTextureSize(COVARIANCES_ELEMENTS_PER_TEXEL, 6);\r\n            let CovariancesDataType = this.halfPrecisionCovariancesOnGPU ? Uint16Array : Float32Array;\r\n            let covariancesTextureType = this.halfPrecisionCovariancesOnGPU ? THREE.HalfFloatType : THREE.FloatType;\r\n            const paddedCovariances = new CovariancesDataType(covTexSize.x * covTexSize.y * COVARIANCES_ELEMENTS_PER_TEXEL);\r\n            paddedCovariances.set(covariances);\r\n            const covTex = new THREE.DataTexture(paddedCovariances, covTexSize.x, covTexSize.y, THREE.RGFormat, covariancesTextureType);\r\n            covTex.needsUpdate = true;\r\n            this.material.uniforms.covariancesTexture.value = covTex;\r\n            this.material.uniforms.covariancesTextureSize.value.copy(covTexSize);\r\n\r\n            // set up centers/colors data texture\r\n            const centersColsTexSize = computeDataTextureSize(CENTER_COLORS_ELEMENTS_PER_TEXEL, 4);\r\n            const paddedCentersCols = new Uint32Array(centersColsTexSize.x * centersColsTexSize.y * CENTER_COLORS_ELEMENTS_PER_TEXEL);\r\n            updateCenterColorsPaddedData(0, splatCount, centers, colors, paddedCentersCols);\r\n            const centersColsTex = new THREE.DataTexture(paddedCentersCols, centersColsTexSize.x, centersColsTexSize.y,\r\n                                                         THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\r\n            centersColsTex.internalFormat = 'RGBA32UI';\r\n            centersColsTex.needsUpdate = true;\r\n            this.material.uniforms.centersColorsTexture.value = centersColsTex;\r\n            this.material.uniforms.centersColorsTextureSize.value.copy(centersColsTexSize);\r\n            this.material.uniformsNeedUpdate = true;\r\n\r\n            this.splatDataTextures = {\r\n                'baseData': {\r\n                    'covariances': covariances,\r\n                    'centers': centers,\r\n                    'colors': colors\r\n                },\r\n                'covariances': {\r\n                    'data': paddedCovariances,\r\n                    'texture': covTex,\r\n                    'size': covTexSize\r\n                },\r\n                'centerColors': {\r\n                    'data': paddedCentersCols,\r\n                    'texture': centersColsTex,\r\n                    'size': centersColsTexSize\r\n                }\r\n            };\r\n\r\n            if (this.dynamicMode) {\r\n                const transformIndexesTexSize = computeDataTextureSize(TRANSFORM_INDEXES_ELEMENTS_PER_TEXEL, 4);\r\n                const paddedTransformIndexes = new Uint32Array(transformIndexesTexSize.x *\r\n                                                               transformIndexesTexSize.y * TRANSFORM_INDEXES_ELEMENTS_PER_TEXEL);\r\n                for (let c = 0; c < splatCount; c++) paddedTransformIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\r\n                const transformIndexesTexture = new THREE.DataTexture(paddedTransformIndexes, transformIndexesTexSize.x,\r\n                                                                      transformIndexesTexSize.y, THREE.RedIntegerFormat,\r\n                                                                      THREE.UnsignedIntType);\r\n                transformIndexesTexture.internalFormat = 'R32UI';\r\n                transformIndexesTexture.needsUpdate = true;\r\n                this.material.uniforms.transformIndexesTexture.value = transformIndexesTexture;\r\n                this.material.uniforms.transformIndexesTextureSize.value.copy(transformIndexesTexSize);\r\n                this.material.uniformsNeedUpdate = true;\r\n                this.splatDataTextures['tansformIndexes'] = {\r\n                    'data': paddedTransformIndexes,\r\n                    'texture': transformIndexesTexture,\r\n                    'size': transformIndexesTexSize\r\n                };\r\n            }\r\n        } else {\r\n\r\n            this.fillSplatDataArrays(this.splatDataTextures.baseData.covariances,\r\n                                     this.splatDataTextures.baseData.centers, this.splatDataTextures.baseData.colors, undefined, true);\r\n\r\n            const covariancesTextureDescriptor = this.splatDataTextures['covariances'];\r\n            const paddedCovariances = covariancesTextureDescriptor.data;\r\n            const covariancesTexture = covariancesTextureDescriptor.texture;\r\n            const covarancesStartSplat = this.lastBuildSplatCount * COVARIANCES_ELEMENTS_PER_SPLAT;\r\n            const covariancesEndSplat = splatCount * COVARIANCES_ELEMENTS_PER_SPLAT;\r\n            for (let i = covarancesStartSplat; i < covariancesEndSplat; i++) {\r\n                const covariance = this.splatDataTextures.baseData.covariances[i];\r\n                paddedCovariances[i] = covariance;\r\n            }\r\n            const covariancesTextureProps = this.renderer ? this.renderer.properties.get(covariancesTexture) : null;\r\n            if (!covariancesTextureProps || !covariancesTextureProps.__webglTexture) {\r\n                covariancesTexture.needsUpdate = true;\r\n            } else {\r\n                const covaranceBytesPerElement = this.halfPrecisionCovariancesOnGPU ? 2 : 4;\r\n                this.updateDataTexture(paddedCovariances, covariancesTextureDescriptor, covariancesTextureProps,\r\n                                       COVARIANCES_ELEMENTS_PER_TEXEL, COVARIANCES_ELEMENTS_PER_SPLAT, covaranceBytesPerElement);\r\n            }\r\n\r\n            const centerColorsTextureDescriptor = this.splatDataTextures['centerColors'];\r\n            const paddedCenterColors = centerColorsTextureDescriptor.data;\r\n            const centerColorsTexture = centerColorsTextureDescriptor.texture;\r\n            updateCenterColorsPaddedData(this.lastBuildSplatCount, splatCount, this.splatDataTextures.baseData.centers,\r\n                                         this.splatDataTextures.baseData.colors, paddedCenterColors);\r\n            const centerColorsTextureProps = this.renderer ? this.renderer.properties.get(centerColorsTexture) : null;\r\n            if (!centerColorsTextureProps || !centerColorsTextureProps.__webglTexture) {\r\n                centerColorsTexture.needsUpdate = true;\r\n            } else {\r\n                this.updateDataTexture(paddedCenterColors, centerColorsTextureDescriptor, centerColorsTextureProps,\r\n                                       CENTER_COLORS_ELEMENTS_PER_TEXEL, CENTER_COLORS_ELEMENTS_PER_SPLAT, 4);\r\n            }\r\n\r\n            if (this.dynamicMode) {\r\n                const transformIndexesTexDesc = this.splatDataTextures['tansformIndexes'];\r\n                const paddedTransformIndexes = transformIndexesTexDesc.data;\r\n                for (let c = this.lastBuildSplatCount; c < splatCount; c++) {\r\n                    paddedTransformIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\r\n                }\r\n\r\n                const paddedTransformIndexesTexture = transformIndexesTexDesc.texture;\r\n                const transformIndexesTextureProps = this.renderer ? this.renderer.properties.get(paddedTransformIndexesTexture) : null;\r\n                if (!transformIndexesTextureProps || !transformIndexesTextureProps.__webglTexture) {\r\n                    paddedTransformIndexesTexture.needsUpdate = true;\r\n                } else {\r\n                    this.updateDataTexture(paddedTransformIndexes, transformIndexesTexDesc, transformIndexesTextureProps, 1, 1, 1);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.updateVisibleRegion(isUpdateBuild);\r\n    }\r\n\r\n    updateVisibleRegion(isUpdateBuild) {\r\n        const splatCount = this.getSplatCount();\r\n        const tempCenter = new THREE.Vector3();\r\n        if (!isUpdateBuild) {\r\n            const avgCenter = new THREE.Vector3();\r\n            this.scenes.forEach((scene) => {\r\n                avgCenter.add(scene.splatBuffer.sceneCenter);\r\n            });\r\n            avgCenter.multiplyScalar(1.0 / this.scenes.length);\r\n            this.calculatedSceneCenter.copy(avgCenter);\r\n            this.material.uniforms.sceneCenter.value.copy(this.calculatedSceneCenter);\r\n            this.material.uniformsNeedUpdate = true;\r\n        }\r\n\r\n        const startSplatFormMaxDistanceCalc = isUpdateBuild ? this.lastBuildSplatCount : 0;\r\n        for (let i = startSplatFormMaxDistanceCalc; i < splatCount; i++) {\r\n            this.getSplatCenter(i, tempCenter, false);\r\n            const distFromCSceneCenter = tempCenter.sub(this.calculatedSceneCenter).length();\r\n            if (distFromCSceneCenter > this.maxSplatDistanceFromSceneCenter) this.maxSplatDistanceFromSceneCenter = distFromCSceneCenter;\r\n        }\r\n\r\n        if (this.maxSplatDistanceFromSceneCenter - this.visibleRegionBufferRadius > VISIBLE_REGION_EXPANSION_DELTA) {\r\n            this.visibleRegionBufferRadius = this.maxSplatDistanceFromSceneCenter;\r\n            this.visibleRegionRadius = Math.max(this.visibleRegionBufferRadius - VISIBLE_REGION_EXPANSION_DELTA, 0.0);\r\n        }\r\n        if (this.finalBuild) this.visibleRegionRadius = this.visibleRegionBufferRadius = this.maxSplatDistanceFromSceneCenter;\r\n        this.updateVisibleRegionFadeDistance();\r\n    }\r\n\r\n    updateVisibleRegionFadeDistance(sceneRevealMode = SceneRevealMode.Default) {\r\n        const fastFadeRate = SCENE_FADEIN_RATE_FAST;\r\n        const gradualFadeRate = SCENE_FADEIN_RATE_GRADUAL;\r\n        const defaultFadeInRate = this.finalBuild ? fastFadeRate : gradualFadeRate;\r\n        const fadeInRate = sceneRevealMode === SceneRevealMode.Default ? defaultFadeInRate : gradualFadeRate;\r\n        this.visibleRegionFadeStartRadius = (this.visibleRegionRadius - this.visibleRegionFadeStartRadius) *\r\n                                             fadeInRate + this.visibleRegionFadeStartRadius;\r\n        const fadeInPercentage = (this.visibleRegionBufferRadius > 0) ?\r\n                                 (this.visibleRegionFadeStartRadius / this.visibleRegionBufferRadius) : 0;\r\n        const fadeInComplete = fadeInPercentage > 0.99;\r\n        const shaderFadeInComplete = (fadeInComplete || sceneRevealMode === SceneRevealMode.Instant) ? 1 : 0;\r\n\r\n        this.material.uniforms.visibleRegionFadeStartRadius.value = this.visibleRegionFadeStartRadius;\r\n        this.material.uniforms.visibleRegionRadius.value = this.visibleRegionRadius;\r\n        this.material.uniforms.firstRenderTime.value = this.firstRenderTime;\r\n        this.material.uniforms.currentTime.value = performance.now();\r\n        this.material.uniforms.fadeInComplete.value = shaderFadeInComplete;\r\n        this.material.uniformsNeedUpdate = true;\r\n        this.visibleRegionChanging = !fadeInComplete;\r\n    }\r\n\r\n    /**\r\n     * Set the indexes of splats that should be rendered; should be sorted in desired render order.\r\n     * @param {Uint32Array} globalIndexes Sorted index list of splats to be rendered\r\n     * @param {number} renderSplatCount Total number of splats to be rendered. Necessary because we may not want to render\r\n     *                                  every splat.\r\n     */\r\n    updateRenderIndexes(globalIndexes, renderSplatCount) {\r\n        const geometry = this.geometry;\r\n        geometry.attributes.splatIndex.set(globalIndexes);\r\n        geometry.attributes.splatIndex.needsUpdate = true;\r\n        if (renderSplatCount > 0 && this.firstRenderTime === -1) this.firstRenderTime = performance.now();\r\n        geometry.instanceCount = renderSplatCount;\r\n    }\r\n\r\n    /**\r\n     * Update the transforms for each scene in this splat mesh from their individual components (position,\r\n     * quaternion, and scale)\r\n     */\r\n    updateTransforms() {\r\n        for (let i = 0; i < this.scenes.length; i++) {\r\n            const scene = this.getScene(i);\r\n            scene.updateTransform();\r\n        }\r\n    }\r\n\r\n    updateUniforms = function() {\r\n\r\n        const viewport = new THREE.Vector2();\r\n\r\n        return function(renderDimensions, cameraFocalLengthX, cameraFocalLengthY, inverseFocalAdjustment) {\r\n            const splatCount = this.getSplatCount();\r\n            if (splatCount > 0) {\r\n                viewport.set(renderDimensions.x * this.devicePixelRatio,\r\n                             renderDimensions.y * this.devicePixelRatio);\r\n                this.material.uniforms.viewport.value.copy(viewport);\r\n                this.material.uniforms.basisViewport.value.set(1.0 / viewport.x, 1.0 / viewport.y);\r\n                this.material.uniforms.focal.value.set(cameraFocalLengthX, cameraFocalLengthY);\r\n                this.material.uniforms.inverseFocalAdjustment.value = inverseFocalAdjustment;\r\n                if (this.dynamicMode) {\r\n                    for (let i = 0; i < this.scenes.length; i++) {\r\n                        this.material.uniforms.transforms.value[i].copy(this.getScene(i).transform);\r\n                    }\r\n                }\r\n                this.material.uniformsNeedUpdate = true;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    getSplatDataTextures() {\r\n        return this.splatDataTextures;\r\n    }\r\n\r\n    getSplatCount() {\r\n        return SplatMesh.getTotalSplatCountForScenes(this.scenes);\r\n    }\r\n\r\n    static getTotalSplatCountForScenes(scenes) {\r\n        let totalSplatCount = 0;\r\n        for (let scene of scenes) {\r\n            if (scene && scene.splatBuffer) totalSplatCount += scene.splatBuffer.getSplatCount();\r\n        }\r\n        return totalSplatCount;\r\n    }\r\n\r\n    static getTotalSplatCountForSplatBuffers(splatBuffers) {\r\n        let totalSplatCount = 0;\r\n        for (let splatBuffer of splatBuffers) totalSplatCount += splatBuffer.getSplatCount();\r\n        return totalSplatCount;\r\n    }\r\n\r\n    getMaxSplatCount() {\r\n        return SplatMesh.getTotalMaxSplatCountForScenes(this.scenes);\r\n    }\r\n\r\n    static getTotalMaxSplatCountForScenes(scenes) {\r\n        let totalSplatCount = 0;\r\n        for (let scene of scenes) {\r\n            if (scene && scene.splatBuffer) totalSplatCount += scene.splatBuffer.getMaxSplatCount();\r\n        }\r\n        return totalSplatCount;\r\n    }\r\n\r\n    static getTotalMaxSplatCountForSplatBuffers(splatBuffers) {\r\n        let totalSplatCount = 0;\r\n        for (let splatBuffer of splatBuffers) totalSplatCount += splatBuffer.getMaxSplatCount();\r\n        return totalSplatCount;\r\n    }\r\n\r\n    disposeDistancesComputationGPUResources() {\r\n\r\n        if (!this.renderer) return;\r\n\r\n        const gl = this.renderer.getContext();\r\n\r\n        if (this.distancesTransformFeedback.vao) {\r\n            gl.deleteVertexArray(this.distancesTransformFeedback.vao);\r\n            this.distancesTransformFeedback.vao = null;\r\n        }\r\n        if (this.distancesTransformFeedback.program) {\r\n            gl.deleteProgram(this.distancesTransformFeedback.program);\r\n            gl.deleteShader(this.distancesTransformFeedback.vertexShader);\r\n            gl.deleteShader(this.distancesTransformFeedback.fragmentShader);\r\n            this.distancesTransformFeedback.program = null;\r\n            this.distancesTransformFeedback.vertexShader = null;\r\n            this.distancesTransformFeedback.fragmentShader = null;\r\n        }\r\n        this.disposeDistancesComputationGPUBufferResources();\r\n        if (this.distancesTransformFeedback.id) {\r\n            gl.deleteTransformFeedback(this.distancesTransformFeedback.id);\r\n            this.distancesTransformFeedback.id = null;\r\n        }\r\n    }\r\n\r\n    disposeDistancesComputationGPUBufferResources() {\r\n\r\n        if (!this.renderer) return;\r\n\r\n        const gl = this.renderer.getContext();\r\n\r\n        if (this.distancesTransformFeedback.centersBuffer) {\r\n            this.distancesTransformFeedback.centersBuffer = null;\r\n            gl.deleteBuffer(this.distancesTransformFeedback.centersBuffer);\r\n        }\r\n        if (this.distancesTransformFeedback.outDistancesBuffer) {\r\n            gl.deleteBuffer(this.distancesTransformFeedback.outDistancesBuffer);\r\n            this.distancesTransformFeedback.outDistancesBuffer = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the Three.js renderer used by this splat mesh\r\n     * @param {THREE.WebGLRenderer} renderer Instance of THREE.WebGLRenderer\r\n     */\r\n    setRenderer(renderer) {\r\n        if (renderer !== this.renderer) {\r\n            this.renderer = renderer;\r\n            const gl = this.renderer.getContext();\r\n            const extensions = new WebGLExtensions(gl);\r\n            const capabilities = new WebGLCapabilities(gl, extensions, {});\r\n            extensions.init(capabilities);\r\n            this.webGLUtils = new THREE.WebGLUtils(gl, extensions, capabilities);\r\n            if (this.enableDistancesComputationOnGPU && this.getSplatCount() > 0) {\r\n                this.setupDistancesComputationTransformFeedback();\r\n                this.updateGPUCentersBufferForDistancesComputation();\r\n                this.updateGPUTransformIndexesBufferForDistancesComputation();\r\n            }\r\n        }\r\n    }\r\n\r\n    setupDistancesComputationTransformFeedback = function() {\r\n\r\n        let currentRenderer;\r\n        let currentMaxSplatCount;\r\n\r\n        return function() {\r\n            const maxSplatCount = this.getMaxSplatCount();\r\n\r\n            if (!this.renderer) return;\r\n\r\n            const rebuildGPUObjects = (currentRenderer !== this.renderer);\r\n            const rebuildBuffers = currentMaxSplatCount !== maxSplatCount;\r\n\r\n            if (!rebuildGPUObjects && !rebuildBuffers) return;\r\n\r\n            if (rebuildGPUObjects) {\r\n                this.disposeDistancesComputationGPUResources();\r\n            } else if (rebuildBuffers) {\r\n                this.disposeDistancesComputationGPUBufferResources();\r\n            }\r\n\r\n            const gl = this.renderer.getContext();\r\n\r\n            const createShader = (gl, type, source) => {\r\n                const shader = gl.createShader(type);\r\n                if (!shader) {\r\n                    console.error('Fatal error: gl could not create a shader object.');\r\n                    return null;\r\n                }\r\n\r\n                gl.shaderSource(shader, source);\r\n                gl.compileShader(shader);\r\n\r\n                const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n                if (!compiled) {\r\n                    let typeName = 'unknown';\r\n                    if (type === gl.VERTEX_SHADER) typeName = 'vertex shader';\r\n                    else if (type === gl.FRAGMENT_SHADER) typeName = 'fragement shader';\r\n                    const errors = gl.getShaderInfoLog(shader);\r\n                    console.error('Failed to compile ' + typeName + ' with these errors:' + errors);\r\n                    gl.deleteShader(shader);\r\n                    return null;\r\n                }\r\n\r\n                return shader;\r\n            };\r\n\r\n            let vsSource;\r\n            if (this.integerBasedDistancesComputation) {\r\n                vsSource =\r\n                `#version 300 es\r\n                in ivec4 center;\r\n                flat out int distance;`;\r\n                if (this.dynamicMode) {\r\n                    vsSource += `\r\n                        in uint transformIndex;\r\n                        uniform ivec4 transforms[${Constants.MaxScenes}];\r\n                        void main(void) {\r\n                            ivec4 transform = transforms[transformIndex];\r\n                            distance = center.x * transform.x + center.y * transform.y + center.z * transform.z + transform.w * center.w;\r\n                        }\r\n                    `;\r\n                } else {\r\n                    vsSource += `\r\n                        uniform ivec3 modelViewProj;\r\n                        void main(void) {\r\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\r\n                        }\r\n                    `;\r\n                }\r\n            } else {\r\n                vsSource =\r\n                `#version 300 es\r\n                in vec3 center;\r\n                flat out float distance;`;\r\n                if (this.dynamicMode) {\r\n                    vsSource += `\r\n                        in uint transformIndex;\r\n                        uniform mat4 transforms[${Constants.MaxScenes}];\r\n                        void main(void) {\r\n                            vec4 transformedCenter = transforms[transformIndex] * vec4(center, 1.0);\r\n                            distance = transformedCenter.z;\r\n                        }\r\n                    `;\r\n                } else {\r\n                    vsSource += `\r\n                        uniform vec3 modelViewProj;\r\n                        void main(void) {\r\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\r\n                        }\r\n                    `;\r\n                }\r\n            }\r\n\r\n            const fsSource =\r\n            `#version 300 es\r\n                precision lowp float;\r\n                out vec4 fragColor;\r\n                void main(){}\r\n            `;\r\n\r\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\r\n\r\n            if (rebuildGPUObjects) {\r\n                this.distancesTransformFeedback.vao = gl.createVertexArray();\r\n            }\r\n\r\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n\r\n            if (rebuildGPUObjects) {\r\n                const program = gl.createProgram();\r\n                const vertexShader = createShader(gl, gl.VERTEX_SHADER, vsSource);\r\n                const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fsSource);\r\n                if (!vertexShader || !fragmentShader) {\r\n                    throw new Error('Could not compile shaders for distances computation on GPU.');\r\n                }\r\n                gl.attachShader(program, vertexShader);\r\n                gl.attachShader(program, fragmentShader);\r\n                gl.transformFeedbackVaryings(program, ['distance'], gl.SEPARATE_ATTRIBS);\r\n                gl.linkProgram(program);\r\n\r\n                const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n                if (!linked) {\r\n                    const error = gl.getProgramInfoLog(program);\r\n                    console.error('Fatal error: Failed to link program: ' + error);\r\n                    gl.deleteProgram(program);\r\n                    gl.deleteShader(fragmentShader);\r\n                    gl.deleteShader(vertexShader);\r\n                    throw new Error('Could not link shaders for distances computation on GPU.');\r\n                }\r\n\r\n                this.distancesTransformFeedback.program = program;\r\n                this.distancesTransformFeedback.vertexShader = vertexShader;\r\n                this.distancesTransformFeedback.vertexShader = fragmentShader;\r\n            }\r\n\r\n            gl.useProgram(this.distancesTransformFeedback.program);\r\n\r\n            this.distancesTransformFeedback.centersLoc =\r\n                gl.getAttribLocation(this.distancesTransformFeedback.program, 'center');\r\n            if (this.dynamicMode) {\r\n                this.distancesTransformFeedback.transformIndexesLoc =\r\n                    gl.getAttribLocation(this.distancesTransformFeedback.program, 'transformIndex');\r\n                for (let i = 0; i < this.scenes.length; i++) {\r\n                    this.distancesTransformFeedback.transformsLocs[i] =\r\n                        gl.getUniformLocation(this.distancesTransformFeedback.program, `transforms[${i}]`);\r\n                }\r\n            } else {\r\n                this.distancesTransformFeedback.modelViewProjLoc =\r\n                    gl.getUniformLocation(this.distancesTransformFeedback.program, 'modelViewProj');\r\n            }\r\n\r\n            if (rebuildGPUObjects || rebuildBuffers) {\r\n                this.distancesTransformFeedback.centersBuffer = gl.createBuffer();\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\r\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\r\n                if (this.integerBasedDistancesComputation) {\r\n                    gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 4, gl.INT, 0, 0);\r\n                } else {\r\n                    gl.vertexAttribPointer(this.distancesTransformFeedback.centersLoc, 3, gl.FLOAT, false, 0, 0);\r\n                }\r\n\r\n                if (this.dynamicMode) {\r\n                    this.distancesTransformFeedback.transformIndexesBuffer = gl.createBuffer();\r\n                    gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.transformIndexesBuffer);\r\n                    gl.enableVertexAttribArray(this.distancesTransformFeedback.transformIndexesLoc);\r\n                    gl.vertexAttribIPointer(this.distancesTransformFeedback.transformIndexesLoc, 1, gl.UNSIGNED_INT, 0, 0);\r\n                }\r\n            }\r\n\r\n            if (rebuildGPUObjects || rebuildBuffers) {\r\n                this.distancesTransformFeedback.outDistancesBuffer = gl.createBuffer();\r\n            }\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\r\n            gl.bufferData(gl.ARRAY_BUFFER, maxSplatCount * 4, gl.STATIC_READ);\r\n\r\n            if (rebuildGPUObjects) {\r\n                this.distancesTransformFeedback.id = gl.createTransformFeedback();\r\n            }\r\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\r\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\r\n\r\n            if (currentProgram) gl.useProgram(currentProgram);\r\n            if (currentVao) gl.bindVertexArray(currentVao);\r\n\r\n            currentRenderer = this.renderer;\r\n            currentMaxSplatCount = maxSplatCount;\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Refresh GPU buffers used for computing splat distances with centers data from the scenes for this mesh.\r\n     * @param {boolean} isUpdateBuild Specify whether or not to only update for splats that have been added since the last build.\r\n     */\r\n    updateGPUCentersBufferForDistancesComputation(isUpdateBuild = false) {\r\n\r\n        this.checkForMultiSceneUpdateCondition(isUpdateBuild, 'updateGPUCentersBufferForDistancesComputation', 'isUpdateBuild');\r\n\r\n        if (!this.renderer) return;\r\n\r\n        const gl = this.renderer.getContext();\r\n\r\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n\r\n        const ArrayType = this.integerBasedDistancesComputation ? Uint32Array : Float32Array;\r\n        const attributeBytesPerCenter = this.integerBasedDistancesComputation ? 16 : 12;\r\n        const subBufferOffset = isUpdateBuild ? this.lastBuildSplatCount * attributeBytesPerCenter : 0;\r\n        const srcCenters = this.integerBasedDistancesComputation ?\r\n                           this.getIntegerCenters(true, isUpdateBuild) :\r\n                           this.getFloatCenters(false, isUpdateBuild);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\r\n\r\n        if (isUpdateBuild) {\r\n            gl.bufferSubData(gl.ARRAY_BUFFER, subBufferOffset, srcCenters);\r\n        } else {\r\n            const maxArray = new ArrayType(this.getMaxSplatCount() * 16);\r\n            maxArray.set(srcCenters);\r\n            gl.bufferData(gl.ARRAY_BUFFER, maxArray, gl.STATIC_DRAW);\r\n        }\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        if (currentVao) gl.bindVertexArray(currentVao);\r\n    }\r\n\r\n    /**\r\n     * Refresh GPU buffers used for pre-computing splat distances with centers data from the scenes for this mesh.\r\n     */\r\n    updateGPUTransformIndexesBufferForDistancesComputation() {\r\n\r\n        if (!this.renderer || !this.dynamicMode) return;\r\n\r\n        const gl = this.renderer.getContext();\r\n\r\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.transformIndexesBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, this.getTransformIndexes(), gl.STATIC_DRAW);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        if (currentVao) gl.bindVertexArray(currentVao);\r\n    }\r\n\r\n    /**\r\n     * Get a typed array containing a mapping from global splat indexes to their scene index.\r\n     * @return {Uint32Array}\r\n     */\r\n    getTransformIndexes() {\r\n        const transformIndexes = new Uint32Array(this.globalSplatIndexToSceneIndexMap.length);\r\n        transformIndexes.set(this.globalSplatIndexToSceneIndexMap);\r\n        return transformIndexes;\r\n    }\r\n\r\n    /**\r\n     * Fill 'array' with the transforms for each scene in this splat mesh.\r\n     * @param {Array} array Empty array to be filled with scene transforms. If not empty, contents will be overwritten.\r\n     */\r\n    fillTransformsArray = function() {\r\n\r\n        const tempArray = [];\r\n\r\n        return function(array) {\r\n            if (tempArray.length !== array.length) tempArray.length = array.length;\r\n            for (let i = 0; i < this.scenes.length; i++) {\r\n                const sceneTransform = this.getScene(i).transform;\r\n                const sceneTransformElements = sceneTransform.elements;\r\n                for (let j = 0; j < 16; j++) {\r\n                    tempArray[i * 16 + j] = sceneTransformElements[j];\r\n                }\r\n            }\r\n            array.set(tempArray);\r\n        };\r\n\r\n    }();\r\n\r\n    computeDistancesOnGPU = function() {\r\n\r\n        const tempMatrix = new THREE.Matrix4();\r\n\r\n        return function(modelViewProjMatrix, outComputedDistances) {\r\n            if (!this.renderer) return;\r\n\r\n            // console.time(\"gpu_compute_distances\");\r\n            const gl = this.renderer.getContext();\r\n\r\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\r\n\r\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n            gl.useProgram(this.distancesTransformFeedback.program);\r\n\r\n            gl.enable(gl.RASTERIZER_DISCARD);\r\n\r\n            if (this.dynamicMode) {\r\n                for (let i = 0; i < this.scenes.length; i++) {\r\n                    tempMatrix.copy(this.getScene(i).transform);\r\n                    tempMatrix.premultiply(modelViewProjMatrix);\r\n\r\n                    if (this.integerBasedDistancesComputation) {\r\n                        const iTempMatrix = SplatMesh.getIntegerMatrixArray(tempMatrix);\r\n                        const iTransform = [iTempMatrix[2], iTempMatrix[6], iTempMatrix[10], iTempMatrix[14]];\r\n                        gl.uniform4i(this.distancesTransformFeedback.transformsLocs[i], iTransform[0], iTransform[1],\r\n                                                                                        iTransform[2], iTransform[3]);\r\n                    } else {\r\n                        gl.uniformMatrix4fv(this.distancesTransformFeedback.transformsLocs[i], false, tempMatrix.elements);\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.integerBasedDistancesComputation) {\r\n                    const iViewProjMatrix = SplatMesh.getIntegerMatrixArray(modelViewProjMatrix);\r\n                    const iViewProj = [iViewProjMatrix[2], iViewProjMatrix[6], iViewProjMatrix[10]];\r\n                    gl.uniform3i(this.distancesTransformFeedback.modelViewProjLoc, iViewProj[0], iViewProj[1], iViewProj[2]);\r\n                } else {\r\n                    const viewProj = [modelViewProjMatrix.elements[2], modelViewProjMatrix.elements[6], modelViewProjMatrix.elements[10]];\r\n                    gl.uniform3f(this.distancesTransformFeedback.modelViewProjLoc, viewProj[0], viewProj[1], viewProj[2]);\r\n                }\r\n            }\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\r\n            gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\r\n            if (this.integerBasedDistancesComputation) {\r\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 4, gl.INT, 0, 0);\r\n            } else {\r\n                gl.vertexAttribPointer(this.distancesTransformFeedback.centersLoc, 3, gl.FLOAT, false, 0, 0);\r\n            }\r\n\r\n            if (this.dynamicMode) {\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.transformIndexesBuffer);\r\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.transformIndexesLoc);\r\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.transformIndexesLoc, 1, gl.UNSIGNED_INT, 0, 0);\r\n            }\r\n\r\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\r\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\r\n\r\n            gl.beginTransformFeedback(gl.POINTS);\r\n            gl.drawArrays(gl.POINTS, 0, this.getSplatCount());\r\n            gl.endTransformFeedback();\r\n\r\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);\r\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\r\n\r\n            gl.disable(gl.RASTERIZER_DISCARD);\r\n\r\n            const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\r\n            gl.flush();\r\n\r\n            const promise = new Promise((resolve) => {\r\n                const checkSync = () => {\r\n                    const timeout = 0;\r\n                    const bitflags = 0;\r\n                    const status = gl.clientWaitSync(sync, bitflags, timeout);\r\n                    switch (status) {\r\n                        case gl.TIMEOUT_EXPIRED:\r\n                            return setTimeout(checkSync);\r\n                        case gl.WAIT_FAILED:\r\n                            throw new Error('should never get here');\r\n                        default:\r\n                            gl.deleteSync(sync);\r\n                            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n                            gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n                            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\r\n                            gl.getBufferSubData(gl.ARRAY_BUFFER, 0, outComputedDistances);\r\n                            gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n                            if (currentVao) gl.bindVertexArray(currentVao);\r\n\r\n                            // console.timeEnd(\"gpu_compute_distances\");\r\n\r\n                            resolve();\r\n                    }\r\n                };\r\n                setTimeout(checkSync);\r\n            });\r\n\r\n            if (currentProgram) gl.useProgram(currentProgram);\r\n            if (currentVao) gl.bindVertexArray(currentVao);\r\n\r\n            return promise;\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Given a global splat index, return corresponding local data (splat buffer, index of splat in that splat\r\n     * buffer, and the corresponding transform)\r\n     * @param {number} globalIndex Global splat index\r\n     * @param {object} paramsObj Object in which to store local data\r\n     * @param {boolean} returnSceneTransform By default, the transform of the scene to which the splat at 'globalIndex' belongs will be\r\n     *                                       returned via the 'sceneTransform' property of 'paramsObj' only if the splat mesh is static.\r\n     *                                       If 'returnSceneTransform' is true, the 'sceneTransform' property will always contain the scene\r\n     *                                       transform, and if 'returnSceneTransform' is false, the 'sceneTransform' property will always\r\n     *                                       be null.\r\n     */\r\n    getLocalSplatParameters(globalIndex, paramsObj, returnSceneTransform) {\r\n        if (returnSceneTransform === undefined || returnSceneTransform === null) {\r\n            returnSceneTransform = this.dynamicMode ? false : true;\r\n        }\r\n        paramsObj.splatBuffer = this.getSplatBufferForSplat(globalIndex);\r\n        paramsObj.localIndex = this.getSplatLocalIndex(globalIndex);\r\n        paramsObj.sceneTransform = returnSceneTransform ? this.getSceneTransformForSplat(globalIndex) : null;\r\n    }\r\n\r\n    /**\r\n     * Fill arrays with splat data and apply transforms if appropriate. Each array is optional.\r\n     * @param {Float32Array} covariances Target storage for splat covariances\r\n     * @param {Float32Array} centers Target storage for splat centers\r\n     * @param {Uint8Array} colors Target storage for splat colors\r\n     * @param {boolean} applySceneTransform By default, scene transforms are applied to relevant splat data only if the splat mesh is\r\n     *                                      static. If 'applySceneTransform' is true, scene transforms will always be applied and if\r\n     *                                      it is false, they will never be applied. If undefined, the default behavior will apply.\r\n     * @param {boolean} isUpdateBuild Specify whether or not to only update for splats that have been added since the last build.\r\n     * @param {boolean} forceDestFromZero Force destination index to start at 0.\r\n     */\r\n    fillSplatDataArrays(covariances, centers, colors, applySceneTransform = undefined, isUpdateBuild, forceDestFromZero) {\r\n\r\n        this.checkForMultiSceneUpdateCondition(isUpdateBuild, 'fillSplatDataArrays', 'isUpdateBuild');\r\n\r\n        let destfrom = 0;\r\n        for (let i = 0; i < this.scenes.length; i++) {\r\n            if (applySceneTransform === undefined || applySceneTransform === null) {\r\n                applySceneTransform = this.dynamicMode ? false : true;\r\n            }\r\n\r\n            let localDestFrom = destfrom;\r\n            let srcFrom;\r\n            let srcTo;\r\n            if (isUpdateBuild) {\r\n                srcFrom = this.lastBuildSplatCount;\r\n                localDestFrom = forceDestFromZero ? 0 : srcFrom;\r\n            }\r\n\r\n            const scene = this.getScene(i);\r\n            const splatBuffer = scene.splatBuffer;\r\n            const sceneTransform = applySceneTransform ? scene.transform : null;\r\n            if (covariances) {\r\n                splatBuffer.fillSplatCovarianceArray(covariances, sceneTransform,\r\n                                                     srcFrom, srcTo, localDestFrom, this.halfPrecisionCovariancesOnGPU ? 1 : 0);\r\n            }\r\n            if (centers) splatBuffer.fillSplatCenterArray(centers, sceneTransform, srcFrom, srcTo, localDestFrom);\r\n            if (colors) splatBuffer.fillSplatColorArray(colors, scene.minimumAlpha, sceneTransform, srcFrom, srcTo, localDestFrom);\r\n            destfrom += splatBuffer.getSplatCount();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert splat centers, which are floating point values, to an array of integers and multiply\r\n     * each by 1000. Centers will get transformed as appropriate before conversion to integer.\r\n     * @param {number} padFour Enforce alignement of 4 by inserting a 1000 after every 3 values\r\n     * @param {boolean} isUpdateBuild Specify whether or not to only update for splats that have been added since the last build.\r\n     * @return {Int32Array}\r\n     */\r\n    getIntegerCenters(padFour = false, isUpdateBuild = false) {\r\n\r\n        this.checkForMultiSceneUpdateCondition(isUpdateBuild, 'getIntegerCenters', 'isUpdateBuild');\r\n\r\n        const splatCount = this.getSplatCount();\r\n        const fillCount = isUpdateBuild ? splatCount - this.lastBuildSplatCount : splatCount;\r\n        const floatCenters = new Float32Array(fillCount * 3);\r\n        this.fillSplatDataArrays(null, floatCenters, null, undefined, isUpdateBuild, isUpdateBuild);\r\n        let intCenters;\r\n        let componentCount = padFour ? 4 : 3;\r\n        intCenters = new Int32Array(fillCount * componentCount);\r\n        for (let i = 0; i < fillCount; i++) {\r\n            for (let t = 0; t < 3; t++) {\r\n                intCenters[i * componentCount + t] = Math.round(floatCenters[i * 3 + t] * 1000.0);\r\n            }\r\n            if (padFour) intCenters[i * componentCount + 3] = 1000;\r\n        }\r\n        return intCenters;\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns an array of splat centers, transformed as appropriate, optionally padded.\r\n     * @param {number} padFour Enforce alignement of 4 by inserting a 1 after every 3 values\r\n     * @param {boolean} isUpdateBuild Specify whether or not to only update for splats that have been added since the last build.\r\n     * @return {Float32Array}\r\n     */\r\n    getFloatCenters(padFour = false, isUpdateBuild = false) {\r\n\r\n        this.checkForMultiSceneUpdateCondition(isUpdateBuild, 'getFloatCenters', 'isUpdateBuild');\r\n\r\n        const splatCount = this.getSplatCount();\r\n        const fillCount = isUpdateBuild ? splatCount - this.lastBuildSplatCount : splatCount;\r\n        const floatCenters = new Float32Array(fillCount * 3);\r\n        this.fillSplatDataArrays(null, floatCenters, null, undefined, isUpdateBuild, isUpdateBuild);\r\n        if (!padFour) return floatCenters;\r\n        let paddedFloatCenters = new Float32Array(fillCount * 4);\r\n        for (let i = 0; i < fillCount; i++) {\r\n            for (let t = 0; t < 3; t++) {\r\n                paddedFloatCenters[i * 4 + t] = floatCenters[i * 3 + t];\r\n            }\r\n            paddedFloatCenters[i * 4 + 3] = 1.0;\r\n        }\r\n        return paddedFloatCenters;\r\n    }\r\n\r\n    /**\r\n     * Get the center for a splat, transformed as appropriate.\r\n     * @param {number} globalIndex Global index of splat\r\n     * @param {THREE.Vector3} outCenter THREE.Vector3 instance in which to store splat center\r\n     * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\r\n     *                                      'globalIndex' belongs will be applied to the splat center. If 'applySceneTransform' is true,\r\n     *                                      the scene transform will always be applied and if 'applySceneTransform' is false, the\r\n     *                                      scene transform will never be applied. If undefined, the default behavior will apply.\r\n     */\r\n    getSplatCenter = function() {\r\n\r\n        const paramsObj = {};\r\n\r\n        return function(globalIndex, outCenter, applySceneTransform) {\r\n            this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\r\n            paramsObj.splatBuffer.getSplatCenter(paramsObj.localIndex, outCenter, paramsObj.sceneTransform);\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Get the scale and rotation for a splat, transformed as appropriate.\r\n     * @param {number} globalIndex Global index of splat\r\n     * @param {THREE.Vector3} outScale THREE.Vector3 instance in which to store splat scale\r\n     * @param {THREE.Quaternion} outRotation THREE.Quaternion instance in which to store splat rotation\r\n     * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\r\n     *                                      'globalIndex' belongs will be applied to the splat scale and rotation. If\r\n     *                                      'applySceneTransform' is true, the scene transform will always be applied and if\r\n     *                                      'applySceneTransform' is false, the scene transform will never be applied. If undefined,\r\n     *                                      the default behavior will apply.\r\n     */\r\n    getSplatScaleAndRotation = function() {\r\n\r\n        const paramsObj = {};\r\n\r\n        return function(globalIndex, outScale, outRotation, applySceneTransform) {\r\n            this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\r\n            paramsObj.splatBuffer.getSplatScaleAndRotation(paramsObj.localIndex, outScale, outRotation, paramsObj.sceneTransform);\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Get the color for a splat.\r\n     * @param {number} globalIndex Global index of splat\r\n     * @param {THREE.Vector4} outColor THREE.Vector4 instance in which to store splat color\r\n     */\r\n    getSplatColor = function() {\r\n\r\n        const paramsObj = {};\r\n\r\n        return function(globalIndex, outColor) {\r\n            this.getLocalSplatParameters(globalIndex, paramsObj);\r\n            paramsObj.splatBuffer.getSplatColor(paramsObj.localIndex, outColor, paramsObj.sceneTransform);\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Store the transform of the scene at 'sceneIndex' in 'outTransform'.\r\n     * @param {number} sceneIndex Index of the desired scene\r\n     * @param {THREE.Matrix4} outTransform Instance of THREE.Matrix4 in which to store the scene's transform\r\n     */\r\n    getSceneTransform(sceneIndex, outTransform) {\r\n        const scene = this.getScene(sceneIndex);\r\n        scene.updateTransform();\r\n        outTransform.copy(scene.transform);\r\n    }\r\n\r\n    /**\r\n     * Get the scene at 'sceneIndex'.\r\n     * @param {number} sceneIndex Index of the desired scene\r\n     * @return {SplatScene}\r\n     */\r\n    getScene(sceneIndex) {\r\n        if (sceneIndex < 0 || sceneIndex >= this.scenes.length) {\r\n            throw new Error('SplatMesh::getScene() -> Invalid scene index.');\r\n        }\r\n        return this.scenes[sceneIndex];\r\n    }\r\n\r\n    getSplatBufferForSplat(globalIndex) {\r\n        return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex]).splatBuffer;\r\n    }\r\n\r\n    getSceneIndexForSplat(globalIndex) {\r\n        return this.globalSplatIndexToSceneIndexMap[globalIndex];\r\n    }\r\n\r\n    getSceneTransformForSplat(globalIndex) {\r\n        return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex]).transform;\r\n    }\r\n\r\n    getSplatLocalIndex(globalIndex) {\r\n        return this.globalSplatIndexToLocalSplatIndexMap[globalIndex];\r\n    }\r\n\r\n    static getIntegerMatrixArray(matrix) {\r\n        const matrixElements = matrix.elements;\r\n        const intMatrixArray = [];\r\n        for (let i = 0; i < 16; i++) {\r\n            intMatrixArray[i] = Math.round(matrixElements[i] * 1000.0);\r\n        }\r\n        return intMatrixArray;\r\n    }\r\n\r\n    checkForMultiSceneUpdateCondition(isUpdateBuild, functionName, parameterName) {\r\n        if (this.scenes.length > 1 && isUpdateBuild) {\r\n            throw new Error(`${functionName}() -> '${parameterName}' cannot be true if splat mesh has more than one scene.`);\r\n        }\r\n    }\r\n}\r\n","import SorterWasm from './sorter.wasm';\r\nimport { Constants } from '../Constants.js';\r\n\r\nfunction sortWorker(self) {\r\n\r\n    let wasmInstance;\r\n    let wasmMemory;\r\n    let useSharedMemory;\r\n    let integerBasedSort;\r\n    let dynamicMode;\r\n    let splatCount;\r\n    let indexesToSortOffset;\r\n    let sortedIndexesOffset;\r\n    let transformIndexesOffset;\r\n    let transformsOffset;\r\n    let precomputedDistancesOffset;\r\n    let mappedDistancesOffset;\r\n    let frequenciesOffset;\r\n    let centersOffset;\r\n    let modelViewProjOffset;\r\n    let countsZero;\r\n    let sortedIndexesOut;\r\n\r\n    let Constants;\r\n\r\n    function sort(splatSortCount, splatRenderCount, modelViewProj,\r\n                  usePrecomputedDistances, copyIndexesToSort, copyPrecomputedDistances, copyTransforms) {\r\n        const sortStartTime = performance.now();\r\n\r\n        if (!useSharedMemory) {\r\n            const indexesToSort = new Uint32Array(wasmMemory, indexesToSortOffset, copyIndexesToSort.byteLength / Constants.BytesPerInt);\r\n            indexesToSort.set(copyIndexesToSort);\r\n            const transforms = new Float32Array(wasmMemory, transformsOffset, copyTransforms.byteLength / Constants.BytesPerFloat);\r\n            transforms.set(copyTransforms);\r\n            if (usePrecomputedDistances) {\r\n                let precomputedDistances;\r\n                if (integerBasedSort) {\r\n                    precomputedDistances = new Int32Array(wasmMemory, precomputedDistancesOffset,\r\n                                                          copyPrecomputedDistances.byteLength / Constants.BytesPerInt);\r\n                } else {\r\n                    precomputedDistances = new Float32Array(wasmMemory, precomputedDistancesOffset,\r\n                                                            copyPrecomputedDistances.byteLength / Constants.BytesPerFloat);\r\n                }\r\n                precomputedDistances.set(copyPrecomputedDistances);\r\n            }\r\n        }\r\n\r\n        if (!countsZero) countsZero = new Uint32Array(Constants.DepthMapRange);\r\n        new Float32Array(wasmMemory, modelViewProjOffset, 16).set(modelViewProj);\r\n        new Uint32Array(wasmMemory, frequenciesOffset, Constants.DepthMapRange).set(countsZero);\r\n        wasmInstance.exports.sortIndexes(indexesToSortOffset, centersOffset, precomputedDistancesOffset,\r\n                                         mappedDistancesOffset, frequenciesOffset, modelViewProjOffset,\r\n                                         sortedIndexesOffset, transformIndexesOffset, transformsOffset, Constants.DepthMapRange,\r\n                                         splatSortCount, splatRenderCount, splatCount, usePrecomputedDistances, integerBasedSort,\r\n                                         dynamicMode);\r\n\r\n        const sortMessage = {\r\n            'sortDone': true,\r\n            'splatSortCount': splatSortCount,\r\n            'splatRenderCount': splatRenderCount,\r\n            'sortTime': 0\r\n        };\r\n        if (!useSharedMemory) {\r\n            const sortedIndexes = new Uint32Array(wasmMemory, sortedIndexesOffset, splatRenderCount);\r\n            if (!sortedIndexesOut || sortedIndexesOut.length < splatRenderCount) {\r\n                sortedIndexesOut = new Uint32Array(splatRenderCount);\r\n            }\r\n            sortedIndexesOut.set(sortedIndexes);\r\n            sortMessage.sortedIndexes = sortedIndexesOut;\r\n        }\r\n        const sortEndTime = performance.now();\r\n\r\n        sortMessage.sortTime = sortEndTime - sortStartTime;\r\n\r\n        self.postMessage(sortMessage);\r\n    }\r\n\r\n    self.onmessage = (e) => {\r\n        if (e.data.centers) {\r\n            centers = e.data.centers;\r\n            transformIndexes = e.data.transformIndexes;\r\n            if (integerBasedSort) {\r\n                new Int32Array(wasmMemory, centersOffset, splatCount * 4).set(new Int32Array(centers));\r\n            } else {\r\n                new Float32Array(wasmMemory, centersOffset, splatCount * 4).set(new Float32Array(centers));\r\n            }\r\n            if (dynamicMode) {\r\n                new Uint32Array(wasmMemory, transformIndexesOffset, splatCount).set(new Uint32Array(transformIndexes));\r\n            }\r\n            self.postMessage({\r\n                'sortSetupComplete': true,\r\n            });\r\n        } else if (e.data.sort) {\r\n            const renderCount = e.data.sort.splatRenderCount || 0;\r\n            const sortCount = e.data.sort.splatSortCount || 0;\r\n            const usePrecomputedDistances = e.data.sort.usePrecomputedDistances;\r\n\r\n            let copyIndexesToSort;\r\n            let copyPrecomputedDistances;\r\n            let copyTransforms;\r\n            if (!useSharedMemory) {\r\n                copyIndexesToSort = e.data.sort.indexesToSort;\r\n                copyTransforms = e.data.sort.transforms;\r\n                if (usePrecomputedDistances) copyPrecomputedDistances = e.data.sort.precomputedDistances;\r\n            }\r\n            sort(sortCount, renderCount, e.data.sort.modelViewProj, usePrecomputedDistances,\r\n                 copyIndexesToSort, copyPrecomputedDistances, copyTransforms);\r\n        } else if (e.data.init) {\r\n            // Yep, this is super hacky and gross :(\r\n            Constants = e.data.init.Constants;\r\n\r\n            splatCount = e.data.init.splatCount;\r\n            useSharedMemory = e.data.init.useSharedMemory;\r\n            integerBasedSort = e.data.init.integerBasedSort;\r\n            dynamicMode = e.data.init.dynamicMode;\r\n\r\n            const CENTERS_BYTES_PER_ENTRY = integerBasedSort ? (Constants.BytesPerInt * 4) : (Constants.BytesPerFloat * 4);\r\n\r\n            const sorterWasmBytes = new Uint8Array(e.data.init.sorterWasmBytes);\r\n\r\n            const matrixSize = 16 * Constants.BytesPerFloat;\r\n            const memoryRequiredForIndexesToSort = splatCount * Constants.BytesPerInt;\r\n            const memoryRequiredForCenters = splatCount * CENTERS_BYTES_PER_ENTRY;\r\n            const memoryRequiredForModelViewProjectionMatrix = matrixSize;\r\n            const memoryRequiredForPrecomputedDistances = integerBasedSort ?\r\n                                                          (splatCount * Constants.BytesPerInt) : (splatCount * Constants.BytesPerFloat);\r\n            const memoryRequiredForMappedDistances = splatCount * Constants.BytesPerInt;\r\n            const memoryRequiredForSortedIndexes = splatCount * Constants.BytesPerInt;\r\n            const memoryRequiredForIntermediateSortBuffers = Constants.DepthMapRange * Constants.BytesPerInt * 2;\r\n            const memoryRequiredforTransformIndexes = dynamicMode ? (splatCount * Constants.BytesPerInt) : 0;\r\n            const memoryRequiredforTransforms = dynamicMode ? (Constants.MaxScenes * matrixSize) : 0;\r\n            const extraMemory = Constants.MemoryPageSize * 32;\r\n\r\n            const totalRequiredMemory = memoryRequiredForIndexesToSort +\r\n                                        memoryRequiredForCenters +\r\n                                        memoryRequiredForModelViewProjectionMatrix +\r\n                                        memoryRequiredForPrecomputedDistances +\r\n                                        memoryRequiredForMappedDistances +\r\n                                        memoryRequiredForIntermediateSortBuffers +\r\n                                        memoryRequiredForSortedIndexes +\r\n                                        memoryRequiredforTransformIndexes +\r\n                                        memoryRequiredforTransforms +\r\n                                        extraMemory;\r\n            const totalPagesRequired = Math.floor(totalRequiredMemory / Constants.MemoryPageSize ) + 1;\r\n            const sorterWasmImport = {\r\n                module: {},\r\n                env: {\r\n                    memory: new WebAssembly.Memory({\r\n                        initial: totalPagesRequired * 2,\r\n                        maximum: totalPagesRequired * 4,\r\n                        shared: true,\r\n                    }),\r\n                }\r\n            };\r\n            WebAssembly.compile(sorterWasmBytes)\r\n            .then((wasmModule) => {\r\n                return WebAssembly.instantiate(wasmModule, sorterWasmImport);\r\n            })\r\n            .then((instance) => {\r\n                wasmInstance = instance;\r\n                indexesToSortOffset = 0;\r\n                centersOffset = indexesToSortOffset + memoryRequiredForIndexesToSort;\r\n                modelViewProjOffset = centersOffset + memoryRequiredForCenters;\r\n                precomputedDistancesOffset = modelViewProjOffset + memoryRequiredForModelViewProjectionMatrix;\r\n                mappedDistancesOffset = precomputedDistancesOffset + memoryRequiredForPrecomputedDistances;\r\n                frequenciesOffset = mappedDistancesOffset + memoryRequiredForMappedDistances;\r\n                sortedIndexesOffset = frequenciesOffset + memoryRequiredForIntermediateSortBuffers;\r\n                transformIndexesOffset = sortedIndexesOffset + memoryRequiredForSortedIndexes;\r\n                transformsOffset = transformIndexesOffset + memoryRequiredforTransformIndexes;\r\n                wasmMemory = sorterWasmImport.env.memory.buffer;\r\n                if (useSharedMemory) {\r\n                    self.postMessage({\r\n                        'sortSetupPhase1Complete': true,\r\n                        'indexesToSortBuffer': wasmMemory,\r\n                        'indexesToSortOffset': indexesToSortOffset,\r\n                        'sortedIndexesBuffer': wasmMemory,\r\n                        'sortedIndexesOffset': sortedIndexesOffset,\r\n                        'precomputedDistancesBuffer': wasmMemory,\r\n                        'precomputedDistancesOffset': precomputedDistancesOffset,\r\n                        'transformsBuffer': wasmMemory,\r\n                        'transformsOffset': transformsOffset\r\n                    });\r\n                } else {\r\n                    self.postMessage({\r\n                        'sortSetupPhase1Complete': true\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    };\r\n}\r\n\r\nexport function createSortWorker(splatCount, useSharedMemory, integerBasedSort, dynamicMode) {\r\n    const worker = new Worker(\r\n        URL.createObjectURL(\r\n            new Blob(['(', sortWorker.toString(), ')(self)'], {\r\n                type: 'application/javascript',\r\n            }),\r\n        ),\r\n    );\r\n\r\n    const sorterWasmBinaryString = atob(SorterWasm);\r\n    const sorterWasmBytes = new Uint8Array(sorterWasmBinaryString.length);\r\n    for (let i = 0; i < sorterWasmBinaryString.length; i++) {\r\n        sorterWasmBytes[i] = sorterWasmBinaryString.charCodeAt(i);\r\n    }\r\n\r\n    worker.postMessage({\r\n        'init': {\r\n            'sorterWasmBytes': sorterWasmBytes.buffer,\r\n            'splatCount': splatCount,\r\n            'useSharedMemory': useSharedMemory,\r\n            'integerBasedSort': integerBasedSort,\r\n            'dynamicMode': dynamicMode,\r\n            // Super hacky\r\n            'Constants': {\r\n                'BytesPerFloat': Constants.BytesPerFloat,\r\n                'BytesPerInt': Constants.BytesPerInt,\r\n                'DepthMapRange': Constants.DepthMapRange,\r\n                'MemoryPageSize': Constants.MemoryPageSize,\r\n                'MaxScenes': Constants.MaxScenes\r\n            }\r\n        }\r\n    });\r\n    return worker;\r\n}\r\n","export const WebXRMode = {\r\n    None: 0,\r\n    VR: 1,\r\n    AR: 2\r\n};\r\n","/*\r\nCopyright © 2010-2024 three.js authors & Mark Kellogg\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n*/\r\n\r\nexport class VRButton {\r\n\r\n    static createButton( renderer ) {\r\n\r\n        const button = document.createElement( 'button' );\r\n\r\n        function showEnterVR( /* device */ ) {\r\n\r\n            let currentSession = null;\r\n\r\n            async function onSessionStarted( session ) {\r\n\r\n                session.addEventListener( 'end', onSessionEnded );\r\n\r\n                await renderer.xr.setSession( session );\r\n                button.textContent = 'EXIT VR';\r\n\r\n                currentSession = session;\r\n\r\n            }\r\n\r\n            function onSessionEnded( /* event */ ) {\r\n\r\n                currentSession.removeEventListener( 'end', onSessionEnded );\r\n\r\n                button.textContent = 'ENTER VR';\r\n\r\n                currentSession = null;\r\n\r\n            }\r\n\r\n            //\r\n\r\n            button.style.display = '';\r\n\r\n            button.style.cursor = 'pointer';\r\n            button.style.left = 'calc(50% - 50px)';\r\n            button.style.width = '100px';\r\n\r\n            button.textContent = 'ENTER VR';\r\n\r\n            // WebXR's requestReferenceSpace only works if the corresponding feature\r\n            // was requested at session creation time. For simplicity, just ask for\r\n            // the interesting ones as optional features, but be aware that the\r\n            // requestReferenceSpace call will fail if it turns out to be unavailable.\r\n            // ('local' is always available for immersive sessions and doesn't need to\r\n            // be requested separately.)\r\n\r\n            const sessionInit = { optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking', 'layers'] };\r\n\r\n            button.onmouseenter = function() {\r\n\r\n                button.style.opacity = '1.0';\r\n\r\n            };\r\n\r\n            button.onmouseleave = function() {\r\n\r\n                button.style.opacity = '0.5';\r\n\r\n            };\r\n\r\n            button.onclick = function() {\r\n\r\n                if ( currentSession === null ) {\r\n\r\n                    navigator.xr.requestSession( 'immersive-vr', sessionInit ).then( onSessionStarted );\r\n\r\n                } else {\r\n\r\n                    currentSession.end();\r\n\r\n                    if ( navigator.xr.offerSession !== undefined ) {\r\n\r\n                        navigator.xr.offerSession( 'immersive-vr', sessionInit )\r\n                            .then( onSessionStarted )\r\n                            .catch( ( err ) => {\r\n\r\n                                console.warn( err );\r\n\r\n                            } );\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            };\r\n\r\n            if ( navigator.xr.offerSession !== undefined ) {\r\n\r\n                navigator.xr.offerSession( 'immersive-vr', sessionInit )\r\n                    .then( onSessionStarted )\r\n                    .catch( ( err ) => {\r\n\r\n                        console.warn( err );\r\n\r\n                    } );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function disableButton() {\r\n\r\n            button.style.display = '';\r\n\r\n            button.style.cursor = 'auto';\r\n            button.style.left = 'calc(50% - 75px)';\r\n            button.style.width = '150px';\r\n\r\n            button.onmouseenter = null;\r\n            button.onmouseleave = null;\r\n\r\n            button.onclick = null;\r\n\r\n        }\r\n\r\n        function showWebXRNotFound() {\r\n\r\n            disableButton();\r\n\r\n            button.textContent = 'VR NOT SUPPORTED';\r\n\r\n        }\r\n\r\n        function showVRNotAllowed( exception ) {\r\n\r\n            disableButton();\r\n\r\n            console.warn( 'Exception when trying to call xr.isSessionSupported', exception );\r\n\r\n            button.textContent = 'VR NOT ALLOWED';\r\n\r\n        }\r\n\r\n        function stylizeElement( element ) {\r\n\r\n            element.style.position = 'absolute';\r\n            element.style.bottom = '20px';\r\n            element.style.padding = '12px 6px';\r\n            element.style.border = '1px solid #fff';\r\n            element.style.borderRadius = '4px';\r\n            element.style.background = 'rgba(0,0,0,0.1)';\r\n            element.style.color = '#fff';\r\n            element.style.font = 'normal 13px sans-serif';\r\n            element.style.textAlign = 'center';\r\n            element.style.opacity = '0.5';\r\n            element.style.outline = 'none';\r\n            element.style.zIndex = '999';\r\n\r\n        }\r\n\r\n        if ( 'xr' in navigator ) {\r\n\r\n            button.id = 'VRButton';\r\n            button.style.display = 'none';\r\n\r\n            stylizeElement( button );\r\n\r\n            navigator.xr.isSessionSupported( 'immersive-vr' ).then( function( supported ) {\r\n\r\n                supported ? showEnterVR() : showWebXRNotFound();\r\n\r\n                if ( supported && VRButton.xrSessionIsGranted ) {\r\n\r\n                    button.click();\r\n\r\n                }\r\n\r\n            } ).catch( showVRNotAllowed );\r\n\r\n            return button;\r\n\r\n        } else {\r\n\r\n            const message = document.createElement( 'a' );\r\n\r\n            if ( window.isSecureContext === false ) {\r\n\r\n                message.href = document.location.href.replace( /^http:/, 'https:' );\r\n                message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\r\n\r\n            } else {\r\n\r\n                message.href = 'https://immersiveweb.dev/';\r\n                message.innerHTML = 'WEBXR NOT AVAILABLE';\r\n\r\n            }\r\n\r\n            message.style.left = 'calc(50% - 90px)';\r\n            message.style.width = '180px';\r\n            message.style.textDecoration = 'none';\r\n\r\n            stylizeElement( message );\r\n\r\n            return message;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    static registerSessionGrantedListener() {\r\n\r\n        if ( typeof navigator !== 'undefined' && 'xr' in navigator ) {\r\n\r\n            // WebXRViewer (based on Firefox) has a bug where addEventListener\r\n            // throws a silent exception and aborts execution entirely.\r\n            if ( /WebXRViewer\\//i.test( navigator.userAgent ) ) return;\r\n\r\n            navigator.xr.addEventListener( 'sessiongranted', () => {\r\n\r\n                VRButton.xrSessionIsGranted = true;\r\n\r\n            } );\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nVRButton.xrSessionIsGranted = false;\r\nVRButton.registerSessionGrantedListener();\r\n","/*\r\nCopyright © 2010-2024 three.js authors & Mark Kellogg\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n*/\r\n\r\nexport class ARButton {\r\n\r\n    static createButton( renderer, sessionInit = {} ) {\r\n\r\n        const button = document.createElement( 'button' );\r\n\r\n        function showStartAR( /* device */ ) {\r\n\r\n            if ( sessionInit.domOverlay === undefined ) {\r\n\r\n                const overlay = document.createElement( 'div' );\r\n                overlay.style.display = 'none';\r\n                document.body.appendChild( overlay );\r\n\r\n                const svg = document.createElementNS( 'http://www.w3.org/2000/svg', 'svg' );\r\n                svg.setAttribute( 'width', 38 );\r\n                svg.setAttribute( 'height', 38 );\r\n                svg.style.position = 'absolute';\r\n                svg.style.right = '20px';\r\n                svg.style.top = '20px';\r\n                svg.addEventListener( 'click', function() {\r\n\r\n                    currentSession.end();\r\n\r\n                } );\r\n                overlay.appendChild( svg );\r\n\r\n                const path = document.createElementNS( 'http://www.w3.org/2000/svg', 'path' );\r\n                path.setAttribute( 'd', 'M 12,12 L 28,28 M 28,12 12,28' );\r\n                path.setAttribute( 'stroke', '#fff' );\r\n                path.setAttribute( 'stroke-width', 2 );\r\n                svg.appendChild( path );\r\n\r\n                if ( sessionInit.optionalFeatures === undefined ) {\r\n\r\n                    sessionInit.optionalFeatures = [];\r\n\r\n                }\r\n\r\n                sessionInit.optionalFeatures.push( 'dom-overlay' );\r\n                sessionInit.domOverlay = { root: overlay };\r\n\r\n            }\r\n\r\n            //\r\n\r\n            let currentSession = null;\r\n\r\n            async function onSessionStarted( session ) {\r\n\r\n                session.addEventListener( 'end', onSessionEnded );\r\n\r\n                renderer.xr.setReferenceSpaceType( 'local' );\r\n\r\n                await renderer.xr.setSession( session );\r\n\r\n                button.textContent = 'STOP AR';\r\n                sessionInit.domOverlay.root.style.display = '';\r\n\r\n                currentSession = session;\r\n\r\n            }\r\n\r\n            function onSessionEnded( /* event */ ) {\r\n\r\n                currentSession.removeEventListener( 'end', onSessionEnded );\r\n\r\n                button.textContent = 'START AR';\r\n                sessionInit.domOverlay.root.style.display = 'none';\r\n\r\n                currentSession = null;\r\n\r\n            }\r\n\r\n            //\r\n\r\n            button.style.display = '';\r\n\r\n            button.style.cursor = 'pointer';\r\n            button.style.left = 'calc(50% - 50px)';\r\n            button.style.width = '100px';\r\n\r\n            button.textContent = 'START AR';\r\n\r\n            button.onmouseenter = function() {\r\n\r\n                button.style.opacity = '1.0';\r\n\r\n            };\r\n\r\n            button.onmouseleave = function() {\r\n\r\n                button.style.opacity = '0.5';\r\n\r\n            };\r\n\r\n            button.onclick = function() {\r\n\r\n                if ( currentSession === null ) {\r\n\r\n                    navigator.xr.requestSession( 'immersive-ar', sessionInit ).then( onSessionStarted );\r\n\r\n                } else {\r\n\r\n                    currentSession.end();\r\n\r\n                    if ( navigator.xr.offerSession !== undefined ) {\r\n\r\n                        navigator.xr.offerSession( 'immersive-ar', sessionInit )\r\n                            .then( onSessionStarted )\r\n                            .catch( ( err ) => {\r\n\r\n                                console.warn( err );\r\n\r\n                            } );\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            };\r\n\r\n            if ( navigator.xr.offerSession !== undefined ) {\r\n\r\n                navigator.xr.offerSession( 'immersive-ar', sessionInit )\r\n                    .then( onSessionStarted )\r\n                    .catch( ( err ) => {\r\n\r\n                        console.warn( err );\r\n\r\n                    } );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function disableButton() {\r\n\r\n            button.style.display = '';\r\n\r\n            button.style.cursor = 'auto';\r\n            button.style.left = 'calc(50% - 75px)';\r\n            button.style.width = '150px';\r\n\r\n            button.onmouseenter = null;\r\n            button.onmouseleave = null;\r\n\r\n            button.onclick = null;\r\n\r\n        }\r\n\r\n        function showARNotSupported() {\r\n\r\n            disableButton();\r\n\r\n            button.textContent = 'AR NOT SUPPORTED';\r\n\r\n        }\r\n\r\n        function showARNotAllowed( exception ) {\r\n\r\n            disableButton();\r\n\r\n            console.warn( 'Exception when trying to call xr.isSessionSupported', exception );\r\n\r\n            button.textContent = 'AR NOT ALLOWED';\r\n\r\n        }\r\n\r\n        function stylizeElement( element ) {\r\n\r\n            element.style.position = 'absolute';\r\n            element.style.bottom = '20px';\r\n            element.style.padding = '12px 6px';\r\n            element.style.border = '1px solid #fff';\r\n            element.style.borderRadius = '4px';\r\n            element.style.background = 'rgba(0,0,0,0.1)';\r\n            element.style.color = '#fff';\r\n            element.style.font = 'normal 13px sans-serif';\r\n            element.style.textAlign = 'center';\r\n            element.style.opacity = '0.5';\r\n            element.style.outline = 'none';\r\n            element.style.zIndex = '999';\r\n\r\n        }\r\n\r\n        if ( 'xr' in navigator ) {\r\n\r\n            button.id = 'ARButton';\r\n            button.style.display = 'none';\r\n\r\n            stylizeElement( button );\r\n\r\n            navigator.xr.isSessionSupported( 'immersive-ar' ).then( function( supported ) {\r\n\r\n                supported ? showStartAR() : showARNotSupported();\r\n\r\n            } ).catch( showARNotAllowed );\r\n\r\n            return button;\r\n\r\n        } else {\r\n\r\n            const message = document.createElement( 'a' );\r\n\r\n            if ( window.isSecureContext === false ) {\r\n\r\n                message.href = document.location.href.replace( /^http:/, 'https:' );\r\n                message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\r\n\r\n            } else {\r\n\r\n                message.href = 'https://immersiveweb.dev/';\r\n                message.innerHTML = 'WEBXR NOT AVAILABLE';\r\n\r\n            }\r\n\r\n            message.style.left = 'calc(50% - 90px)';\r\n            message.style.width = '180px';\r\n            message.style.textDecoration = 'none';\r\n\r\n            stylizeElement( message );\r\n\r\n            return message;\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n","export const RenderMode = {\r\n    Always: 0,\r\n    OnChange: 1,\r\n    Never: 2\r\n};\r\n","import * as THREE from 'three';\r\nimport { OrbitControls } from './OrbitControls.js';\r\nimport { PlyLoader } from './loaders/ply/PlyLoader.js';\r\nimport { SplatLoader } from './loaders/splat/SplatLoader.js';\r\nimport { KSplatLoader } from './loaders/ksplat/KSplatLoader.js';\r\nimport { sceneFormatFromPath } from './loaders/Utils.js';\r\nimport { LoadingSpinner } from './ui/LoadingSpinner.js';\r\nimport { LoadingProgressBar } from './ui/LoadingProgressBar.js';\r\nimport { InfoPanel } from './ui/InfoPanel.js';\r\nimport { SceneHelper } from './SceneHelper.js';\r\nimport { Raycaster } from './raycaster/Raycaster.js';\r\nimport { SplatMesh } from './SplatMesh.js';\r\nimport { createSortWorker } from './worker/SortWorker.js';\r\nimport { Constants } from './Constants.js';\r\nimport { getCurrentTime } from './Util.js';\r\nimport { AbortablePromise, AbortedPromiseError } from './AbortablePromise.js';\r\nimport { SceneFormat } from './loaders/SceneFormat.js';\r\nimport { WebXRMode } from './webxr/WebXRMode.js';\r\nimport { VRButton } from './webxr/VRButton.js';\r\nimport { ARButton } from './webxr/ARButton.js';\r\nimport { delayedExecute } from './Util.js';\r\nimport { LoaderStatus } from './loaders/LoaderStatus.js';\r\nimport { RenderMode } from './RenderMode.js';\r\nimport { SceneRevealMode } from './SceneRevealMode.js';\r\n\r\nconst THREE_CAMERA_FOV = 50;\r\nconst MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT = .75;\r\nconst MIN_SPLAT_COUNT_TO_SHOW_SPLAT_TREE_LOADING_SPINNER = 1500000;\r\nconst FOCUS_MARKER_FADE_IN_SPEED = 10.0;\r\nconst FOCUS_MARKER_FADE_OUT_SPEED = 2.5;\r\nconst CONSECUTIVE_RENDERED_FRAMES_FOR_FPS_CALCULATION = 60;\r\n\r\n/**\r\n * Viewer: Manages the rendering of splat scenes. Manages an instance of SplatMesh as well as a web worker\r\n * that performs the sort for its splats.\r\n */\r\nexport class Viewer {\r\n\r\n    constructor(options = {}) {\r\n\r\n        // The natural 'up' vector for viewing the scene (only has an effect when used with orbit controls and\r\n        // when the viewer uses its own camera).\r\n        if (!options.cameraUp) options.cameraUp = [0, 1, 0];\r\n        this.cameraUp = new THREE.Vector3().fromArray(options.cameraUp);\r\n\r\n        // The camera's initial position (only used when the viewer uses its own camera).\r\n        if (!options.initialCameraPosition) options.initialCameraPosition = [0, 10, 15];\r\n        this.initialCameraPosition = new THREE.Vector3().fromArray(options.initialCameraPosition);\r\n\r\n        // The initial focal point of the camera and center of the camera's orbit (only used when the viewer uses its own camera).\r\n        if (!options.initialCameraLookAt) options.initialCameraLookAt = [0, 0, 0];\r\n        this.initialCameraLookAt = new THREE.Vector3().fromArray(options.initialCameraLookAt);\r\n\r\n        // 'dropInMode' is a flag that is used internally to support the usage of the viewer as a Three.js scene object\r\n        this.dropInMode = options.dropInMode || false;\r\n\r\n        // If 'selfDrivenMode' is true, the viewer manages its own update/animation loop via requestAnimationFrame()\r\n        if (options.selfDrivenMode === undefined || options.selfDrivenMode === null) options.selfDrivenMode = true;\r\n        this.selfDrivenMode = options.selfDrivenMode && !this.dropInMode;\r\n        this.selfDrivenUpdateFunc = this.selfDrivenUpdate.bind(this);\r\n\r\n        // If 'useBuiltInControls' is true, the viewer will create its own instance of OrbitControls and attach to the camera\r\n        if (options.useBuiltInControls === undefined) options.useBuiltInControls = true;\r\n        this.useBuiltInControls = options.useBuiltInControls;\r\n\r\n        // parent element of the Three.js renderer canvas\r\n        this.rootElement = options.rootElement;\r\n\r\n        // Tells the viewer to pretend the device pixel ratio is 1, which can boost performance on devices where it is larger,\r\n        // at a small cost to visual quality\r\n        this.ignoreDevicePixelRatio = options.ignoreDevicePixelRatio || false;\r\n        this.devicePixelRatio = this.ignoreDevicePixelRatio ? 1 : window.devicePixelRatio;\r\n\r\n        // Tells the viewer to use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\r\n        this.halfPrecisionCovariancesOnGPU = options.halfPrecisionCovariancesOnGPU || false;\r\n\r\n        // If 'threeScene' is valid, it will be rendered by the viewer along with the splat mesh\r\n        this.threeScene = options.threeScene;\r\n        // Allows for usage of an external Three.js renderer\r\n        this.renderer = options.renderer;\r\n        // Allows for usage of an external Three.js camera\r\n        this.camera = options.camera;\r\n\r\n        // If 'gpuAcceleratedSort' is true, a partially GPU-accelerated approach to sorting splats will be used.\r\n        // Currently this means pre-computing splat distances from the camera on the GPU\r\n        this.gpuAcceleratedSort = options.gpuAcceleratedSort;\r\n        if (this.gpuAcceleratedSort !== true && this.gpuAcceleratedSort !== false) {\r\n            if (this.isMobile()) this.gpuAcceleratedSort = false;\r\n            else this.gpuAcceleratedSort = true;\r\n        }\r\n\r\n        // if 'integerBasedSort' is true, the integer version of splat centers as well as other values used to calculate\r\n        // splat distances are used instead of the float version. This speeds up computation, but introduces the possibility of\r\n        // overflow in larger scenes.\r\n        if (options.integerBasedSort === undefined || options.integerBasedSort === null) {\r\n            options.integerBasedSort = true;\r\n        }\r\n        this.integerBasedSort = options.integerBasedSort;\r\n\r\n        // If 'sharedMemoryForWorkers' is true, a SharedArrayBuffer will be used to communicate with web workers. This method\r\n        // is faster than copying memory to or from web workers, but comes with security implications as outlined here:\r\n        // https://web.dev/articles/cross-origin-isolation-guide\r\n        // If enabled, it requires specific CORS headers to be present in the response from the server that is sent when\r\n        // loading the application. More information is available in the README.\r\n        if (options.sharedMemoryForWorkers === undefined || options.sharedMemoryForWorkers === null) options.sharedMemoryForWorkers = true;\r\n        this.sharedMemoryForWorkers = options.sharedMemoryForWorkers;\r\n\r\n        // if 'dynamicScene' is true, it tells the viewer to assume scene elements are not stationary or that the number of splats in the\r\n        // scene may change. This prevents optimizations that depend on a static scene from being made. Additionally, if 'dynamicScene' is\r\n        // true it tells the splat mesh to not apply scene tranforms to splat data that is returned by functions like\r\n        // SplatMesh.getSplatCenter() by default.\r\n        const dynamicScene = !!options.dynamicScene;\r\n\r\n        // When true, will perform additional steps during rendering to address artifacts caused by the rendering of gaussians at a\r\n        // substantially different resolution than that at which they were rendered during training. This will only work correctly\r\n        // for models that were trained using a process that utilizes this compensation calculation. For more details:\r\n        // https://github.com/nerfstudio-project/gsplat/pull/117\r\n        // https://github.com/graphdeco-inria/gaussian-splatting/issues/294#issuecomment-1772688093\r\n        const antialiased = options.antialiased || false;\r\n\r\n        this.webXRMode = options.webXRMode || WebXRMode.None;\r\n\r\n        if (this.webXRMode !== WebXRMode.None) {\r\n            this.gpuAcceleratedSort = false;\r\n        }\r\n\r\n        // if 'renderMode' is RenderMode.Always, then the viewer will rrender the scene on every update. If it is RenderMode.OnChange,\r\n        // it will only render when something in the scene has changed.\r\n        this.renderMode = options.renderMode || RenderMode.Always;\r\n\r\n        // SceneRevealMode.Default results in a nice, slow fade-in effect for progressively loaded scenes,\r\n        // and a fast fade-in for non progressively loaded scenes.\r\n        // SceneRevealMode.Gradual will force a slow fade-in for all scenes.\r\n        // SceneRevealMode.Instant will force all loaded scene data to be immediately visible.\r\n        this.sceneRevealMode = options.sceneRevealMode || SceneRevealMode.Default;\r\n\r\n        // Hacky, experimental, non-scientific parameter for tweaking focal length related calculations. For scenes with very\r\n        // small gaussians, small details, and small dimensions -- increasing this value can help improve visual quality.\r\n        this.focalAdjustment = options.focalAdjustment || 1.0;\r\n\r\n        // Specify the maximum screen-space splat size, can help deal with large splats that get too unwieldy\r\n        this.maxScreenSpaceSplatSize = options.maxScreenSpaceSplatSize || 2048;\r\n\r\n        this.splatMesh = new SplatMesh(dynamicScene, this.halfPrecisionCovariancesOnGPU, this.devicePixelRatio,\r\n                                       this.gpuAcceleratedSort, this.integerBasedSort, antialiased, this.maxScreenSpaceSplatSize);\r\n\r\n        this.controls = null;\r\n\r\n        this.showMeshCursor = false;\r\n        this.showControlPlane = false;\r\n        this.showInfo = false;\r\n\r\n        this.sceneHelper = null;\r\n\r\n        this.sortWorker = null;\r\n        this.sortRunning = false;\r\n        this.splatRenderCount = 0;\r\n        this.sortWorkerIndexesToSort = null;\r\n        this.sortWorkerSortedIndexes = null;\r\n        this.sortWorkerPrecomputedDistances = null;\r\n        this.sortWorkerTransforms = null;\r\n        this.runAfterFirstSort = [];\r\n\r\n        this.selfDrivenModeRunning = false;\r\n        this.splatRenderingInitialized = false;\r\n\r\n        this.raycaster = new Raycaster();\r\n\r\n        this.infoPanel = null;\r\n\r\n        this.currentFPS = 0;\r\n        this.lastSortTime = 0;\r\n        this.consecutiveRenderFrames = 0;\r\n\r\n        this.previousCameraTarget = new THREE.Vector3();\r\n        this.nextCameraTarget = new THREE.Vector3();\r\n\r\n        this.mousePosition = new THREE.Vector2();\r\n        this.mouseDownPosition = new THREE.Vector2();\r\n        this.mouseDownTime = null;\r\n\r\n        this.resizeObserver = null;\r\n        this.mouseMoveListener = null;\r\n        this.mouseDownListener = null;\r\n        this.mouseUpListener = null;\r\n        this.keyDownListener = null;\r\n\r\n        this.sortPromise = null;\r\n        this.sortPromiseResolver = null;\r\n        this.downloadPromisesToAbort = {};\r\n        this.splatSceneLoadPromise = null;\r\n\r\n        this.loadingSpinner = new LoadingSpinner(null, this.rootElement || document.body);\r\n        this.loadingSpinner.hide();\r\n        this.loadingProgressBar = new LoadingProgressBar(this.rootElement || document.body);\r\n        this.loadingProgressBar.hide();\r\n        this.infoPanel = new InfoPanel(this.rootElement || document.body);\r\n        this.infoPanel.hide();\r\n\r\n        this.usingExternalCamera = (this.dropInMode || this.camera) ? true : false;\r\n        this.usingExternalRenderer = (this.dropInMode || this.renderer) ? true : false;\r\n\r\n        this.initialized = false;\r\n        this.disposing = false;\r\n        this.disposed = false;\r\n        if (!this.dropInMode) this.init();\r\n    }\r\n\r\n    init() {\r\n\r\n        if (this.initialized) return;\r\n\r\n        if (!this.rootElement) {\r\n            if (!this.usingExternalRenderer) {\r\n                this.rootElement = document.createElement('div');\r\n                this.rootElement.style.width = '100%';\r\n                this.rootElement.style.height = '100%';\r\n                this.rootElement.style.position = 'absolute';\r\n                document.body.appendChild(this.rootElement);\r\n            } else {\r\n                this.rootElement = this.renderer.domElement.parentElement || document.body;\r\n            }\r\n        }\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n        this.getRenderDimensions(renderDimensions);\r\n\r\n        if (!this.usingExternalCamera) {\r\n            this.camera = new THREE.PerspectiveCamera(THREE_CAMERA_FOV, renderDimensions.x / renderDimensions.y, 0.1, 500);\r\n            this.camera.position.copy(this.initialCameraPosition);\r\n            this.camera.up.copy(this.cameraUp).normalize();\r\n            this.camera.lookAt(this.initialCameraLookAt);\r\n        }\r\n\r\n        if (!this.usingExternalRenderer) {\r\n            this.renderer = new THREE.WebGLRenderer({\r\n                antialias: false,\r\n                precision: 'highp'\r\n            });\r\n            this.renderer.setPixelRatio(this.devicePixelRatio);\r\n            this.renderer.autoClear = true;\r\n            this.renderer.setClearColor(new THREE.Color( 0x000000 ), 0.0);\r\n            this.renderer.setSize(renderDimensions.x, renderDimensions.y);\r\n\r\n            this.resizeObserver = new ResizeObserver(() => {\r\n                this.getRenderDimensions(renderDimensions);\r\n                this.renderer.setSize(renderDimensions.x, renderDimensions.y);\r\n                this.forceRenderNextFrame();\r\n            });\r\n            this.resizeObserver.observe(this.rootElement);\r\n            this.rootElement.appendChild(this.renderer.domElement);\r\n        }\r\n\r\n        if (this.webXRMode) {\r\n            if (this.webXRMode === WebXRMode.VR) {\r\n                this.rootElement.appendChild(VRButton.createButton(this.renderer));\r\n            } else if (this.webXRMode === WebXRMode.AR) {\r\n                this.rootElement.appendChild(ARButton.createButton(this.renderer));\r\n            }\r\n            this.renderer.xr.enabled = true;\r\n            this.camera.position.copy(this.initialCameraPosition);\r\n            this.camera.up.copy(this.cameraUp).normalize();\r\n            this.camera.lookAt(this.initialCameraLookAt);\r\n        }\r\n\r\n        this.threeScene = this.threeScene || new THREE.Scene();\r\n        this.sceneHelper = new SceneHelper(this.threeScene);\r\n        this.sceneHelper.setupMeshCursor();\r\n        this.sceneHelper.setupFocusMarker();\r\n        this.sceneHelper.setupControlPlane();\r\n\r\n        if (this.useBuiltInControls && this.webXRMode === WebXRMode.None) {\r\n            this.controls = new OrbitControls(this.camera, this.renderer.domElement);\r\n            this.controls.listenToKeyEvents(window);\r\n            this.controls.rotateSpeed = 0.5;\r\n            this.controls.maxPolarAngle = Math.PI * .75;\r\n            this.controls.minPolarAngle = 0.1;\r\n            this.controls.enableDamping = true;\r\n            this.controls.dampingFactor = 0.05;\r\n            this.controls.target.copy(this.initialCameraLookAt);\r\n            this.mouseMoveListener = this.onMouseMove.bind(this);\r\n            this.renderer.domElement.addEventListener('pointermove', this.mouseMoveListener, false);\r\n            this.mouseDownListener = this.onMouseDown.bind(this);\r\n            this.renderer.domElement.addEventListener('pointerdown', this.mouseDownListener, false);\r\n            this.mouseUpListener = this.onMouseUp.bind(this);\r\n            this.renderer.domElement.addEventListener('pointerup', this.mouseUpListener, false);\r\n            this.keyDownListener = this.onKeyDown.bind(this);\r\n            window.addEventListener('keydown', this.keyDownListener, false);\r\n        }\r\n\r\n        this.loadingProgressBar.setContainer(this.rootElement);\r\n        this.loadingSpinner.setContainer(this.rootElement);\r\n        this.infoPanel.setContainer(this.rootElement);\r\n\r\n        this.initialized = true;\r\n    }\r\n\r\n    removeEventHandlers() {\r\n        if (this.useBuiltInControls) {\r\n            this.renderer.domElement.removeEventListener('pointermove', this.mouseMoveListener);\r\n            this.mouseMoveListener = null;\r\n            this.renderer.domElement.removeEventListener('pointerdown', this.mouseDownListener);\r\n            this.mouseDownListener = null;\r\n            this.renderer.domElement.removeEventListener('pointerup', this.mouseUpListener);\r\n            this.mouseUpListener = null;\r\n            window.removeEventListener('keydown', this.keyDownListener);\r\n            this.keyDownListener = null;\r\n        }\r\n    }\r\n\r\n    setRenderMode(renderMode) {\r\n        this.renderMode = renderMode;\r\n    }\r\n\r\n    onKeyDown = function() {\r\n\r\n        const forward = new THREE.Vector3();\r\n        const tempMatrixLeft = new THREE.Matrix4();\r\n        const tempMatrixRight = new THREE.Matrix4();\r\n\r\n        return function(e) {\r\n            forward.set(0, 0, -1);\r\n            forward.transformDirection(this.camera.matrixWorld);\r\n            tempMatrixLeft.makeRotationAxis(forward, Math.PI / 128);\r\n            tempMatrixRight.makeRotationAxis(forward, -Math.PI / 128);\r\n            switch (e.code) {\r\n                case 'KeyG':\r\n                    this.focalAdjustment += 0.02;\r\n                    this.forceRenderNextFrame();\r\n                break;\r\n                case 'KeyF':\r\n                    this.focalAdjustment -= 0.02;\r\n                    this.forceRenderNextFrame();\r\n                break;\r\n                case 'ArrowLeft':\r\n                    this.camera.up.transformDirection(tempMatrixLeft);\r\n                break;\r\n                case 'ArrowRight':\r\n                    this.camera.up.transformDirection(tempMatrixRight);\r\n                break;\r\n                case 'KeyC':\r\n                    this.showMeshCursor = !this.showMeshCursor;\r\n                break;\r\n                case 'KeyP':\r\n                    this.showControlPlane = !this.showControlPlane;\r\n                break;\r\n                case 'KeyI':\r\n                    this.showInfo = !this.showInfo;\r\n                    if (this.showInfo) {\r\n                        this.infoPanel.show();\r\n                    } else {\r\n                        this.infoPanel.hide();\r\n                    }\r\n                break;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    onMouseMove(mouse) {\r\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\r\n    }\r\n\r\n    onMouseDown() {\r\n        this.mouseDownPosition.copy(this.mousePosition);\r\n        this.mouseDownTime = getCurrentTime();\r\n    }\r\n\r\n    onMouseUp = function() {\r\n\r\n        const clickOffset = new THREE.Vector2();\r\n\r\n        return function(mouse) {\r\n            clickOffset.copy(this.mousePosition).sub(this.mouseDownPosition);\r\n            const mouseUpTime = getCurrentTime();\r\n            const wasClick = mouseUpTime - this.mouseDownTime < 0.5 && clickOffset.length() < 2;\r\n            if (wasClick) {\r\n                this.onMouseClick(mouse);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    onMouseClick(mouse) {\r\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\r\n        this.checkForFocalPointChange();\r\n    }\r\n\r\n    checkForFocalPointChange = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n        const toNewFocalPoint = new THREE.Vector3();\r\n        const outHits = [];\r\n\r\n        return function() {\r\n            if (!this.transitioningCameraTarget) {\r\n                this.getRenderDimensions(renderDimensions);\r\n                outHits.length = 0;\r\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\r\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\r\n                if (outHits.length > 0) {\r\n                    const hit = outHits[0];\r\n                    const intersectionPoint = hit.origin;\r\n                    toNewFocalPoint.copy(intersectionPoint).sub(this.camera.position);\r\n                    if (toNewFocalPoint.length() > MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT) {\r\n                        this.previousCameraTarget.copy(this.controls.target);\r\n                        this.nextCameraTarget.copy(intersectionPoint);\r\n                        this.transitioningCameraTarget = true;\r\n                        this.transitioningCameraTargetStartTime = getCurrentTime();\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    getRenderDimensions(outDimensions) {\r\n        if (this.rootElement) {\r\n            outDimensions.x = this.rootElement.offsetWidth;\r\n            outDimensions.y = this.rootElement.offsetHeight;\r\n        } else {\r\n            this.renderer.getSize(outDimensions);\r\n        }\r\n    }\r\n\r\n    updateSplatMesh = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n\r\n        return function() {\r\n            if (!this.splatMesh) return;\r\n            const splatCount = this.splatMesh.getSplatCount();\r\n            if (splatCount > 0) {\r\n                this.splatMesh.updateTransforms();\r\n                this.getRenderDimensions(renderDimensions);\r\n                const focalLengthX = this.camera.projectionMatrix.elements[0] * 0.5 *\r\n                                     this.devicePixelRatio * renderDimensions.x;\r\n                const focalLengthY = this.camera.projectionMatrix.elements[5] * 0.5 *\r\n                                     this.devicePixelRatio * renderDimensions.y;\r\n\r\n                const focalAdjustment = this.focalAdjustment;\r\n                const inverseFocalAdjustment = 1.0 / focalAdjustment;\r\n\r\n                this.splatMesh.updateUniforms(renderDimensions, focalLengthX * focalAdjustment,\r\n                                              focalLengthY * focalAdjustment, inverseFocalAdjustment);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    isLoading() {\r\n        return Object.keys(this.downloadPromisesToAbort) > 0 || this.splatSceneLoadPromise !== null;\r\n    }\r\n\r\n    isDisposingOrDisposed() {\r\n        return this.disposing || this.disposed;\r\n    }\r\n\r\n\r\n    clearSplatSceneLoadPromise() {\r\n        this.splatSceneLoadPromise = null;\r\n    }\r\n\r\n    setSplatSceneLoadPromise(promise) {\r\n        this.splatSceneLoadPromise = promise;\r\n    }\r\n\r\n    /**\r\n     * Add a splat scene to the viewer and display any loading UI if appropriate.\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {object} options {\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         showLoadingUI:         Display a loading spinner while the scene is loading, defaults to true\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     *\r\n     *         onProgress:                 Function to be called as file data are received, or other processing occurs\r\n     *\r\n     * }\r\n     * @return {AbortablePromise}\r\n     */\r\n    addSplatScene(path, options = {}) {\r\n\r\n        if (this.isLoading()) {\r\n            throw new Error('Cannot add splat scene while another load is already in progress.');\r\n        }\r\n\r\n        if (this.isDisposingOrDisposed()) {\r\n            throw new Error('Cannot add splat scene after dispose() is called.');\r\n        }\r\n\r\n        let format = options.format;\r\n        if (format === undefined || format === null) {\r\n            format = sceneFormatFromPath(path);\r\n        }\r\n        const streamBuildSections = Viewer.isStreamable(format) && options.streamView;\r\n\r\n        const splatBufferOptions = {\r\n            'rotation': options.rotation || options.orientation,\r\n            'position': options.position,\r\n            'scale': options.scale,\r\n            'splatAlphaRemovalThreshold': options.splatAlphaRemovalThreshold,\r\n        };\r\n\r\n        let showLoadingUI = options.showLoadingUI;\r\n        if (showLoadingUI !== false) showLoadingUI = true;\r\n\r\n        let loadingTaskId = null;\r\n        if (showLoadingUI) loadingTaskId = this.loadingSpinner.addTask('Downloading...');\r\n\r\n        let downloadDone = false;\r\n\r\n        let downloadedPercentage = 0;\r\n        const onProgress = (percent, percentLabel, loaderStatus) => {\r\n            if (showLoadingUI) {\r\n                if (loaderStatus === LoaderStatus.Downloading) {\r\n                    downloadedPercentage = percent;\r\n                    if (percent == 100) {\r\n                        this.loadingSpinner.setMessageForTask(loadingTaskId, 'Download complete!');\r\n                    } else {\r\n                        if (streamBuildSections) {\r\n                            this.loadingSpinner.setMessageForTask(loadingTaskId, 'Downloading splats...');\r\n                        } else {\r\n                            const suffix = percentLabel ? `: ${percentLabel}` : `...`;\r\n                            this.loadingSpinner.setMessageForTask(loadingTaskId, `Downloading${suffix}`);\r\n                        }\r\n                    }\r\n                } else if (loaderStatus === LoaderStatus.Processing) {\r\n                    this.loadingSpinner.setMessageForTask(loadingTaskId, 'Processing splats...');\r\n                } else {\r\n                    this.loadingSpinner.setMessageForTask(loadingTaskId, 'Ready!');\r\n                }\r\n            }\r\n            if (options.onProgress) options.onProgress(percent, percentLabel, loaderStatus);\r\n        };\r\n\r\n        const buildSection = (splatBuffer, firstBuild, finalBuild) => {\r\n            if (!streamBuildSections && options.onProgress) options.onProgress(0, '0%', LoaderStatus.Processing);\r\n            return this.addSplatBuffers([splatBuffer], [splatBufferOptions],\r\n                                         finalBuild, firstBuild && showLoadingUI, showLoadingUI).then(() => {\r\n                if (!streamBuildSections && options.onProgress) options.onProgress(100, '100%', LoaderStatus.Processing);\r\n                if (showLoadingUI) {\r\n                    if (firstBuild && streamBuildSections || finalBuild && !streamBuildSections) {\r\n                        this.runAfterFirstSort.push(() => {\r\n                            this.loadingSpinner.removeTask(loadingTaskId);\r\n                            if (!finalBuild && !downloadDone) this.loadingProgressBar.show();\r\n                        });\r\n                    }\r\n                    if (streamBuildSections) {\r\n                        if (finalBuild) {\r\n                            downloadDone = true;\r\n                            this.loadingProgressBar.hide();\r\n                        } else {\r\n                            this.loadingProgressBar.setProgress(downloadedPercentage);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        };\r\n\r\n        const hideLoadingUI = () => {\r\n            this.loadingProgressBar.hide();\r\n            this.loadingSpinner.removeAllTasks();\r\n        };\r\n\r\n        const loadFunc = streamBuildSections ? this.loadSplatSceneToSplatBufferStreaming.bind(this) :\r\n                                               this.loadSplatSceneToSplatBufferNonStreaming.bind(this);\r\n        return loadFunc(path, format, options.splatAlphaRemovalThreshold, buildSection.bind(this), onProgress, hideLoadingUI.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Add multiple splat scenes to the viewer and display any loading UI if appropriate.\r\n     * @param {Array<object>} sceneOptions Array of per-scene options: {\r\n     *\r\n     *         path: Path to splat scene to be loaded\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     * }\r\n     * @param {boolean} showLoadingUI Display a loading spinner while the scene is loading, defaults to true\r\n     * @param {function} onProgress Function to be called as file data are received\r\n     * @return {AbortablePromise}\r\n     */\r\n    addSplatScenes(sceneOptions, showLoadingUI = true, onProgress = undefined) {\r\n\r\n        if (this.isLoading()) {\r\n            throw new Error('Cannot add splat scene while another load is already in progress.');\r\n        }\r\n\r\n        if (this.isDisposingOrDisposed()) {\r\n            throw new Error('Cannot add splat scene after dispose() is called.');\r\n        }\r\n\r\n        const fileCount = sceneOptions.length;\r\n        const percentComplete = [];\r\n        if (showLoadingUI) this.loadingSpinner.show();\r\n        const onLoadProgress = (fileIndex, percent, percentLabel) => {\r\n            percentComplete[fileIndex] = percent;\r\n            let totalPercent = 0;\r\n            for (let i = 0; i < fileCount; i++) totalPercent += percentComplete[i] || 0;\r\n            totalPercent = totalPercent / fileCount;\r\n            percentLabel = `${totalPercent.toFixed(2)}%`;\r\n            if (showLoadingUI) {\r\n                if (totalPercent == 100) {\r\n                    this.loadingSpinner.setMessage(`Download complete!`);\r\n                } else {\r\n                    this.loadingSpinner.setMessage(`Downloading: ${percentLabel}`);\r\n                }\r\n            }\r\n            if (onProgress) onProgress(totalPercent, percentLabel, LoaderStatus.Downloading);\r\n        };\r\n\r\n        const loadPromises = [];\r\n        const nativeLoadPromises = [];\r\n        const abortHandlers = [];\r\n        for (let i = 0; i < sceneOptions.length; i++) {\r\n\r\n            let format = sceneOptions[i].format;\r\n            if (format === undefined || format === null) {\r\n                format = sceneFormatFromPath(sceneOptions[i].path);\r\n            }\r\n\r\n            const downloadPromise = this.loadSplatSceneToSplatBuffer(sceneOptions[i].path, sceneOptions[i].splatAlphaRemovalThreshold,\r\n                                                                     onLoadProgress.bind(this, i), false, undefined, format);\r\n            abortHandlers.push(downloadPromise.abortHandler);\r\n            loadPromises.push(downloadPromise);\r\n            nativeLoadPromises.push(downloadPromise.promise);\r\n            this.downloadPromisesToAbort[downloadPromise.id] = downloadPromise;\r\n        }\r\n        const abortHandler = () => {\r\n            for (let abortHandler of abortHandlers) {\r\n                abortHandler();\r\n            }\r\n        };\r\n        const loadingPromise = new AbortablePromise((resolve, reject) => {\r\n            Promise.all(nativeLoadPromises)\r\n            .then((splatBuffers) => {\r\n                if (showLoadingUI) this.loadingSpinner.hide();\r\n                if (onProgress) options.onProgress(0, '0%', LoaderStatus.Processing);\r\n                this.addSplatBuffers(splatBuffers, sceneOptions, true, showLoadingUI, showLoadingUI).then(() => {\r\n                    if (onProgress) onProgress(100, '100%', LoaderStatus.Processing);\r\n                    resolve();\r\n                    this.clearSplatSceneLoadPromise();\r\n                });\r\n            })\r\n            .catch((e) => {\r\n                if (showLoadingUI) this.loadingSpinner.hide();\r\n                if (!(e instanceof AbortedPromiseError)) {\r\n                    reject(new Error(`Viewer::addSplatScenes -> Could not load one or more splat scenes.`));\r\n                } else {\r\n                    resolve();\r\n                }\r\n                this.clearSplatSceneLoadPromise();\r\n            })\r\n            .finally(() => {\r\n                for (let loadPromise of loadPromises) {\r\n                    delete this.downloadPromisesToAbort[loadPromise.id];\r\n                }\r\n            });\r\n        }, abortHandler);\r\n        this.setSplatSceneLoadPromise(loadingPromise);\r\n        return loadingPromise;\r\n    }\r\n\r\n    /**\r\n     * Download a single non-streamed splat scene and convert to splat buffer. Also sets/clears relevant instance\r\n     * synchronization objects, and calls appropriate functions on success or failure.\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {SceneFormat} format Format of the splat scene file\r\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified value (valid range: 0 - 255)\r\n     * @param {function} onDownloadComplete Function to be called when download is complete\r\n     * @param {function} onProgress Function to be called as file data are received, or other processing occurs\r\n     * @param {function} onException Function to be called when exception occurs\r\n     * @return {AbortablePromise}\r\n     */\r\n    loadSplatSceneToSplatBufferNonStreaming(path, format, splatAlphaRemovalThreshold, onDownloadComplete, onProgress, onException) {\r\n        const clearDownloadPromise = () => {\r\n            delete this.downloadPromisesToAbort[loadPromise.id];\r\n        };\r\n\r\n        const loadPromise = this.loadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold, onProgress, false, undefined, format)\r\n        .then((splatBuffer) => {\r\n            clearDownloadPromise();\r\n            return onDownloadComplete(splatBuffer, true, true).then(() => {\r\n                this.clearSplatSceneLoadPromise();\r\n            });\r\n        })\r\n        .catch((e) => {\r\n            if (onException) onException();\r\n            this.clearSplatSceneLoadPromise();\r\n            clearDownloadPromise();\r\n            if (!(e instanceof AbortedPromiseError)) {\r\n                throw (new Error(`Viewer::addSplatScene -> Could not load file ${path}`));\r\n            }\r\n        });\r\n\r\n        this.downloadPromisesToAbort[loadPromise.id] = loadPromise;\r\n        this.setSplatSceneLoadPromise(loadPromise);\r\n\r\n        return loadPromise;\r\n    }\r\n\r\n    /**\r\n     * Download a single splat scene and convert to splat buffer in a streamed manner, allowing rendering as the file downloads.\r\n     * Also sets/clears relevant instance synchronization objects, and calls appropriate functions on success or failure.\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {SceneFormat} format Format of the splat scene file\r\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified value (valid range: 0 - 255)\r\n     * @param {function} onSectionDownloaded Function to be called as each streamed section is downloaded\r\n     * @param {function} onProgress Function to be called as file data are received, or other processing occurs\r\n     * @param {function} onException Function to be called when exception occurs\r\n     * @return {AbortablePromise}\r\n     */\r\n    loadSplatSceneToSplatBufferStreaming(path, format, splatAlphaRemovalThreshold, onSectionDownloaded, onProgress, onException) {\r\n        let firstStreamedSectionBuildResolver;\r\n        let firstStreamedSectionBuildRejecter;\r\n        let fullBuildResolver;\r\n        let fullBuildRejecter;\r\n        let steamedSectionBuildCount = 0;\r\n        let streamedSectionBuilding = false;\r\n        const queuedStreamedSectionBuilds = [];\r\n\r\n        const checkAndBuildStreamedSections = () => {\r\n            if (queuedStreamedSectionBuilds.length > 0 && !streamedSectionBuilding && !this.isDisposingOrDisposed()) {\r\n                streamedSectionBuilding = true;\r\n                const queuedBuild = queuedStreamedSectionBuilds.shift();\r\n                onSectionDownloaded(queuedBuild.splatBuffer, queuedBuild.firstBuild, queuedBuild.finalBuild)\r\n                .then(() => {\r\n                    streamedSectionBuilding = false;\r\n                    if (queuedBuild.firstBuild) {\r\n                        firstStreamedSectionBuildResolver();\r\n                    } else if (queuedBuild.finalBuild) {\r\n                        fullBuildResolver();\r\n                        this.clearSplatSceneLoadPromise();\r\n                    }\r\n                    window.setTimeout(() => {\r\n                        checkAndBuildStreamedSections();\r\n                    }, 1);\r\n                });\r\n            }\r\n        };\r\n\r\n        const onStreamedSectionProgress = (splatBuffer, finalBuild) => {\r\n            if (!this.isDisposingOrDisposed()) {\r\n                queuedStreamedSectionBuilds.push({\r\n                    splatBuffer,\r\n                    firstBuild: steamedSectionBuildCount === 0,\r\n                    finalBuild\r\n                });\r\n                steamedSectionBuildCount++;\r\n                checkAndBuildStreamedSections();\r\n            }\r\n        };\r\n\r\n        let fullDownloadPromise = this.loadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold,\r\n                                                                   onProgress, true, onStreamedSectionProgress, format);\r\n\r\n        const firstStreamedSectionBuildPromise = new AbortablePromise((resolver, rejecter) => {\r\n            firstStreamedSectionBuildResolver = resolver;\r\n            firstStreamedSectionBuildRejecter = rejecter;\r\n            const clearDownloadPromise = () => {\r\n                delete this.downloadPromisesToAbort[fullDownloadPromise.id];\r\n            };\r\n            fullDownloadPromise.then(() => {\r\n                clearDownloadPromise();\r\n            })\r\n            .catch((e) => {\r\n                if (!(e instanceof AbortedPromiseError)) {\r\n                    fullBuildRejecter(e);\r\n                    firstStreamedSectionBuildRejecter(e);\r\n                }\r\n                if (onException) onException();\r\n                this.clearSplatSceneLoadPromise();\r\n                clearDownloadPromise();\r\n            });\r\n        }, fullDownloadPromise.abortHandler);\r\n        this.downloadPromisesToAbort[fullDownloadPromise.id] = fullDownloadPromise;\r\n\r\n        this.setSplatSceneLoadPromise(new AbortablePromise((resolver, rejecter) => {\r\n            fullBuildResolver = resolver;\r\n            fullBuildRejecter = rejecter;\r\n        }));\r\n\r\n        return firstStreamedSectionBuildPromise;\r\n    }\r\n\r\n    /**\r\n     * Download a splat scene and convert to SplatBuffer instance.\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified\r\n     *                                            value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     * @param {function} onProgress Function to be called as file data are received\r\n     * @param {boolean} streamBuiltSections Construct file sections into splat buffers as they are downloaded\r\n     * @param {function} onSectionBuilt Function to be called when new section is added to the file\r\n     * @param {string} format File format of the scene\r\n     * @return {AbortablePromise}\r\n     */\r\n    loadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold = 1, onProgress = undefined,\r\n                                streamBuiltSections = false, onSectionBuilt = undefined, format) {\r\n        if (format === SceneFormat.Splat) {\r\n            return SplatLoader.loadFromURL(path, onProgress, streamBuiltSections, onSectionBuilt, splatAlphaRemovalThreshold, 0, false);\r\n        } else if (format === SceneFormat.KSplat) {\r\n            return KSplatLoader.loadFromURL(path, onProgress, streamBuiltSections, onSectionBuilt);\r\n        } else if (format === SceneFormat.Ply) {\r\n            return PlyLoader.loadFromURL(path, onProgress, streamBuiltSections, onSectionBuilt, splatAlphaRemovalThreshold, 0);\r\n        }\r\n\r\n        return AbortablePromise.reject(new Error(`Viewer::loadSplatSceneToSplatBuffer -> File format not supported: ${path}`));\r\n    }\r\n\r\n    static isStreamable(format) {\r\n        return format === SceneFormat.Splat || format === SceneFormat.KSplat || format === SceneFormat.Ply;\r\n    }\r\n\r\n    /**\r\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer and set up the sorting web worker.\r\n     * This function will terminate the existing sort worker (if there is one).\r\n     */\r\n    addSplatBuffers = function() {\r\n\r\n        let loadCount = 0;\r\n        let splatProcessingTaskId = null;\r\n\r\n        return function(splatBuffers, splatBufferOptions = [], finalBuild = true,\r\n                        showLoadingUI = true, showLoadingSpinnerForSplatTreeBuild = true) {\r\n\r\n            if (this.isDisposingOrDisposed()) return Promise.resolve();\r\n\r\n            this.splatRenderingInitialized = false;\r\n            loadCount++;\r\n\r\n            const finish = (resolver) => {\r\n                if (this.isDisposingOrDisposed()) return;\r\n\r\n                loadCount--;\r\n                if (loadCount === 0) {\r\n                    if (splatProcessingTaskId !== null) {\r\n                        this.loadingSpinner.removeTask(splatProcessingTaskId);\r\n                        splatProcessingTaskId = null;\r\n                    }\r\n                    this.splatRenderingInitialized = true;\r\n                }\r\n\r\n                // If we aren't calculating the splat distances from the center on the GPU, the sorting worker needs splat centers and\r\n                // transform indexes so that it can calculate those distance values.\r\n                if (!this.gpuAcceleratedSort) {\r\n                    const centers = this.integerBasedSort ? this.splatMesh.getIntegerCenters(true) : this.splatMesh.getFloatCenters(true);\r\n                    const transformIndexes = this.splatMesh.getTransformIndexes();\r\n                    this.sortWorker.postMessage({\r\n                        'centers': centers.buffer,\r\n                        'transformIndexes': transformIndexes.buffer\r\n                    });\r\n                }\r\n                this.forceSort = true;\r\n                resolver();\r\n            };\r\n\r\n            const performLoad = () => {\r\n                return new Promise((resolve) => {\r\n                    if (showLoadingUI) {\r\n                        splatProcessingTaskId = this.loadingSpinner.addTask('Processing splats...');\r\n                    }\r\n                    delayedExecute(() => {\r\n                        if (this.isDisposingOrDisposed()) {\r\n                            resolve();\r\n                        } else {\r\n                            this.addSplatBuffersToMesh(splatBuffers, splatBufferOptions, finalBuild, showLoadingSpinnerForSplatTreeBuild);\r\n                            const maxSplatCount = this.splatMesh.getMaxSplatCount();\r\n                            if (this.sortWorker && this.sortWorker.maxSplatCount !== maxSplatCount) {\r\n                                this.disposeSortWorker();\r\n                            }\r\n                            if (!this.sortWorker) {\r\n                                this.setupSortWorker(this.splatMesh).then(() => {\r\n                                    finish(resolve);\r\n                                });\r\n                            } else {\r\n                                finish(resolve);\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n            };\r\n\r\n            return performLoad();\r\n        };\r\n\r\n    }();\r\n\r\n    disposeSortWorker() {\r\n        if (this.sortWorker) this.sortWorker.terminate();\r\n        this.sortWorker = null;\r\n        this.sortRunning = false;\r\n    }\r\n\r\n    /**\r\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer. This function is additive; all splat\r\n     * buffers contained by the viewer's splat mesh before calling this function will be preserved.\r\n     * @param {Array<SplatBuffer>} splatBuffers SplatBuffer instances\r\n     * @param {Array<object>} splatBufferOptions Array of options objects: {\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     * }\r\n     * @param {boolean} finalBuild Will the splat mesh be in its final state after this build?\r\n     * @param {boolean} showLoadingSpinnerForSplatTreeBuild Whether or not to show the loading spinner during\r\n     *                                                      construction of the splat tree.\r\n     */\r\n    addSplatBuffersToMesh(splatBuffers, splatBufferOptions, finalBuild = true, showLoadingSpinnerForSplatTreeBuild = false) {\r\n        if (this.isDisposingOrDisposed()) return;\r\n        const allSplatBuffers = this.splatMesh.splatBuffers || [];\r\n        const allSplatBufferOptions = this.splatMesh.splatBufferOptions || [];\r\n        allSplatBuffers.push(...splatBuffers);\r\n        allSplatBufferOptions.push(...splatBufferOptions);\r\n        if (this.renderer) this.splatMesh.setRenderer(this.renderer);\r\n        let splatOptimizingTaskId;\r\n        const onSplatTreeIndexesUpload = (finished) => {\r\n            if (this.isDisposingOrDisposed()) return;\r\n            const splatCount = this.splatMesh.getSplatCount();\r\n            if (showLoadingSpinnerForSplatTreeBuild && splatCount >= MIN_SPLAT_COUNT_TO_SHOW_SPLAT_TREE_LOADING_SPINNER) {\r\n                if (!finished && !splatOptimizingTaskId) {\r\n                    this.loadingSpinner.setMinimized(true, true);\r\n                    splatOptimizingTaskId = this.loadingSpinner.addTask('Optimizing splats...');\r\n                }\r\n            }\r\n        };\r\n        const onSplatTreeConstructed = (finished) => {\r\n            if (this.isDisposingOrDisposed()) return;\r\n            if (finished && splatOptimizingTaskId) {\r\n                this.loadingSpinner.removeTask(splatOptimizingTaskId);\r\n            }\r\n        };\r\n        this.splatMesh.build(allSplatBuffers, allSplatBufferOptions, true, finalBuild,\r\n                             onSplatTreeIndexesUpload, onSplatTreeConstructed);\r\n        this.splatMesh.frustumCulled = false;\r\n    }\r\n\r\n    /**\r\n     * Set up the splat sorting web worker.\r\n     * @param {SplatMesh} splatMesh SplatMesh instance that contains the splats to be sorted\r\n     * @return {Promise}\r\n     */\r\n    setupSortWorker(splatMesh) {\r\n        if (this.isDisposingOrDisposed()) return;\r\n        return new Promise((resolve) => {\r\n            const DistancesArrayType = this.integerBasedSort ? Int32Array : Float32Array;\r\n            const splatCount = splatMesh.getSplatCount();\r\n            const maxSplatCount = splatMesh.getMaxSplatCount();\r\n            this.sortWorker = createSortWorker(maxSplatCount, this.sharedMemoryForWorkers,\r\n                                               this.integerBasedSort, this.splatMesh.dynamicMode);\r\n            let sortCount = 0;\r\n            this.sortWorker.onmessage = (e) => {\r\n                if (e.data.sortDone) {\r\n                    this.sortRunning = false;\r\n                    if (this.sharedMemoryForWorkers) {\r\n                        this.splatMesh.updateRenderIndexes(this.sortWorkerSortedIndexes, e.data.splatRenderCount);\r\n                    } else {\r\n                        const sortedIndexes = new Uint32Array(e.data.sortedIndexes.buffer, 0, e.data.splatRenderCount);\r\n                        this.splatMesh.updateRenderIndexes(sortedIndexes, e.data.splatRenderCount);\r\n                    }\r\n                    this.lastSortTime = e.data.sortTime;\r\n                    this.sortPromiseResolver();\r\n                    this.sortPromise = null;\r\n                    this.sortPromiseResolver = null;\r\n                    this.forceRenderNextFrame();\r\n                    if (sortCount === 0) {\r\n                        this.runAfterFirstSort.forEach((func) => {\r\n                            func();\r\n                        });\r\n                        this.runAfterFirstSort.length = 0;\r\n                    }\r\n                    sortCount++;\r\n                } else if (e.data.sortCanceled) {\r\n                    this.sortRunning = false;\r\n                } else if (e.data.sortSetupPhase1Complete) {\r\n                    console.log('Sorting web worker WASM setup complete.');\r\n                    if (this.sharedMemoryForWorkers) {\r\n                        this.sortWorkerSortedIndexes = new Uint32Array(e.data.sortedIndexesBuffer,\r\n                                                                       e.data.sortedIndexesOffset, maxSplatCount);\r\n                        this.sortWorkerIndexesToSort = new Uint32Array(e.data.indexesToSortBuffer,\r\n                                                                       e.data.indexesToSortOffset, maxSplatCount);\r\n                        this.sortWorkerPrecomputedDistances = new DistancesArrayType(e.data.precomputedDistancesBuffer,\r\n                                                                                     e.data.precomputedDistancesOffset,\r\n                                                                                     maxSplatCount);\r\n                         this.sortWorkerTransforms = new Float32Array(e.data.transformsBuffer,\r\n                                                                      e.data.transformsOffset, Constants.MaxScenes * 16);\r\n                    } else {\r\n                        this.sortWorkerIndexesToSort = new Uint32Array(maxSplatCount);\r\n                        this.sortWorkerPrecomputedDistances = new DistancesArrayType(maxSplatCount);\r\n                        this.sortWorkerTransforms = new Float32Array(Constants.MaxScenes * 16);\r\n                    }\r\n                    for (let i = 0; i < splatCount; i++) this.sortWorkerIndexesToSort[i] = i;\r\n                    this.sortWorker.maxSplatCount = maxSplatCount;\r\n                    resolve();\r\n                } else if (e.data.sortSetupComplete) {\r\n                    console.log('Sorting web worker ready.');\r\n                    const splatDataTextures = this.splatMesh.getSplatDataTextures();\r\n                    const covariancesTextureSize = splatDataTextures.covariances.size;\r\n                    const centersColorsTextureSize = splatDataTextures.centerColors.size;\r\n                    console.log('Covariances texture size: ' + covariancesTextureSize.x + ' x ' + covariancesTextureSize.y);\r\n                    console.log('Centers/colors texture size: ' + centersColorsTextureSize.x + ' x ' + centersColorsTextureSize.y);\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Start self-driven mode\r\n     */\r\n    start() {\r\n        if (this.selfDrivenMode) {\r\n            if (this.webXRMode) {\r\n                this.renderer.setAnimationLoop(this.selfDrivenUpdateFunc);\r\n            } else {\r\n                this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\r\n            }\r\n            this.selfDrivenModeRunning = true;\r\n        } else {\r\n            throw new Error('Cannot start viewer unless it is in self driven mode.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stop self-driven mode\r\n     */\r\n    stop() {\r\n        if (this.selfDrivenMode && this.selfDrivenModeRunning) {\r\n            if (!this.webXRMode) {\r\n                cancelAnimationFrame(this.requestFrameId);\r\n            }\r\n            this.selfDrivenModeRunning = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose of all resources held directly and indirectly by this viewer.\r\n     */\r\n    async dispose() {\r\n        this.disposing = true;\r\n        let waitPromises = [];\r\n        let promisesToAbort = [];\r\n        for (let promiseKey in this.downloadPromisesToAbort) {\r\n            if (this.downloadPromisesToAbort.hasOwnProperty(promiseKey)) {\r\n                const downloadPromiseToAbort = this.downloadPromisesToAbort[promiseKey];\r\n                promisesToAbort.push(downloadPromiseToAbort);\r\n                waitPromises.push(downloadPromiseToAbort.promise);\r\n            }\r\n        }\r\n        if (this.sortPromise) {\r\n            waitPromises.push(this.sortPromise);\r\n        }\r\n        const disposePromise = Promise.all(waitPromises).finally(() => {\r\n            this.stop();\r\n            if (this.controls) {\r\n                this.controls.dispose();\r\n                this.controls = null;\r\n            }\r\n            if (this.splatMesh) {\r\n                this.splatMesh.dispose();\r\n                this.splatMesh = null;\r\n            }\r\n            if (this.sceneHelper) {\r\n                this.sceneHelper.dispose();\r\n                this.sceneHelper = null;\r\n            }\r\n            if (this.resizeObserver) {\r\n                this.resizeObserver.unobserve(this.rootElement);\r\n                this.resizeObserver = null;\r\n            }\r\n            this.disposeSortWorker();\r\n            this.removeEventHandlers();\r\n\r\n            this.loadingSpinner.removeAllTasks();\r\n            this.loadingSpinner.setContainer(null);\r\n            this.loadingProgressBar.hide();\r\n            this.loadingProgressBar.setContainer(null);\r\n            this.infoPanel.setContainer(null);\r\n\r\n            this.camera = null;\r\n            this.threeScene = null;\r\n            this.splatRenderingInitialized = false;\r\n            this.initialized = false;\r\n            if (this.renderer) {\r\n                if (!this.usingExternalRenderer) {\r\n                    this.rootElement.removeChild(this.renderer.domElement);\r\n                    this.renderer.dispose();\r\n                }\r\n                this.renderer = null;\r\n            }\r\n\r\n            if (!this.usingExternalRenderer) {\r\n                document.body.removeChild(this.rootElement);\r\n            }\r\n\r\n            this.sortWorkerSortedIndexes = null;\r\n            this.sortWorkerIndexesToSort = null;\r\n            this.sortWorkerPrecomputedDistances = null;\r\n            this.sortWorkerTransforms = null;\r\n            this.disposed = true;\r\n            this.disposing = false;\r\n        });\r\n        promisesToAbort.forEach((toAbort) => {\r\n            toAbort.abort();\r\n        });\r\n        return disposePromise;\r\n    }\r\n\r\n    selfDrivenUpdate() {\r\n        if (this.selfDrivenMode && !this.webXRMode) {\r\n            this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\r\n        }\r\n        this.update();\r\n        if (this.shouldRender()) {\r\n            this.render();\r\n            this.consecutiveRenderFrames++;\r\n        } else {\r\n            this.consecutiveRenderFrames = 0;\r\n        }\r\n        this.renderNextFrame = false;\r\n    }\r\n\r\n    forceRenderNextFrame() {\r\n        this.renderNextFrame = true;\r\n    }\r\n\r\n    shouldRender = function() {\r\n\r\n        let renderCount = 0;\r\n        const lastCameraPosition = new THREE.Vector3();\r\n        const lastCameraOrientation = new THREE.Quaternion();\r\n        const changeEpsilon = 0.0001;\r\n\r\n        return function() {\r\n            let shouldRender = false;\r\n            let cameraChanged = false;\r\n            if (this.camera) {\r\n                const cp = this.camera.position;\r\n                const co = this.camera.quaternion;\r\n                cameraChanged = Math.abs(cp.x - lastCameraPosition.x) > changeEpsilon ||\r\n                                Math.abs(cp.y - lastCameraPosition.y) > changeEpsilon ||\r\n                                Math.abs(cp.z - lastCameraPosition.z) > changeEpsilon ||\r\n                                Math.abs(co.x - lastCameraOrientation.x) > changeEpsilon ||\r\n                                Math.abs(co.y - lastCameraOrientation.y) > changeEpsilon ||\r\n                                Math.abs(co.z - lastCameraOrientation.z) > changeEpsilon ||\r\n                                Math.abs(co.w - lastCameraOrientation.w) > changeEpsilon;\r\n            }\r\n\r\n            shouldRender = this.renderMode !== RenderMode.Never && (renderCount === 0 || this.splatMesh.visibleRegionChanging ||\r\n                           cameraChanged || this.renderMode === RenderMode.Always || this.dynamicMode === true || this.renderNextFrame);\r\n\r\n            if (this.camera) {\r\n                lastCameraPosition.copy(this.camera.position);\r\n                lastCameraOrientation.copy(this.camera.quaternion);\r\n            }\r\n\r\n            renderCount++;\r\n            return shouldRender;\r\n        };\r\n\r\n    }();\r\n\r\n    render = function() {\r\n\r\n        return function() {\r\n            if (!this.initialized || !this.splatRenderingInitialized) return;\r\n\r\n            const hasRenderables = (threeScene) => {\r\n                for (let child of threeScene.children) {\r\n                    if (child.visible) return true;\r\n                }\r\n                return false;\r\n            };\r\n            const savedAuoClear = this.renderer.autoClear;\r\n            this.renderer.autoClear = false;\r\n            if (hasRenderables(this.threeScene)) this.renderer.render(this.threeScene, this.camera);\r\n            this.renderer.render(this.splatMesh, this.camera);\r\n            if (this.sceneHelper.getFocusMarkerOpacity() > 0.0) this.renderer.render(this.sceneHelper.focusMarker, this.camera);\r\n            if (this.showControlPlane) this.renderer.render(this.sceneHelper.controlPlane, this.camera);\r\n            this.renderer.autoClear = savedAuoClear;\r\n        };\r\n\r\n    }();\r\n\r\n    update(renderer, camera) {\r\n        if (this.dropInMode) this.updateForDropInMode(renderer, camera);\r\n        if (!this.initialized || !this.splatRenderingInitialized) return;\r\n        if (this.controls) this.controls.update();\r\n        this.splatMesh.updateVisibleRegionFadeDistance(this.sceneRevealMode);\r\n        this.updateSplatSort();\r\n        this.updateForRendererSizeChanges();\r\n        this.updateSplatMesh();\r\n        this.updateMeshCursor();\r\n        this.updateFPS();\r\n        this.timingSensitiveUpdates();\r\n        this.updateInfoPanel();\r\n        this.updateControlPlane();\r\n    }\r\n\r\n    updateForDropInMode(renderer, camera) {\r\n        this.renderer = renderer;\r\n        if (this.splatMesh) this.splatMesh.setRenderer(this.renderer);\r\n        this.camera = camera;\r\n        if (this.controls) this.controls.object = camera;\r\n        this.init();\r\n    }\r\n\r\n    updateFPS = function() {\r\n\r\n        let lastCalcTime = getCurrentTime();\r\n        let frameCount = 0;\r\n\r\n        return function() {\r\n            if (this.consecutiveRenderFrames > CONSECUTIVE_RENDERED_FRAMES_FOR_FPS_CALCULATION) {\r\n                const currentTime = getCurrentTime();\r\n                const calcDelta = currentTime - lastCalcTime;\r\n                if (calcDelta >= 1.0) {\r\n                    this.currentFPS = frameCount;\r\n                    frameCount = 0;\r\n                    lastCalcTime = currentTime;\r\n                } else {\r\n                    frameCount++;\r\n                }\r\n            } else {\r\n                this.currentFPS = null;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateForRendererSizeChanges = function() {\r\n\r\n        const lastRendererSize = new THREE.Vector2();\r\n        const currentRendererSize = new THREE.Vector2();\r\n\r\n        return function() {\r\n            this.renderer.getSize(currentRendererSize);\r\n            if (currentRendererSize.x !== lastRendererSize.x || currentRendererSize.y !== lastRendererSize.y) {\r\n                if (!this.usingExternalCamera) {\r\n                    this.camera.aspect = currentRendererSize.x / currentRendererSize.y;\r\n                    this.camera.updateProjectionMatrix();\r\n                }\r\n                lastRendererSize.copy(currentRendererSize);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    timingSensitiveUpdates = function() {\r\n\r\n        let lastUpdateTime;\r\n\r\n        return function() {\r\n            const currentTime = getCurrentTime();\r\n            if (!lastUpdateTime) lastUpdateTime = currentTime;\r\n            const timeDelta = currentTime - lastUpdateTime;\r\n\r\n            this.updateCameraTransition(currentTime);\r\n            this.updateFocusMarker(timeDelta);\r\n\r\n            lastUpdateTime = currentTime;\r\n        };\r\n\r\n    }();\r\n\r\n    updateCameraTransition = function() {\r\n\r\n        let tempCameraTarget = new THREE.Vector3();\r\n        let toPreviousTarget = new THREE.Vector3();\r\n        let toNextTarget = new THREE.Vector3();\r\n\r\n        return function(currentTime) {\r\n            if (this.transitioningCameraTarget) {\r\n                toPreviousTarget.copy(this.previousCameraTarget).sub(this.camera.position).normalize();\r\n                toNextTarget.copy(this.nextCameraTarget).sub(this.camera.position).normalize();\r\n                const rotationAngle = Math.acos(toPreviousTarget.dot(toNextTarget));\r\n                const rotationSpeed = rotationAngle / (Math.PI / 3) * .65 + .3;\r\n                const t = (rotationSpeed / rotationAngle * (currentTime - this.transitioningCameraTargetStartTime));\r\n                tempCameraTarget.copy(this.previousCameraTarget).lerp(this.nextCameraTarget, t);\r\n                this.camera.lookAt(tempCameraTarget);\r\n                this.controls.target.copy(tempCameraTarget);\r\n                if (t >= 1.0) {\r\n                    this.transitioningCameraTarget = false;\r\n                }\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateFocusMarker = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n        let wasTransitioning = false;\r\n\r\n        return function(timeDelta) {\r\n            this.getRenderDimensions(renderDimensions);\r\n            if (this.transitioningCameraTarget) {\r\n                this.sceneHelper.setFocusMarkerVisibility(true);\r\n                const currentFocusMarkerOpacity = Math.max(this.sceneHelper.getFocusMarkerOpacity(), 0.0);\r\n                let newFocusMarkerOpacity = Math.min(currentFocusMarkerOpacity + FOCUS_MARKER_FADE_IN_SPEED * timeDelta, 1.0);\r\n                this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\r\n                this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\r\n                wasTransitioning = true;\r\n                this.forceRenderNextFrame();\r\n            } else {\r\n                let currentFocusMarkerOpacity;\r\n                if (wasTransitioning) currentFocusMarkerOpacity = 1.0;\r\n                else currentFocusMarkerOpacity = Math.min(this.sceneHelper.getFocusMarkerOpacity(), 1.0);\r\n                if (currentFocusMarkerOpacity > 0) {\r\n                    this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\r\n                    let newFocusMarkerOpacity = Math.max(currentFocusMarkerOpacity - FOCUS_MARKER_FADE_OUT_SPEED * timeDelta, 0.0);\r\n                    this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\r\n                    if (newFocusMarkerOpacity === 0.0) this.sceneHelper.setFocusMarkerVisibility(false);\r\n                }\r\n                if (currentFocusMarkerOpacity > 0.0) this.forceRenderNextFrame();\r\n                wasTransitioning = false;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateMeshCursor = function() {\r\n\r\n        const outHits = [];\r\n        const renderDimensions = new THREE.Vector2();\r\n\r\n        return function() {\r\n            if (this.showMeshCursor) {\r\n                this.forceRenderNextFrame();\r\n                this.getRenderDimensions(renderDimensions);\r\n                outHits.length = 0;\r\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\r\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\r\n                if (outHits.length > 0) {\r\n                    this.sceneHelper.setMeshCursorVisibility(true);\r\n                    this.sceneHelper.positionAndOrientMeshCursor(outHits[0].origin, this.camera);\r\n                } else {\r\n                    this.sceneHelper.setMeshCursorVisibility(false);\r\n                }\r\n            } else {\r\n                if (this.sceneHelper.getMeschCursorVisibility()) this.forceRenderNextFrame();\r\n                this.sceneHelper.setMeshCursorVisibility(false);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateInfoPanel = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n\r\n        return function() {\r\n            if (!this.showInfo) return;\r\n            const splatCount = this.splatMesh.getSplatCount();\r\n            this.getRenderDimensions(renderDimensions);\r\n            const cameraLookAtPosition = this.controls ? this.controls.target : null;\r\n            const meshCursorPosition = this.showMeshCursor ? this.sceneHelper.meshCursor.position : null;\r\n            const splatRenderCountPct = this.splatRenderCount / splatCount * 100;\r\n            this.infoPanel.update(renderDimensions, this.camera.position, cameraLookAtPosition,\r\n                                  this.camera.up, meshCursorPosition, this.currentFPS || 'N/A', splatCount,\r\n                                  this.splatRenderCount, splatRenderCountPct, this.lastSortTime, this.focalAdjustment);\r\n        };\r\n\r\n    }();\r\n\r\n    updateControlPlane() {\r\n        if (this.showControlPlane) {\r\n            this.sceneHelper.setControlPlaneVisibility(true);\r\n            this.sceneHelper.positionAndOrientControlPlane(this.controls.target, this.camera.up);\r\n        } else {\r\n            this.sceneHelper.setControlPlaneVisibility(false);\r\n        }\r\n    }\r\n\r\n    updateSplatSort = function() {\r\n\r\n        const mvpMatrix = new THREE.Matrix4();\r\n        const cameraPositionArray = [];\r\n        const lastSortViewDir = new THREE.Vector3(0, 0, -1);\r\n        const sortViewDir = new THREE.Vector3(0, 0, -1);\r\n        const lastSortViewPos = new THREE.Vector3();\r\n        const sortViewOffset = new THREE.Vector3();\r\n        const queuedSorts = [];\r\n\r\n        const partialSorts = [\r\n            {\r\n                'angleThreshold': 0.55,\r\n                'sortFractions': [0.125, 0.33333, 0.75]\r\n            },\r\n            {\r\n                'angleThreshold': 0.65,\r\n                'sortFractions': [0.33333, 0.66667]\r\n            },\r\n            {\r\n                'angleThreshold': 0.8,\r\n                'sortFractions': [0.5]\r\n            }\r\n        ];\r\n\r\n        return async function() {\r\n            if (this.sortRunning) return;\r\n            if (!this.initialized || !this.splatRenderingInitialized) return;\r\n\r\n            let angleDiff = 0;\r\n            let positionDiff = 0;\r\n            let needsRefreshForRotation = false;\r\n            let needsRefreshForPosition = false;\r\n\r\n            sortViewDir.set(0, 0, -1).applyQuaternion(this.camera.quaternion);\r\n            angleDiff = sortViewDir.dot(lastSortViewDir);\r\n            positionDiff = sortViewOffset.copy(this.camera.position).sub(lastSortViewPos).length();\r\n\r\n            if (!this.forceSort && !this.splatMesh.dynamicMode && queuedSorts.length === 0) {\r\n                if (angleDiff <= 0.99) needsRefreshForRotation = true;\r\n                if (positionDiff >= 1.0) needsRefreshForPosition = true;\r\n                if (!needsRefreshForRotation && !needsRefreshForPosition) return;\r\n            }\r\n\r\n            this.sortRunning = true;\r\n            const { splatRenderCount, shouldSortAll } = this.gatherSceneNodesForSort();\r\n            this.splatRenderCount = splatRenderCount;\r\n            this.sortPromise = new Promise((resolve) => {\r\n                this.sortPromiseResolver = resolve;\r\n            });\r\n\r\n            mvpMatrix.copy(this.camera.matrixWorld).invert();\r\n            mvpMatrix.premultiply(this.camera.projectionMatrix);\r\n            mvpMatrix.multiply(this.splatMesh.matrixWorld);\r\n\r\n            if (this.gpuAcceleratedSort && (queuedSorts.length <= 1 || queuedSorts.length % 2 === 0)) {\r\n                await this.splatMesh.computeDistancesOnGPU(mvpMatrix, this.sortWorkerPrecomputedDistances);\r\n            }\r\n\r\n            if (this.splatMesh.dynamicMode || shouldSortAll) {\r\n                queuedSorts.push(this.splatRenderCount);\r\n            } else {\r\n                if (queuedSorts.length === 0) {\r\n                    for (let partialSort of partialSorts) {\r\n                        if (angleDiff < partialSort.angleThreshold) {\r\n                            for (let sortFraction of partialSort.sortFractions) {\r\n                                queuedSorts.push(Math.floor(this.splatRenderCount * sortFraction));\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    queuedSorts.push(this.splatRenderCount);\r\n                }\r\n            }\r\n            let sortCount = Math.min(queuedSorts.shift(), this.splatRenderCount);\r\n\r\n            cameraPositionArray[0] = this.camera.position.x;\r\n            cameraPositionArray[1] = this.camera.position.y;\r\n            cameraPositionArray[2] = this.camera.position.z;\r\n\r\n            const sortMessage = {\r\n                'modelViewProj': mvpMatrix.elements,\r\n                'cameraPosition': cameraPositionArray,\r\n                'splatRenderCount': this.splatRenderCount,\r\n                'splatSortCount': sortCount,\r\n                'usePrecomputedDistances': this.gpuAcceleratedSort\r\n            };\r\n            if (this.splatMesh.dynamicMode) {\r\n                this.splatMesh.fillTransformsArray(this.sortWorkerTransforms);\r\n            }\r\n            if (!this.sharedMemoryForWorkers) {\r\n                sortMessage.indexesToSort = this.sortWorkerIndexesToSort;\r\n                sortMessage.transforms = this.sortWorkerTransforms;\r\n                if (this.gpuAcceleratedSort) {\r\n                    sortMessage.precomputedDistances = this.sortWorkerPrecomputedDistances;\r\n                }\r\n            }\r\n            this.sortWorker.postMessage({\r\n                'sort': sortMessage\r\n            });\r\n\r\n            if (queuedSorts.length === 0) {\r\n                lastSortViewPos.copy(this.camera.position);\r\n                lastSortViewDir.copy(sortViewDir);\r\n            }\r\n\r\n            this.forceSort = false;\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Determine which splats to render by checking which are inside or close to the view frustum\r\n     */\r\n    gatherSceneNodesForSort = function() {\r\n\r\n        const nodeRenderList = [];\r\n        let allSplatsSortBuffer = null;\r\n        const tempVectorYZ = new THREE.Vector3();\r\n        const tempVectorXZ = new THREE.Vector3();\r\n        const tempVector = new THREE.Vector3();\r\n        const modelView = new THREE.Matrix4();\r\n        const baseModelView = new THREE.Matrix4();\r\n        const sceneTransform = new THREE.Matrix4();\r\n        const renderDimensions = new THREE.Vector3();\r\n        const forward = new THREE.Vector3(0, 0, -1);\r\n\r\n        const tempMax = new THREE.Vector3();\r\n        const nodeSize = (node) => {\r\n            return tempMax.copy(node.max).sub(node.min).length();\r\n        };\r\n\r\n        return function(gatherAllNodes = false) {\r\n\r\n            this.getRenderDimensions(renderDimensions);\r\n            const cameraFocalLength = (renderDimensions.y / 2.0) / Math.tan(this.camera.fov / 2.0 * THREE.MathUtils.DEG2RAD);\r\n            const fovXOver2 = Math.atan(renderDimensions.x / 2.0 / cameraFocalLength);\r\n            const fovYOver2 = Math.atan(renderDimensions.y / 2.0 / cameraFocalLength);\r\n            const cosFovXOver2 = Math.cos(fovXOver2);\r\n            const cosFovYOver2 = Math.cos(fovYOver2);\r\n\r\n            const splatTree = this.splatMesh.getSplatTree();\r\n\r\n            if (splatTree) {\r\n                baseModelView.copy(this.camera.matrixWorld).invert();\r\n                baseModelView.multiply(this.splatMesh.matrixWorld);\r\n\r\n                let nodeRenderCount = 0;\r\n                let splatRenderCount = 0;\r\n\r\n                for (let s = 0; s < splatTree.subTrees.length; s++) {\r\n                    const subTree = splatTree.subTrees[s];\r\n                    modelView.copy(baseModelView);\r\n                    if (this.splatMesh.dynamicMode) {\r\n                        this.splatMesh.getSceneTransform(s, sceneTransform);\r\n                        modelView.multiply(sceneTransform);\r\n                    }\r\n                    const nodeCount = subTree.nodesWithIndexes.length;\r\n                    for (let i = 0; i < nodeCount; i++) {\r\n                        const node = subTree.nodesWithIndexes[i];\r\n                        if (!node.data || !node.data.indexes || node.data.indexes.length === 0) continue;\r\n                        tempVector.copy(node.center).applyMatrix4(modelView);\r\n\r\n                        const distanceToNode = tempVector.length();\r\n                        tempVector.normalize();\r\n\r\n                        tempVectorYZ.copy(tempVector).setX(0).normalize();\r\n                        tempVectorXZ.copy(tempVector).setY(0).normalize();\r\n\r\n                        const cameraAngleXZDot = forward.dot(tempVectorXZ);\r\n                        const cameraAngleYZDot = forward.dot(tempVectorYZ);\r\n\r\n                        const ns = nodeSize(node);\r\n                        const outOfFovY = cameraAngleYZDot < (cosFovYOver2 - .6);\r\n                        const outOfFovX = cameraAngleXZDot < (cosFovXOver2 - .6);\r\n                        if (!gatherAllNodes && ((outOfFovX || outOfFovY) && distanceToNode > ns)) {\r\n                            continue;\r\n                        }\r\n                        splatRenderCount += node.data.indexes.length;\r\n                        nodeRenderList[nodeRenderCount] = node;\r\n                        node.data.distanceToNode = distanceToNode;\r\n                        nodeRenderCount++;\r\n                    }\r\n                }\r\n\r\n                nodeRenderList.length = nodeRenderCount;\r\n                nodeRenderList.sort((a, b) => {\r\n                    if (a.data.distanceToNode < b.data.distanceToNode) return -1;\r\n                    else return 1;\r\n                });\r\n\r\n                let currentByteOffset = splatRenderCount * Constants.BytesPerInt;\r\n                for (let i = 0; i < nodeRenderCount; i++) {\r\n                    const node = nodeRenderList[i];\r\n                    const windowSizeInts = node.data.indexes.length;\r\n                    const windowSizeBytes = windowSizeInts * Constants.BytesPerInt;\r\n                    let destView = new Uint32Array(this.sortWorkerIndexesToSort.buffer,\r\n                                                   currentByteOffset - windowSizeBytes, windowSizeInts);\r\n                    destView.set(node.data.indexes);\r\n                    currentByteOffset -= windowSizeBytes;\r\n                }\r\n\r\n                return {\r\n                    'splatRenderCount': splatRenderCount,\r\n                    'shouldSortAll': false\r\n                };\r\n            } else {\r\n                const totalSplatCount = this.splatMesh.getSplatCount();\r\n                if (!allSplatsSortBuffer || allSplatsSortBuffer.length !== totalSplatCount) {\r\n                    allSplatsSortBuffer = new Uint32Array(totalSplatCount);\r\n                    for (let i = 0; i < totalSplatCount; i++) {\r\n                        allSplatsSortBuffer[i] = i;\r\n                    }\r\n                }\r\n                this.sortWorkerIndexesToSort.set(allSplatsSortBuffer);\r\n                return {\r\n                    'splatRenderCount': totalSplatCount,\r\n                    'shouldSortAll': true\r\n                };\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    getSplatMesh() {\r\n        return this.splatMesh;\r\n    }\r\n\r\n    /**\r\n     * Get a reference to a splat scene.\r\n     * @param {number} sceneIndex The index of the scene to which the reference will be returned\r\n     * @return {SplatScene}\r\n     */\r\n    getSplatScene(sceneIndex) {\r\n        return this.splatMesh.getScene(sceneIndex);\r\n    }\r\n\r\n    isMobile() {\r\n        return navigator.userAgent.includes('Mobi');\r\n    }\r\n}\r\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\f\u0006dylink\u0000\u0000\u0000\u0000\u0000\u0001\u001b\u0003`\u0000\u0000`\u0010\u0000`\u0000\u0001\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0004\u0003\u0000\u0001\u0002\u00079\u0003\u0011__wasm_call_ctors\u0000\u0000\u000bsortIndexes\u0000\u0001\u0013emscripten_tls_init\u0000\u0002\n�\u0010\u0003\u0003\u0000\u0001\u000b�\u0010\u0005\u0001|\u0003{\u0002\u0003}\u0002~ \u000b \nk!\f\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\u000eA����x!\r \u000b \fM\r\u0002 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00056\u0002\u0000 \u0005 \u000e \u0005 \u000eH\u001b!\u000e \u0005 \r \u0005 \rJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0002\u000b \u000f\u0004@A����\u0007!\u000eA����x!\r \u000b \fM\r\u0002A!\u000f \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0014j(\u0002\u0000\"\u0015A\u0002tj(\u0002\u0000\"\nG\u0004@\u0002~ \u0005�\t\u0002\b \b \nA\u0006tj\"\u000f�\t\u0002\u0000 \u000f*\u0002\u0010� \u0001 \u000f*\u0002 � \u0002 \u000f*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000f�\t\u0002\u0004 \u000f*\u0002\u0014� \u0001 \u000f*\u0002$� \u0002 \u000f*\u00024� \u0003��\u0001��\u0001 \u0005�\t\u0002( \u000f�\t\u0002\b \u000f*\u0002\u0018� \u0001 \u000f*\u0002(� \u0002 \u000f*\u00028� \u0003��\u0001��\u0001 \u0005�\t\u00028 \u000f�\t\u0002\f \u000f*\u0002\u001c� \u0001 \u000f*\u0002,� \u0002 \u000f*\u0002<� \u0003��\u0001��\u0001\"\u0011�\u001f\u0002��\u0014 \u0011�\u001f\u0003��\"\u0001�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@\"\u0012��\u0001\"\u0013�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b!\u0019\u0002~ \u0013�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b�\u0012!\u0013\u0002~ \u0011�\u001f\u0000��\u0014 \u0011�\u001f\u0001��\"\u0001 \u0012��\u0001\"\u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b!\u001a \u0013 \u0019�\u001e\u0001!\u0012\u0002~ \u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b�\u0012 \u001a�\u001e\u0001 \u0012�\r\u0000\u0001\u0002\u0003\b\t\n\u000b\u0010\u0011\u0012\u0013\u0018\u0019\u001a\u001b!\u0012 \n!\u000f\u000b \u0003 \u0014j \u0001 \u0015A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j \u0011�\u001b\u0003j\"\n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0002\u000b\u0002 \u0005*\u0002\u0018�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\n\u0002 \u0005*\u0002\b�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0005A����\u0007!\u000eA����x!\r \u000b \fM\r\u0001 \u0002�\u0011 \n�\u001c\u0001 \u0005�\u001c\u0002!\u0012 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0002j \u0001 \u0000 \u0002j(\u0002\u0000A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j\"\u00026\u0002\u0000 \u0002 \u000e \u0002 \u000eH\u001b!\u000e \u0002 \r \u0002 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0001\u000b \r\u0004@A����\u0007!\u000eA����x!\r \u000b \fM\r\u0001 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j\u0002 \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0001\u000b\u0002@ \u000fE\u0004@ \u000b \fK\r\u0001A����x!\rA����\u0007!\u000e\f\u0002\u000bA����\u0007!\u000eA����x!\r \u000b \fM\r\u0001A!\u000f \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0014j(\u0002\u0000A\u0002t\"\u0015j(\u0002\u0000\"\nG\u0004@ \u0005�\t\u0002\b \b \nA\u0006tj\"\u000f�\t\u0002\u0000 \u000f*\u0002\u0010� \u0001 \u000f*\u0002 � \u0002 \u000f*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000f�\t\u0002\u0004 \u000f*\u0002\u0014� \u0001 \u000f*\u0002$� \u0002 \u000f*\u00024� \u0003��\u0001��\u0001 \u0005�\t\u0002( \u000f�\t\u0002\b \u000f*\u0002\u0018� \u0001 \u000f*\u0002(� \u0002 \u000f*\u00028� \u0003��\u0001��\u0001 \u0005�\t\u00028 \u000f�\t\u0002\f \u000f*\u0002\u001c� \u0001 \u000f*\u0002,� \u0002 \u000f*\u0002<� \u0003��\u0001��\u0001!\u0011 \n!\u000f\u000b \u0003 \u0014j\u0002 \u0011 \u0001 \u0015A\u0002t\"\nj)\u0002\u0000�\u0012��\u0001\"\u0012�\u001f\u0000 \u0012�\u001f\u0001� \u0011 \u0011�\r\b\t\n\u000b\f\r\u000e\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0001 \nA\brj)\u0002\u0000�\u0012��\u0001\"\u0012�\u001f\u0000� \u0012�\u001f\u0001��D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000b \u0005*\u0002(!\u0016 \u0005*\u0002\u0018!\u0017 \u0005*\u0002\b!\u0018A����\u0007!\u000eA����x!\r \f!\u0005\u0003@\u0002 \u0018 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\u0000� \u0017 \u0002*\u0002\u0004�� \u0016 \u0002*\u0002\b���D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\n \u0003 \u0007j \n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \u000e���!\u0016 \f!\r\u0003@\u0002 \u0016 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \u000ek��\"\u0017�C\u0000\u0000\u0000O]\u0004@ \u0017�\f\u0001\u000bA����x\u000b!\n \u0001 \n6\u0002\u0000 \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\u000e\u0003@ \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \u000eA\u0001j\"\u000e \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\u000e\u0003@ \u0006 \u000eA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \u000eA\u0001J!\u0002 \u0001!\u000e \u0002\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\u000e\u0003@ \u0006 \u000b \u0004 \u0003 \u000eA\u0001k\"\u000eA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \f \u000eH\r\u0000\u000b\u000b\u000b\u0004\u0000A\u0000\u000b","import * as THREE from 'three';\r\nimport { Viewer } from './Viewer.js';\r\n\r\n/**\r\n * DropInViewer: Wrapper for a Viewer instance that enables it to be added to a Three.js scene like\r\n * any other Three.js scene object (Mesh, Object3D, etc.)\r\n */\r\nexport class DropInViewer extends THREE.Group {\r\n\r\n    constructor(options = {}) {\r\n        super();\r\n\r\n        options.selfDrivenMode = false;\r\n        options.useBuiltInControls = false;\r\n        options.rootElement = null;\r\n        options.ignoreDevicePixelRatio = false;\r\n        options.dropInMode = true;\r\n        options.camera = undefined;\r\n        options.renderer = undefined;\r\n\r\n        this.viewer = new Viewer(options);\r\n\r\n        this.callbackMesh = DropInViewer.createCallbackMesh();\r\n        this.add(this.callbackMesh);\r\n        this.callbackMesh.onBeforeRender = DropInViewer.onBeforeRender.bind(this, this.viewer);\r\n\r\n    }\r\n\r\n    /**\r\n     * Add a single splat scene to the viewer.\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {object} options {\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         showLoadingUI:         Display a loading spinner while the scene is loading, defaults to true\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     *\r\n     *         onProgress:                 Function to be called as file data are received\r\n     *\r\n     * }\r\n     * @return {AbortablePromise}\r\n     */\r\n    addSplatScene(path, options = {}) {\r\n        if (options.showLoadingUI !== false) options.showLoadingUI = true;\r\n        const loadPromise = this.viewer.addSplatScene(path, options);\r\n        loadPromise.then(() => {\r\n            this.add(this.viewer.splatMesh);\r\n        });\r\n        return loadPromise;\r\n    }\r\n\r\n    /**\r\n     * Add multiple splat scenes to the viewer.\r\n     * @param {Array<object>} sceneOptions Array of per-scene options: {\r\n     *\r\n     *         path: Path to splat scene to be loaded\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     * }\r\n     * @param {boolean} showLoadingUI Display a loading spinner while the scene is loading, defaults to true\r\n     * @return {AbortablePromise}\r\n     */\r\n    addSplatScenes(sceneOptions, showLoadingUI) {\r\n        if (showLoadingUI !== false) showLoadingUI = true;\r\n        const loadPromise = this.viewer.addSplatScenes(sceneOptions, showLoadingUI);\r\n        loadPromise.then(() => {\r\n            this.add(this.viewer.splatMesh);\r\n        });\r\n        return loadPromise;\r\n    }\r\n\r\n    /**\r\n     * Get a reference to a splat scene.\r\n     * @param {number} sceneIndex The index of the scene to which the reference will be returned\r\n     * @return {SplatScene}\r\n     */\r\n    getSplatScene(sceneIndex) {\r\n        return this.viewer.getSplatScene(sceneIndex);\r\n    }\r\n\r\n    dispose() {\r\n        return this.viewer.dispose();\r\n    }\r\n\r\n    static onBeforeRender(viewer, renderer, threeScene, camera) {\r\n        viewer.update(renderer, camera);\r\n    }\r\n\r\n    static createCallbackMesh() {\r\n        const geometry = new THREE.SphereGeometry(1, 8, 8);\r\n        const material = new THREE.MeshBasicMaterial();\r\n        material.colorWrite = false;\r\n        material.depthWrite = false;\r\n        const mesh = new THREE.Mesh(geometry, material);\r\n        mesh.frustumCulled = false;\r\n        return mesh;\r\n    }\r\n\r\n}\r\n"],"names":["UncompressedSplatArray","static","X","Y","Z","SCALE0","SCALE1","SCALE2","ROTATION0","ROTATION1","ROTATION2","ROTATION3","FDC0","FDC1","FDC2","OPACITY","constructor","this","splats","splatCount","createSplat","addSplat","splat","push","getSplat","index","addDefaultSplat","newSplat","addSplatFromComonents","x","y","z","scale0","scale1","scale2","rot0","rot1","rot2","rot3","r","g","b","opacity","addSplatFromArray","src","srcIndex","srcSplat","AbortablePromise","promiseFunc","abortHandler","promiseResolve","promiseReject","promise","Promise","resolve","reject","bind","args","error","id","idGen","then","onResolve","onResolveResult","args2","catch","onFail","abort","AbortedPromiseError","Error","msg","super","floatView","Float32Array","int32View","Int32Array","buffer","uintEncodedFloat","f","fetchWithProgress","path","onProgress","saveChunks","abortController","AbortController","signal","aborted","rejectFunc","fetch","async","data","reader","body","getReader","bytesDownloaded","_fileSize","headers","get","fileSize","parseInt","undefined","chunks","value","chunk","done","read","Blob","arrayBuffer","percent","percentLabel","length","toFixed","clamp","val","min","max","Math","getCurrentTime","performance","now","disposeAllMeshes","object3D","geometry","dispose","material","children","child","delayedExecute","func","window","setTimeout","SplatBuffer","BytesPerCenter","BytesPerColor","BytesPerScale","BytesPerRotation","BytesPerSplat","ScaleRange","bufferData","secLoadedCountsToMax","constructFromBuffer","fbf","compressionLevel","THREE","DataUtils","fromHalfFloat","getSplatCount","getMaxSplatCount","maxSplatCount","getBucketIndex","section","localSplatIndex","bucketIndex","maxSplatIndexInFullBuckets","fullBucketCount","bucketSize","floor","bucketSplatIndex","partiallyFullBucketIndex","currentPartiallyFilledBucketSize","partiallyFilledBucketLengths","getSplatCenter","globalSplatIndex","outCenter","transform","sectionIndex","globalSplatIndexToSectionMap","sections","splatCountOffset","centerBase","uint16PerSplat","bucketBase","BucketStorageSizeFloats","sf","compressionScaleFactor","sr","compressionScaleRange","dataArrayUint16","bucketArray","float32PerSplat","dataArrayFloat32","applyMatrix4","getSplatScaleAndRotation","scaleMatrix","Matrix4","rotationMatrix","tempMatrix","tempPosition","Vector3","outScale","outRotation","floatsPerSplat","sectionFloatArray","splatFloatBase","scaleBase","SplatScaleOffsetFloat","set","rotationBase","SplatRotationOffsetFloat","makeScale","makeRotationFromQuaternion","copy","multiply","decompose","getSplatColor","outColor","colorBase","bytesPerSplat","bytesPerCenter","bytesPerScale","bytesPerRotation","dataArrayUint8","fillSplatCenterArray","outCenterArray","srcFrom","srcTo","destFrom","center","i","centerDestBase","CenterComponentCount","tempMatrix4","Matrix3","covarianceMatrix","transformedCovariance","transform3x3","transform3x3Transpose","thf","toHalfFloat","scale","rotation","outCovariance","outOffset","desiredOutputCompressionLevel","setFromMatrix4","transpose","premultiply","elements","fillSplatCovarianceArray","covarianceArray","Quaternion","covarianceDestBase","CovarianceComponentCount","computeCovariance","fillSplatColorArray","outColorArray","minimumAlpha","splatColorOffset","colorSrcBase","colorDestBase","ColorComponentCount","alpha","parseHeader","headerArrayUint8","Uint8Array","HeaderSizeBytes","headerArrayUint16","Uint16Array","headerArrayUint32","Uint32Array","headerArrayFloat32","versionMajor","versionMinor","maxSectionCount","sectionCount","sceneCenter","writeHeaderCountsToBuffer","writeHeaderToBuffer","header","parseSectionHeaders","offset","CompressionLevels","bytesPerColor","sectionHeaderArrayUint16","SectionHeaderSizeBytes","sectionHeaderArrayUint32","sectionHeaderArrayFloat32","sectionHeaders","sectionHeaderBase","sectionHeaderBaseUint16","sectionHeaderBaseUint32","sectionBase","bucketCount","bucketBlockSize","halfBucketBlockSize","bucketStorageSizeBytes","partiallyFilledBucketCount","bucketsMetaDataSizeBytes","bucketsStorageSizeBytes","splatDataStorageSizeBytes","storageSizeBytes","sectionHeader","base","bucketsBase","dataBase","writeSectionHeaderToBuffer","sectionHeadeArrayUint16","sectionHeadeArrayUint32","sectionHeadeArrayFloat32","BucketStorageSizeBytes","writeSectionHeaderSplatCountToBuffer","globalSplatIndexToLocalSplatIndexMap","uint32PerSplat","linkBufferArrays","buildMaps","dataArrayUint32","cumulativeSplatCount","j","updateLoadedCounts","newSectionCount","newSplatCount","updateSectionLoadedCounts","sectionHeaderOffset","generateFromUncompressedSplatArrays","splatArrays","blockSize","options","sectionBuffers","sectionHeaderBuffers","totalSplatCount","tempRotation","sa","splatArray","sectionOptions","sectionBlockSize","blockSizeFactor","BucketBlockSize","sectionBucketSize","ceil","bucketSizeFactor","BucketSize","validSplats","targetSplat","OFFSET","bucketInfo","computeBucketsForUncompressedSplatArray","fullBuckets","partiallyFullBucketLengths","partiallyFullBuckets","map","bucket","buckets","sectionDataSizeBytes","bucketMetaDataSizeBytes","bucketDataBytes","sectionSizeBytes","sectionBuffer","ArrayBuffer","doubleCompressionScaleRange","bucketCenter","bucketCenterDelta","outSplatCount","fromArray","row","rot","RotationComponentCount","ScaleComponentCount","normalize","w","sub","round","rgba","Uint8ClampedArray","bucketMetaDataArray","pfb","sectionHeaderBuffer","sectionsCumulativeSizeBytes","byteLength","unifiedBufferSize","unifiedBuffer","currentUnifiedBase","halfBlockSize","dimensions","yBlocks","zBlocks","blockCenter","xBlock","yBlock","zBlock","bucketId","toArray","partiallyFullBucketArray","hasOwnProperty","HeaderMagicBytes","HeaderEndTokenBytes","HeaderEndToken","DataTypeMap","Map","Int8Array","Int16Array","Float64Array","unpackUnorm","bits","t","unpack111011","result","lerp","a","getElementPropStorage","element","name","properties","find","p","storage","CompressedPlyParser","decodeHeaderText","headerText","chunkElement","vertexElement","headerLines","split","filter","line","startsWith","words","count","has","StorageType","storageSizeByes","BYTES_PER_ELEMENT","type","byteSize","headerSizeBytes","indexOf","decodeHeader","plyBuffer","endHeaderTokenOffset","buf","search","endIndex","TextDecoder","decode","slice","readElementData","readBuffer","readOffset","fromIndex","toIndex","propertyFilter","dataView","DataView","e","property","requiredStorageSizeBytes","getInt8","getUint8","getInt16","getUint16","getInt32","getUint32","getFloat32","getFloat64","readPly","readIndex","getElementStorageArrays","minX","minY","minZ","maxX","maxY","maxZ","minScaleX","minScaleY","minScaleZ","positionExtremes","scaleExtremes","maxScaleX","maxScaleY","maxScaleZ","position","color","s","c","Vector4","chunkSplatIndexOffset","positionArray","scaleArray","rotationArray","colorArray","outSplat","chunkIndex","norm","sqrt","m","unpackRot","exp","parseToUncompressedSplatBufferSection","vertexDataBuffer","veretxReadOffset","outBuffer","outBytesPerCenter","outBytesPerScale","outBytesPerRotation","outBytesPerSplat","tempSplat","decompressSplat","outBase","parseToUncompressedSplatArray","identity","PlyParser","checkTextForEndHeader","endHeaderTestText","includes","checkBufferForEndHeader","searchOfset","chunkSize","decoder","endHeaderTestChunk","prunedLines","propertyTypes","compressed","trim","match","splatCountMatch","propertyMatch","propertyType","fieldOffsets","fieldSize","double","int","uint","float","short","ushort","uchar","fieldName","decodeHeadeFromBuffer","headerOffset","readChunkSize","headerChunk","findVertexData","readRawVertexFast","vertexData","propertiesToRead","outVertex","rawVertex","fromSplat","toSplat","vertexDataOffset","toBuffer","toOffset","parsedSplat","parseToUncompressedSplat","Fields","SH_C0","SplatPartitioner","sectionFilters","groupingParameters","partitionGenerator","partitionUncompressedSplatArray","results","newArrays","sectionSplats","sectionFilter","parameters","getStandardPartitioner","partitionSize","centerA","centerB","clampDistance","clampPoint","point","sort","centerADist","lengthSq","patitionCount","currentStartSplat","startSplat","splatIndex","blocksSize","SplatBufferGenerator","splatPartitioner","alphaRemovalThreshold","sectionSize","generateFromUncompressedSplatArray","partitionResults","getStandardGenerator","LoaderStatus","Constants","storeChunksInBuffer","inBytes","sizeBytes","PlyLoader","loadFromURL","fileName","streamLoadData","onStreamedSectionProgress","streamedSectionSizeBytes","StreamingSectionSize","splatDataOffsetBytes","streamBufferIn","streamBufferOut","streamedSplatBuffer","compressedPlyHeaderChunksBuffer","streamLoadCompleteResolver","headerLoaded","readyToLoadSplatData","streamLoadPromise","numBytesStreamed","numBytesParsed","numBytesDownloaded","textDecoder","chunkData","loadComplete","startBytes","endBytes","sizeRequiredForHeaderAndChunks","splatBufferSizeBytes","CurrentMajorVersion","CurrentMinorVersion","numBytesToProcess","addedSplatCount","numBytesToParse","numBytesLeftOver","parsedDataViewOffset","dataToParse","keepChunks","keepSize","unshift","plyFileData","loadFromFileData","splatBuffer","SplatParser","fromBuffer","fromOffset","inBase","RowSizeBytes","inCenter","inScale","CenterSizeBytes","inColor","ScaleSizeBytes","inRotation","RotationSizeBytes","quat","parseStandardSplatToUncompressedSplatArray","inBuffer","ColorSizeBytes","SplatLoader","optimizeSplatData","streamSectionSizeBytes","streamSplatBuffer","numBytesLoaded","percentStr","bytesLoadedSinceLastSection","fullBuffer","splatFileData","KSplatLoader","checkVersion","minVersionMajor","minVersionMinor","onSectionBuilt","streamBuffer","headerBuffer","sectionHeadersBuffer","headerLoading","sectionHeadersLoaded","sectionHeadersLoading","totalBytesToDownload","queuedCheckAndLoadSectionsCount","checkAndLoadSectionHeaders","performLoad","totalSectionStorageStorageByes","totalStorageSizeBytes","checkAndLoadSections","baseDataOffset","reachedSections","loadedSplatCount","bytesRequiredToReachSectionSplatData","bytesPastSSectionSplatDataStart","loadedSplatsForSection","fileData","downLoadLink","blob","document","createElement","appendChild","download","href","URL","createObjectURL","click","SceneFormat","Splat","KSplat","Ply","sceneFormatFromPath","endsWith","_changeEvent","_startEvent","_endEvent","_ray","Ray","_plane","Plane","TILT_LIMIT","cos","MathUtils","DEG2RAD","OrbitControls","EventDispatcher","object","domElement","style","touchAction","enabled","target","minDistance","maxDistance","Infinity","minZoom","maxZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","zoomToCursor","autoRotate","autoRotateSpeed","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","MOUSE","ROTATE","MIDDLE","DOLLY","PAN","touches","ONE","TOUCH","TWO","DOLLY_PAN","target0","clone","position0","zoom0","zoom","_domElementKeyEvents","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","getDistance","distanceTo","listenToKeyEvents","addEventListener","onKeyDown","stopListenToKeyEvents","removeEventListener","saveState","scope","reset","updateProjectionMatrix","dispatchEvent","update","state","STATE","NONE","setFromUnitVectors","up","quatInverse","invert","lastPosition","lastQuaternion","lastTargetPosition","twoPI","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","isFinite","makeSafe","addScaledVector","panOffset","add","performCursorZoom","isOrthographicCamera","radius","setFromSpherical","lookAt","multiplyScalar","zoomChanged","newRadius","isPerspectiveCamera","prevRadius","radiusDelta","dollyDirection","updateMatrixWorld","mouseBefore","mouse","unproject","mouseAfter","console","warn","transformDirection","matrix","origin","direction","abs","dot","setFromNormalAndCoplanarPoint","intersectPlane","distanceToSquared","EPS","quaternion","onContextMenu","onPointerDown","onPointerUp","onMouseWheel","onPointerMove","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","Spherical","rotateStart","Vector2","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","pointers","pointerPositions","getZoomScale","pow","angle","rotateUp","panLeft","v","distance","objectMatrix","setFromMatrixColumn","panUp","crossVectors","pan","deltaX","deltaY","targetDistance","tan","fov","clientHeight","right","left","clientWidth","top","bottom","dollyOut","dollyScale","dollyIn","updateMouseParameters","event","rect","getBoundingClientRect","clientX","clientY","width","h","height","dist","handleMouseDownRotate","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","dx","dy","handleTouchMoveRotate","getSecondPointerPosition","subVectors","handleTouchMovePan","handleTouchMoveDolly","setPointerCapture","pointerId","addPointer","pointerType","trackPointer","DOLLY_ROTATE","onTouchStart","mouseAction","button","handleMouseDownDolly","ctrlKey","metaKey","shiftKey","onMouseDown","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","onTouchMove","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","onMouseMove","splice","removePointer","releasePointerCapture","preventDefault","handleMouseWheel","needsUpdate","code","handleKeyDown","pointer","passive","LoadingSpinner","message","container","taskIDGen","elementID","elementIDGen","tasks","spinnerContainerOuter","className","display","spinnerContainerPrimary","spinnerPrimary","classList","messageContainerPrimary","innerHTML","spinnerContainerMin","spinnerMin","messageContainerMin","setMinimized","fadeTransitions","addTask","newTask","removeTask","task","removeAllTasks","setMessageForTask","show","setMessage","hide","visible","setContainer","removeChild","zIndex","minimized","instant","showHideSpinner","displayStyle","fadeTransitionsIndex","out","duration","onComplete","startTime","startOpacity","parseFloat","isNaN","interval","setInterval","elapsed","clearInterval","fadeElement","LoadingProgressBar","progressBarContainerOuter","progressBarBox","progressBarBackground","progressBar","setProgress","progress","InfoPanel","infoCells","layout","infoPanelContainer","append","infoPanel","infoTable","layoutEntry","labelCell","spacerCell","infoCell","renderDimensions","cameraPosition","cameraLookAtPosition","cameraUp","meshCursorPosition","currentFPS","splatRenderCount","splatRenderCountPct","lastSortTime","focalAdjustment","cameraPosString","cla","cameraLookAtString","cameraLookAt","cameraUpString","cursPos","cursorPosString","cursorPosition","fps","renderWindow","renderSplatCount","sortTime","ArrowHelper","Object3D","dir","headLength","headRadius","lineGeometry","CylinderGeometry","translate","coneGeometry","Mesh","MeshBasicMaterial","toneMapped","matrixAutoUpdate","cone","setDirection","_axis","radians","acos","setFromAxisAngle","setColor","source","SceneHelper","threeScene","splatRenderTarget","renderTargetCopyQuad","renderTargetCopyCamera","meshCursor","focusMarker","controlPlane","debugRoot","secondaryDebugRoot","updateSplatRenderTargetForRenderDimensions","destroySplatRendertarget","WebGLRenderTarget","format","RGBAFormat","stencilBuffer","depthBuffer","depthTexture","DepthTexture","DepthFormat","UnsignedIntType","setupRenderTargetCopyObjects","renderTargetCopyMaterial","ShaderMaterial","vertexShader","fragmentShader","uniforms","sourceColorTexture","sourceDepthTexture","depthWrite","depthTest","transparent","blending","CustomBlending","blendSrc","SrcAlphaFactor","blendSrcAlpha","blendDst","OneMinusSrcAlphaFactor","blendDstAlpha","extensions","fragDepth","PlaneGeometry","OrthographicCamera","destroyRenderTargetCopyObjects","setupMeshCursor","ConeGeometry","coneMaterial","downArrow","upArrow","leftArrow","rightArrow","destroyMeshCursor","remove","setMeshCursorVisibility","getMeschCursorVisibility","setMeshCursorPosition","positionAndOrientMeshCursor","camera","setupFocusMarker","sphereGeometry","SphereGeometry","focusMarkerMaterial","buildFocusMarkerMaterial","destroyFocusMarker","updateFocusMarker","viewport","matrixWorld","realFocusPosition","uniformsNeedUpdate","setFocusMarkerVisibility","setFocusMarkerOpacity","getFocusMarkerOpacity","setupControlPlane","planeGeometry","rotateX","planeMaterial","side","DoubleSide","planeMesh","arrowDir","arrowOrigin","arrowHelper","destroyControlPlane","setControlPlaneVisibility","positionAndOrientControlPlane","tempQuaternion","defaultUp","addDebugMeshes","createDebugMeshes","createSecondaryDebugMeshes","destroyDebugMeshes","renderOrder","debugMeshRoot","createMesh","sphereMesh","buildDebugMaterial","boxGeometry","BoxGeometry","boxMesh","separation","Color","FrontSide","VectorRight","VectorUp","VectorBackward","setParameters","boxContainsPoint","box","epsilon","intersectBox","planeIntersectionPoint","planeIntersectionPointArray","originArray","directionArray","outHit","normal","hitNormal","extremeVec","multiplier","sign","toSide","idx1","idx2","intersectSphere","toSphereCenterVec","toClosestApproach","toClosestApproachSq","diffSq","radiusSq","thc","t0","t1","Hit","hitClone","Raycaster","raycastAgainstTrueSplatEllipsoid","ray","setFromCameraAndScreenPosition","ndcCoords","screenPosition","screenDimensions","setFromMatrixPosition","near","far","intersectSplatMesh","toLocal","fromLocal","sceneTransform","localRay","tempPoint","splatMesh","outHits","splatTree","getSplatTree","subTrees","subTree","dynamicMode","getSceneTransform","outHitsForSubTree","rootNode","castRayAtSplatTreeNode","forEach","hit","tempColor","tempCenter","tempScale","tempHit","scaleEpsilon","uniformScaleMatrix","toSphereSpace","fromSphereSpace","tempRay","node","boundingBox","indexes","splatGlobalIndex","uniformScale","log10","SplatScene","updateTransform","copyTransformData","otherScene","compose","SplatTreeNode","depth","Box3","SplatSubTree","maxDepth","maxCentersPerNode","sceneDimensions","sceneMin","sceneMax","nodesWithIndexes","convertWorkerSubTreeNode","workerSubTreeNode","minVector","maxVector","convertedNode","convertWorkerSubTree","workerSubTree","convertedSubTree","visitLeavesFromNode","visitFunc","splatTreeWorker","createSplatTreeWorker","self","WorkerSplatTreeNodeIDGen","WorkerBox3","containsPoint","WorkerSplatSubTree","addedIndexes","WorkerSplatTreeNode","processSplatTreeNode","tree","indexToCenter","sceneCenters","newIndexes","nodeDimensions","halfDimensions","nodeCenter","childrenBounds","splatCounts","baseIndexes","childNode","buildSubTree","centerCount","onmessage","process","allCenters","postMessage","createSplatTree","centers","SplatTree","processSplatMesh","filterFunc","onIndexesUpload","onSplatTreeConstruction","Worker","toString","addCentersForScene","splatOffset","addedCount","addBase","diposeSplatTreeWorker","terminate","checkForEarlyExit","disposed","scenes","getScene","transferBuffers","array","workerProcessCenters","countLeaves","leafCount","visitLeaves","WebGLExtensions","gl","getExtension","extension","init","capabilities","isWebGL2","WebGLCapabilities","maxAnisotropy","getMaxPrecision","precision","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","WebGL2RenderingContext","maxPrecision","drawBuffers","logarithmicDepthBuffer","maxTextures","getParameter","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubemapSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_ATTRIBS","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","getMaxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","floatVertexTextures","maxSamples","MAX_SAMPLES","SceneRevealMode","Default","Gradual","Instant","dummyGeometry","BufferGeometry","dummyMaterial","SplatMesh","halfPrecisionCovariancesOnGPU","devicePixelRatio","enableDistancesComputationOnGPU","integerBasedDistancesComputation","antialiased","maxScreenSpaceSplatSize","renderer","splatDataTextures","distancesTransformFeedback","program","centersBuffer","transformIndexesBuffer","outDistancesBuffer","centersLoc","modelViewProjLoc","transformIndexesLoc","transformsLocs","globalSplatIndexToSceneIndexMap","lastBuildSplatCount","lastBuildScenes","lastBuildMaxSplatCount","lastBuildSceneCount","firstRenderTime","finalBuild","webGLUtils","calculatedSceneCenter","maxSplatDistanceFromSceneCenter","visibleRegionBufferRadius","visibleRegionRadius","visibleRegionFadeStartRadius","visibleRegionChanging","buildMaterial","vertexShaderSource","MaxScenes","fadeInComplete","currentTime","covariancesTexture","centersColorsTexture","focal","inverseFocalAdjustment","basisViewport","debugColor","covariancesTextureSize","centersColorsTextureSize","transformMatrices","alphaTest","NormalBlending","buildGeomtery","baseGeometry","setIndex","positionsArray","positions","BufferAttribute","setAttribute","setXYZ","InstancedBufferGeometry","splatIndexArray","splatIndexes","InstancedBufferAttribute","setUsage","DynamicDrawUsage","instanceCount","buildScenes","splatBuffers","sceneOptions","createScene","splatAlphaRemovalThreshold","buildSplatIndexMaps","localSplatIndexMap","sceneIndexMap","minAlphas","onSplatTreeIndexesUpload","time","splatColor","sceneIndex","getSceneIndexForSplat","minAlpha","timeEnd","leavesWithVertices","avgSplatCount","nodeCount","nodeSplatCount","log","build","keepSceneTransforms","getTotalMaxSplatCountForSplatBuffers","newScenes","newScene","existingScene","isUpdateBuild","disposeMeshData","indexMaps","setupDistancesComputationTransformFeedback","resetGPUDataFromSplatBuffers","disposeSplatTree","buildSplatTree","onSplatTreeReadyCallback","disposeTextures","disposeDistancesComputationGPUResources","textureKey","textureContainer","texture","onSplatTreeReady","callback","uploadSplatDataToTextures","updateGPUCentersBufferForDistancesComputation","updateGPUTransformIndexesBufferForDistancesComputation","computeTextureUpdateRegion","endSplat","textureWidth","textureHeight","elementsPerTexel","elementsPerSplat","texelsPerSplat","startSplatTexels","startRow","startRowElement","endSplatTexels","endRow","dataStart","dataEnd","updateDataTexture","paddedData","textureDesc","textureProps","bytesPerElement","getContext","updateRegion","size","updateElementCount","updateDataView","updateHeight","dataTexture","glType","convert","glFormat","colorSpace","currentTexture","TEXTURE_BINDING_2D","bindTexture","TEXTURE_2D","__webglTexture","texSubImage2D","checkForMultiSceneUpdateCondition","updateCenterColorsPaddedData","to","from","colors","paddedCenterColors","colorsBase","centersBase","centerColorsBase","arr","computeDataTextureSize","elementsPerSplatl","texSize","fillSplatDataArrays","baseData","covariances","covariancesTextureDescriptor","paddedCovariances","covariancesEndSplat","covariance","covariancesTextureProps","covaranceBytesPerElement","centerColorsTextureDescriptor","centerColorsTexture","centerColorsTextureProps","transformIndexesTexDesc","paddedTransformIndexes","paddedTransformIndexesTexture","transformIndexesTextureProps","covTexSize","CovariancesDataType","covariancesTextureType","HalfFloatType","FloatType","covTex","DataTexture","RGFormat","centersColsTexSize","paddedCentersCols","centersColsTex","RGBAIntegerFormat","internalFormat","centerColors","transformIndexesTexSize","transformIndexesTexture","RedIntegerFormat","transformIndexesTextureSize","updateVisibleRegion","avgCenter","scene","distFromCSceneCenter","updateVisibleRegionFadeDistance","sceneRevealMode","defaultFadeInRate","fadeInRate","shaderFadeInComplete","updateRenderIndexes","globalIndexes","attributes","updateTransforms","updateUniforms","cameraFocalLengthX","cameraFocalLengthY","transforms","getSplatDataTextures","getTotalSplatCountForScenes","getTotalSplatCountForSplatBuffers","getTotalMaxSplatCountForScenes","vao","deleteVertexArray","deleteProgram","deleteShader","disposeDistancesComputationGPUBufferResources","deleteTransformFeedback","deleteBuffer","setRenderer","WebGLUtils","currentRenderer","currentMaxSplatCount","rebuildGPUObjects","rebuildBuffers","createShader","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","typeName","errors","getShaderInfoLog","vsSource","currentVao","VERTEX_ARRAY_BINDING","currentProgram","CURRENT_PROGRAM","createVertexArray","bindVertexArray","createProgram","attachShader","transformFeedbackVaryings","SEPARATE_ATTRIBS","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","useProgram","getAttribLocation","getUniformLocation","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribIPointer","INT","vertexAttribPointer","FLOAT","UNSIGNED_INT","STATIC_READ","createTransformFeedback","bindTransformFeedback","TRANSFORM_FEEDBACK","bindBufferBase","TRANSFORM_FEEDBACK_BUFFER","ArrayType","attributeBytesPerCenter","subBufferOffset","srcCenters","getIntegerCenters","getFloatCenters","bufferSubData","maxArray","STATIC_DRAW","getTransformIndexes","transformIndexes","fillTransformsArray","tempArray","sceneTransformElements","computeDistancesOnGPU","modelViewProjMatrix","outComputedDistances","enable","RASTERIZER_DISCARD","iTempMatrix","getIntegerMatrixArray","iTransform","uniform4i","uniformMatrix4fv","iViewProjMatrix","iViewProj","uniform3i","viewProj","uniform3f","beginTransformFeedback","POINTS","drawArrays","endTransformFeedback","disable","sync","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","checkSync","clientWaitSync","TIMEOUT_EXPIRED","WAIT_FAILED","deleteSync","getBufferSubData","getLocalSplatParameters","globalIndex","paramsObj","returnSceneTransform","getSplatBufferForSplat","localIndex","getSplatLocalIndex","getSceneTransformForSplat","applySceneTransform","forceDestFromZero","destfrom","localDestFrom","padFour","fillCount","floatCenters","intCenters","componentCount","paddedFloatCenters","outTransform","matrixElements","intMatrixArray","functionName","parameterName","sortWorker","wasmInstance","wasmMemory","useSharedMemory","integerBasedSort","indexesToSortOffset","sortedIndexesOffset","transformIndexesOffset","transformsOffset","precomputedDistancesOffset","mappedDistancesOffset","frequenciesOffset","centersOffset","modelViewProjOffset","countsZero","sortedIndexesOut","sortSetupComplete","renderCount","sortCount","splatSortCount","usePrecomputedDistances","copyIndexesToSort","copyPrecomputedDistances","copyTransforms","indexesToSort","precomputedDistances","modelViewProj","sortStartTime","BytesPerInt","BytesPerFloat","DepthMapRange","exports","sortIndexes","sortMessage","sortDone","sortedIndexes","sortEndTime","CENTERS_BYTES_PER_ENTRY","sorterWasmBytes","matrixSize","memoryRequiredForIndexesToSort","memoryRequiredForCenters","memoryRequiredForModelViewProjectionMatrix","memoryRequiredForPrecomputedDistances","memoryRequiredForMappedDistances","memoryRequiredForSortedIndexes","memoryRequiredForIntermediateSortBuffers","memoryRequiredforTransformIndexes","memoryRequiredforTransforms","extraMemory","MemoryPageSize","totalRequiredMemory","totalPagesRequired","sorterWasmImport","module","env","memory","WebAssembly","Memory","initial","maximum","shared","compile","wasmModule","instantiate","instance","sortSetupPhase1Complete","indexesToSortBuffer","sortedIndexesBuffer","precomputedDistancesBuffer","transformsBuffer","WebXRMode","None","VR","AR","VRButton","createButton","disableButton","cursor","onmouseenter","onmouseleave","onclick","stylizeElement","padding","border","borderRadius","background","font","textAlign","outline","navigator","xr","isSessionSupported","supported","currentSession","onSessionStarted","session","onSessionEnded","setSession","textContent","sessionInit","optionalFeatures","requestSession","end","offerSession","err","showEnterVR","xrSessionIsGranted","exception","isSecureContext","location","replace","textDecoration","registerSessionGrantedListener","test","userAgent","ARButton","domOverlay","overlay","svg","createElementNS","root","setReferenceSpaceType","showStartAR","RenderMode","Always","OnChange","Never","Viewer","initialCameraPosition","initialCameraLookAt","dropInMode","selfDrivenMode","selfDrivenUpdateFunc","selfDrivenUpdate","useBuiltInControls","rootElement","ignoreDevicePixelRatio","gpuAcceleratedSort","isMobile","sharedMemoryForWorkers","dynamicScene","webXRMode","renderMode","controls","showMeshCursor","showControlPlane","showInfo","sceneHelper","sortRunning","sortWorkerIndexesToSort","sortWorkerSortedIndexes","sortWorkerPrecomputedDistances","sortWorkerTransforms","runAfterFirstSort","selfDrivenModeRunning","splatRenderingInitialized","raycaster","consecutiveRenderFrames","previousCameraTarget","nextCameraTarget","mousePosition","mouseDownPosition","mouseDownTime","resizeObserver","mouseMoveListener","mouseDownListener","mouseUpListener","keyDownListener","sortPromise","sortPromiseResolver","downloadPromisesToAbort","splatSceneLoadPromise","loadingSpinner","loadingProgressBar","usingExternalCamera","usingExternalRenderer","initialized","disposing","parentElement","getRenderDimensions","PerspectiveCamera","WebGLRenderer","antialias","setPixelRatio","autoClear","setClearColor","setSize","ResizeObserver","forceRenderNextFrame","observe","Scene","onMouseUp","removeEventHandlers","setRenderMode","forward","tempMatrixLeft","tempMatrixRight","makeRotationAxis","offsetX","offsetY","clickOffset","onMouseClick","checkForFocalPointChange","toNewFocalPoint","transitioningCameraTarget","intersectionPoint","transitioningCameraTargetStartTime","outDimensions","offsetWidth","offsetHeight","getSize","updateSplatMesh","focalLengthX","projectionMatrix","focalLengthY","isLoading","Object","isDisposingOrDisposed","clearSplatSceneLoadPromise","setSplatSceneLoadPromise","addSplatScene","streamBuildSections","isStreamable","streamView","splatBufferOptions","orientation","showLoadingUI","loadingTaskId","downloadDone","downloadedPercentage","loadSplatSceneToSplatBufferStreaming","loadSplatSceneToSplatBufferNonStreaming","firstBuild","addSplatBuffers","loaderStatus","suffix","addSplatScenes","fileCount","percentComplete","onLoadProgress","fileIndex","totalPercent","loadPromises","nativeLoadPromises","abortHandlers","downloadPromise","loadSplatSceneToSplatBuffer","loadingPromise","all","finally","loadPromise","onDownloadComplete","onException","clearDownloadPromise","onSectionDownloaded","firstStreamedSectionBuildResolver","firstStreamedSectionBuildRejecter","fullBuildResolver","fullBuildRejecter","steamedSectionBuildCount","streamedSectionBuilding","queuedStreamedSectionBuilds","checkAndBuildStreamedSections","queuedBuild","shift","fullDownloadPromise","firstStreamedSectionBuildPromise","resolver","rejecter","streamBuiltSections","loadCount","splatProcessingTaskId","showLoadingSpinnerForSplatTreeBuild","finish","forceSort","addSplatBuffersToMesh","disposeSortWorker","setupSortWorker","allSplatBuffers","allSplatBufferOptions","splatOptimizingTaskId","finished","frustumCulled","DistancesArrayType","worker","sorterWasmBinaryString","atob","charCodeAt","createSortWorker","sortCanceled","start","setAnimationLoop","requestFrameId","requestAnimationFrame","stop","cancelAnimationFrame","waitPromises","promisesToAbort","promiseKey","downloadPromiseToAbort","disposePromise","unobserve","toAbort","shouldRender","render","renderNextFrame","lastCameraPosition","lastCameraOrientation","changeEpsilon","cameraChanged","cp","co","savedAuoClear","hasRenderables","updateForDropInMode","updateSplatSort","updateForRendererSizeChanges","updateMeshCursor","updateFPS","timingSensitiveUpdates","updateInfoPanel","updateControlPlane","lastCalcTime","frameCount","lastRendererSize","currentRendererSize","aspect","lastUpdateTime","timeDelta","updateCameraTransition","tempCameraTarget","toPreviousTarget","toNextTarget","rotationAngle","wasTransitioning","currentFocusMarkerOpacity","newFocusMarkerOpacity","mvpMatrix","cameraPositionArray","lastSortViewDir","sortViewDir","lastSortViewPos","sortViewOffset","queuedSorts","partialSorts","angleThreshold","sortFractions","angleDiff","positionDiff","needsRefreshForRotation","needsRefreshForPosition","shouldSortAll","gatherSceneNodesForSort","partialSort","sortFraction","nodeRenderList","allSplatsSortBuffer","tempVectorYZ","tempVectorXZ","tempVector","modelView","baseModelView","tempMax","nodeSize","gatherAllNodes","cameraFocalLength","fovXOver2","atan","fovYOver2","cosFovXOver2","cosFovYOver2","nodeRenderCount","distanceToNode","setX","setY","cameraAngleXZDot","cameraAngleYZDot","ns","currentByteOffset","windowSizeInts","windowSizeBytes","getSplatMesh","getSplatScene","DropInViewer","Group","viewer","callbackMesh","createCallbackMesh","onBeforeRender","colorWrite","mesh"],"mappings":"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"}