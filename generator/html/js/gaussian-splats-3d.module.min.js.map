{"version":3,"file":"gaussian-splats-3d.module.min.js","sources":["../src/AbortablePromise.js","../src/Util.js","../src/loaders/UncompressedSplatArray.js","../src/Constants.js","../src/loaders/SplatBuffer.js","../src/loaders/ply/PlayCanvasCompressedPlyParser.js","../src/loaders/ply/PlyFormat.js","../src/loaders/ply/PlyParserUtils.js","../src/loaders/ply/INRIAV1PlyParser.js","../src/loaders/ply/INRIAV2PlyParser.js","../src/loaders/ply/PlyParser.js","../src/loaders/SplatPartitioner.js","../src/loaders/SplatBufferGenerator.js","../src/loaders/LoaderStatus.js","../src/loaders/DirectLoadError.js","../src/loaders/InternalLoadType.js","../src/loaders/ply/PlyLoader.js","../src/loaders/Compression.js","../src/loaders/spz/SpzLoader.js","../src/loaders/splat/SplatParser.js","../src/loaders/splat/SplatLoader.js","../src/loaders/ksplat/KSplatLoader.js","../src/loaders/SceneFormat.js","../src/loaders/Utils.js","../src/OrbitControls.js","../src/ui/LoadingSpinner.js","../src/ui/Util.js","../src/ui/LoadingProgressBar.js","../src/ui/InfoPanel.js","../src/ArrowHelper.js","../src/SceneHelper.js","../src/raycaster/Ray.js","../src/raycaster/Hit.js","../src/SplatRenderMode.js","../src/raycaster/Raycaster.js","../src/splatmesh/SplatMaterial.js","../src/splatmesh/SplatMaterial3D.js","../src/splatmesh/SplatMaterial2D.js","../src/splatmesh/SplatGeometry.js","../src/splatmesh/SplatScene.js","../src/splattree/SplatTree.js","../src/three-shim/WebGLExtensions.js","../src/three-shim/WebGLCapabilities.js","../src/SceneRevealMode.js","../src/LogLevel.js","../src/splatmesh/SplatMesh.js","../src/worker/sorter.wasm","../src/worker/sorter_no_simd.wasm","../src/worker/SortWorker.js","../src/webxr/WebXRMode.js","../src/webxr/VRButton.js","../src/webxr/ARButton.js","../src/RenderMode.js","../src/Viewer.js","../src/worker/sorter_non_shared.wasm","../src/worker/sorter_no_simd_non_shared.wasm","../src/DropInViewer.js"],"sourcesContent":["/**\r\n * AbortablePromise: A quick & dirty wrapper for JavaScript's Promise class that allows the underlying\r\n * asynchronous operation to be cancelled. It is only meant for simple situations where no complex promise\r\n * chaining or merging occurs. It needs a significant amount of work to truly replicate the full\r\n * functionality of JavaScript's Promise class. Look at Util.fetchWithProgress() for example usage.\r\n *\r\n * This class was primarily added to allow splat scene downloads to be cancelled. It has not been tested\r\n * very thoroughly and the implementation is kinda janky. If you can at all help it, please avoid using it :)\r\n */\r\nexport class AbortablePromise {\r\n\r\n    static idGen = 0;\r\n\r\n    constructor(promiseFunc, abortHandler) {\r\n\r\n        let resolver;\r\n        let rejecter;\r\n        this.promise = new Promise((resolve, reject) => {\r\n            resolver = resolve;\r\n            rejecter = reject;\r\n        });\r\n\r\n        const promiseResolve = resolver.bind(this);\r\n        const promiseReject = rejecter.bind(this);\r\n\r\n        const resolve = (...args) => {\r\n            promiseResolve(...args);\r\n        };\r\n\r\n        const reject = (error) => {\r\n            promiseReject(error);\r\n        };\r\n\r\n        promiseFunc(resolve.bind(this), reject.bind(this));\r\n        this.abortHandler = abortHandler;\r\n        this.id = AbortablePromise.idGen++;\r\n    }\r\n\r\n    then(onResolve) {\r\n        return new AbortablePromise((resolve, reject) => {\r\n            this.promise = this.promise\r\n            .then((...args) => {\r\n                const onResolveResult = onResolve(...args);\r\n                if (onResolveResult instanceof Promise || onResolveResult instanceof AbortablePromise) {\r\n                    onResolveResult.then((...args2) => {\r\n                        resolve(...args2);\r\n                    });\r\n                } else {\r\n                    resolve(onResolveResult);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                reject(error);\r\n            });\r\n        }, this.abortHandler);\r\n    }\r\n\r\n    catch(onFail) {\r\n        return new AbortablePromise((resolve) => {\r\n            this.promise = this.promise.then((...args) => {\r\n                resolve(...args);\r\n            })\r\n            .catch(onFail);\r\n        }, this.abortHandler);\r\n    }\r\n\r\n    abort(reason) {\r\n        if (this.abortHandler) this.abortHandler(reason);\r\n    }\r\n\r\n}\r\n\r\nexport class AbortedPromiseError extends Error {\r\n\r\n    constructor(msg) {\r\n        super(msg);\r\n    }\r\n\r\n}\r\n","import { AbortablePromise, AbortedPromiseError } from './AbortablePromise.js';\r\n\r\nexport const floatToHalf = function() {\r\n\r\n    const floatView = new Float32Array(1);\r\n    const int32View = new Int32Array(floatView.buffer);\r\n\r\n    return function(val) {\r\n        floatView[0] = val;\r\n        const x = int32View[0];\r\n\r\n        let bits = (x >> 16) & 0x8000;\r\n        let m = (x >> 12) & 0x07ff;\r\n        const e = (x >> 23) & 0xff;\r\n\r\n        if (e < 103) return bits;\r\n\r\n        if (e > 142) {\r\n            bits |= 0x7c00;\r\n            bits |= ((e == 255) ? 0 : 1) && (x & 0x007fffff);\r\n            return bits;\r\n        }\r\n\r\n        if (e < 113) {\r\n            m |= 0x0800;\r\n            bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\r\n            return bits;\r\n        }\r\n\r\n        bits |= (( e - 112) << 10) | (m >> 1);\r\n        bits += m & 1;\r\n        return bits;\r\n    };\r\n\r\n}();\r\n\r\nexport const uintEncodedFloat = function() {\r\n\r\n    const floatView = new Float32Array(1);\r\n    const int32View = new Int32Array(floatView.buffer);\r\n\r\n    return function(f) {\r\n        floatView[0] = f;\r\n        return int32View[0];\r\n    };\r\n\r\n}();\r\n\r\nexport const rgbaToInteger = function(r, g, b, a) {\r\n    return r + (g << 8) + (b << 16) + (a << 24);\r\n};\r\n\r\nexport const rgbaArrayToInteger = function(arr, offset) {\r\n    return arr[offset] + (arr[offset + 1] << 8) + (arr[offset + 2] << 16) + (arr[offset + 3] << 24);\r\n};\r\n\r\nexport const fetchWithProgress = function(path, onProgress, saveChunks = true, headers) {\r\n\r\n    const abortController = new AbortController();\r\n    const signal = abortController.signal;\r\n    let aborted = false;\r\n    const abortHandler = (reason) => {\r\n        abortController.abort(reason);\r\n        aborted = true;\r\n    };\r\n\r\n    let onProgressCalledAtComplete = false;\r\n    const localOnProgress = (percent, percentLabel, chunk, fileSize) => {\r\n        if (onProgress && !onProgressCalledAtComplete) {\r\n            onProgress(percent, percentLabel, chunk, fileSize);\r\n            if (percent === 100) {\r\n                onProgressCalledAtComplete = true;\r\n            }\r\n        }\r\n    };\r\n\r\n    return new AbortablePromise((resolve, reject) => {\r\n        const fetchOptions = { signal };\r\n        if (headers) fetchOptions.headers = headers;\r\n         fetch(path, fetchOptions)\r\n        .then(async (data) => {\r\n            // Handle error conditions where data is still returned\r\n            if (!data.ok) {\r\n                const errorText = await data.text();\r\n                reject(new Error(`Fetch failed: ${data.status} ${data.statusText} ${errorText}`));\r\n                return;\r\n            }\r\n\r\n            const reader = data.body.getReader();\r\n            let bytesDownloaded = 0;\r\n            let _fileSize = data.headers.get('Content-Length');\r\n            let fileSize = _fileSize ? parseInt(_fileSize) : undefined;\r\n\r\n            const chunks = [];\r\n\r\n            while (!aborted) {\r\n                try {\r\n                    const { value: chunk, done } = await reader.read();\r\n                    if (done) {\r\n                        localOnProgress(100, '100%', chunk, fileSize);\r\n                        if (saveChunks) {\r\n                            const buffer = new Blob(chunks).arrayBuffer();\r\n                            resolve(buffer);\r\n                        } else {\r\n                            resolve();\r\n                        }\r\n                        break;\r\n                    }\r\n                    bytesDownloaded += chunk.length;\r\n                    let percent;\r\n                    let percentLabel;\r\n                    if (fileSize !== undefined) {\r\n                        percent = bytesDownloaded / fileSize * 100;\r\n                        percentLabel = `${percent.toFixed(2)}%`;\r\n                    }\r\n                    if (saveChunks) {\r\n                        chunks.push(chunk);\r\n                    }\r\n                    localOnProgress(percent, percentLabel, chunk, fileSize);\r\n                } catch (error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            reject(new AbortedPromiseError(error));\r\n        });\r\n    }, abortHandler);\r\n\r\n};\r\n\r\nexport const clamp = function(val, min, max) {\r\n    return Math.max(Math.min(val, max), min);\r\n};\r\n\r\nexport const getCurrentTime = function() {\r\n    return performance.now() / 1000;\r\n};\r\n\r\nexport const disposeAllMeshes = (object3D) => {\r\n    if (object3D.geometry) {\r\n        object3D.geometry.dispose();\r\n        object3D.geometry = null;\r\n    }\r\n    if (object3D.material) {\r\n        object3D.material.dispose();\r\n        object3D.material = null;\r\n    }\r\n    if (object3D.children) {\r\n        for (let child of object3D.children) {\r\n            disposeAllMeshes(child);\r\n        }\r\n    }\r\n};\r\n\r\nexport const delayedExecute = (func, fast) => {\r\n    return new Promise((resolve) => {\r\n        window.setTimeout(() => {\r\n            resolve(func ? func() : undefined);\r\n        }, fast ? 1 : 50);\r\n    });\r\n};\r\n\r\n\r\nexport const getSphericalHarmonicsComponentCountForDegree = (sphericalHarmonicsDegree = 0) => {\r\n    let shCoeffPerSplat = 0;\r\n    if (sphericalHarmonicsDegree === 1) {\r\n        shCoeffPerSplat = 9;\r\n    } else if (sphericalHarmonicsDegree === 2) {\r\n        shCoeffPerSplat = 24;\r\n    } else if (sphericalHarmonicsDegree === 3) {\r\n        shCoeffPerSplat = 45;\r\n    } else if (sphericalHarmonicsDegree > 3) {\r\n        throw new Error('getSphericalHarmonicsComponentCountForDegree() -> Invalid spherical harmonics degree');\r\n    }\r\n    return shCoeffPerSplat;\r\n};\r\n\r\nexport const nativePromiseWithExtractedComponents = () => {\r\n    let resolver;\r\n    let rejecter;\r\n    const promise = new Promise((resolve, reject) => {\r\n        resolver = resolve;\r\n        rejecter = reject;\r\n    });\r\n    return {\r\n        'promise': promise,\r\n        'resolve': resolver,\r\n        'reject': rejecter\r\n    };\r\n};\r\n\r\nexport const abortablePromiseWithExtractedComponents = (abortHandler) => {\r\n    let resolver;\r\n    let rejecter;\r\n    if (!abortHandler) {\r\n        abortHandler = () => {};\r\n    }\r\n    const promise = new AbortablePromise((resolve, reject) => {\r\n        resolver = resolve;\r\n        rejecter = reject;\r\n    }, abortHandler);\r\n    return {\r\n        'promise': promise,\r\n        'resolve': resolver,\r\n        'reject': rejecter\r\n    };\r\n};\r\n\r\nclass Semver {\r\n    constructor(major, minor, patch) {\r\n        this.major = major;\r\n        this.minor = minor;\r\n        this.patch = patch;\r\n    }\r\n\r\n    toString() {\r\n        return `${this.major}_${this.minor}_${this.patch}`;\r\n    }\r\n}\r\n\r\nexport function isIOS() {\r\n    const ua = navigator.userAgent;\r\n    return ua.indexOf('iPhone') > 0 || ua.indexOf('iPad') > 0;\r\n}\r\n\r\nexport function getIOSSemever() {\r\n    if (isIOS()) {\r\n        const extract = navigator.userAgent.match(/OS (\\d+)_(\\d+)_?(\\d+)?/);\r\n        return new Semver(\r\n            parseInt(extract[1] || 0, 10),\r\n            parseInt(extract[2] || 0, 10),\r\n            parseInt(extract[3] || 0, 10)\r\n        );\r\n    } else {\r\n        return null; // or [0,0,0]\r\n    }\r\n}\r\n","import { getSphericalHarmonicsComponentCountForDegree } from '../Util.js';\r\n\r\nconst BASE_COMPONENT_COUNT = 14;\r\n\r\nexport class UncompressedSplatArray {\r\n\r\n    static OFFSET = {\r\n        X: 0,\r\n        Y: 1,\r\n        Z: 2,\r\n        SCALE0: 3,\r\n        SCALE1: 4,\r\n        SCALE2: 5,\r\n        ROTATION0: 6,\r\n        ROTATION1: 7,\r\n        ROTATION2: 8,\r\n        ROTATION3: 9,\r\n        FDC0: 10,\r\n        FDC1: 11,\r\n        FDC2: 12,\r\n        OPACITY: 13,\r\n        FRC0: 14,\r\n        FRC1: 15,\r\n        FRC2: 16,\r\n        FRC3: 17,\r\n        FRC4: 18,\r\n        FRC5: 19,\r\n        FRC6: 20,\r\n        FRC7: 21,\r\n        FRC8: 22,\r\n        FRC9: 23,\r\n        FRC10: 24,\r\n        FRC11: 25,\r\n        FRC12: 26,\r\n        FRC13: 27,\r\n        FRC14: 28,\r\n        FRC15: 29,\r\n        FRC16: 30,\r\n        FRC17: 31,\r\n        FRC18: 32,\r\n        FRC19: 33,\r\n        FRC20: 34,\r\n        FRC21: 35,\r\n        FRC22: 36,\r\n        FRC23: 37\r\n    };\r\n\r\n    constructor(sphericalHarmonicsDegree = 0) {\r\n        this.sphericalHarmonicsDegree = sphericalHarmonicsDegree;\r\n        this.sphericalHarmonicsCount = getSphericalHarmonicsComponentCountForDegree(this.sphericalHarmonicsDegree);\r\n        this.componentCount = this.sphericalHarmonicsCount + BASE_COMPONENT_COUNT;\r\n        this.defaultSphericalHarmonics = new Array(this.sphericalHarmonicsCount).fill(0);\r\n        this.splats = [];\r\n        this.splatCount = 0;\r\n    }\r\n\r\n    static createSplat(sphericalHarmonicsDegree = 0) {\r\n        const baseSplat = [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0];\r\n        let shEntries = getSphericalHarmonicsComponentCountForDegree(sphericalHarmonicsDegree);\r\n        for (let i = 0; i < shEntries; i++) baseSplat.push(0);\r\n        return baseSplat;\r\n    }\r\n\r\n    addSplat(splat) {\r\n        this.splats.push(splat);\r\n        this.splatCount++;\r\n    }\r\n\r\n    getSplat(index) {\r\n        return this.splats[index];\r\n    }\r\n\r\n    addDefaultSplat() {\r\n        const newSplat = UncompressedSplatArray.createSplat(this.sphericalHarmonicsDegree);\r\n        this.addSplat(newSplat);\r\n        return newSplat;\r\n    }\r\n\r\n    addSplatFromComonents(x, y, z, scale0, scale1, scale2, rot0, rot1, rot2, rot3, r, g, b, opacity, ...rest) {\r\n        const newSplat = [x, y, z, scale0, scale1, scale2, rot0, rot1, rot2, rot3, r, g, b, opacity, ...this.defaultSphericalHarmonics];\r\n        for (let i = 0; i < rest.length && i < this.sphericalHarmonicsCount; i++) {\r\n            newSplat[i] = rest[i];\r\n        }\r\n        this.addSplat(newSplat);\r\n        return newSplat;\r\n    }\r\n\r\n    addSplatFromArray(src, srcIndex) {\r\n        const srcSplat = src.splats[srcIndex];\r\n        const newSplat = UncompressedSplatArray.createSplat(this.sphericalHarmonicsDegree);\r\n        for (let i = 0; i < this.componentCount && i < srcSplat.length; i++) {\r\n            newSplat[i] = srcSplat[i];\r\n        }\r\n        this.addSplat(newSplat);\r\n    }\r\n}\r\n","export class Constants {\r\n\r\n    static DefaultSplatSortDistanceMapPrecision = 16;\r\n    static MemoryPageSize = 65536;\r\n    static BytesPerFloat = 4;\r\n    static BytesPerInt = 4;\r\n    static MaxScenes = 32;\r\n    static ProgressiveLoadSectionSize = 262144;\r\n    static ProgressiveLoadSectionDelayDuration = 15;\r\n    static SphericalHarmonics8BitCompressionRange = 3;\r\n}\r\n","import * as THREE from 'three';\r\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\r\nimport { clamp, getSphericalHarmonicsComponentCountForDegree } from '../Util.js';\r\nimport { Constants } from '../Constants.js';\r\n\r\nconst DefaultSphericalHarmonics8BitCompressionRange = Constants.SphericalHarmonics8BitCompressionRange;\r\nconst DefaultSphericalHarmonics8BitCompressionHalfRange = DefaultSphericalHarmonics8BitCompressionRange / 2.0;\r\n\r\nconst toHalfFloat = THREE.DataUtils.toHalfFloat.bind(THREE.DataUtils);\r\nconst fromHalfFloat = THREE.DataUtils.fromHalfFloat.bind(THREE.DataUtils);\r\n\r\nconst toUncompressedFloat = (f, compressionLevel, isSH = false, range8BitMin, range8BitMax) => {\r\n    if (compressionLevel === 0) {\r\n        return f;\r\n    } else if (compressionLevel === 1 || compressionLevel === 2 && !isSH) {\r\n        return THREE.DataUtils.fromHalfFloat(f);\r\n    } else if (compressionLevel === 2) {\r\n        return fromUint8(f, range8BitMin, range8BitMax);\r\n    }\r\n};\r\n\r\nconst toUint8 = (v, rangeMin, rangeMax) => {\r\n    v = clamp(v, rangeMin, rangeMax);\r\n    const range = (rangeMax - rangeMin);\r\n    return clamp(Math.floor((v - rangeMin) / range * 255), 0, 255);\r\n};\r\n\r\nconst fromUint8 = (v, rangeMin, rangeMax) => {\r\n    const range = (rangeMax - rangeMin);\r\n    return (v / 255 * range + rangeMin);\r\n};\r\n\r\nconst fromHalfFloatToUint8 = (v, rangeMin, rangeMax) => {\r\n    return toUint8(fromHalfFloat(v, rangeMin, rangeMax));\r\n};\r\n\r\nconst fromUint8ToHalfFloat = (v, rangeMin, rangeMax) => {\r\n    return toHalfFloat(fromUint8(v, rangeMin, rangeMax));\r\n};\r\n\r\nconst dataViewFloatForCompressionLevel = (dataView, floatIndex, compressionLevel, isSH = false) => {\r\n    if (compressionLevel === 0) {\r\n        return dataView.getFloat32(floatIndex * 4, true);\r\n    } else if (compressionLevel === 1 || compressionLevel === 2 && !isSH) {\r\n        return dataView.getUint16(floatIndex * 2, true);\r\n    } else {\r\n        return dataView.getUint8(floatIndex, true);\r\n    }\r\n};\r\n\r\nconst convertBetweenCompressionLevels = function() {\r\n\r\n    const noop = (v) => v;\r\n\r\n    return function(val, fromLevel, toLevel, isSH = false) {\r\n        if (fromLevel === toLevel) return val;\r\n        let outputConversionFunc = noop;\r\n\r\n        if (fromLevel === 2 && isSH) {\r\n            if (toLevel === 1) outputConversionFunc = fromUint8ToHalfFloat;\r\n            else if (toLevel == 0) {\r\n                outputConversionFunc = fromUint8;\r\n            }\r\n        } else if (fromLevel === 2 || fromLevel === 1) {\r\n            if (toLevel === 0) outputConversionFunc = fromHalfFloat;\r\n            else if (toLevel == 2) {\r\n                if (!isSH) outputConversionFunc = noop;\r\n                else outputConversionFunc = fromHalfFloatToUint8;\r\n            }\r\n        } else if (fromLevel === 0) {\r\n            if (toLevel === 1) outputConversionFunc = toHalfFloat;\r\n            else if (toLevel == 2) {\r\n                if (!isSH) outputConversionFunc = toHalfFloat;\r\n                else outputConversionFunc = toUint8;\r\n            }\r\n        }\r\n\r\n        return outputConversionFunc(val);\r\n    };\r\n\r\n}();\r\n\r\nconst copyBetweenBuffers = (srcBuffer, srcOffset, destBuffer, destOffset, byteCount = 0) => {\r\n    const src = new Uint8Array(srcBuffer, srcOffset);\r\n    const dest = new Uint8Array(destBuffer, destOffset);\r\n    for (let i = 0; i < byteCount; i++) {\r\n        dest[i] = src[i];\r\n    }\r\n};\r\n\r\n/**\r\n * SplatBuffer: Container for splat data from a single scene/file and capable of (mediocre) compression.\r\n */\r\nexport class SplatBuffer {\r\n\r\n    static CurrentMajorVersion = 0;\r\n    static CurrentMinorVersion = 1;\r\n\r\n    static CenterComponentCount = 3;\r\n    static ScaleComponentCount = 3;\r\n    static RotationComponentCount = 4;\r\n    static ColorComponentCount = 4;\r\n    static CovarianceComponentCount = 6;\r\n\r\n    static SplatScaleOffsetFloat = 3;\r\n    static SplatRotationOffsetFloat = 6;\r\n\r\n    static CompressionLevels = {\r\n        0: {\r\n            BytesPerCenter: 12,\r\n            BytesPerScale: 12,\r\n            BytesPerRotation: 16,\r\n            BytesPerColor: 4,\r\n            ScaleOffsetBytes: 12,\r\n            RotationffsetBytes: 24,\r\n            ColorOffsetBytes: 40,\r\n            SphericalHarmonicsOffsetBytes: 44,\r\n            ScaleRange: 1,\r\n            BytesPerSphericalHarmonicsComponent: 4,\r\n            SphericalHarmonicsOffsetFloat: 11,\r\n            SphericalHarmonicsDegrees: {\r\n                0: { BytesPerSplat: 44 },\r\n                1: { BytesPerSplat: 80 },\r\n                2: { BytesPerSplat: 140 }\r\n            },\r\n        },\r\n        1: {\r\n            BytesPerCenter: 6,\r\n            BytesPerScale: 6,\r\n            BytesPerRotation: 8,\r\n            BytesPerColor: 4,\r\n            ScaleOffsetBytes: 6,\r\n            RotationffsetBytes: 12,\r\n            ColorOffsetBytes: 20,\r\n            SphericalHarmonicsOffsetBytes: 24,\r\n            ScaleRange: 32767,\r\n            BytesPerSphericalHarmonicsComponent: 2,\r\n            SphericalHarmonicsOffsetFloat: 12,\r\n            SphericalHarmonicsDegrees: {\r\n                0: { BytesPerSplat: 24 },\r\n                1: { BytesPerSplat: 42 },\r\n                2: { BytesPerSplat: 72 }\r\n            },\r\n        },\r\n        2: {\r\n            BytesPerCenter: 6,\r\n            BytesPerScale: 6,\r\n            BytesPerRotation: 8,\r\n            BytesPerColor: 4,\r\n            ScaleOffsetBytes: 6,\r\n            RotationffsetBytes: 12,\r\n            ColorOffsetBytes: 20,\r\n            SphericalHarmonicsOffsetBytes: 24,\r\n            ScaleRange: 32767,\r\n            BytesPerSphericalHarmonicsComponent: 1,\r\n            SphericalHarmonicsOffsetFloat: 12,\r\n            SphericalHarmonicsDegrees: {\r\n                0: { BytesPerSplat: 24 },\r\n                1: { BytesPerSplat: 33 },\r\n                2: { BytesPerSplat: 48 }\r\n            },\r\n        }\r\n    };\r\n\r\n    static CovarianceSizeFloats = 6;\r\n\r\n    static HeaderSizeBytes = 4096;\r\n    static SectionHeaderSizeBytes = 1024;\r\n\r\n    static BucketStorageSizeBytes = 12;\r\n    static BucketStorageSizeFloats = 3;\r\n\r\n    static BucketBlockSize = 5.0;\r\n    static BucketSize = 256;\r\n\r\n    constructor(bufferData, secLoadedCountsToMax = true) {\r\n        this.constructFromBuffer(bufferData, secLoadedCountsToMax);\r\n    }\r\n\r\n    getSplatCount() {\r\n        return this.splatCount;\r\n    }\r\n\r\n    getMaxSplatCount() {\r\n        return this.maxSplatCount;\r\n    }\r\n\r\n    getMinSphericalHarmonicsDegree() {\r\n        let minSphericalHarmonicsDegree = 0;\r\n        for (let i = 0; i < this.sections.length; i++) {\r\n            const section = this.sections[i];\r\n            if (i === 0 || section.sphericalHarmonicsDegree < minSphericalHarmonicsDegree) {\r\n                minSphericalHarmonicsDegree = section.sphericalHarmonicsDegree;\r\n            }\r\n        }\r\n        return minSphericalHarmonicsDegree;\r\n    }\r\n\r\n    getBucketIndex(section, localSplatIndex) {\r\n        let bucketIndex;\r\n        const maxSplatIndexInFullBuckets = section.fullBucketCount * section.bucketSize;\r\n        if (localSplatIndex < maxSplatIndexInFullBuckets) {\r\n            bucketIndex = Math.floor(localSplatIndex / section.bucketSize);\r\n        } else {\r\n            let bucketSplatIndex = maxSplatIndexInFullBuckets;\r\n            bucketIndex = section.fullBucketCount;\r\n            let partiallyFullBucketIndex = 0;\r\n            while (bucketSplatIndex < section.splatCount) {\r\n                let currentPartiallyFilledBucketSize = section.partiallyFilledBucketLengths[partiallyFullBucketIndex];\r\n                if (localSplatIndex >= bucketSplatIndex && localSplatIndex < bucketSplatIndex + currentPartiallyFilledBucketSize) {\r\n                    break;\r\n                }\r\n                bucketSplatIndex += currentPartiallyFilledBucketSize;\r\n                bucketIndex++;\r\n                partiallyFullBucketIndex++;\r\n            }\r\n        }\r\n        return bucketIndex;\r\n    }\r\n\r\n    getSplatCenter(globalSplatIndex, outCenter, transform) {\r\n        const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\r\n        const section = this.sections[sectionIndex];\r\n        const localSplatIndex = globalSplatIndex - section.splatCountOffset;\r\n\r\n        const srcSplatCentersBase = section.bytesPerSplat * localSplatIndex;\r\n        const dataView = new DataView(this.bufferData, section.dataBase + srcSplatCentersBase);\r\n\r\n        const x = dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel);\r\n        const y = dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel);\r\n        const z = dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel);\r\n        if (this.compressionLevel >= 1) {\r\n            const bucketIndex = this.getBucketIndex(section, localSplatIndex);\r\n            const bucketBase = bucketIndex * SplatBuffer.BucketStorageSizeFloats;\r\n            const sf = section.compressionScaleFactor;\r\n            const sr = section.compressionScaleRange;\r\n            outCenter.x = (x - sr) * sf + section.bucketArray[bucketBase];\r\n            outCenter.y = (y - sr) * sf + section.bucketArray[bucketBase + 1];\r\n            outCenter.z = (z - sr) * sf + section.bucketArray[bucketBase + 2];\r\n        } else {\r\n            outCenter.x = x;\r\n            outCenter.y = y;\r\n            outCenter.z = z;\r\n        }\r\n        if (transform) outCenter.applyMatrix4(transform);\r\n    }\r\n\r\n    getSplatScaleAndRotation = function() {\r\n\r\n        const scaleMatrix = new THREE.Matrix4();\r\n        const rotationMatrix = new THREE.Matrix4();\r\n        const tempMatrix = new THREE.Matrix4();\r\n        const tempPosition = new THREE.Vector3();\r\n        const scale = new THREE.Vector3();\r\n        const rotation = new THREE.Quaternion();\r\n\r\n        return function(index, outScale, outRotation, transform, scaleOverride) {\r\n            const sectionIndex = this.globalSplatIndexToSectionMap[index];\r\n            const section = this.sections[sectionIndex];\r\n            const localSplatIndex = index - section.splatCountOffset;\r\n\r\n            const srcSplatScalesBase = section.bytesPerSplat * localSplatIndex +\r\n                                       SplatBuffer.CompressionLevels[this.compressionLevel].ScaleOffsetBytes;\r\n\r\n            const dataView = new DataView(this.bufferData, section.dataBase + srcSplatScalesBase);\r\n\r\n            scale.set(toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel), this.compressionLevel),\r\n                      toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel), this.compressionLevel),\r\n                      toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel), this.compressionLevel));\r\n            if (scaleOverride) {\r\n                if (scaleOverride.x !== undefined) scale.x = scaleOverride.x;\r\n                if (scaleOverride.y !== undefined) scale.y = scaleOverride.y;\r\n                if (scaleOverride.z !== undefined) scale.z = scaleOverride.z;\r\n            }\r\n\r\n            rotation.set(toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 4, this.compressionLevel), this.compressionLevel),\r\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 5, this.compressionLevel), this.compressionLevel),\r\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 6, this.compressionLevel), this.compressionLevel),\r\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 3, this.compressionLevel), this.compressionLevel));\r\n\r\n            if (transform) {\r\n                scaleMatrix.makeScale(scale.x, scale.y, scale.z);\r\n                rotationMatrix.makeRotationFromQuaternion(rotation);\r\n                tempMatrix.copy(scaleMatrix).multiply(rotationMatrix).multiply(transform);\r\n                tempMatrix.decompose(tempPosition, outRotation, outScale);\r\n            } else {\r\n                outScale.copy(scale);\r\n                outRotation.copy(rotation);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    getSplatColor(globalSplatIndex, outColor) {\r\n        const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\r\n        const section = this.sections[sectionIndex];\r\n        const localSplatIndex = globalSplatIndex - section.splatCountOffset;\r\n\r\n        const srcSplatColorsBase = section.bytesPerSplat * localSplatIndex +\r\n                                   SplatBuffer.CompressionLevels[this.compressionLevel].ColorOffsetBytes;\r\n        const splatColorsArray = new Uint8Array(this.bufferData, section.dataBase + srcSplatColorsBase, 4);\r\n\r\n        outColor.set(splatColorsArray[0], splatColorsArray[1],\r\n                     splatColorsArray[2], splatColorsArray[3]);\r\n    }\r\n\r\n    fillSplatCenterArray(outCenterArray, transform, srcFrom, srcTo, destFrom) {\r\n        const splatCount = this.splatCount;\r\n\r\n        srcFrom = srcFrom || 0;\r\n        srcTo = srcTo || splatCount - 1;\r\n        if (destFrom === undefined) destFrom = srcFrom;\r\n\r\n        const center = new THREE.Vector3();\r\n        for (let i = srcFrom; i <= srcTo; i++) {\r\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\r\n            const section = this.sections[sectionIndex];\r\n            const localSplatIndex = i - section.splatCountOffset;\r\n            const centerDestBase = (i - srcFrom + destFrom) * SplatBuffer.CenterComponentCount;\r\n\r\n            const srcSplatCentersBase = section.bytesPerSplat * localSplatIndex;\r\n            const dataView = new DataView(this.bufferData, section.dataBase + srcSplatCentersBase);\r\n\r\n            const x = dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel);\r\n            const y = dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel);\r\n            const z = dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel);\r\n            if (this.compressionLevel >= 1) {\r\n                const bucketIndex = this.getBucketIndex(section, localSplatIndex);\r\n                const bucketBase = bucketIndex * SplatBuffer.BucketStorageSizeFloats;\r\n                const sf = section.compressionScaleFactor;\r\n                const sr = section.compressionScaleRange;\r\n                center.x = (x - sr) * sf + section.bucketArray[bucketBase];\r\n                center.y = (y - sr) * sf + section.bucketArray[bucketBase + 1];\r\n                center.z = (z - sr) * sf + section.bucketArray[bucketBase + 2];\r\n            } else {\r\n                center.x = x;\r\n                center.y = y;\r\n                center.z = z;\r\n            }\r\n            if (transform) {\r\n                center.applyMatrix4(transform);\r\n            }\r\n            outCenterArray[centerDestBase] = center.x;\r\n            outCenterArray[centerDestBase + 1] = center.y;\r\n            outCenterArray[centerDestBase + 2] = center.z;\r\n        }\r\n    }\r\n\r\n    fillSplatScaleRotationArray = function() {\r\n\r\n        const scaleMatrix = new THREE.Matrix4();\r\n        const rotationMatrix = new THREE.Matrix4();\r\n        const tempMatrix = new THREE.Matrix4();\r\n        const scale = new THREE.Vector3();\r\n        const rotation = new THREE.Quaternion();\r\n        const tempPosition = new THREE.Vector3();\r\n\r\n        const ensurePositiveW = (quaternion) => {\r\n            const flip = quaternion.w < 0 ? -1 : 1;\r\n            quaternion.x *= flip;\r\n            quaternion.y *= flip;\r\n            quaternion.z *= flip;\r\n            quaternion.w *= flip;\r\n        };\r\n\r\n        return function(outScaleArray, outRotationArray, transform, srcFrom, srcTo, destFrom,\r\n                        desiredOutputCompressionLevel, scaleOverride) {\r\n            const splatCount = this.splatCount;\r\n\r\n            srcFrom = srcFrom || 0;\r\n            srcTo = srcTo || splatCount - 1;\r\n            if (destFrom === undefined) destFrom = srcFrom;\r\n\r\n            const outputConversion = (value, srcCompressionLevel) => {\r\n                if (srcCompressionLevel === undefined) srcCompressionLevel = this.compressionLevel;\r\n                return convertBetweenCompressionLevels(value, srcCompressionLevel, desiredOutputCompressionLevel);\r\n            };\r\n\r\n            for (let i = srcFrom; i <= srcTo; i++) {\r\n                const sectionIndex = this.globalSplatIndexToSectionMap[i];\r\n                const section = this.sections[sectionIndex];\r\n                const localSplatIndex = i - section.splatCountOffset;\r\n\r\n                const srcSplatScalesBase = section.bytesPerSplat * localSplatIndex +\r\n                                        SplatBuffer.CompressionLevels[this.compressionLevel].ScaleOffsetBytes;\r\n\r\n                const scaleDestBase = (i - srcFrom + destFrom) * SplatBuffer.ScaleComponentCount;\r\n                const rotationDestBase = (i - srcFrom + destFrom) * SplatBuffer.RotationComponentCount;\r\n                const dataView = new DataView(this.bufferData, section.dataBase + srcSplatScalesBase);\r\n\r\n                const srcScaleX = (scaleOverride && scaleOverride.x !== undefined) ? scaleOverride.x :\r\n                                   dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel);\r\n                const srcScaleY = (scaleOverride && scaleOverride.y !== undefined) ? scaleOverride.y :\r\n                                   dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel);\r\n                const srcScaleZ = (scaleOverride && scaleOverride.z !== undefined) ? scaleOverride.z :\r\n                                   dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel);\r\n\r\n                const srcRotationW = dataViewFloatForCompressionLevel(dataView, 3, this.compressionLevel);\r\n                const srcRotationX = dataViewFloatForCompressionLevel(dataView, 4, this.compressionLevel);\r\n                const srcRotationY = dataViewFloatForCompressionLevel(dataView, 5, this.compressionLevel);\r\n                const srcRotationZ = dataViewFloatForCompressionLevel(dataView, 6, this.compressionLevel);\r\n\r\n                scale.set(toUncompressedFloat(srcScaleX, this.compressionLevel),\r\n                          toUncompressedFloat(srcScaleY, this.compressionLevel),\r\n                          toUncompressedFloat(srcScaleZ, this.compressionLevel));\r\n\r\n                rotation.set(toUncompressedFloat(srcRotationX, this.compressionLevel),\r\n                             toUncompressedFloat(srcRotationY, this.compressionLevel),\r\n                             toUncompressedFloat(srcRotationZ, this.compressionLevel),\r\n                             toUncompressedFloat(srcRotationW, this.compressionLevel)).normalize();\r\n\r\n                if (transform) {\r\n                    tempPosition.set(0, 0, 0);\r\n                    scaleMatrix.makeScale(scale.x, scale.y, scale.z);\r\n                    rotationMatrix.makeRotationFromQuaternion(rotation);\r\n                    tempMatrix.identity().premultiply(scaleMatrix).premultiply(rotationMatrix);\r\n                    tempMatrix.premultiply(transform);\r\n                    tempMatrix.decompose(tempPosition, rotation, scale);\r\n                    rotation.normalize();\r\n                }\r\n\r\n                ensurePositiveW(rotation);\r\n\r\n                if (outScaleArray) {\r\n                    outScaleArray[scaleDestBase] = outputConversion(scale.x, 0);\r\n                    outScaleArray[scaleDestBase + 1] = outputConversion(scale.y, 0);\r\n                    outScaleArray[scaleDestBase + 2] = outputConversion(scale.z, 0);\r\n                }\r\n\r\n                if (outRotationArray) {\r\n                    outRotationArray[rotationDestBase] = outputConversion(rotation.x, 0);\r\n                    outRotationArray[rotationDestBase + 1] = outputConversion(rotation.y, 0);\r\n                    outRotationArray[rotationDestBase + 2] = outputConversion(rotation.z, 0);\r\n                    outRotationArray[rotationDestBase + 3] = outputConversion(rotation.w, 0);\r\n                }\r\n            }\r\n        };\r\n    }();\r\n\r\n    static computeCovariance = function() {\r\n\r\n        const tempMatrix4 = new THREE.Matrix4();\r\n        const scaleMatrix = new THREE.Matrix3();\r\n        const rotationMatrix = new THREE.Matrix3();\r\n        const covarianceMatrix = new THREE.Matrix3();\r\n        const transformedCovariance = new THREE.Matrix3();\r\n        const transform3x3 = new THREE.Matrix3();\r\n        const transform3x3Transpose = new THREE.Matrix3();\r\n\r\n        return function(scale, rotation, transform, outCovariance, outOffset = 0, desiredOutputCompressionLevel) {\r\n\r\n            tempMatrix4.makeScale(scale.x, scale.y, scale.z);\r\n            scaleMatrix.setFromMatrix4(tempMatrix4);\r\n\r\n            tempMatrix4.makeRotationFromQuaternion(rotation);\r\n            rotationMatrix.setFromMatrix4(tempMatrix4);\r\n\r\n            covarianceMatrix.copy(rotationMatrix).multiply(scaleMatrix);\r\n            transformedCovariance.copy(covarianceMatrix).transpose().premultiply(covarianceMatrix);\r\n\r\n            if (transform) {\r\n                transform3x3.setFromMatrix4(transform);\r\n                transform3x3Transpose.copy(transform3x3).transpose();\r\n                transformedCovariance.multiply(transform3x3Transpose);\r\n                transformedCovariance.premultiply(transform3x3);\r\n            }\r\n\r\n            if (desiredOutputCompressionLevel >= 1) {\r\n                outCovariance[outOffset] = toHalfFloat(transformedCovariance.elements[0]);\r\n                outCovariance[outOffset + 1] = toHalfFloat(transformedCovariance.elements[3]);\r\n                outCovariance[outOffset + 2] = toHalfFloat(transformedCovariance.elements[6]);\r\n                outCovariance[outOffset + 3] = toHalfFloat(transformedCovariance.elements[4]);\r\n                outCovariance[outOffset + 4] = toHalfFloat(transformedCovariance.elements[7]);\r\n                outCovariance[outOffset + 5] = toHalfFloat(transformedCovariance.elements[8]);\r\n            } else {\r\n                outCovariance[outOffset] = transformedCovariance.elements[0];\r\n                outCovariance[outOffset + 1] = transformedCovariance.elements[3];\r\n                outCovariance[outOffset + 2] = transformedCovariance.elements[6];\r\n                outCovariance[outOffset + 3] = transformedCovariance.elements[4];\r\n                outCovariance[outOffset + 4] = transformedCovariance.elements[7];\r\n                outCovariance[outOffset + 5] = transformedCovariance.elements[8];\r\n            }\r\n\r\n        };\r\n\r\n    }();\r\n\r\n    fillSplatCovarianceArray(covarianceArray, transform, srcFrom, srcTo, destFrom, desiredOutputCompressionLevel) {\r\n        const splatCount = this.splatCount;\r\n\r\n        const scale = new THREE.Vector3();\r\n        const rotation = new THREE.Quaternion();\r\n\r\n        srcFrom = srcFrom || 0;\r\n        srcTo = srcTo || splatCount - 1;\r\n        if (destFrom === undefined) destFrom = srcFrom;\r\n\r\n        for (let i = srcFrom; i <= srcTo; i++) {\r\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\r\n            const section = this.sections[sectionIndex];\r\n            const localSplatIndex = i - section.splatCountOffset;\r\n\r\n            const covarianceDestBase = (i - srcFrom + destFrom) * SplatBuffer.CovarianceComponentCount;\r\n            const srcSplatScalesBase = section.bytesPerSplat * localSplatIndex +\r\n                                       SplatBuffer.CompressionLevels[this.compressionLevel].ScaleOffsetBytes;\r\n\r\n            const dataView = new DataView(this.bufferData, section.dataBase + srcSplatScalesBase);\r\n\r\n            scale.set(toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 0, this.compressionLevel), this.compressionLevel),\r\n                      toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 1, this.compressionLevel), this.compressionLevel),\r\n                      toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 2, this.compressionLevel), this.compressionLevel));\r\n\r\n            rotation.set(toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 4, this.compressionLevel), this.compressionLevel),\r\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 5, this.compressionLevel), this.compressionLevel),\r\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 6, this.compressionLevel), this.compressionLevel),\r\n                         toUncompressedFloat(dataViewFloatForCompressionLevel(dataView, 3, this.compressionLevel), this.compressionLevel));\r\n\r\n            SplatBuffer.computeCovariance(scale, rotation, transform, covarianceArray, covarianceDestBase, desiredOutputCompressionLevel);\r\n        }\r\n    }\r\n\r\n    fillSplatColorArray(outColorArray, minimumAlpha, srcFrom, srcTo, destFrom) {\r\n        const splatCount = this.splatCount;\r\n\r\n        srcFrom = srcFrom || 0;\r\n        srcTo = srcTo || splatCount - 1;\r\n        if (destFrom === undefined) destFrom = srcFrom;\r\n\r\n        for (let i = srcFrom; i <= srcTo; i++) {\r\n\r\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\r\n            const section = this.sections[sectionIndex];\r\n            const localSplatIndex = i - section.splatCountOffset;\r\n\r\n            const colorDestBase = (i - srcFrom + destFrom) * SplatBuffer.ColorComponentCount;\r\n            const srcSplatColorsBase = section.bytesPerSplat * localSplatIndex +\r\n                                       SplatBuffer.CompressionLevels[this.compressionLevel].ColorOffsetBytes;\r\n\r\n            const dataView = new Uint8Array(this.bufferData, section.dataBase + srcSplatColorsBase);\r\n\r\n            let alpha = dataView[3];\r\n            alpha = (alpha >= minimumAlpha) ? alpha : 0;\r\n\r\n            outColorArray[colorDestBase] = dataView[0];\r\n            outColorArray[colorDestBase + 1] = dataView[1];\r\n            outColorArray[colorDestBase + 2] = dataView[2];\r\n            outColorArray[colorDestBase + 3] = alpha;\r\n        }\r\n    }\r\n\r\n    fillSphericalHarmonicsArray = function() {\r\n\r\n        const sphericalHarmonicVectors = [];\r\n        for (let i = 0; i < 15; i++) {\r\n            sphericalHarmonicVectors[i] = new THREE.Vector3();\r\n        }\r\n\r\n        const tempMatrix3 = new THREE.Matrix3();\r\n        const tempMatrix4 = new THREE.Matrix4();\r\n\r\n        const tempTranslation = new THREE.Vector3();\r\n        const tempScale = new THREE.Vector3();\r\n        const tempRotation = new THREE.Quaternion();\r\n\r\n        const sh11 = [];\r\n        const sh12 = [];\r\n        const sh13 = [];\r\n\r\n        const sh21 = [];\r\n        const sh22 = [];\r\n        const sh23 = [];\r\n        const sh24 = [];\r\n        const sh25 = [];\r\n\r\n        const shIn1 = [];\r\n        const shIn2 = [];\r\n        const shIn3 = [];\r\n        const shIn4 = [];\r\n        const shIn5 = [];\r\n\r\n        const shOut1 = [];\r\n        const shOut2 = [];\r\n        const shOut3 = [];\r\n        const shOut4 = [];\r\n        const shOut5 = [];\r\n\r\n        const noop = (v) => v;\r\n\r\n        const set3 = (array, val1, val2, val3) => {\r\n            array[0] = val1;\r\n            array[1] = val2;\r\n            array[2] = val3;\r\n        };\r\n\r\n        const set3FromArray = (array, srcDestView, stride, srcBase, compressionLevel) => {\r\n            array[0] = dataViewFloatForCompressionLevel(srcDestView, srcBase, compressionLevel, true);\r\n            array[1] = dataViewFloatForCompressionLevel(srcDestView, srcBase + stride, compressionLevel, true);\r\n            array[2] = dataViewFloatForCompressionLevel(srcDestView, srcBase + stride + stride, compressionLevel, true);\r\n        };\r\n\r\n        const copy3 = (srcArray, destArray) => {\r\n            destArray[0] = srcArray[0];\r\n            destArray[1] = srcArray[1];\r\n            destArray[2] = srcArray[2];\r\n        };\r\n\r\n        const setOutput3 = (srcArray, destArray, destBase, conversionFunc) => {\r\n            destArray[destBase] = conversionFunc(srcArray[0]);\r\n            destArray[destBase + 1] = conversionFunc(srcArray[1]);\r\n            destArray[destBase + 2] = conversionFunc(srcArray[2]);\r\n        };\r\n\r\n        const toUncompressedFloatArray3 = (src, dest, compressionLevel, range8BitMin, range8BitMax) => {\r\n            dest[0] = toUncompressedFloat(src[0], compressionLevel, true, range8BitMin, range8BitMax);\r\n            dest[1] = toUncompressedFloat(src[1], compressionLevel, true, range8BitMin, range8BitMax);\r\n            dest[2] = toUncompressedFloat(src[2], compressionLevel, true, range8BitMin, range8BitMax);\r\n            return dest;\r\n        };\r\n\r\n        return function(outSphericalHarmonicsArray, outSphericalHarmonicsDegree, transform,\r\n                        srcFrom, srcTo, destFrom, desiredOutputCompressionLevel) {\r\n            const splatCount = this.splatCount;\r\n\r\n            srcFrom = srcFrom || 0;\r\n            srcTo = srcTo || splatCount - 1;\r\n            if (destFrom === undefined) destFrom = srcFrom;\r\n\r\n            if (transform && outSphericalHarmonicsDegree >= 1) {\r\n                tempMatrix4.copy(transform);\r\n                tempMatrix4.decompose(tempTranslation, tempRotation, tempScale);\r\n                tempRotation.normalize();\r\n                tempMatrix4.makeRotationFromQuaternion(tempRotation);\r\n                tempMatrix3.setFromMatrix4(tempMatrix4);\r\n                set3(sh11, tempMatrix3.elements[4], -tempMatrix3.elements[7], tempMatrix3.elements[1]);\r\n                set3(sh12, -tempMatrix3.elements[5], tempMatrix3.elements[8], -tempMatrix3.elements[2]);\r\n                set3(sh13, tempMatrix3.elements[3], -tempMatrix3.elements[6], tempMatrix3.elements[0]);\r\n            }\r\n\r\n            const localFromHalfFloatToUint8 = (v) => {\r\n                return fromHalfFloatToUint8(v, this.minSphericalHarmonicsCoeff, this.maxSphericalHarmonicsCoeff);\r\n            };\r\n\r\n            const localToUint8 = (v) => {\r\n                return toUint8(v, this.minSphericalHarmonicsCoeff, this.maxSphericalHarmonicsCoeff);\r\n            };\r\n\r\n            for (let i = srcFrom; i <= srcTo; i++) {\r\n\r\n                const sectionIndex = this.globalSplatIndexToSectionMap[i];\r\n                const section = this.sections[sectionIndex];\r\n                outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, section.sphericalHarmonicsDegree);\r\n                const outSphericalHarmonicsComponentsCount = getSphericalHarmonicsComponentCountForDegree(outSphericalHarmonicsDegree);\r\n\r\n                const localSplatIndex = i - section.splatCountOffset;\r\n\r\n                const srcSplatSHBase = section.bytesPerSplat * localSplatIndex +\r\n                                       SplatBuffer.CompressionLevels[this.compressionLevel].SphericalHarmonicsOffsetBytes;\r\n\r\n                const dataView = new DataView(this.bufferData, section.dataBase + srcSplatSHBase);\r\n\r\n                const shDestBase = (i - srcFrom + destFrom) * outSphericalHarmonicsComponentsCount;\r\n\r\n                let compressionLevelForOutputConversion = transform ? 0 : this.compressionLevel;\r\n                let outputConversionFunc = noop;\r\n                if (compressionLevelForOutputConversion !== desiredOutputCompressionLevel) {\r\n                    if (compressionLevelForOutputConversion === 1) {\r\n                        if (desiredOutputCompressionLevel === 0) outputConversionFunc = fromHalfFloat;\r\n                        else if (desiredOutputCompressionLevel == 2) outputConversionFunc = localFromHalfFloatToUint8;\r\n                    } else if (compressionLevelForOutputConversion === 0) {\r\n                        if (desiredOutputCompressionLevel === 1) outputConversionFunc = toHalfFloat;\r\n                        else if (desiredOutputCompressionLevel == 2) outputConversionFunc = localToUint8;\r\n                    }\r\n                }\r\n\r\n                const minShCoeff = this.minSphericalHarmonicsCoeff;\r\n                const maxShCoeff = this.maxSphericalHarmonicsCoeff;\r\n\r\n                if (outSphericalHarmonicsDegree >= 1) {\r\n\r\n                    set3FromArray(shIn1, dataView, 3, 0, this.compressionLevel);\r\n                    set3FromArray(shIn2, dataView, 3, 1, this.compressionLevel);\r\n                    set3FromArray(shIn3, dataView, 3, 2, this.compressionLevel);\r\n\r\n                    if (transform) {\r\n                        toUncompressedFloatArray3(shIn1, shIn1, this.compressionLevel, minShCoeff, maxShCoeff);\r\n                        toUncompressedFloatArray3(shIn2, shIn2, this.compressionLevel, minShCoeff, maxShCoeff);\r\n                        toUncompressedFloatArray3(shIn3, shIn3, this.compressionLevel, minShCoeff, maxShCoeff);\r\n                        SplatBuffer.rotateSphericalHarmonics3(shIn1, shIn2, shIn3, sh11, sh12, sh13, shOut1, shOut2, shOut3);\r\n                    } else {\r\n                        copy3(shIn1, shOut1);\r\n                        copy3(shIn2, shOut2);\r\n                        copy3(shIn3, shOut3);\r\n                    }\r\n\r\n                    setOutput3(shOut1, outSphericalHarmonicsArray, shDestBase, outputConversionFunc);\r\n                    setOutput3(shOut2, outSphericalHarmonicsArray, shDestBase + 3, outputConversionFunc);\r\n                    setOutput3(shOut3, outSphericalHarmonicsArray, shDestBase + 6, outputConversionFunc);\r\n\r\n                    if (outSphericalHarmonicsDegree >= 2) {\r\n\r\n                        set3FromArray(shIn1, dataView, 5, 9, this.compressionLevel);\r\n                        set3FromArray(shIn2, dataView, 5, 10, this.compressionLevel);\r\n                        set3FromArray(shIn3, dataView, 5, 11, this.compressionLevel);\r\n                        set3FromArray(shIn4, dataView, 5, 12, this.compressionLevel);\r\n                        set3FromArray(shIn5, dataView, 5, 13, this.compressionLevel);\r\n\r\n                        if (transform) {\r\n                            toUncompressedFloatArray3(shIn1, shIn1, this.compressionLevel, minShCoeff, maxShCoeff);\r\n                            toUncompressedFloatArray3(shIn2, shIn2, this.compressionLevel, minShCoeff, maxShCoeff);\r\n                            toUncompressedFloatArray3(shIn3, shIn3, this.compressionLevel, minShCoeff, maxShCoeff);\r\n                            toUncompressedFloatArray3(shIn4, shIn4, this.compressionLevel, minShCoeff, maxShCoeff);\r\n                            toUncompressedFloatArray3(shIn5, shIn5, this.compressionLevel, minShCoeff, maxShCoeff);\r\n                            SplatBuffer.rotateSphericalHarmonics5(shIn1, shIn2, shIn3, shIn4, shIn5,\r\n                                                                  sh11, sh12, sh13, sh21, sh22, sh23, sh24, sh25,\r\n                                                                  shOut1, shOut2, shOut3, shOut4, shOut5);\r\n                        } else {\r\n                            copy3(shIn1, shOut1);\r\n                            copy3(shIn2, shOut2);\r\n                            copy3(shIn3, shOut3);\r\n                            copy3(shIn4, shOut4);\r\n                            copy3(shIn5, shOut5);\r\n                        }\r\n\r\n                        setOutput3(shOut1, outSphericalHarmonicsArray, shDestBase + 9, outputConversionFunc);\r\n                        setOutput3(shOut2, outSphericalHarmonicsArray, shDestBase + 12, outputConversionFunc);\r\n                        setOutput3(shOut3, outSphericalHarmonicsArray, shDestBase + 15, outputConversionFunc);\r\n                        setOutput3(shOut4, outSphericalHarmonicsArray, shDestBase + 18, outputConversionFunc);\r\n                        setOutput3(shOut5, outSphericalHarmonicsArray, shDestBase + 21, outputConversionFunc);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    static dot3 = (v1, v2, v3, transformRow, outArray) => {\r\n        outArray[0] = outArray[1] = outArray[2] = 0;\r\n        const t0 = transformRow[0];\r\n        const t1 = transformRow[1];\r\n        const t2 = transformRow[2];\r\n        SplatBuffer.addInto3(v1[0] * t0, v1[1] * t0, v1[2] * t0, outArray);\r\n        SplatBuffer.addInto3(v2[0] * t1, v2[1] * t1, v2[2] * t1, outArray);\r\n        SplatBuffer.addInto3(v3[0] * t2, v3[1] * t2, v3[2] * t2, outArray);\r\n    };\r\n\r\n    static addInto3 = (val1, val2, val3, destArray) => {\r\n        destArray[0] = destArray[0] + val1;\r\n        destArray[1] = destArray[1] + val2;\r\n        destArray[2] = destArray[2] + val3;\r\n    };\r\n\r\n    static dot5 = (v1, v2, v3, v4, v5, transformRow, outArray) => {\r\n        outArray[0] = outArray[1] = outArray[2] = 0;\r\n        const t0 = transformRow[0];\r\n        const t1 = transformRow[1];\r\n        const t2 = transformRow[2];\r\n        const t3 = transformRow[3];\r\n        const t4 = transformRow[4];\r\n        SplatBuffer.addInto3(v1[0] * t0, v1[1] * t0, v1[2] * t0, outArray);\r\n        SplatBuffer.addInto3(v2[0] * t1, v2[1] * t1, v2[2] * t1, outArray);\r\n        SplatBuffer.addInto3(v3[0] * t2, v3[1] * t2, v3[2] * t2, outArray);\r\n        SplatBuffer.addInto3(v4[0] * t3, v4[1] * t3, v4[2] * t3, outArray);\r\n        SplatBuffer.addInto3(v5[0] * t4, v5[1] * t4, v5[2] * t4, outArray);\r\n    };\r\n\r\n    static rotateSphericalHarmonics3 = (in1, in2, in3, tsh11, tsh12, tsh13, out1, out2, out3) => {\r\n        SplatBuffer.dot3(in1, in2, in3, tsh11, out1);\r\n        SplatBuffer.dot3(in1, in2, in3, tsh12, out2);\r\n        SplatBuffer.dot3(in1, in2, in3, tsh13, out3);\r\n    };\r\n\r\n    static rotateSphericalHarmonics5 = (in1, in2, in3, in4, in5, tsh11, tsh12, tsh13,\r\n                                        tsh21, tsh22, tsh23, tsh24, tsh25, out1, out2, out3, out4, out5) => {\r\n\r\n        const kSqrt0104 = Math.sqrt(1.0 / 4.0);\r\n        const kSqrt0304 = Math.sqrt(3.0 / 4.0);\r\n        const kSqrt0103 = Math.sqrt(1.0 / 3.0);\r\n        const kSqrt0403 = Math.sqrt(4.0 / 3.0);\r\n        const kSqrt0112 = Math.sqrt(1.0 / 12.0);\r\n\r\n        tsh21[0] = kSqrt0104 * ((tsh13[2] * tsh11[0] + tsh13[0] * tsh11[2]) + (tsh11[2] * tsh13[0] + tsh11[0] * tsh13[2]));\r\n        tsh21[1] = (tsh13[1] * tsh11[0] + tsh11[1] * tsh13[0]);\r\n        tsh21[2] = kSqrt0304 * (tsh13[1] * tsh11[1] + tsh11[1] * tsh13[1]);\r\n        tsh21[3] = (tsh13[1] * tsh11[2] + tsh11[1] * tsh13[2]);\r\n        tsh21[4] = kSqrt0104 * ((tsh13[2] * tsh11[2] - tsh13[0] * tsh11[0]) + (tsh11[2] * tsh13[2] - tsh11[0] * tsh13[0]));\r\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh21, out1);\r\n\r\n        tsh22[0] = kSqrt0104 * ((tsh12[2] * tsh11[0] + tsh12[0] * tsh11[2]) + (tsh11[2] * tsh12[0] + tsh11[0] * tsh12[2]));\r\n        tsh22[1] = tsh12[1] * tsh11[0] + tsh11[1] * tsh12[0];\r\n        tsh22[2] = kSqrt0304 * (tsh12[1] * tsh11[1] + tsh11[1] * tsh12[1]);\r\n        tsh22[3] = tsh12[1] * tsh11[2] + tsh11[1] * tsh12[2];\r\n        tsh22[4] = kSqrt0104 * ((tsh12[2] * tsh11[2] - tsh12[0] * tsh11[0]) + (tsh11[2] * tsh12[2] - tsh11[0] * tsh12[0]));\r\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh22, out2);\r\n\r\n        tsh23[0] = kSqrt0103 * (tsh12[2] * tsh12[0] + tsh12[0] * tsh12[2]) + -kSqrt0112 *\r\n                   ((tsh13[2] * tsh13[0] + tsh13[0] * tsh13[2]) + (tsh11[2] * tsh11[0] + tsh11[0] * tsh11[2]));\r\n        tsh23[1] = kSqrt0403 * tsh12[1] * tsh12[0] + -kSqrt0103 * (tsh13[1] * tsh13[0] + tsh11[1] * tsh11[0]);\r\n        tsh23[2] = tsh12[1] * tsh12[1] + -kSqrt0104 * (tsh13[1] * tsh13[1] + tsh11[1] * tsh11[1]);\r\n        tsh23[3] = kSqrt0403 * tsh12[1] * tsh12[2] + -kSqrt0103 * (tsh13[1] * tsh13[2] + tsh11[1] * tsh11[2]);\r\n        tsh23[4] = kSqrt0103 * (tsh12[2] * tsh12[2] - tsh12[0] * tsh12[0]) + -kSqrt0112 *\r\n                   ((tsh13[2] * tsh13[2] - tsh13[0] * tsh13[0]) + (tsh11[2] * tsh11[2] - tsh11[0] * tsh11[0]));\r\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh23, out3);\r\n\r\n        tsh24[0] = kSqrt0104 * ((tsh12[2] * tsh13[0] + tsh12[0] * tsh13[2]) + (tsh13[2] * tsh12[0] + tsh13[0] * tsh12[2]));\r\n        tsh24[1] = tsh12[1] * tsh13[0] + tsh13[1] * tsh12[0];\r\n        tsh24[2] = kSqrt0304 * (tsh12[1] * tsh13[1] + tsh13[1] * tsh12[1]);\r\n        tsh24[3] = tsh12[1] * tsh13[2] + tsh13[1] * tsh12[2];\r\n        tsh24[4] = kSqrt0104 * ((tsh12[2] * tsh13[2] - tsh12[0] * tsh13[0]) + (tsh13[2] * tsh12[2] - tsh13[0] * tsh12[0]));\r\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh24, out4);\r\n\r\n        tsh25[0] = kSqrt0104 * ((tsh13[2] * tsh13[0] + tsh13[0] * tsh13[2]) - (tsh11[2] * tsh11[0] + tsh11[0] * tsh11[2]));\r\n        tsh25[1] = (tsh13[1] * tsh13[0] - tsh11[1] * tsh11[0]);\r\n        tsh25[2] = kSqrt0304 * (tsh13[1] * tsh13[1] - tsh11[1] * tsh11[1]);\r\n        tsh25[3] = (tsh13[1] * tsh13[2] - tsh11[1] * tsh11[2]);\r\n        tsh25[4] = kSqrt0104 * ((tsh13[2] * tsh13[2] - tsh13[0] * tsh13[0]) - (tsh11[2] * tsh11[2] - tsh11[0] * tsh11[0]));\r\n        SplatBuffer.dot5(in1, in2, in3, in4, in5, tsh25, out5);\r\n    };\r\n\r\n    static parseHeader(buffer) {\r\n        const headerArrayUint8 = new Uint8Array(buffer, 0, SplatBuffer.HeaderSizeBytes);\r\n        const headerArrayUint16 = new Uint16Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 2);\r\n        const headerArrayUint32 = new Uint32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\r\n        const headerArrayFloat32 = new Float32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\r\n        const versionMajor = headerArrayUint8[0];\r\n        const versionMinor = headerArrayUint8[1];\r\n        const maxSectionCount = headerArrayUint32[1];\r\n        const sectionCount = headerArrayUint32[2];\r\n        const maxSplatCount = headerArrayUint32[3];\r\n        const splatCount = headerArrayUint32[4];\r\n        const compressionLevel = headerArrayUint16[10];\r\n        const sceneCenter = new THREE.Vector3(headerArrayFloat32[6], headerArrayFloat32[7], headerArrayFloat32[8]);\r\n\r\n        const minSphericalHarmonicsCoeff = headerArrayFloat32[9] || -DefaultSphericalHarmonics8BitCompressionHalfRange;\r\n        const maxSphericalHarmonicsCoeff = headerArrayFloat32[10] || DefaultSphericalHarmonics8BitCompressionHalfRange;\r\n\r\n        return {\r\n            versionMajor,\r\n            versionMinor,\r\n            maxSectionCount,\r\n            sectionCount,\r\n            maxSplatCount,\r\n            splatCount,\r\n            compressionLevel,\r\n            sceneCenter,\r\n            minSphericalHarmonicsCoeff,\r\n            maxSphericalHarmonicsCoeff\r\n        };\r\n    }\r\n\r\n    static writeHeaderCountsToBuffer(sectionCount, splatCount, buffer) {\r\n        const headerArrayUint32 = new Uint32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\r\n        headerArrayUint32[2] = sectionCount;\r\n        headerArrayUint32[4] = splatCount;\r\n    }\r\n\r\n    static writeHeaderToBuffer(header, buffer) {\r\n        const headerArrayUint8 = new Uint8Array(buffer, 0, SplatBuffer.HeaderSizeBytes);\r\n        const headerArrayUint16 = new Uint16Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 2);\r\n        const headerArrayUint32 = new Uint32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\r\n        const headerArrayFloat32 = new Float32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\r\n        headerArrayUint8[0] = header.versionMajor;\r\n        headerArrayUint8[1] = header.versionMinor;\r\n        headerArrayUint8[2] = 0; // unused for now\r\n        headerArrayUint8[3] = 0; // unused for now\r\n        headerArrayUint32[1] = header.maxSectionCount;\r\n        headerArrayUint32[2] = header.sectionCount;\r\n        headerArrayUint32[3] = header.maxSplatCount;\r\n        headerArrayUint32[4] = header.splatCount;\r\n        headerArrayUint16[10] = header.compressionLevel;\r\n        headerArrayFloat32[6] = header.sceneCenter.x;\r\n        headerArrayFloat32[7] = header.sceneCenter.y;\r\n        headerArrayFloat32[8] = header.sceneCenter.z;\r\n        headerArrayFloat32[9] = header.minSphericalHarmonicsCoeff || -DefaultSphericalHarmonics8BitCompressionHalfRange;\r\n        headerArrayFloat32[10] = header.maxSphericalHarmonicsCoeff || DefaultSphericalHarmonics8BitCompressionHalfRange;\r\n    }\r\n\r\n    static parseSectionHeaders(header, buffer, offset = 0, secLoadedCountsToMax) {\r\n        const compressionLevel = header.compressionLevel;\r\n\r\n        const maxSectionCount = header.maxSectionCount;\r\n        const sectionHeaderArrayUint16 = new Uint16Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 2);\r\n        const sectionHeaderArrayUint32 = new Uint32Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 4);\r\n        const sectionHeaderArrayFloat32 = new Float32Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 4);\r\n\r\n        const sectionHeaders = [];\r\n        let sectionHeaderBase = 0;\r\n        let sectionHeaderBaseUint16 = sectionHeaderBase / 2;\r\n        let sectionHeaderBaseUint32 = sectionHeaderBase / 4;\r\n        let sectionBase = SplatBuffer.HeaderSizeBytes + header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes;\r\n        let splatCountOffset = 0;\r\n        for (let i = 0; i < maxSectionCount; i++) {\r\n            const maxSplatCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 1];\r\n            const bucketSize = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 2];\r\n            const bucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 3];\r\n            const bucketBlockSize = sectionHeaderArrayFloat32[sectionHeaderBaseUint32 + 4];\r\n            const halfBucketBlockSize = bucketBlockSize / 2.0;\r\n            const bucketStorageSizeBytes = sectionHeaderArrayUint16[sectionHeaderBaseUint16 + 10];\r\n            const compressionScaleRange = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 6] ||\r\n                                          SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\r\n            const fullBucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 8];\r\n            const partiallyFilledBucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 9];\r\n            const bucketsMetaDataSizeBytes = partiallyFilledBucketCount * 4;\r\n            const bucketsStorageSizeBytes = bucketStorageSizeBytes * bucketCount + bucketsMetaDataSizeBytes;\r\n\r\n            const sphericalHarmonicsDegree = sectionHeaderArrayUint16[sectionHeaderBaseUint16 + 20];\r\n            const { bytesPerSplat } = SplatBuffer.calculateComponentStorage(compressionLevel, sphericalHarmonicsDegree);\r\n\r\n            const splatDataStorageSizeBytes = bytesPerSplat * maxSplatCount;\r\n            const storageSizeBytes = splatDataStorageSizeBytes + bucketsStorageSizeBytes;\r\n            const sectionHeader = {\r\n                bytesPerSplat: bytesPerSplat,\r\n                splatCountOffset: splatCountOffset,\r\n                splatCount: secLoadedCountsToMax ? maxSplatCount : 0,\r\n                maxSplatCount: maxSplatCount,\r\n                bucketSize: bucketSize,\r\n                bucketCount: bucketCount,\r\n                bucketBlockSize: bucketBlockSize,\r\n                halfBucketBlockSize: halfBucketBlockSize,\r\n                bucketStorageSizeBytes: bucketStorageSizeBytes,\r\n                bucketsStorageSizeBytes: bucketsStorageSizeBytes,\r\n                splatDataStorageSizeBytes: splatDataStorageSizeBytes,\r\n                storageSizeBytes: storageSizeBytes,\r\n                compressionScaleRange: compressionScaleRange,\r\n                compressionScaleFactor: halfBucketBlockSize / compressionScaleRange,\r\n                base: sectionBase,\r\n                bucketsBase: sectionBase + bucketsMetaDataSizeBytes,\r\n                dataBase: sectionBase + bucketsStorageSizeBytes,\r\n                fullBucketCount: fullBucketCount,\r\n                partiallyFilledBucketCount: partiallyFilledBucketCount,\r\n                sphericalHarmonicsDegree: sphericalHarmonicsDegree\r\n            };\r\n            sectionHeaders[i] = sectionHeader;\r\n            sectionBase += storageSizeBytes;\r\n            sectionHeaderBase += SplatBuffer.SectionHeaderSizeBytes;\r\n            sectionHeaderBaseUint16 = sectionHeaderBase / 2;\r\n            sectionHeaderBaseUint32 = sectionHeaderBase / 4;\r\n            splatCountOffset += maxSplatCount;\r\n        }\r\n\r\n        return sectionHeaders;\r\n    }\r\n\r\n\r\n    static writeSectionHeaderToBuffer(sectionHeader, compressionLevel, buffer, offset = 0) {\r\n        const sectionHeadeArrayUint16 = new Uint16Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 2);\r\n        const sectionHeadeArrayUint32 = new Uint32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\r\n        const sectionHeadeArrayFloat32 = new Float32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\r\n\r\n        sectionHeadeArrayUint32[0] = sectionHeader.splatCount;\r\n        sectionHeadeArrayUint32[1] = sectionHeader.maxSplatCount;\r\n        sectionHeadeArrayUint32[2] = compressionLevel >= 1 ? sectionHeader.bucketSize : 0;\r\n        sectionHeadeArrayUint32[3] = compressionLevel >= 1 ? sectionHeader.bucketCount : 0;\r\n        sectionHeadeArrayFloat32[4] = compressionLevel >= 1 ? sectionHeader.bucketBlockSize : 0.0;\r\n        sectionHeadeArrayUint16[10] = compressionLevel >= 1 ? SplatBuffer.BucketStorageSizeBytes : 0;\r\n        sectionHeadeArrayUint32[6] = compressionLevel >= 1 ? sectionHeader.compressionScaleRange : 0;\r\n        sectionHeadeArrayUint32[7] = sectionHeader.storageSizeBytes;\r\n        sectionHeadeArrayUint32[8] = compressionLevel >= 1 ? sectionHeader.fullBucketCount : 0;\r\n        sectionHeadeArrayUint32[9] = compressionLevel >= 1 ? sectionHeader.partiallyFilledBucketCount : 0;\r\n        sectionHeadeArrayUint16[20] = sectionHeader.sphericalHarmonicsDegree;\r\n\r\n    }\r\n\r\n    static writeSectionHeaderSplatCountToBuffer(splatCount, buffer, offset = 0) {\r\n        const sectionHeadeArrayUint32 = new Uint32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\r\n        sectionHeadeArrayUint32[0] = splatCount;\r\n    }\r\n\r\n    constructFromBuffer(bufferData, secLoadedCountsToMax) {\r\n        this.bufferData = bufferData;\r\n\r\n        this.globalSplatIndexToLocalSplatIndexMap = [];\r\n        this.globalSplatIndexToSectionMap = [];\r\n\r\n        const header = SplatBuffer.parseHeader(this.bufferData);\r\n        this.versionMajor = header.versionMajor;\r\n        this.versionMinor = header.versionMinor;\r\n        this.maxSectionCount = header.maxSectionCount;\r\n        this.sectionCount = secLoadedCountsToMax ? header.maxSectionCount : 0;\r\n        this.maxSplatCount = header.maxSplatCount;\r\n        this.splatCount = secLoadedCountsToMax ? header.maxSplatCount : 0;\r\n        this.compressionLevel = header.compressionLevel;\r\n        this.sceneCenter = new THREE.Vector3().copy(header.sceneCenter);\r\n        this.minSphericalHarmonicsCoeff = header.minSphericalHarmonicsCoeff;\r\n        this.maxSphericalHarmonicsCoeff = header.maxSphericalHarmonicsCoeff;\r\n\r\n        this.sections = SplatBuffer.parseSectionHeaders(header, this.bufferData, SplatBuffer.HeaderSizeBytes, secLoadedCountsToMax);\r\n\r\n        this.linkBufferArrays();\r\n        this.buildMaps();\r\n    }\r\n\r\n    static calculateComponentStorage(compressionLevel, sphericalHarmonicsDegree) {\r\n        const bytesPerCenter = SplatBuffer.CompressionLevels[compressionLevel].BytesPerCenter;\r\n        const bytesPerScale = SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\r\n        const bytesPerRotation = SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\r\n        const bytesPerColor = SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\r\n        const sphericalHarmonicsComponentsPerSplat = getSphericalHarmonicsComponentCountForDegree(sphericalHarmonicsDegree);\r\n        const sphericalHarmonicsBytesPerSplat = SplatBuffer.CompressionLevels[compressionLevel].BytesPerSphericalHarmonicsComponent *\r\n                                                sphericalHarmonicsComponentsPerSplat;\r\n        const bytesPerSplat = bytesPerCenter + bytesPerScale + bytesPerRotation +\r\n                              bytesPerColor + sphericalHarmonicsBytesPerSplat;\r\n        return {\r\n            bytesPerCenter,\r\n            bytesPerScale,\r\n            bytesPerRotation,\r\n            bytesPerColor,\r\n            sphericalHarmonicsComponentsPerSplat,\r\n            sphericalHarmonicsBytesPerSplat,\r\n            bytesPerSplat\r\n        };\r\n    }\r\n\r\n    linkBufferArrays() {\r\n        for (let i = 0; i < this.maxSectionCount; i++) {\r\n            const section = this.sections[i];\r\n            section.bucketArray = new Float32Array(this.bufferData, section.bucketsBase,\r\n                                                   section.bucketCount * SplatBuffer.BucketStorageSizeFloats);\r\n            if (section.partiallyFilledBucketCount > 0) {\r\n                section.partiallyFilledBucketLengths = new Uint32Array(this.bufferData, section.base,\r\n                                                                       section.partiallyFilledBucketCount);\r\n            }\r\n        }\r\n    }\r\n\r\n    buildMaps() {\r\n        let cumulativeSplatCount = 0;\r\n        for (let i = 0; i < this.maxSectionCount; i++) {\r\n            const section = this.sections[i];\r\n            for (let j = 0; j < section.maxSplatCount; j++) {\r\n                const globalSplatIndex = cumulativeSplatCount + j;\r\n                this.globalSplatIndexToLocalSplatIndexMap[globalSplatIndex] = j;\r\n                this.globalSplatIndexToSectionMap[globalSplatIndex] = i;\r\n            }\r\n            cumulativeSplatCount += section.maxSplatCount;\r\n        }\r\n    }\r\n\r\n    updateLoadedCounts(newSectionCount, newSplatCount) {\r\n        SplatBuffer.writeHeaderCountsToBuffer(newSectionCount, newSplatCount, this.bufferData);\r\n        this.sectionCount = newSectionCount;\r\n        this.splatCount = newSplatCount;\r\n    }\r\n\r\n    updateSectionLoadedCounts(sectionIndex, newSplatCount) {\r\n        const sectionHeaderOffset = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * sectionIndex;\r\n        SplatBuffer.writeSectionHeaderSplatCountToBuffer(newSplatCount, this.bufferData, sectionHeaderOffset);\r\n        this.sections[sectionIndex].splatCount = newSplatCount;\r\n    }\r\n\r\n    static writeSplatDataToSectionBuffer = function() {\r\n\r\n        const tempCenterBuffer = new ArrayBuffer(12);\r\n        const tempScaleBuffer = new ArrayBuffer(12);\r\n        const tempRotationBuffer = new ArrayBuffer(16);\r\n        const tempColorBuffer = new ArrayBuffer(4);\r\n        const tempSHBuffer = new ArrayBuffer(256);\r\n        const tempRot = new THREE.Quaternion();\r\n        const tempScale = new THREE.Vector3();\r\n        const bucketCenterDelta = new THREE.Vector3();\r\n\r\n        const {\r\n            X: OFFSET_X, Y: OFFSET_Y, Z: OFFSET_Z,\r\n            SCALE0: OFFSET_SCALE0, SCALE1: OFFSET_SCALE1, SCALE2: OFFSET_SCALE2,\r\n            ROTATION0: OFFSET_ROT0, ROTATION1: OFFSET_ROT1, ROTATION2: OFFSET_ROT2, ROTATION3: OFFSET_ROT3,\r\n            FDC0: OFFSET_FDC0, FDC1: OFFSET_FDC1, FDC2: OFFSET_FDC2, OPACITY: OFFSET_OPACITY,\r\n            FRC0: OFFSET_FRC0, FRC9: OFFSET_FRC9,\r\n        } = UncompressedSplatArray.OFFSET;\r\n\r\n        const compressPositionOffset = (v, compressionScaleFactor, compressionScaleRange) => {\r\n            const doubleCompressionScaleRange = compressionScaleRange * 2 + 1;\r\n            v = Math.round(v * compressionScaleFactor) + compressionScaleRange;\r\n            return clamp(v, 0, doubleCompressionScaleRange);\r\n        };\r\n\r\n        return function(targetSplat, sectionBuffer, bufferOffset, compressionLevel, sphericalHarmonicsDegree,\r\n                        bucketCenter, compressionScaleFactor, compressionScaleRange,\r\n                        minSphericalHarmonicsCoeff = -DefaultSphericalHarmonics8BitCompressionHalfRange,\r\n                        maxSphericalHarmonicsCoeff = DefaultSphericalHarmonics8BitCompressionHalfRange) {\r\n\r\n            const sphericalHarmonicsComponentsPerSplat = getSphericalHarmonicsComponentCountForDegree(sphericalHarmonicsDegree);\r\n            const bytesPerCenter = SplatBuffer.CompressionLevels[compressionLevel].BytesPerCenter;\r\n            const bytesPerScale = SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\r\n            const bytesPerRotation = SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\r\n            const bytesPerColor = SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\r\n\r\n            const centerBase = bufferOffset;\r\n            const scaleBase = centerBase + bytesPerCenter;\r\n            const rotationBase = scaleBase + bytesPerScale;\r\n            const colorBase = rotationBase + bytesPerRotation;\r\n            const sphericalHarmonicsBase = colorBase + bytesPerColor;\r\n\r\n            if (targetSplat[OFFSET_ROT0] !== undefined) {\r\n                tempRot.set(targetSplat[OFFSET_ROT0], targetSplat[OFFSET_ROT1], targetSplat[OFFSET_ROT2], targetSplat[OFFSET_ROT3]);\r\n                tempRot.normalize();\r\n            } else {\r\n                tempRot.set(1.0, 0.0, 0.0, 0.0);\r\n            }\r\n\r\n            if (targetSplat[OFFSET_SCALE0] !== undefined) {\r\n                tempScale.set(targetSplat[OFFSET_SCALE0] || 0,\r\n                              targetSplat[OFFSET_SCALE1] || 0,\r\n                              targetSplat[OFFSET_SCALE2] || 0);\r\n            } else {\r\n                tempScale.set(0, 0, 0);\r\n            }\r\n\r\n            if (compressionLevel === 0) {\r\n                const center = new Float32Array(sectionBuffer, centerBase, SplatBuffer.CenterComponentCount);\r\n                const rot = new Float32Array(sectionBuffer, rotationBase, SplatBuffer.RotationComponentCount);\r\n                const scale = new Float32Array(sectionBuffer, scaleBase, SplatBuffer.ScaleComponentCount);\r\n\r\n                rot.set([tempRot.x, tempRot.y, tempRot.z, tempRot.w]);\r\n                scale.set([tempScale.x, tempScale.y, tempScale.z]);\r\n                center.set([targetSplat[OFFSET_X], targetSplat[OFFSET_Y], targetSplat[OFFSET_Z]]);\r\n\r\n                if (sphericalHarmonicsDegree > 0) {\r\n                    const shOut = new Float32Array(sectionBuffer, sphericalHarmonicsBase, sphericalHarmonicsComponentsPerSplat);\r\n                    if (sphericalHarmonicsDegree >= 1) {\r\n                            for (let s = 0; s < 9; s++) shOut[s] = targetSplat[OFFSET_FRC0 + s] || 0;\r\n                            if (sphericalHarmonicsDegree >= 2) {\r\n                                for (let s = 0; s < 15; s++) shOut[s + 9] = targetSplat[OFFSET_FRC9 + s] || 0;\r\n                            }\r\n                    }\r\n                }\r\n            } else {\r\n                const center = new Uint16Array(tempCenterBuffer, 0, SplatBuffer.CenterComponentCount);\r\n                const rot = new Uint16Array(tempRotationBuffer, 0, SplatBuffer.RotationComponentCount);\r\n                const scale = new Uint16Array(tempScaleBuffer, 0, SplatBuffer.ScaleComponentCount);\r\n\r\n                rot.set([toHalfFloat(tempRot.x), toHalfFloat(tempRot.y), toHalfFloat(tempRot.z), toHalfFloat(tempRot.w)]);\r\n                scale.set([toHalfFloat(tempScale.x), toHalfFloat(tempScale.y), toHalfFloat(tempScale.z)]);\r\n\r\n                bucketCenterDelta.set(targetSplat[OFFSET_X], targetSplat[OFFSET_Y], targetSplat[OFFSET_Z]).sub(bucketCenter);\r\n                bucketCenterDelta.x = compressPositionOffset(bucketCenterDelta.x, compressionScaleFactor, compressionScaleRange);\r\n                bucketCenterDelta.y = compressPositionOffset(bucketCenterDelta.y, compressionScaleFactor, compressionScaleRange);\r\n                bucketCenterDelta.z = compressPositionOffset(bucketCenterDelta.z, compressionScaleFactor, compressionScaleRange);\r\n                center.set([bucketCenterDelta.x, bucketCenterDelta.y, bucketCenterDelta.z]);\r\n\r\n                if (sphericalHarmonicsDegree > 0) {\r\n                    const SHArrayType = compressionLevel === 1 ? Uint16Array : Uint8Array;\r\n                    const bytesPerSHComponent = compressionLevel === 1 ? 2 : 1;\r\n                    const shOut = new SHArrayType(tempSHBuffer, 0, sphericalHarmonicsComponentsPerSplat);\r\n                    if (sphericalHarmonicsDegree >= 1) {\r\n                        for (let s = 0; s < 9; s++) {\r\n                            const srcVal = targetSplat[OFFSET_FRC0 + s] || 0;\r\n                            shOut[s] = compressionLevel === 1 ? toHalfFloat(srcVal) :\r\n                                       toUint8(srcVal, minSphericalHarmonicsCoeff, maxSphericalHarmonicsCoeff);\r\n                        }\r\n                        const degree1ByteCount = 9 * bytesPerSHComponent;\r\n                        copyBetweenBuffers(shOut.buffer, 0, sectionBuffer, sphericalHarmonicsBase, degree1ByteCount);\r\n                        if (sphericalHarmonicsDegree >= 2) {\r\n                            for (let s = 0; s < 15; s++) {\r\n                                const srcVal = targetSplat[OFFSET_FRC9 + s] || 0;\r\n                                shOut[s + 9] = compressionLevel === 1 ? toHalfFloat(srcVal) :\r\n                                               toUint8(srcVal, minSphericalHarmonicsCoeff, maxSphericalHarmonicsCoeff);\r\n                            }\r\n                            copyBetweenBuffers(shOut.buffer, degree1ByteCount, sectionBuffer,\r\n                                               sphericalHarmonicsBase + degree1ByteCount, 15 * bytesPerSHComponent);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                copyBetweenBuffers(center.buffer, 0, sectionBuffer, centerBase, 6);\r\n                copyBetweenBuffers(scale.buffer, 0, sectionBuffer, scaleBase, 6);\r\n                copyBetweenBuffers(rot.buffer, 0, sectionBuffer, rotationBase, 8);\r\n            }\r\n\r\n            const rgba = new Uint8ClampedArray(tempColorBuffer, 0, 4);\r\n            rgba.set([targetSplat[OFFSET_FDC0] || 0, targetSplat[OFFSET_FDC1] || 0, targetSplat[OFFSET_FDC2] || 0]);\r\n            rgba[3] = targetSplat[OFFSET_OPACITY] || 0;\r\n\r\n            copyBetweenBuffers(rgba.buffer, 0, sectionBuffer, colorBase, 4);\r\n        };\r\n\r\n    }();\r\n\r\n    static generateFromUncompressedSplatArrays(splatArrays, minimumAlpha, compressionLevel,\r\n                                               sceneCenter, blockSize, bucketSize, options = []) {\r\n\r\n        let shDegree = 0;\r\n        for (let sa = 0; sa < splatArrays.length; sa ++) {\r\n            const splatArray = splatArrays[sa];\r\n            shDegree = Math.max(splatArray.sphericalHarmonicsDegree, shDegree);\r\n        }\r\n\r\n        let minSphericalHarmonicsCoeff;\r\n        let maxSphericalHarmonicsCoeff;\r\n\r\n        for (let sa = 0; sa < splatArrays.length; sa ++) {\r\n            const splatArray = splatArrays[sa];\r\n            for (let i = 0; i < splatArray.splats.length; i++) {\r\n                const splat = splatArray.splats[i];\r\n                for (let sc = UncompressedSplatArray.OFFSET.FRC0; sc < UncompressedSplatArray.OFFSET.FRC23 && sc < splat.length; sc++) {\r\n                    if (!minSphericalHarmonicsCoeff || splat[sc] < minSphericalHarmonicsCoeff) {\r\n                        minSphericalHarmonicsCoeff = splat[sc];\r\n                    }\r\n                    if (!maxSphericalHarmonicsCoeff || splat[sc] > maxSphericalHarmonicsCoeff) {\r\n                        maxSphericalHarmonicsCoeff = splat[sc];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        minSphericalHarmonicsCoeff = minSphericalHarmonicsCoeff || -DefaultSphericalHarmonics8BitCompressionHalfRange;\r\n        maxSphericalHarmonicsCoeff = maxSphericalHarmonicsCoeff || DefaultSphericalHarmonics8BitCompressionHalfRange;\r\n\r\n        const { bytesPerSplat } = SplatBuffer.calculateComponentStorage(compressionLevel, shDegree);\r\n        const compressionScaleRange = SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\r\n\r\n        const sectionBuffers = [];\r\n        const sectionHeaderBuffers = [];\r\n        let totalSplatCount = 0;\r\n\r\n        for (let sa = 0; sa < splatArrays.length; sa ++) {\r\n            const splatArray = splatArrays[sa];\r\n            const validSplats = new UncompressedSplatArray(shDegree);\r\n            for (let i = 0; i < splatArray.splatCount; i++) {\r\n                const targetSplat = splatArray.splats[i];\r\n                if ((targetSplat[UncompressedSplatArray.OFFSET.OPACITY] || 0) >= minimumAlpha) {\r\n                    validSplats.addSplat(targetSplat);\r\n                }\r\n            }\r\n\r\n            const sectionOptions = options[sa] || {};\r\n            const sectionBlockSize = (sectionOptions.blockSizeFactor || 1) * (blockSize || SplatBuffer.BucketBlockSize);\r\n            const sectionBucketSize = Math.ceil((sectionOptions.bucketSizeFactor || 1) * (bucketSize || SplatBuffer.BucketSize));\r\n\r\n            const bucketInfo = SplatBuffer.computeBucketsForUncompressedSplatArray(validSplats, sectionBlockSize, sectionBucketSize);\r\n            const fullBucketCount = bucketInfo.fullBuckets.length;\r\n            const partiallyFullBucketLengths = bucketInfo.partiallyFullBuckets.map((bucket) => bucket.splats.length);\r\n            const partiallyFilledBucketCount = partiallyFullBucketLengths.length;\r\n            const buckets = [...bucketInfo.fullBuckets, ...bucketInfo.partiallyFullBuckets];\r\n\r\n            const sectionDataSizeBytes = validSplats.splats.length * bytesPerSplat;\r\n            const bucketMetaDataSizeBytes = partiallyFilledBucketCount * 4;\r\n            const bucketDataBytes = compressionLevel >= 1 ? buckets.length *\r\n                                                            SplatBuffer.BucketStorageSizeBytes + bucketMetaDataSizeBytes : 0;\r\n            const sectionSizeBytes = sectionDataSizeBytes + bucketDataBytes;\r\n            const sectionBuffer = new ArrayBuffer(sectionSizeBytes);\r\n\r\n            const compressionScaleFactor = compressionScaleRange / (sectionBlockSize * 0.5);\r\n            const bucketCenter = new THREE.Vector3();\r\n\r\n            let outSplatCount = 0;\r\n            for (let b = 0; b < buckets.length; b++) {\r\n                const bucket = buckets[b];\r\n                bucketCenter.fromArray(bucket.center);\r\n                for (let i = 0; i < bucket.splats.length; i++) {\r\n                    let row = bucket.splats[i];\r\n                    const targetSplat = validSplats.splats[row];\r\n                    const bufferOffset = bucketDataBytes + outSplatCount * bytesPerSplat;\r\n                    SplatBuffer.writeSplatDataToSectionBuffer(targetSplat, sectionBuffer, bufferOffset, compressionLevel, shDegree,\r\n                                                              bucketCenter, compressionScaleFactor, compressionScaleRange,\r\n                                                              minSphericalHarmonicsCoeff, maxSphericalHarmonicsCoeff);\r\n                    outSplatCount++;\r\n                }\r\n            }\r\n            totalSplatCount += outSplatCount;\r\n\r\n            if (compressionLevel >= 1) {\r\n                const bucketMetaDataArray = new Uint32Array(sectionBuffer, 0, partiallyFullBucketLengths.length * 4);\r\n                for (let pfb = 0; pfb < partiallyFullBucketLengths.length; pfb ++) {\r\n                    bucketMetaDataArray[pfb] = partiallyFullBucketLengths[pfb];\r\n                }\r\n                const bucketArray = new Float32Array(sectionBuffer, bucketMetaDataSizeBytes,\r\n                                                     buckets.length * SplatBuffer.BucketStorageSizeFloats);\r\n                for (let b = 0; b < buckets.length; b++) {\r\n                    const bucket = buckets[b];\r\n                    const base = b * 3;\r\n                    bucketArray[base] = bucket.center[0];\r\n                    bucketArray[base + 1] = bucket.center[1];\r\n                    bucketArray[base + 2] = bucket.center[2];\r\n                }\r\n            }\r\n            sectionBuffers.push(sectionBuffer);\r\n\r\n            const sectionHeaderBuffer = new ArrayBuffer(SplatBuffer.SectionHeaderSizeBytes);\r\n            SplatBuffer.writeSectionHeaderToBuffer({\r\n                maxSplatCount: outSplatCount,\r\n                splatCount: outSplatCount,\r\n                bucketSize: sectionBucketSize,\r\n                bucketCount: buckets.length,\r\n                bucketBlockSize: sectionBlockSize,\r\n                compressionScaleRange: compressionScaleRange,\r\n                storageSizeBytes: sectionSizeBytes,\r\n                fullBucketCount: fullBucketCount,\r\n                partiallyFilledBucketCount: partiallyFilledBucketCount,\r\n                sphericalHarmonicsDegree: shDegree\r\n            }, compressionLevel, sectionHeaderBuffer, 0);\r\n            sectionHeaderBuffers.push(sectionHeaderBuffer);\r\n\r\n        }\r\n\r\n        let sectionsCumulativeSizeBytes = 0;\r\n        for (let sectionBuffer of sectionBuffers) sectionsCumulativeSizeBytes += sectionBuffer.byteLength;\r\n        const unifiedBufferSize = SplatBuffer.HeaderSizeBytes +\r\n                                  SplatBuffer.SectionHeaderSizeBytes * sectionBuffers.length + sectionsCumulativeSizeBytes;\r\n        const unifiedBuffer = new ArrayBuffer(unifiedBufferSize);\r\n\r\n        SplatBuffer.writeHeaderToBuffer({\r\n            versionMajor: 0,\r\n            versionMinor: 1,\r\n            maxSectionCount: sectionBuffers.length,\r\n            sectionCount: sectionBuffers.length,\r\n            maxSplatCount: totalSplatCount,\r\n            splatCount: totalSplatCount,\r\n            compressionLevel: compressionLevel,\r\n            sceneCenter: sceneCenter,\r\n            minSphericalHarmonicsCoeff: minSphericalHarmonicsCoeff,\r\n            maxSphericalHarmonicsCoeff: maxSphericalHarmonicsCoeff\r\n        }, unifiedBuffer);\r\n\r\n        let currentUnifiedBase = SplatBuffer.HeaderSizeBytes;\r\n        for (let sectionHeaderBuffer of sectionHeaderBuffers) {\r\n            new Uint8Array(unifiedBuffer, currentUnifiedBase, SplatBuffer.SectionHeaderSizeBytes).set(new Uint8Array(sectionHeaderBuffer));\r\n            currentUnifiedBase += SplatBuffer.SectionHeaderSizeBytes;\r\n        }\r\n\r\n        for (let sectionBuffer of sectionBuffers) {\r\n            new Uint8Array(unifiedBuffer, currentUnifiedBase, sectionBuffer.byteLength).set(new Uint8Array(sectionBuffer));\r\n            currentUnifiedBase += sectionBuffer.byteLength;\r\n        }\r\n\r\n        const splatBuffer = new SplatBuffer(unifiedBuffer);\r\n        return splatBuffer;\r\n    }\r\n\r\n    static computeBucketsForUncompressedSplatArray(splatArray, blockSize, bucketSize) {\r\n        let splatCount = splatArray.splatCount;\r\n        const halfBlockSize = blockSize / 2.0;\r\n\r\n        const min = new THREE.Vector3();\r\n        const max = new THREE.Vector3();\r\n\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const targetSplat = splatArray.splats[i];\r\n            const center = [targetSplat[UncompressedSplatArray.OFFSET.X],\r\n                            targetSplat[UncompressedSplatArray.OFFSET.Y],\r\n                            targetSplat[UncompressedSplatArray.OFFSET.Z]];\r\n            if (i === 0 || center[0] < min.x) min.x = center[0];\r\n            if (i === 0 || center[0] > max.x) max.x = center[0];\r\n            if (i === 0 || center[1] < min.y) min.y = center[1];\r\n            if (i === 0 || center[1] > max.y) max.y = center[1];\r\n            if (i === 0 || center[2] < min.z) min.z = center[2];\r\n            if (i === 0 || center[2] > max.z) max.z = center[2];\r\n        }\r\n\r\n        const dimensions = new THREE.Vector3().copy(max).sub(min);\r\n        const yBlocks = Math.ceil(dimensions.y / blockSize);\r\n        const zBlocks = Math.ceil(dimensions.z / blockSize);\r\n\r\n        const blockCenter = new THREE.Vector3();\r\n        const fullBuckets = [];\r\n        const partiallyFullBuckets = {};\r\n\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const targetSplat = splatArray.splats[i];\r\n            const center = [targetSplat[UncompressedSplatArray.OFFSET.X],\r\n                            targetSplat[UncompressedSplatArray.OFFSET.Y],\r\n                            targetSplat[UncompressedSplatArray.OFFSET.Z]];\r\n            const xBlock = Math.floor((center[0] - min.x) / blockSize);\r\n            const yBlock = Math.floor((center[1] - min.y) / blockSize);\r\n            const zBlock = Math.floor((center[2] - min.z) / blockSize);\r\n\r\n            blockCenter.x = xBlock * blockSize + min.x + halfBlockSize;\r\n            blockCenter.y = yBlock * blockSize + min.y + halfBlockSize;\r\n            blockCenter.z = zBlock * blockSize + min.z + halfBlockSize;\r\n\r\n            const bucketId = xBlock * (yBlocks * zBlocks) + yBlock * zBlocks + zBlock;\r\n            let bucket = partiallyFullBuckets[bucketId];\r\n            if (!bucket) {\r\n                partiallyFullBuckets[bucketId] = bucket = {\r\n                    'splats': [],\r\n                    'center': blockCenter.toArray()\r\n                };\r\n            }\r\n\r\n            bucket.splats.push(i);\r\n            if (bucket.splats.length >= bucketSize) {\r\n                fullBuckets.push(bucket);\r\n                partiallyFullBuckets[bucketId] = null;\r\n            }\r\n        }\r\n\r\n        const partiallyFullBucketArray = [];\r\n        for (let bucketId in partiallyFullBuckets) {\r\n            if (partiallyFullBuckets.hasOwnProperty(bucketId)) {\r\n                const bucket = partiallyFullBuckets[bucketId];\r\n                if (bucket) {\r\n                    partiallyFullBucketArray.push(bucket);\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            'fullBuckets': fullBuckets,\r\n            'partiallyFullBuckets': partiallyFullBucketArray,\r\n        };\r\n    }\r\n\r\n    static preallocateUncompressed(splatCount, sphericalHarmonicsDegrees) {\r\n        const shDescriptor = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[sphericalHarmonicsDegrees];\r\n        const splatBufferDataOffsetBytes = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes;\r\n        const splatBufferSizeBytes = splatBufferDataOffsetBytes + shDescriptor.BytesPerSplat * splatCount;\r\n        const outBuffer = new ArrayBuffer(splatBufferSizeBytes);\r\n        SplatBuffer.writeHeaderToBuffer({\r\n            versionMajor: SplatBuffer.CurrentMajorVersion,\r\n            versionMinor: SplatBuffer.CurrentMinorVersion,\r\n            maxSectionCount: 1,\r\n            sectionCount: 1,\r\n            maxSplatCount: splatCount,\r\n            splatCount: splatCount,\r\n            compressionLevel: 0,\r\n            sceneCenter: new THREE.Vector3()\r\n        }, outBuffer);\r\n\r\n        SplatBuffer.writeSectionHeaderToBuffer({\r\n            maxSplatCount: splatCount,\r\n            splatCount: splatCount,\r\n            bucketSize: 0,\r\n            bucketCount: 0,\r\n            bucketBlockSize: 0,\r\n            compressionScaleRange: 0,\r\n            storageSizeBytes: 0,\r\n            fullBucketCount: 0,\r\n            partiallyFilledBucketCount: 0,\r\n            sphericalHarmonicsDegree: sphericalHarmonicsDegrees\r\n        }, 0, outBuffer, SplatBuffer.HeaderSizeBytes);\r\n\r\n        return {\r\n            splatBuffer: new SplatBuffer(outBuffer, true),\r\n            splatBufferDataOffsetBytes\r\n        };\r\n    }\r\n}\r\n","import { UncompressedSplatArray } from '../UncompressedSplatArray.js';\r\nimport { SplatBuffer } from '../SplatBuffer.js';\r\nimport { clamp } from '../../Util.js';\r\nimport * as THREE from 'three';\r\n\r\nconst HeaderMagicBytes = new Uint8Array([112, 108, 121, 10]);\r\nconst HeaderEndTokenBytes = new Uint8Array([10, 101, 110, 100, 95, 104, 101, 97, 100, 101, 114, 10]);\r\nconst HeaderEndToken = 'end_header';\r\n\r\nconst DataTypeMap = new Map([\r\n  ['char', Int8Array],\r\n  ['uchar', Uint8Array],\r\n  ['short', Int16Array],\r\n  ['ushort', Uint16Array],\r\n  ['int', Int32Array],\r\n  ['uint', Uint32Array],\r\n  ['float', Float32Array],\r\n  ['double', Float64Array],\r\n]);\r\n\r\nconst unpackUnorm = (value, bits) => {\r\n  const t = (1 << bits) - 1;\r\n  return (value & t) / t;\r\n};\r\n\r\nconst unpack111011 = (result, value) => {\r\n  result.x = unpackUnorm(value >>> 21, 11);\r\n  result.y = unpackUnorm(value >>> 11, 10);\r\n  result.z = unpackUnorm(value, 11);\r\n};\r\n\r\nconst unpack8888 = (result, value) => {\r\n  result.x = unpackUnorm(value >>> 24, 8);\r\n  result.y = unpackUnorm(value >>> 16, 8);\r\n  result.z = unpackUnorm(value >>> 8, 8);\r\n  result.w = unpackUnorm(value, 8);\r\n};\r\n\r\n// unpack quaternion with 2,10,10,10 format (largest element, 3x10bit element)\r\nconst unpackRot = (result, value) => {\r\n  const norm = 1.0 / (Math.sqrt(2) * 0.5);\r\n  const a = (unpackUnorm(value >>> 20, 10) - 0.5) * norm;\r\n  const b = (unpackUnorm(value >>> 10, 10) - 0.5) * norm;\r\n  const c = (unpackUnorm(value, 10) - 0.5) * norm;\r\n  const m = Math.sqrt(1.0 - (a * a + b * b + c * c));\r\n\r\n  switch (value >>> 30) {\r\n    case 0:\r\n      result.set(m, a, b, c);\r\n      break;\r\n    case 1:\r\n      result.set(a, m, b, c);\r\n      break;\r\n    case 2:\r\n      result.set(a, b, m, c);\r\n      break;\r\n    case 3:\r\n      result.set(a, b, c, m);\r\n      break;\r\n  }\r\n};\r\n\r\nconst lerp = (a, b, t) => {\r\n  return a * (1 - t) + b * t;\r\n};\r\n\r\nconst getElementPropStorage = (element, name) => {\r\n  return element.properties.find((p) => p.name === name && p.storage)\r\n    ?.storage;\r\n};\r\n\r\nexport class PlayCanvasCompressedPlyParser {\r\n\r\n  static decodeHeaderText(headerText) {\r\n\r\n    let element;\r\n    let chunkElement;\r\n    let vertexElement;\r\n    let shElement;\r\n\r\n    const headerLines = headerText.split('\\n').filter((line) => !line.startsWith('comment '));\r\n\r\n    let bytesPerSplat = 0;\r\n    let done = false;\r\n    for (let i = 1; i < headerLines.length; ++i) {\r\n      const words = headerLines[i].split(' ');\r\n\r\n      switch (words[0]) {\r\n        case 'format':\r\n          if (words[1] !== 'binary_little_endian') {\r\n            throw new Error('Unsupported ply format');\r\n          }\r\n          break;\r\n        case 'element':\r\n          element = {\r\n            name: words[1],\r\n            count: parseInt(words[2], 10),\r\n            properties: [],\r\n            storageSizeBytes: 0\r\n          };\r\n          if (element.name === 'chunk') chunkElement = element;\r\n          else if (element.name === 'vertex') vertexElement = element;\r\n          else if (element.name === 'sh') shElement = element;\r\n          break;\r\n        case 'property': {\r\n          if (!DataTypeMap.has(words[1])) {\r\n            throw new Error(\r\n              `Unrecognized property data type '${words[1]}' in ply header`\r\n            );\r\n          }\r\n          const StorageType = DataTypeMap.get(words[1]);\r\n          const storageSizeByes = StorageType.BYTES_PER_ELEMENT * element.count;\r\n          if (element.name === 'vertex') bytesPerSplat += StorageType.BYTES_PER_ELEMENT;\r\n          element.properties.push({\r\n            type: words[1],\r\n            name: words[2],\r\n            storage: null,\r\n            byteSize: StorageType.BYTES_PER_ELEMENT,\r\n            storageSizeByes: storageSizeByes\r\n          });\r\n          element.storageSizeBytes += storageSizeByes;\r\n          break;\r\n        }\r\n        case HeaderEndToken:\r\n          done = true;\r\n        break;\r\n        default:\r\n          throw new Error(\r\n            `Unrecognized header value '${words[0]}' in ply header`\r\n          );\r\n      }\r\n      if (done) break;\r\n    }\r\n\r\n    let sphericalHarmonicsDegree = 0;\r\n    let sphericalHarmonicsPerSplat = 0;\r\n    if (shElement) {\r\n      sphericalHarmonicsPerSplat = shElement.properties.length;\r\n      if (shElement.properties.length >= 45) {\r\n        sphericalHarmonicsDegree = 3;\r\n      } else if (shElement.properties.length >= 24) {\r\n        sphericalHarmonicsDegree = 2;\r\n      } else if (shElement.properties.length >= 9) {\r\n        sphericalHarmonicsDegree = 1;\r\n      }\r\n    }\r\n\r\n    return {\r\n      'chunkElement': chunkElement,\r\n      'vertexElement': vertexElement,\r\n      'shElement': shElement,\r\n      'bytesPerSplat': bytesPerSplat,\r\n      'headerSizeBytes': headerText.indexOf(HeaderEndToken) + HeaderEndToken.length + 1,\r\n      'sphericalHarmonicsDegree': sphericalHarmonicsDegree,\r\n      'sphericalHarmonicsPerSplat': sphericalHarmonicsPerSplat\r\n    };\r\n  }\r\n\r\n  static decodeHeader(plyBuffer) {\r\n\r\n    /**\r\n     * Searches for the first occurrence of a sequence within a buffer.\r\n     * @example\r\n     * find(new Uint8Array([1, 2, 3, 4]), new Uint8Array([3, 4])); // 2\r\n     * @param {Uint8Array} buf - The buffer in which to search.\r\n     * @param {Uint8Array} search - The sequence to search for.\r\n     * @return {number} The index of the first occurrence of the search sequence in the buffer, or -1 if not found.\r\n     */\r\n    const find = (buf, search) => {\r\n      const endIndex = buf.length - search.length;\r\n      let i;\r\n      let j;\r\n      for (i = 0; i <= endIndex; ++i) {\r\n        for (j = 0; j < search.length; ++j) {\r\n          if (buf[i + j] !== search[j]) {\r\n            break;\r\n          }\r\n        }\r\n        if (j === search.length) {\r\n          return i;\r\n        }\r\n      }\r\n      return -1;\r\n    };\r\n\r\n    /**\r\n     * Checks if array 'a' starts with the same elements as array 'b'.\r\n     * @example\r\n     * startsWith(new Uint8Array([1, 2, 3, 4]), new Uint8Array([1, 2])); // true\r\n     * @param {Uint8Array} a - The array to check against.\r\n     * @param {Uint8Array} b - The array of elements to look for at the start of 'a'.\r\n     * @return {boolean} - True if 'a' starts with all elements of 'b', otherwise false.\r\n     */\r\n    const startsWith = (a, b) => {\r\n      if (a.length < b.length) {\r\n        return false;\r\n      }\r\n\r\n      for (let i = 0; i < b.length; ++i) {\r\n        if (a[i] !== b[i]) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    };\r\n\r\n    let buf = new Uint8Array(plyBuffer);\r\n    let endHeaderTokenOffset;\r\n\r\n    if (buf.length >= HeaderMagicBytes.length && !startsWith(buf, HeaderMagicBytes)) {\r\n      throw new Error('Invalid PLY header');\r\n    }\r\n\r\n    endHeaderTokenOffset = find(buf, HeaderEndTokenBytes);\r\n    if (endHeaderTokenOffset === -1) {\r\n      throw new Error('End of PLY header not found');\r\n    }\r\n\r\n    const headerText = new TextDecoder('ascii').decode(\r\n      buf.slice(0, endHeaderTokenOffset)\r\n    );\r\n\r\n    const {\r\n      chunkElement,\r\n      vertexElement,\r\n      shElement,\r\n      sphericalHarmonicsDegree,\r\n      sphericalHarmonicsPerSplat,\r\n      bytesPerSplat\r\n    } = PlayCanvasCompressedPlyParser.decodeHeaderText(headerText);\r\n\r\n    return {\r\n      'headerSizeBytes': endHeaderTokenOffset + HeaderEndTokenBytes.length,\r\n      'bytesPerSplat': bytesPerSplat,\r\n      'chunkElement': chunkElement,\r\n      'vertexElement': vertexElement,\r\n      'shElement': shElement,\r\n      'sphericalHarmonicsDegree': sphericalHarmonicsDegree,\r\n      'sphericalHarmonicsPerSplat': sphericalHarmonicsPerSplat\r\n    };\r\n  }\r\n\r\n  static readElementData(element, readBuffer, readOffset, fromIndex, toIndex, propertyFilter = null) {\r\n\r\n    let dataView = readBuffer instanceof DataView ? readBuffer : new DataView(readBuffer);\r\n\r\n    fromIndex = fromIndex || 0;\r\n    toIndex = toIndex || element.count - 1;\r\n    for (let e = fromIndex; e <= toIndex; ++e) {\r\n      for (let j = 0; j < element.properties.length; ++j) {\r\n        const property = element.properties[j];\r\n\r\n        const StorageType = DataTypeMap.get(property.type);\r\n        const requiredStorageSizeBytes = StorageType.BYTES_PER_ELEMENT * element.count;\r\n        if ((!property.storage || property.storage.byteLength < requiredStorageSizeBytes) &&\r\n            (!propertyFilter || propertyFilter(property.name))) {\r\n          property.storage = new StorageType(element.count);\r\n        }\r\n\r\n        if (property.storage) {\r\n          switch (property.type) {\r\n            case 'char':\r\n              property.storage[e] = dataView.getInt8(readOffset);\r\n              break;\r\n            case 'uchar':\r\n              property.storage[e] = dataView.getUint8(readOffset);\r\n              break;\r\n            case 'short':\r\n              property.storage[e] = dataView.getInt16(readOffset, true);\r\n              break;\r\n            case 'ushort':\r\n              property.storage[e] = dataView.getUint16(readOffset, true);\r\n              break;\r\n            case 'int':\r\n              property.storage[e] = dataView.getInt32(readOffset, true);\r\n              break;\r\n            case 'uint':\r\n              property.storage[e] = dataView.getUint32(readOffset, true);\r\n              break;\r\n            case 'float':\r\n              property.storage[e] = dataView.getFloat32(readOffset, true);\r\n              break;\r\n            case 'double':\r\n              property.storage[e] = dataView.getFloat64(readOffset, true);\r\n              break;\r\n          }\r\n        }\r\n\r\n        readOffset += property.byteSize;\r\n      }\r\n    }\r\n\r\n    return readOffset;\r\n  }\r\n\r\n  static readPly(plyBuffer, propertyFilter = null) {\r\n\r\n    const header = PlayCanvasCompressedPlyParser.decodeHeader(plyBuffer);\r\n\r\n    let readIndex = PlayCanvasCompressedPlyParser.readElementData(header.chunkElement, plyBuffer,\r\n                                                                  header.headerSizeBytes, null, null, propertyFilter);\r\n    readIndex = PlayCanvasCompressedPlyParser.readElementData(header.vertexElement, plyBuffer, readIndex, null, null, propertyFilter);\r\n    PlayCanvasCompressedPlyParser.readElementData(header.shElement, plyBuffer, readIndex, null, null, propertyFilter);\r\n\r\n    return {\r\n      'chunkElement': header.chunkElement,\r\n      'vertexElement': header.vertexElement,\r\n      'shElement': header.shElement,\r\n      'sphericalHarmonicsDegree': header.sphericalHarmonicsDegree,\r\n      'sphericalHarmonicsPerSplat': header.sphericalHarmonicsPerSplat\r\n    };\r\n  }\r\n\r\n  static getElementStorageArrays(chunkElement, vertexElement, shElement) {\r\n    const storageArrays = {};\r\n\r\n    if (vertexElement) {\r\n      const minR = getElementPropStorage(chunkElement, 'min_r');\r\n      const minG = getElementPropStorage(chunkElement, 'min_g');\r\n      const minB = getElementPropStorage(chunkElement, 'min_b');\r\n      const maxR = getElementPropStorage(chunkElement, 'max_r');\r\n      const maxG = getElementPropStorage(chunkElement, 'max_g');\r\n      const maxB = getElementPropStorage(chunkElement, 'max_b');\r\n      const minX = getElementPropStorage(chunkElement, 'min_x');\r\n      const minY = getElementPropStorage(chunkElement, 'min_y');\r\n      const minZ = getElementPropStorage(chunkElement, 'min_z');\r\n      const maxX = getElementPropStorage(chunkElement, 'max_x');\r\n      const maxY = getElementPropStorage(chunkElement, 'max_y');\r\n      const maxZ = getElementPropStorage(chunkElement, 'max_z');\r\n      const minScaleX = getElementPropStorage(chunkElement, 'min_scale_x');\r\n      const minScaleY = getElementPropStorage(chunkElement, 'min_scale_y');\r\n      const minScaleZ = getElementPropStorage(chunkElement, 'min_scale_z');\r\n      const maxScaleX = getElementPropStorage(chunkElement, 'max_scale_x');\r\n      const maxScaleY = getElementPropStorage(chunkElement, 'max_scale_y');\r\n      const maxScaleZ = getElementPropStorage(chunkElement, 'max_scale_z');\r\n      const position = getElementPropStorage(vertexElement, 'packed_position');\r\n      const rotation = getElementPropStorage(vertexElement, 'packed_rotation');\r\n      const scale = getElementPropStorage(vertexElement, 'packed_scale');\r\n      const color = getElementPropStorage(vertexElement, 'packed_color');\r\n\r\n      storageArrays['colorExtremes'] = {\r\n        minR, maxR,\r\n        minG, maxG,\r\n        minB, maxB\r\n      };\r\n      storageArrays['positionExtremes'] = {\r\n        minX, maxX,\r\n        minY, maxY,\r\n        minZ, maxZ\r\n      };\r\n      storageArrays['scaleExtremes'] = {\r\n        minScaleX, maxScaleX, minScaleY,\r\n        maxScaleY, minScaleZ, maxScaleZ\r\n      };\r\n      storageArrays['position'] = position;\r\n      storageArrays['rotation'] = rotation;\r\n      storageArrays['scale'] = scale;\r\n      storageArrays['color'] = color;\r\n    }\r\n\r\n    if (shElement) {\r\n      const shStorageArrays = {};\r\n      for (let i = 0; i < 45; i++) {\r\n        const fRestKey = `f_rest_${i}`;\r\n        const fRest = getElementPropStorage(shElement, fRestKey);\r\n        if (fRest) {\r\n          shStorageArrays[fRestKey] = fRest;\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n      storageArrays['sh'] = shStorageArrays;\r\n    }\r\n\r\n    return storageArrays;\r\n  }\r\n\r\n  static decompressBaseSplat = function() {\r\n\r\n    const p = new THREE.Vector3();\r\n    const r = new THREE.Quaternion();\r\n    const s = new THREE.Vector3();\r\n    const c = new THREE.Vector4();\r\n\r\n    const OFFSET = UncompressedSplatArray.OFFSET;\r\n\r\n    return function(index, chunkSplatIndexOffset, positionArray, positionExtremes, scaleArray, scaleExtremes,\r\n                    rotationArray, colorExtremes, colorArray, outSplat) {\r\n      outSplat = outSplat || UncompressedSplatArray.createSplat();\r\n\r\n      const chunkIndex = Math.floor((chunkSplatIndexOffset + index) / 256);\r\n\r\n      unpack111011(p, positionArray[index]);\r\n      unpackRot(r, rotationArray[index]);\r\n      unpack111011(s, scaleArray[index]);\r\n      unpack8888(c, colorArray[index]);\r\n\r\n      outSplat[OFFSET.X] = lerp(positionExtremes.minX[chunkIndex], positionExtremes.maxX[chunkIndex], p.x);\r\n      outSplat[OFFSET.Y] = lerp(positionExtremes.minY[chunkIndex], positionExtremes.maxY[chunkIndex], p.y);\r\n      outSplat[OFFSET.Z] = lerp(positionExtremes.minZ[chunkIndex], positionExtremes.maxZ[chunkIndex], p.z);\r\n\r\n      outSplat[OFFSET.ROTATION0] = r.x;\r\n      outSplat[OFFSET.ROTATION1] = r.y;\r\n      outSplat[OFFSET.ROTATION2] = r.z;\r\n      outSplat[OFFSET.ROTATION3] = r.w;\r\n\r\n      outSplat[OFFSET.SCALE0] = Math.exp(lerp(scaleExtremes.minScaleX[chunkIndex], scaleExtremes.maxScaleX[chunkIndex], s.x));\r\n      outSplat[OFFSET.SCALE1] = Math.exp(lerp(scaleExtremes.minScaleY[chunkIndex], scaleExtremes.maxScaleY[chunkIndex], s.y));\r\n      outSplat[OFFSET.SCALE2] = Math.exp(lerp(scaleExtremes.minScaleZ[chunkIndex], scaleExtremes.maxScaleZ[chunkIndex], s.z));\r\n\r\n      if (colorExtremes.minR && colorExtremes.maxR) {\r\n        outSplat[OFFSET.FDC0] = clamp(Math.round(lerp(colorExtremes.minR[chunkIndex], colorExtremes.maxR[chunkIndex], c.x) * 255), 0, 255);\r\n      } else {\r\n        outSplat[OFFSET.FDC0] = clamp(Math.floor(c.x * 255), 0, 255);\r\n      }\r\n      if (colorExtremes.minG && colorExtremes.maxG) {\r\n        outSplat[OFFSET.FDC1] = clamp(Math.round(lerp(colorExtremes.minG[chunkIndex], colorExtremes.maxG[chunkIndex], c.y) * 255), 0, 255);\r\n      } else {\r\n        outSplat[OFFSET.FDC1] = clamp(Math.floor(c.y * 255), 0, 255);\r\n      }\r\n      if (colorExtremes.minB && colorExtremes.maxB) {\r\n        outSplat[OFFSET.FDC2] = clamp(Math.round(lerp(colorExtremes.minB[chunkIndex], colorExtremes.maxB[chunkIndex], c.z) * 255), 0, 255);\r\n      } else {\r\n        outSplat[OFFSET.FDC2] = clamp(Math.floor(c.z * 255), 0, 255);\r\n      }\r\n      outSplat[OFFSET.OPACITY] = clamp(Math.floor(c.w * 255), 0, 255);\r\n\r\n      return outSplat;\r\n    };\r\n\r\n  }();\r\n\r\n  static decompressSphericalHarmonics = function() {\r\n\r\n    const shCoeffMap = [0, 3, 8, 15];\r\n\r\n    const shIndexMap = [\r\n      0, 1, 2, 9, 10, 11, 12, 13, 24, 25, 26, 27, 28, 29, 30,\r\n      3, 4, 5, 14, 15, 16, 17, 18, 31, 32, 33, 34, 35, 36, 37,\r\n      6, 7, 8, 19, 20, 21, 22, 23, 38, 39, 40, 41, 42, 43, 44\r\n    ];\r\n\r\n    return function(index, shArray, outSphericalHarmonicsDegree, readSphericalHarmonicsDegree, outSplat) {\r\n      outSplat = outSplat || UncompressedSplatArray.createSplat();\r\n      let outSHCoeff = shCoeffMap[outSphericalHarmonicsDegree];\r\n      let readSHCoeff = shCoeffMap[readSphericalHarmonicsDegree];\r\n      for (let j = 0; j < 3; ++j) {\r\n        for (let k = 0; k < 15; ++k) {\r\n          const outIndex = shIndexMap[j * 15 + k];\r\n          if (k < outSHCoeff && k < readSHCoeff) {\r\n            outSplat[UncompressedSplatArray.OFFSET.FRC0 + outIndex] = (shArray[j * readSHCoeff + k][index] * (8 / 255) - 4);\r\n          }\r\n        }\r\n      }\r\n\r\n      return outSplat;\r\n    };\r\n\r\n  }();\r\n\r\n  static parseToUncompressedSplatBufferSection(chunkElement, vertexElement, fromIndex, toIndex, chunkSplatIndexOffset,\r\n                                               vertexDataBuffer, outBuffer, outOffset, propertyFilter = null) {\r\n\r\n    PlayCanvasCompressedPlyParser.readElementData(vertexElement, vertexDataBuffer, 0, fromIndex, toIndex, propertyFilter);\r\n\r\n    const outBytesPerSplat = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat;\r\n\r\n    const { positionExtremes, scaleExtremes, colorExtremes, position, rotation, scale, color } =\r\n      PlayCanvasCompressedPlyParser.getElementStorageArrays(chunkElement, vertexElement);\r\n\r\n    const tempSplat = UncompressedSplatArray.createSplat();\r\n\r\n    for (let i = fromIndex; i <= toIndex; ++i) {\r\n      PlayCanvasCompressedPlyParser.decompressBaseSplat(i, chunkSplatIndexOffset, position, positionExtremes,\r\n                                                        scale, scaleExtremes, rotation, colorExtremes, color, tempSplat);\r\n      const outBase = i * outBytesPerSplat + outOffset;\r\n      SplatBuffer.writeSplatDataToSectionBuffer(tempSplat, outBuffer, outBase, 0, 0);\r\n    }\r\n  }\r\n\r\n  static parseToUncompressedSplatArraySection(chunkElement, vertexElement, fromIndex, toIndex, chunkSplatIndexOffset,\r\n                                              vertexDataBuffer, splatArray, propertyFilter = null) {\r\n\r\n    PlayCanvasCompressedPlyParser.readElementData(vertexElement, vertexDataBuffer, 0, fromIndex, toIndex, propertyFilter);\r\n\r\n    const { positionExtremes, scaleExtremes, colorExtremes, position, rotation, scale, color } =\r\n      PlayCanvasCompressedPlyParser.getElementStorageArrays(chunkElement, vertexElement);\r\n\r\n    for (let i = fromIndex; i <= toIndex; ++i) {\r\n      const tempSplat = UncompressedSplatArray.createSplat();\r\n      PlayCanvasCompressedPlyParser.decompressBaseSplat(i, chunkSplatIndexOffset, position, positionExtremes,\r\n                                                        scale, scaleExtremes, rotation, colorExtremes, color, tempSplat);\r\n      splatArray.addSplat(tempSplat);\r\n    }\r\n  }\r\n\r\n  static parseSphericalHarmonicsToUncompressedSplatArraySection(chunkElement, shElement, fromIndex, toIndex,\r\n    vertexDataBuffer, vertexReadOffset, outSphericalHarmonicsDegree, readSphericalHarmonicsDegree, splatArray, propertyFilter = null) {\r\n\r\n    PlayCanvasCompressedPlyParser.readElementData(shElement, vertexDataBuffer, vertexReadOffset, fromIndex, toIndex, propertyFilter);\r\n\r\n    const { sh } = PlayCanvasCompressedPlyParser.getElementStorageArrays(chunkElement, undefined, shElement);\r\n    const shArrays = Object.values(sh);\r\n\r\n    for (let i = fromIndex; i <= toIndex; ++i) {\r\n      PlayCanvasCompressedPlyParser.decompressSphericalHarmonics(\r\n        i, shArrays, outSphericalHarmonicsDegree, readSphericalHarmonicsDegree, splatArray.splats[i]\r\n      );\r\n    }\r\n  }\r\n\r\n  static parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree) {\r\n    const { chunkElement, vertexElement, shElement, sphericalHarmonicsDegree } = PlayCanvasCompressedPlyParser.readPly(plyBuffer);\r\n\r\n    outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, sphericalHarmonicsDegree);\r\n\r\n    const splatArray = new UncompressedSplatArray(outSphericalHarmonicsDegree);\r\n\r\n    const { positionExtremes, scaleExtremes, colorExtremes, position, rotation, scale, color } =\r\n      PlayCanvasCompressedPlyParser.getElementStorageArrays(chunkElement, vertexElement);\r\n\r\n    let shArrays;\r\n    if (outSphericalHarmonicsDegree > 0) {\r\n      const { sh } = PlayCanvasCompressedPlyParser.getElementStorageArrays(chunkElement, undefined, shElement);\r\n      shArrays = Object.values(sh);\r\n    }\r\n\r\n    for (let i = 0; i < vertexElement.count; ++i) {\r\n\r\n      splatArray.addDefaultSplat();\r\n      const newSplat = splatArray.getSplat(splatArray.splatCount - 1);\r\n\r\n      PlayCanvasCompressedPlyParser.decompressBaseSplat(i, 0, position, positionExtremes, scale,\r\n                                                        scaleExtremes, rotation, colorExtremes, color, newSplat);\r\n\r\n      if (outSphericalHarmonicsDegree > 0) {\r\n        PlayCanvasCompressedPlyParser.decompressSphericalHarmonics(\r\n          i, shArrays, outSphericalHarmonicsDegree, sphericalHarmonicsDegree, newSplat\r\n        );\r\n      }\r\n    }\r\n\r\n    return splatArray;\r\n  }\r\n\r\n  static parseToUncompressedSplatBuffer(plyBuffer, outSphericalHarmonicsDegree) {\r\n    const { chunkElement, vertexElement, shElement, sphericalHarmonicsDegree } = PlayCanvasCompressedPlyParser.readPly(plyBuffer);\r\n\r\n    outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, sphericalHarmonicsDegree);\r\n\r\n    const {\r\n      splatBuffer,\r\n      splatBufferDataOffsetBytes\r\n    } = SplatBuffer.preallocateUncompressed(vertexElement.count, outSphericalHarmonicsDegree);\r\n\r\n    const { positionExtremes, scaleExtremes, colorExtremes, position, rotation, scale, color } =\r\n    PlayCanvasCompressedPlyParser.getElementStorageArrays(chunkElement, vertexElement);\r\n\r\n    let shArrays;\r\n    if (outSphericalHarmonicsDegree > 0) {\r\n      const { sh } = PlayCanvasCompressedPlyParser.getElementStorageArrays(chunkElement, undefined, shElement);\r\n      shArrays = Object.values(sh);\r\n    }\r\n\r\n    const outBytesPerSplat = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[outSphericalHarmonicsDegree].BytesPerSplat;\r\n\r\n    const newSplat = UncompressedSplatArray.createSplat(outSphericalHarmonicsDegree);\r\n\r\n    for (let i = 0; i < vertexElement.count; ++i) {\r\n      PlayCanvasCompressedPlyParser.decompressBaseSplat(\r\n        i, 0, position, positionExtremes, scale, scaleExtremes, rotation, colorExtremes, color, newSplat\r\n      );\r\n      if (outSphericalHarmonicsDegree > 0) {\r\n        PlayCanvasCompressedPlyParser.decompressSphericalHarmonics(\r\n          i, shArrays, outSphericalHarmonicsDegree, sphericalHarmonicsDegree, newSplat\r\n        );\r\n      }\r\n\r\n      const outBase = i * outBytesPerSplat + splatBufferDataOffsetBytes;\r\n      SplatBuffer.writeSplatDataToSectionBuffer(newSplat, splatBuffer.bufferData, outBase, 0, outSphericalHarmonicsDegree);\r\n    }\r\n\r\n    return splatBuffer;\r\n  }\r\n\r\n}\r\n","export const PlyFormat = {\r\n    'INRIAV1': 0,\r\n    'INRIAV2': 1,\r\n    'PlayCanvasCompressed': 2\r\n};\r\n","import { PlyFormat } from './PlyFormat.js';\r\n\r\nconst [\r\n        FieldSizeIdDouble, FieldSizeIdInt, FieldSizeIdUInt, FieldSizeIdFloat, FieldSizeIdShort, FieldSizeIdUShort, FieldSizeIdUChar\r\n      ] = [0, 1, 2, 3, 4, 5, 6];\r\n\r\nconst FieldSizeStringMap = {\r\n    'double': FieldSizeIdDouble,\r\n    'int': FieldSizeIdInt,\r\n    'uint': FieldSizeIdUInt,\r\n    'float': FieldSizeIdFloat,\r\n    'short': FieldSizeIdShort,\r\n    'ushort': FieldSizeIdUShort,\r\n    'uchar': FieldSizeIdUChar,\r\n};\r\n\r\nconst FieldSize = {\r\n    [FieldSizeIdDouble]: 8,\r\n    [FieldSizeIdInt]: 4,\r\n    [FieldSizeIdUInt]: 4,\r\n    [FieldSizeIdFloat]: 4,\r\n    [FieldSizeIdShort]: 2,\r\n    [FieldSizeIdUShort]: 2,\r\n    [FieldSizeIdUChar]: 1,\r\n};\r\n\r\nexport class PlyParserUtils {\r\n\r\n    static HeaderEndToken = 'end_header';\r\n\r\n    static decodeSectionHeader(headerLines, fieldNameIdMap, headerStartLine = 0) {\r\n\r\n        const extractedLines = [];\r\n\r\n        let processingSection = false;\r\n        let headerEndLine = -1;\r\n        let vertexCount = 0;\r\n        let endOfHeader = false;\r\n        let sectionName = null;\r\n\r\n        const fieldIds = [];\r\n        const fieldTypes = [];\r\n        const allFieldNames = [];\r\n        const usedFieldNames = [];\r\n        const fieldTypesByName = {};\r\n\r\n        for (let i = headerStartLine; i < headerLines.length; i++) {\r\n            const line = headerLines[i].trim();\r\n            if (line.startsWith('element')) {\r\n                if (processingSection) {\r\n                    headerEndLine--;\r\n                    break;\r\n                } else {\r\n                    processingSection = true;\r\n                    headerStartLine = i;\r\n                    headerEndLine = i;\r\n                    const lineComponents = line.split(' ');\r\n                    let validComponents = 0;\r\n                    for (let lineComponent of lineComponents) {\r\n                        const trimmedComponent = lineComponent.trim();\r\n                        if (trimmedComponent.length > 0) {\r\n                            validComponents++;\r\n                            if (validComponents === 2) {\r\n                                sectionName = trimmedComponent;\r\n                            } else if (validComponents === 3) {\r\n                                vertexCount = parseInt(trimmedComponent);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } else if (line.startsWith('property')) {\r\n                const fieldMatch = line.match(/(\\w+)\\s+(\\w+)\\s+(\\w+)/);\r\n                if (fieldMatch) {\r\n                    const fieldTypeStr = fieldMatch[2];\r\n                    const fieldName = fieldMatch[3];\r\n                    allFieldNames.push(fieldName);\r\n                    const fieldId = fieldNameIdMap[fieldName];\r\n                    fieldTypesByName[fieldName] = fieldTypeStr;\r\n                    const fieldType = FieldSizeStringMap[fieldTypeStr];\r\n                    if (fieldId !== undefined) {\r\n                        usedFieldNames.push(fieldName);\r\n                        fieldIds.push(fieldId);\r\n                        fieldTypes[fieldId] = fieldType;\r\n                    }\r\n                }\r\n            }\r\n            if (line === PlyParserUtils.HeaderEndToken) {\r\n                endOfHeader = true;\r\n                break;\r\n            }\r\n            if (processingSection) {\r\n                extractedLines.push(line);\r\n                headerEndLine++;\r\n            }\r\n        }\r\n\r\n        const fieldOffsets = [];\r\n        let bytesPerVertex = 0;\r\n        for (let fieldName of allFieldNames) {\r\n            const fieldType = fieldTypesByName[fieldName];\r\n            if (fieldTypesByName.hasOwnProperty(fieldName)) {\r\n                const fieldId = fieldNameIdMap[fieldName];\r\n                if (fieldId !== undefined) {\r\n                    fieldOffsets[fieldId] = bytesPerVertex;\r\n                }\r\n            }\r\n            bytesPerVertex += FieldSize[FieldSizeStringMap[fieldType]];\r\n        }\r\n\r\n        const sphericalHarmonics = PlyParserUtils.decodeSphericalHarmonicsFromSectionHeader(allFieldNames, fieldNameIdMap);\r\n\r\n        return {\r\n            'headerLines': extractedLines,\r\n            'headerStartLine': headerStartLine,\r\n            'headerEndLine': headerEndLine,\r\n            'fieldTypes': fieldTypes,\r\n            'fieldIds': fieldIds,\r\n            'fieldOffsets': fieldOffsets,\r\n            'bytesPerVertex': bytesPerVertex,\r\n            'vertexCount': vertexCount,\r\n            'dataSizeBytes': bytesPerVertex * vertexCount,\r\n            'endOfHeader': endOfHeader,\r\n            'sectionName': sectionName,\r\n            'sphericalHarmonicsDegree': sphericalHarmonics.degree,\r\n            'sphericalHarmonicsCoefficientsPerChannel': sphericalHarmonics.coefficientsPerChannel,\r\n            'sphericalHarmonicsDegree1Fields': sphericalHarmonics.degree1Fields,\r\n            'sphericalHarmonicsDegree2Fields': sphericalHarmonics.degree2Fields\r\n        };\r\n\r\n    }\r\n\r\n    static decodeSphericalHarmonicsFromSectionHeader(fieldNames, fieldNameIdMap) {\r\n        let sphericalHarmonicsFieldCount = 0;\r\n        let coefficientsPerChannel = 0;\r\n        for (let fieldName of fieldNames) {\r\n            if (fieldName.startsWith('f_rest')) sphericalHarmonicsFieldCount++;\r\n        }\r\n        coefficientsPerChannel = sphericalHarmonicsFieldCount / 3;\r\n        let degree = 0;\r\n        if (coefficientsPerChannel >= 3) degree = 1;\r\n        if (coefficientsPerChannel >= 8) degree = 2;\r\n\r\n        let degree1Fields = [];\r\n        let degree2Fields = [];\r\n\r\n        for (let rgb = 0; rgb < 3; rgb++) {\r\n            if (degree >= 1) {\r\n                for (let i = 0; i < 3; i++) {\r\n                    degree1Fields.push(fieldNameIdMap['f_rest_' + (i + coefficientsPerChannel * rgb)]);\r\n                }\r\n            }\r\n            if (degree >= 2) {\r\n                for (let i = 0; i < 5; i++) {\r\n                    degree2Fields.push(fieldNameIdMap['f_rest_' + (i + coefficientsPerChannel * rgb + 3)]);\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            'degree': degree,\r\n            'coefficientsPerChannel': coefficientsPerChannel,\r\n            'degree1Fields': degree1Fields,\r\n            'degree2Fields': degree2Fields\r\n        };\r\n    }\r\n\r\n    static getHeaderSectionNames(headerLines) {\r\n        const sectionNames = [];\r\n        for (let headerLine of headerLines) {\r\n            if (headerLine.startsWith('element')) {\r\n                const lineComponents = headerLine.split(' ');\r\n                let validComponents = 0;\r\n                for (let lineComponent of lineComponents) {\r\n                    const trimmedComponent = lineComponent.trim();\r\n                    if (trimmedComponent.length > 0) {\r\n                        validComponents++;\r\n                        if (validComponents === 2) {\r\n                            sectionNames.push(trimmedComponent);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return sectionNames;\r\n    }\r\n\r\n    static checkTextForEndHeader(endHeaderTestText) {\r\n        if (endHeaderTestText.includes(PlyParserUtils.HeaderEndToken)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    static checkBufferForEndHeader(buffer, searchOfset, chunkSize, decoder) {\r\n        const endHeaderTestChunk = new Uint8Array(buffer, Math.max(0, searchOfset - chunkSize), chunkSize);\r\n        const endHeaderTestText = decoder.decode(endHeaderTestChunk);\r\n        return PlyParserUtils.checkTextForEndHeader(endHeaderTestText);\r\n    }\r\n\r\n    static extractHeaderFromBufferToText(plyBuffer) {\r\n        const decoder = new TextDecoder();\r\n        let headerOffset = 0;\r\n        let headerText = '';\r\n        const readChunkSize = 100;\r\n\r\n        while (true) {\r\n            if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\r\n                throw new Error('End of file reached while searching for end of header');\r\n            }\r\n            const headerChunk = new Uint8Array(plyBuffer, headerOffset, readChunkSize);\r\n            headerText += decoder.decode(headerChunk);\r\n            headerOffset += readChunkSize;\r\n\r\n            if (PlyParserUtils.checkBufferForEndHeader(plyBuffer, headerOffset, readChunkSize * 2, decoder)) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return headerText;\r\n    }\r\n\r\n    static readHeaderFromBuffer(plyBuffer) {\r\n        const decoder = new TextDecoder();\r\n        let headerOffset = 0;\r\n        let headerText = '';\r\n        const readChunkSize = 100;\r\n\r\n        while (true) {\r\n            if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\r\n                throw new Error('End of file reached while searching for end of header');\r\n            }\r\n            const headerChunk = new Uint8Array(plyBuffer, headerOffset, readChunkSize);\r\n            headerText += decoder.decode(headerChunk);\r\n            headerOffset += readChunkSize;\r\n\r\n            if (PlyParserUtils.checkBufferForEndHeader(plyBuffer, headerOffset, readChunkSize * 2, decoder)) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return headerText;\r\n    }\r\n\r\n    static convertHeaderTextToLines(headerText) {\r\n        const headerLines = headerText.split('\\n');\r\n        const prunedLines = [];\r\n        for (let i = 0; i < headerLines.length; i++) {\r\n            const line = headerLines[i].trim();\r\n            prunedLines.push(line);\r\n            if (line === PlyParserUtils.HeaderEndToken) {\r\n                break;\r\n            }\r\n        }\r\n        return prunedLines;\r\n    }\r\n\r\n    static determineHeaderFormatFromHeaderText(headertText) {\r\n        const headerLines = PlyParserUtils.convertHeaderTextToLines(headertText);\r\n        let format = PlyFormat.INRIAV1;\r\n        for (let i = 0; i < headerLines.length; i++) {\r\n            const line = headerLines[i].trim();\r\n            if (line.startsWith('element chunk') || line.match(/[A-Za-z]*packed_[A-Za-z]*/)) {\r\n                format = PlyFormat.PlayCanvasCompressed;\r\n            } else if (line.startsWith('element codebook_centers')) {\r\n                format = PlyFormat.INRIAV2;\r\n            } else if (line === PlyParserUtils.HeaderEndToken) {\r\n                break;\r\n            }\r\n        }\r\n        return format;\r\n    }\r\n\r\n    static determineHeaderFormatFromPlyBuffer(plyBuffer) {\r\n        const headertText = PlyParserUtils.extractHeaderFromBufferToText(plyBuffer);\r\n        return PlyParserUtils.determineHeaderFormatFromHeaderText(headertText);\r\n    }\r\n\r\n    static readVertex(vertexData, header, row, dataOffset, fieldsToRead, rawVertex, normalize = true) {\r\n        const offset = row * header.bytesPerVertex + dataOffset;\r\n        const fieldOffsets = header.fieldOffsets;\r\n        const fieldTypes = header.fieldTypes;\r\n        for (let fieldId of fieldsToRead) {\r\n            const fieldType = fieldTypes[fieldId];\r\n            if (fieldType === FieldSizeIdFloat) {\r\n                rawVertex[fieldId] = vertexData.getFloat32(offset + fieldOffsets[fieldId], true);\r\n            } else if (fieldType === FieldSizeIdShort) {\r\n                rawVertex[fieldId] = vertexData.getInt16(offset + fieldOffsets[fieldId], true);\r\n            } else if (fieldType === FieldSizeIdUShort) {\r\n                rawVertex[fieldId] = vertexData.getUint16(offset + fieldOffsets[fieldId], true);\r\n            } else if (fieldType === FieldSizeIdInt) {\r\n                rawVertex[fieldId] = vertexData.getInt32(offset + fieldOffsets[fieldId], true);\r\n            } else if (fieldType === FieldSizeIdUInt) {\r\n                rawVertex[fieldId] = vertexData.getUint32(offset + fieldOffsets[fieldId], true);\r\n            } else if (fieldType === FieldSizeIdUChar) {\r\n                if (normalize) {\r\n                    rawVertex[fieldId] = vertexData.getUint8(offset + fieldOffsets[fieldId]) / 255.0;\r\n                } else {\r\n                    rawVertex[fieldId] = vertexData.getUint8(offset + fieldOffsets[fieldId]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { clamp } from '../../Util.js';\r\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\r\nimport { SplatBuffer } from '../SplatBuffer.js';\r\nimport { PlyParserUtils } from './PlyParserUtils.js';\r\n\r\nconst BaseFieldNamesToRead = ['scale_0', 'scale_1', 'scale_2', 'rot_0', 'rot_1', 'rot_2', 'rot_3', 'x', 'y', 'z',\r\n                              'f_dc_0', 'f_dc_1', 'f_dc_2', 'opacity', 'red', 'green', 'blue', 'f_rest_0'];\r\n\r\nconst BaseFieldsToReadIndexes = BaseFieldNamesToRead.map((e, i) => i);\r\n\r\nconst [\r\n        SCALE_0, SCALE_1, SCALE_2, ROT_0, ROT_1, ROT_2, ROT_3, X, Y, Z, F_DC_0, F_DC_1, F_DC_2, OPACITY, RED, GREEN, BLUE, F_REST_0\r\n      ] = BaseFieldsToReadIndexes;\r\n\r\nexport class INRIAV1PlyParser {\r\n\r\n    static decodeHeaderLines(headerLines) {\r\n\r\n        let shLineCount = 0;\r\n        headerLines.forEach((line) => {\r\n            if (line.includes('f_rest_')) shLineCount++;\r\n        });\r\n\r\n        let shFieldsToReadCount = 0;\r\n        if (shLineCount >= 45) {\r\n            shFieldsToReadCount = 45;\r\n        } else if (shLineCount >= 24) {\r\n            shFieldsToReadCount = 24;\r\n        } else if (shLineCount >= 9) {\r\n            shFieldsToReadCount = 9;\r\n        }\r\n\r\n        const shFieldIndexesToMap = Array.from(Array(Math.max(shFieldsToReadCount - 1, 0)));\r\n        let shRemainingFieldNamesToRead = shFieldIndexesToMap.map((element, index) => `f_rest_${index + 1}`);\r\n\r\n        const fieldNamesToRead = [...BaseFieldNamesToRead, ...shRemainingFieldNamesToRead];\r\n        const fieldsToReadIndexes = fieldNamesToRead.map((e, i) => i);\r\n\r\n        const fieldNameIdMap = fieldsToReadIndexes.reduce((acc, element) => {\r\n            acc[fieldNamesToRead[element]] = element;\r\n            return acc;\r\n        }, {});\r\n        const header = PlyParserUtils.decodeSectionHeader(headerLines, fieldNameIdMap, 0);\r\n        header.splatCount = header.vertexCount;\r\n        header.bytesPerSplat = header.bytesPerVertex;\r\n        header.fieldsToReadIndexes = fieldsToReadIndexes;\r\n        return header;\r\n    }\r\n\r\n    static decodeHeaderText(headerText) {\r\n        const headerLines = PlyParserUtils.convertHeaderTextToLines(headerText);\r\n        const header = INRIAV1PlyParser.decodeHeaderLines(headerLines);\r\n        header.headerText = headerText;\r\n        header.headerSizeBytes = headerText.indexOf(PlyParserUtils.HeaderEndToken) + PlyParserUtils.HeaderEndToken.length + 1;\r\n        return header;\r\n    }\r\n\r\n    static decodeHeaderFromBuffer(plyBuffer) {\r\n        const headerText = PlyParserUtils.readHeaderFromBuffer(plyBuffer);\r\n        return INRIAV1PlyParser.decodeHeaderText(headerText);\r\n    }\r\n\r\n    static findSplatData(plyBuffer, header) {\r\n        return new DataView(plyBuffer, header.headerSizeBytes);\r\n    }\r\n\r\n    static parseToUncompressedSplatBufferSection(header, fromSplat, toSplat, splatData, splatDataOffset,\r\n                                                 toBuffer, toOffset, outSphericalHarmonicsDegree = 0) {\r\n        outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree);\r\n        const outBytesPerSplat = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[outSphericalHarmonicsDegree].BytesPerSplat;\r\n\r\n        for (let i = fromSplat; i <= toSplat; i++) {\r\n            const parsedSplat = INRIAV1PlyParser.parseToUncompressedSplat(splatData, i, header,\r\n                                                                          splatDataOffset, outSphericalHarmonicsDegree);\r\n            const outBase = i * outBytesPerSplat + toOffset;\r\n            SplatBuffer.writeSplatDataToSectionBuffer(parsedSplat, toBuffer, outBase, 0, outSphericalHarmonicsDegree);\r\n        }\r\n    }\r\n\r\n    static parseToUncompressedSplatArraySection(header, fromSplat, toSplat, splatData, splatDataOffset,\r\n                                         splatArray, outSphericalHarmonicsDegree = 0) {\r\n        outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree);\r\n        for (let i = fromSplat; i <= toSplat; i++) {\r\n            const parsedSplat = INRIAV1PlyParser.parseToUncompressedSplat(splatData, i, header,\r\n                                                                          splatDataOffset, outSphericalHarmonicsDegree);\r\n            splatArray.addSplat(parsedSplat);\r\n        }\r\n    }\r\n\r\n    static decodeSectionSplatData(sectionSplatData, splatCount, sectionHeader, outSphericalHarmonicsDegree, toSplatArray = true) {\r\n        outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, sectionHeader.sphericalHarmonicsDegree);\r\n        if (toSplatArray) {\r\n            const splatArray = new UncompressedSplatArray(outSphericalHarmonicsDegree);\r\n            for (let row = 0; row < splatCount; row++) {\r\n                const newSplat = INRIAV1PlyParser.parseToUncompressedSplat(sectionSplatData, row, sectionHeader,\r\n                                                                           0, outSphericalHarmonicsDegree);\r\n                splatArray.addSplat(newSplat);\r\n            }\r\n            return splatArray;\r\n        } else {\r\n            const {\r\n                splatBuffer,\r\n                splatBufferDataOffsetBytes\r\n              } = SplatBuffer.preallocateUncompressed(splatCount, outSphericalHarmonicsDegree);\r\n            INRIAV1PlyParser.parseToUncompressedSplatBufferSection(\r\n                sectionHeader, 0, splatCount - 1, sectionSplatData, 0,\r\n                splatBuffer.bufferData, splatBufferDataOffsetBytes, outSphericalHarmonicsDegree\r\n            );\r\n            return splatBuffer;\r\n        }\r\n    }\r\n\r\n    static parseToUncompressedSplat = function() {\r\n\r\n        let rawSplat = [];\r\n        const tempRotation = new THREE.Quaternion();\r\n\r\n        const OFFSET_X = UncompressedSplatArray.OFFSET.X;\r\n        const OFFSET_Y = UncompressedSplatArray.OFFSET.Y;\r\n        const OFFSET_Z = UncompressedSplatArray.OFFSET.Z;\r\n\r\n        const OFFSET_SCALE0 = UncompressedSplatArray.OFFSET.SCALE0;\r\n        const OFFSET_SCALE1 = UncompressedSplatArray.OFFSET.SCALE1;\r\n        const OFFSET_SCALE2 = UncompressedSplatArray.OFFSET.SCALE2;\r\n\r\n        const OFFSET_ROTATION0 = UncompressedSplatArray.OFFSET.ROTATION0;\r\n        const OFFSET_ROTATION1 = UncompressedSplatArray.OFFSET.ROTATION1;\r\n        const OFFSET_ROTATION2 = UncompressedSplatArray.OFFSET.ROTATION2;\r\n        const OFFSET_ROTATION3 = UncompressedSplatArray.OFFSET.ROTATION3;\r\n\r\n        const OFFSET_FDC0 = UncompressedSplatArray.OFFSET.FDC0;\r\n        const OFFSET_FDC1 = UncompressedSplatArray.OFFSET.FDC1;\r\n        const OFFSET_FDC2 = UncompressedSplatArray.OFFSET.FDC2;\r\n        const OFFSET_OPACITY = UncompressedSplatArray.OFFSET.OPACITY;\r\n\r\n        const OFFSET_FRC = [];\r\n\r\n        for (let i = 0; i < 45; i++) {\r\n            OFFSET_FRC[i] = UncompressedSplatArray.OFFSET.FRC0 + i;\r\n        }\r\n\r\n        return function(splatData, row, header, splatDataOffset = 0, outSphericalHarmonicsDegree = 0) {\r\n            outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree);\r\n            INRIAV1PlyParser.readSplat(splatData, header, row, splatDataOffset, rawSplat);\r\n            const newSplat = UncompressedSplatArray.createSplat(outSphericalHarmonicsDegree);\r\n            if (rawSplat[SCALE_0] !== undefined) {\r\n                newSplat[OFFSET_SCALE0] = Math.exp(rawSplat[SCALE_0]);\r\n                newSplat[OFFSET_SCALE1] = Math.exp(rawSplat[SCALE_1]);\r\n                newSplat[OFFSET_SCALE2] = Math.exp(rawSplat[SCALE_2]);\r\n            } else {\r\n                newSplat[OFFSET_SCALE0] = 0.01;\r\n                newSplat[OFFSET_SCALE1] = 0.01;\r\n                newSplat[OFFSET_SCALE2] = 0.01;\r\n            }\r\n\r\n            if (rawSplat[F_DC_0] !== undefined) {\r\n                const SH_C0 = 0.28209479177387814;\r\n                newSplat[OFFSET_FDC0] = (0.5 + SH_C0 * rawSplat[F_DC_0]) * 255;\r\n                newSplat[OFFSET_FDC1] = (0.5 + SH_C0 * rawSplat[F_DC_1]) * 255;\r\n                newSplat[OFFSET_FDC2] = (0.5 + SH_C0 * rawSplat[F_DC_2]) * 255;\r\n            } else if (rawSplat[RED] !== undefined) {\r\n                newSplat[OFFSET_FDC0] = rawSplat[RED] * 255;\r\n                newSplat[OFFSET_FDC1] = rawSplat[GREEN] * 255;\r\n                newSplat[OFFSET_FDC2] = rawSplat[BLUE] * 255;\r\n            } else {\r\n                newSplat[OFFSET_FDC0] = 0;\r\n                newSplat[OFFSET_FDC1] = 0;\r\n                newSplat[OFFSET_FDC2] = 0;\r\n            }\r\n\r\n            if (rawSplat[OPACITY] !== undefined) {\r\n                newSplat[OFFSET_OPACITY] = (1 / (1 + Math.exp(-rawSplat[OPACITY]))) * 255;\r\n            }\r\n\r\n            newSplat[OFFSET_FDC0] = clamp(Math.floor(newSplat[OFFSET_FDC0]), 0, 255);\r\n            newSplat[OFFSET_FDC1] = clamp(Math.floor(newSplat[OFFSET_FDC1]), 0, 255);\r\n            newSplat[OFFSET_FDC2] = clamp(Math.floor(newSplat[OFFSET_FDC2]), 0, 255);\r\n            newSplat[OFFSET_OPACITY] = clamp(Math.floor(newSplat[OFFSET_OPACITY]), 0, 255);\r\n\r\n            if (outSphericalHarmonicsDegree >= 1) {\r\n                if (rawSplat[F_REST_0] !== undefined) {\r\n                    for (let i = 0; i < 9; i++) {\r\n                        newSplat[OFFSET_FRC[i]] = rawSplat[header.sphericalHarmonicsDegree1Fields[i]];\r\n                    }\r\n                    if (outSphericalHarmonicsDegree >= 2) {\r\n                        for (let i = 0; i < 15; i++) {\r\n                            newSplat[OFFSET_FRC[9 + i]] = rawSplat[header.sphericalHarmonicsDegree2Fields[i]];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            tempRotation.set(rawSplat[ROT_0], rawSplat[ROT_1], rawSplat[ROT_2], rawSplat[ROT_3]);\r\n            tempRotation.normalize();\r\n\r\n            newSplat[OFFSET_ROTATION0] = tempRotation.x;\r\n            newSplat[OFFSET_ROTATION1] = tempRotation.y;\r\n            newSplat[OFFSET_ROTATION2] = tempRotation.z;\r\n            newSplat[OFFSET_ROTATION3] = tempRotation.w;\r\n\r\n            newSplat[OFFSET_X] = rawSplat[X];\r\n            newSplat[OFFSET_Y] = rawSplat[Y];\r\n            newSplat[OFFSET_Z] = rawSplat[Z];\r\n\r\n            return newSplat;\r\n        };\r\n\r\n    }();\r\n\r\n    static readSplat(splatData, header, row, dataOffset, rawSplat) {\r\n        return PlyParserUtils.readVertex(splatData, header, row, dataOffset, header.fieldsToReadIndexes, rawSplat, true);\r\n    }\r\n\r\n    static parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree = 0) {\r\n        const { header, splatCount, splatData } = separatePlyHeaderAndData(plyBuffer);\r\n        return INRIAV1PlyParser.decodeSectionSplatData(splatData, splatCount, header, outSphericalHarmonicsDegree, true);\r\n    }\r\n\r\n    static parseToUncompressedSplatBuffer(plyBuffer, outSphericalHarmonicsDegree = 0) {\r\n        const { header, splatCount, splatData } = separatePlyHeaderAndData(plyBuffer);\r\n        return INRIAV1PlyParser.decodeSectionSplatData(splatData, splatCount, header, outSphericalHarmonicsDegree, false);\r\n    }\r\n}\r\n\r\nfunction separatePlyHeaderAndData(plyBuffer) {\r\n    const header = INRIAV1PlyParser.decodeHeaderFromBuffer(plyBuffer);\r\n    const splatCount = header.splatCount;\r\n    const splatData = INRIAV1PlyParser.findSplatData(plyBuffer, header);\r\n    return {\r\n        header,\r\n        splatCount,\r\n        splatData\r\n    };\r\n}\r\n","import * as THREE from 'three';\r\nimport { PlyParserUtils } from './PlyParserUtils.js';\r\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\r\nimport { clamp } from '../../Util.js';\r\n\r\nconst CodeBookEntryNamesToRead = [\r\n    'features_dc', 'features_rest_0', 'features_rest_1', 'features_rest_2', 'features_rest_3', 'features_rest_4', 'features_rest_5',\r\n    'features_rest_6', 'features_rest_7', 'features_rest_8', 'features_rest_9', 'features_rest_10', 'features_rest_11', 'features_rest_12',\r\n    'features_rest_13', 'features_rest_14', 'opacity', 'scaling', 'rotation_re', 'rotation_im'\r\n];\r\nconst CodeBookEntriesToReadIndexes = CodeBookEntryNamesToRead.map((e, i) => i);\r\n\r\nconst [\r\n        CB_FEATURES_DC, CB_FEATURES_REST_0, CB_FEATURES_REST_3, CB_OPACITY, CB_SCALING, CB_ROTATION_RE, CB_ROTATION_IM\r\n      ] = [0, 1, 4, 16, 17, 18, 19];\r\n\r\nconst FieldNamesToRead = ['scale_0', 'scale_1', 'scale_2', 'rot_0', 'rot_1', 'rot_2', 'rot_3',\r\n                          'x', 'y', 'z', 'f_dc_0', 'f_dc_1', 'f_dc_2', 'opacity', 'red', 'green', 'blue',\r\n                          'f_rest_0', 'f_rest_1', 'f_rest_2', 'f_rest_3', 'f_rest_4', 'f_rest_5', 'f_rest_6', 'f_rest_7', 'f_rest_8',\r\n                          'f_rest_9', 'f_rest_10', 'f_rest_11', 'f_rest_12', 'f_rest_13', 'f_rest_14', 'f_rest_15', 'f_rest_16',\r\n                          'f_rest_17', 'f_rest_18', 'f_rest_19', 'f_rest_20', 'f_rest_21', 'f_rest_22', 'f_rest_23', 'f_rest_24',\r\n                          'f_rest_25', 'f_rest_26', 'f_rest_27', 'f_rest_28', 'f_rest_29', 'f_rest_30', 'f_rest_31', 'f_rest_32',\r\n                          'f_rest_33', 'f_rest_34', 'f_rest_35', 'f_rest_36', 'f_rest_37', 'f_rest_38', 'f_rest_39', 'f_rest_40',\r\n                          'f_rest_41', 'f_rest_42', 'f_rest_43', 'f_rest_44', 'f_rest_45'\r\n                         ];\r\nconst FieldsToReadIndexes = FieldNamesToRead.map((e, i) => i);\r\n\r\nconst [\r\n        PLY_SCALE_0, PLY_SCALE_1, PLY_SCALE_2, PLY_ROT_0, PLY_ROT_1, PLY_ROT_2, PLY_ROT_3, PLY_X, PLY_Y, PLY_Z,\r\n        PLY_F_DC_0, PLY_F_DC_1, PLY_F_DC_2, PLY_OPACITY,\r\n      ] = FieldsToReadIndexes;\r\n\r\nconst PLY_RED = PLY_F_DC_0;\r\nconst PLY_GREEN = PLY_F_DC_1;\r\nconst PLY_BLUE = PLY_F_DC_2;\r\n\r\nconst fromHalfFloat = (hf) =>{\r\n    const t = (31744 & hf) >> 10;\r\n    const a = 1023 & hf;\r\n    return (hf >> 15 ? -1 : 1)*(t ? t === 31 ? a ? NaN : 1/0 : Math.pow(2, t - 15) *( 1 + a / 1024) : a / 1024*6103515625e-14);\r\n};\r\n\r\nexport class INRIAV2PlyParser {\r\n\r\n    static decodeSectionHeadersFromHeaderLines(headerLines) {\r\n        const fieldNameIdMap = FieldsToReadIndexes.reduce((acc, element) => {\r\n            acc[FieldNamesToRead[element]] = element;\r\n            return acc;\r\n        }, {});\r\n\r\n        const codeBookEntriesToReadIdMap = CodeBookEntriesToReadIndexes.reduce((acc, element) => {\r\n            acc[CodeBookEntryNamesToRead[element]] = element;\r\n            return acc;\r\n        }, {});\r\n\r\n        const sectionNames = PlyParserUtils.getHeaderSectionNames(headerLines);\r\n        let codeBookSectionIndex;\r\n        for (let s = 0; s < sectionNames.length; s++) {\r\n            const sectionName = sectionNames[s];\r\n            if (sectionName === 'codebook_centers') {\r\n                codeBookSectionIndex = s;\r\n            }\r\n        }\r\n\r\n        let currentStartLine = 0;\r\n        let lastSectionFound = false;\r\n        const sectionHeaders = [];\r\n        let sectionIndex = 0;\r\n        while (!lastSectionFound) {\r\n            let sectionHeader;\r\n            if (sectionIndex === codeBookSectionIndex) {\r\n                sectionHeader = PlyParserUtils.decodeSectionHeader(headerLines, codeBookEntriesToReadIdMap, currentStartLine);\r\n            } else {\r\n                sectionHeader = PlyParserUtils.decodeSectionHeader(headerLines, fieldNameIdMap, currentStartLine);\r\n            }\r\n            lastSectionFound = sectionHeader.endOfHeader;\r\n            currentStartLine = sectionHeader.headerEndLine + 1;\r\n            if (!lastSectionFound) {\r\n                sectionHeader.splatCount = sectionHeader.vertexCount;\r\n                sectionHeader.bytesPerSplat = sectionHeader.bytesPerVertex;\r\n            }\r\n            sectionHeaders.push(sectionHeader);\r\n            sectionIndex++;\r\n        }\r\n        return sectionHeaders;\r\n    }\r\n\r\n    static decodeSectionHeadersFromHeaderText(headerText) {\r\n        const headerLines = PlyParserUtils.convertHeaderTextToLines(headerText);\r\n        return INRIAV2PlyParser.decodeSectionHeadersFromHeaderLines(headerLines);\r\n    }\r\n\r\n    static getSplatCountFromSectionHeaders(sectionHeaders) {\r\n        let splatCount = 0;\r\n        for (let sectionHeader of sectionHeaders) {\r\n            if (sectionHeader.sectionName !== 'codebook_centers') {\r\n                splatCount += sectionHeader.vertexCount;\r\n            }\r\n        }\r\n        return splatCount;\r\n    }\r\n\r\n    static decodeHeaderFromHeaderText(headerText) {\r\n        const headerSizeBytes = headerText.indexOf(PlyParserUtils.HeaderEndToken) + PlyParserUtils.HeaderEndToken.length + 1;\r\n        const sectionHeaders = INRIAV2PlyParser.decodeSectionHeadersFromHeaderText(headerText);\r\n        const splatCount = INRIAV2PlyParser.getSplatCountFromSectionHeaders(sectionHeaders);\r\n        return {\r\n            'headerSizeBytes': headerSizeBytes,\r\n            'sectionHeaders': sectionHeaders,\r\n            'splatCount': splatCount\r\n        };\r\n    }\r\n\r\n    static decodeHeaderFromBuffer(plyBuffer) {\r\n        const headerText = PlyParserUtils.readHeaderFromBuffer(plyBuffer);\r\n        return INRIAV2PlyParser.decodeHeaderFromHeaderText(headerText);\r\n    }\r\n\r\n    static findVertexData(plyBuffer, header, targetSection) {\r\n        let byteOffset = header.headerSizeBytes;\r\n        for (let s = 0; s < targetSection && s < header.sectionHeaders.length; s++) {\r\n            const sectionHeader = header.sectionHeaders[s];\r\n            byteOffset += sectionHeader.dataSizeBytes;\r\n        }\r\n        return new DataView(plyBuffer, byteOffset, header.sectionHeaders[targetSection].dataSizeBytes);\r\n    }\r\n\r\n    static decodeCodeBook(codeBookData, sectionHeader) {\r\n\r\n        const rawVertex = [];\r\n        const codeBook = [];\r\n        for (let row = 0; row < sectionHeader.vertexCount; row++) {\r\n            PlyParserUtils.readVertex(codeBookData, sectionHeader, row, 0, CodeBookEntriesToReadIndexes, rawVertex);\r\n            for (let index of CodeBookEntriesToReadIndexes) {\r\n                const codeBookElementOffset = CodeBookEntriesToReadIndexes[index];\r\n                let codeBookPage = codeBook[codeBookElementOffset];\r\n                if (!codeBookPage) {\r\n                    codeBook[codeBookElementOffset] = codeBookPage = [];\r\n                }\r\n                codeBookPage.push(rawVertex[index]);\r\n            }\r\n        }\r\n        for (let page = 0; page < codeBook.length; page++) {\r\n            const codeBookPage = codeBook[page];\r\n            const SH_C0 = 0.28209479177387814;\r\n            for (let i = 0; i < codeBookPage.length; i++) {\r\n               const baseValue = fromHalfFloat(codeBookPage[i]);\r\n                if (page === CB_OPACITY) {\r\n                    codeBookPage[i] = Math.round((1 / (1 + Math.exp(-baseValue))) * 255);\r\n                } else if (page === CB_FEATURES_DC) {\r\n                    codeBookPage[i] = Math.round((0.5 + SH_C0 * baseValue) * 255);\r\n                } else if (page === CB_SCALING) {\r\n                    codeBookPage[i] = Math.exp(baseValue);\r\n                } else {\r\n                    codeBookPage[i] = baseValue;\r\n                }\r\n            }\r\n        }\r\n        return codeBook;\r\n    }\r\n\r\n    static decodeSectionSplatData(sectionSplatData, splatCount, sectionHeader, codeBook, outSphericalHarmonicsDegree) {\r\n        outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, sectionHeader.sphericalHarmonicsDegree);\r\n        const splatArray = new UncompressedSplatArray(outSphericalHarmonicsDegree);\r\n        for (let row = 0; row < splatCount; row++) {\r\n            const newSplat = INRIAV2PlyParser.parseToUncompressedSplat(sectionSplatData, row, sectionHeader, codeBook,\r\n                                                                       0, outSphericalHarmonicsDegree);\r\n            splatArray.addSplat(newSplat);\r\n        }\r\n        return splatArray;\r\n    }\r\n\r\n    static parseToUncompressedSplat = function() {\r\n\r\n        let rawSplat = [];\r\n        const tempRotation = new THREE.Quaternion();\r\n\r\n        const OFFSET_X = UncompressedSplatArray.OFFSET.X;\r\n        const OFFSET_Y = UncompressedSplatArray.OFFSET.Y;\r\n        const OFFSET_Z = UncompressedSplatArray.OFFSET.Z;\r\n\r\n        const OFFSET_SCALE0 = UncompressedSplatArray.OFFSET.SCALE0;\r\n        const OFFSET_SCALE1 = UncompressedSplatArray.OFFSET.SCALE1;\r\n        const OFFSET_SCALE2 = UncompressedSplatArray.OFFSET.SCALE2;\r\n\r\n        const OFFSET_ROTATION0 = UncompressedSplatArray.OFFSET.ROTATION0;\r\n        const OFFSET_ROTATION1 = UncompressedSplatArray.OFFSET.ROTATION1;\r\n        const OFFSET_ROTATION2 = UncompressedSplatArray.OFFSET.ROTATION2;\r\n        const OFFSET_ROTATION3 = UncompressedSplatArray.OFFSET.ROTATION3;\r\n\r\n        const OFFSET_FDC0 = UncompressedSplatArray.OFFSET.FDC0;\r\n        const OFFSET_FDC1 = UncompressedSplatArray.OFFSET.FDC1;\r\n        const OFFSET_FDC2 = UncompressedSplatArray.OFFSET.FDC2;\r\n        const OFFSET_OPACITY = UncompressedSplatArray.OFFSET.OPACITY;\r\n\r\n        const OFFSET_FRC = [];\r\n\r\n        for (let i = 0; i < 45; i++) {\r\n            OFFSET_FRC[i] = UncompressedSplatArray.OFFSET.FRC0 + i;\r\n        }\r\n\r\n        return function(splatData, row, header, codeBook, splatDataOffset = 0, outSphericalHarmonicsDegree = 0) {\r\n            outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree);\r\n            INRIAV2PlyParser.readSplat(splatData, header, row, splatDataOffset, rawSplat);\r\n            const newSplat = UncompressedSplatArray.createSplat(outSphericalHarmonicsDegree);\r\n            if (rawSplat[PLY_SCALE_0] !== undefined) {\r\n                newSplat[OFFSET_SCALE0] = codeBook[CB_SCALING][rawSplat[PLY_SCALE_0]];\r\n                newSplat[OFFSET_SCALE1] = codeBook[CB_SCALING][rawSplat[PLY_SCALE_1]];\r\n                newSplat[OFFSET_SCALE2] = codeBook[CB_SCALING][rawSplat[PLY_SCALE_2]];\r\n            } else {\r\n                newSplat[OFFSET_SCALE0] = 0.01;\r\n                newSplat[OFFSET_SCALE1] = 0.01;\r\n                newSplat[OFFSET_SCALE2] = 0.01;\r\n            }\r\n\r\n            if (rawSplat[PLY_F_DC_0] !== undefined) {\r\n                newSplat[OFFSET_FDC0] = codeBook[CB_FEATURES_DC][rawSplat[PLY_F_DC_0]];\r\n                newSplat[OFFSET_FDC1] = codeBook[CB_FEATURES_DC][rawSplat[PLY_F_DC_1]];\r\n                newSplat[OFFSET_FDC2] = codeBook[CB_FEATURES_DC][rawSplat[PLY_F_DC_2]];\r\n            } else if (rawSplat[PLY_RED] !== undefined) {\r\n                newSplat[OFFSET_FDC0] = rawSplat[PLY_RED] * 255;\r\n                newSplat[OFFSET_FDC1] = rawSplat[PLY_GREEN] * 255;\r\n                newSplat[OFFSET_FDC2] = rawSplat[PLY_BLUE] * 255;\r\n            } else {\r\n                newSplat[OFFSET_FDC0] = 0;\r\n                newSplat[OFFSET_FDC1] = 0;\r\n                newSplat[OFFSET_FDC2] = 0;\r\n            }\r\n\r\n            if (rawSplat[PLY_OPACITY] !== undefined) {\r\n                newSplat[OFFSET_OPACITY] = codeBook[CB_OPACITY][rawSplat[PLY_OPACITY]];\r\n            }\r\n\r\n            newSplat[OFFSET_FDC0] = clamp(Math.floor(newSplat[OFFSET_FDC0]), 0, 255);\r\n            newSplat[OFFSET_FDC1] = clamp(Math.floor(newSplat[OFFSET_FDC1]), 0, 255);\r\n            newSplat[OFFSET_FDC2] = clamp(Math.floor(newSplat[OFFSET_FDC2]), 0, 255);\r\n            newSplat[OFFSET_OPACITY] = clamp(Math.floor(newSplat[OFFSET_OPACITY]), 0, 255);\r\n\r\n            if (outSphericalHarmonicsDegree >= 1 && header.sphericalHarmonicsDegree >= 1) {\r\n                for (let i = 0; i < 9; i++) {\r\n                    const codeBookPage = codeBook[CB_FEATURES_REST_0 + i % 3];\r\n                    newSplat[OFFSET_FRC[i]] = codeBookPage[rawSplat[header.sphericalHarmonicsDegree1Fields[i]]];\r\n                }\r\n                if (outSphericalHarmonicsDegree >= 2 && header.sphericalHarmonicsDegree >= 2) {\r\n                    for (let i = 0; i < 15; i++) {\r\n                        const codeBookPage = codeBook[CB_FEATURES_REST_3 + i % 5];\r\n                        newSplat[OFFSET_FRC[9 + i]] = codeBookPage[rawSplat[header.sphericalHarmonicsDegree2Fields[i]]];\r\n                    }\r\n                }\r\n            }\r\n\r\n            const rot0 = codeBook[CB_ROTATION_RE][rawSplat[PLY_ROT_0]];\r\n            const rot1 = codeBook[CB_ROTATION_IM][rawSplat[PLY_ROT_1]];\r\n            const rot2 = codeBook[CB_ROTATION_IM][rawSplat[PLY_ROT_2]];\r\n            const rot3 = codeBook[CB_ROTATION_IM][rawSplat[PLY_ROT_3]];\r\n            tempRotation.set(rot0, rot1, rot2, rot3);\r\n            tempRotation.normalize();\r\n\r\n            newSplat[OFFSET_ROTATION0] = tempRotation.x;\r\n            newSplat[OFFSET_ROTATION1] = tempRotation.y;\r\n            newSplat[OFFSET_ROTATION2] = tempRotation.z;\r\n            newSplat[OFFSET_ROTATION3] = tempRotation.w;\r\n\r\n            newSplat[OFFSET_X] = fromHalfFloat(rawSplat[PLY_X]);\r\n            newSplat[OFFSET_Y] = fromHalfFloat(rawSplat[PLY_Y]);\r\n            newSplat[OFFSET_Z] = fromHalfFloat(rawSplat[PLY_Z]);\r\n\r\n            return newSplat;\r\n        };\r\n\r\n    }();\r\n\r\n    static readSplat(splatData, header, row, dataOffset, rawSplat) {\r\n        return PlyParserUtils.readVertex(splatData, header, row, dataOffset, FieldsToReadIndexes, rawSplat, false);\r\n    }\r\n\r\n    static parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree = 0) {\r\n        const splatArrays = [];\r\n        const header = INRIAV2PlyParser.decodeHeaderFromBuffer(plyBuffer, outSphericalHarmonicsDegree);\r\n        let codeBook;\r\n\r\n        for (let s = 0; s < header.sectionHeaders.length; s++) {\r\n            const sectionHeader = header.sectionHeaders[s];\r\n            if (sectionHeader.sectionName === 'codebook_centers') {\r\n                const codeBookData = INRIAV2PlyParser.findVertexData(plyBuffer, header, s);\r\n                codeBook = INRIAV2PlyParser.decodeCodeBook(codeBookData, sectionHeader);\r\n            }\r\n        }\r\n        for (let s = 0; s < header.sectionHeaders.length; s++) {\r\n            const sectionHeader = header.sectionHeaders[s];\r\n            if (sectionHeader.sectionName !== 'codebook_centers') {\r\n                const splatCount = sectionHeader.vertexCount;\r\n                const vertexData = INRIAV2PlyParser.findVertexData(plyBuffer, header, s);\r\n                const splatArray = INRIAV2PlyParser.decodeSectionSplatData(vertexData, splatCount, sectionHeader,\r\n                                                               codeBook, outSphericalHarmonicsDegree);\r\n                splatArrays.push(splatArray);\r\n            }\r\n        }\r\n\r\n        const unified = new UncompressedSplatArray(outSphericalHarmonicsDegree);\r\n        for (let splatArray of splatArrays) {\r\n            for (let splat of splatArray.splats) {\r\n                unified.addSplat(splat);\r\n            }\r\n        }\r\n\r\n        return unified;\r\n    }\r\n}\r\n","import { PlayCanvasCompressedPlyParser } from './PlayCanvasCompressedPlyParser.js';\r\nimport { INRIAV1PlyParser } from './INRIAV1PlyParser.js';\r\nimport { INRIAV2PlyParser } from './INRIAV2PlyParser.js';\r\nimport { PlyParserUtils } from './PlyParserUtils.js';\r\nimport { PlyFormat } from './PlyFormat.js';\r\n\r\nexport class PlyParser {\r\n\r\n    static parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree = 0) {\r\n        const plyFormat = PlyParserUtils.determineHeaderFormatFromPlyBuffer(plyBuffer);\r\n        if (plyFormat === PlyFormat.PlayCanvasCompressed) {\r\n            return PlayCanvasCompressedPlyParser.parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree);\r\n        } else if (plyFormat === PlyFormat.INRIAV1) {\r\n            return INRIAV1PlyParser.parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree);\r\n        } else if (plyFormat === PlyFormat.INRIAV2) {\r\n            return INRIAV2PlyParser.parseToUncompressedSplatArray(plyBuffer, outSphericalHarmonicsDegree);\r\n        }\r\n    }\r\n\r\n    static parseToUncompressedSplatBuffer(plyBuffer, outSphericalHarmonicsDegree = 0) {\r\n        const plyFormat = PlyParserUtils.determineHeaderFormatFromPlyBuffer(plyBuffer);\r\n        if (plyFormat === PlyFormat.PlayCanvasCompressed) {\r\n            return PlayCanvasCompressedPlyParser.parseToUncompressedSplatBuffer(plyBuffer, outSphericalHarmonicsDegree);\r\n        } else if (plyFormat === PlyFormat.INRIAV1) {\r\n            return INRIAV1PlyParser.parseToUncompressedSplatBuffer(plyBuffer, outSphericalHarmonicsDegree);\r\n        } else if (plyFormat === PlyFormat.INRIAV2) {\r\n             // TODO: Implement!\r\n            throw new Error('parseToUncompressedSplatBuffer() is not implemented for INRIA V2 PLY files');\r\n        }\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\r\nimport { SplatBuffer } from './SplatBuffer.js';\r\n\r\nexport class SplatPartitioner {\r\n\r\n    constructor(sectionCount, sectionFilters, groupingParameters, partitionGenerator) {\r\n        this.sectionCount = sectionCount;\r\n        this.sectionFilters = sectionFilters;\r\n        this.groupingParameters = groupingParameters;\r\n        this.partitionGenerator = partitionGenerator;\r\n    }\r\n\r\n    partitionUncompressedSplatArray(splatArray) {\r\n        let groupingParameters;\r\n        let sectionCount;\r\n        let sectionFilters;\r\n        if (this.partitionGenerator) {\r\n            const results = this.partitionGenerator(splatArray);\r\n            groupingParameters = results.groupingParameters;\r\n            sectionCount = results.sectionCount;\r\n            sectionFilters = results.sectionFilters;\r\n        } else {\r\n            groupingParameters = this.groupingParameters;\r\n            sectionCount = this.sectionCount;\r\n            sectionFilters = this.sectionFilters;\r\n        }\r\n\r\n        const newArrays = [];\r\n        for (let s = 0; s < sectionCount; s++) {\r\n            const sectionSplats = new UncompressedSplatArray(splatArray.sphericalHarmonicsDegree);\r\n            const sectionFilter = sectionFilters[s];\r\n            for (let i = 0; i < splatArray.splatCount; i++) {\r\n                if (sectionFilter(i)) {\r\n                    sectionSplats.addSplat(splatArray.splats[i]);\r\n                }\r\n            }\r\n            newArrays.push(sectionSplats);\r\n        }\r\n        return {\r\n            splatArrays: newArrays,\r\n            parameters: groupingParameters\r\n        };\r\n    }\r\n\r\n    static getStandardPartitioner(partitionSize = 0, sceneCenter = new THREE.Vector3(),\r\n                                  blockSize = SplatBuffer.BucketBlockSize, bucketSize = SplatBuffer.BucketSize) {\r\n\r\n        const partitionGenerator = (splatArray) => {\r\n\r\n            const OFFSET_X = UncompressedSplatArray.OFFSET.X;\r\n            const OFFSET_Y = UncompressedSplatArray.OFFSET.Y;\r\n            const OFFSET_Z = UncompressedSplatArray.OFFSET.Z;\r\n\r\n            if (partitionSize <= 0) partitionSize = splatArray.splatCount;\r\n\r\n            const center = new THREE.Vector3();\r\n            const clampDistance = 0.5;\r\n            const clampPoint = (point) => {\r\n                point.x = Math.floor(point.x / clampDistance) * clampDistance;\r\n                point.y = Math.floor(point.y / clampDistance) * clampDistance;\r\n                point.z = Math.floor(point.z / clampDistance) * clampDistance;\r\n            };\r\n            splatArray.splats.forEach((splat) => {\r\n                center.set(splat[OFFSET_X], splat[OFFSET_Y], splat[OFFSET_Z]).sub(sceneCenter);\r\n                clampPoint(center);\r\n                splat.centerDist = center.lengthSq();\r\n            });\r\n            splatArray.splats.sort((a, b) => {\r\n                let centerADist = a.centerDist;\r\n                let centerBDist = b.centerDist;\r\n                if (centerADist > centerBDist) return 1;\r\n                else return -1;\r\n            });\r\n\r\n            const sectionFilters = [];\r\n            const groupingParameters = [];\r\n            partitionSize = Math.min(splatArray.splatCount, partitionSize);\r\n            const patitionCount = Math.ceil(splatArray.splatCount / partitionSize);\r\n            let currentStartSplat = 0;\r\n            for (let i = 0; i < patitionCount; i ++) {\r\n                let startSplat = currentStartSplat;\r\n                sectionFilters.push((splatIndex) => {\r\n                    return splatIndex >= startSplat && splatIndex < startSplat + partitionSize;\r\n                });\r\n                groupingParameters.push({\r\n                    'blocksSize': blockSize,\r\n                    'bucketSize': bucketSize,\r\n                });\r\n                currentStartSplat += partitionSize;\r\n            }\r\n            return {\r\n                'sectionCount': sectionFilters.length,\r\n                sectionFilters,\r\n                groupingParameters\r\n            };\r\n        };\r\n        return new SplatPartitioner(undefined, undefined, undefined, partitionGenerator);\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { SplatPartitioner } from './SplatPartitioner.js';\r\nimport { SplatBuffer } from './SplatBuffer.js';\r\n\r\nexport class SplatBufferGenerator {\r\n\r\n    constructor(splatPartitioner, alphaRemovalThreshold, compressionLevel, sectionSize, sceneCenter, blockSize, bucketSize) {\r\n        this.splatPartitioner = splatPartitioner;\r\n        this.alphaRemovalThreshold = alphaRemovalThreshold;\r\n        this.compressionLevel = compressionLevel;\r\n        this.sectionSize = sectionSize;\r\n        this.sceneCenter = sceneCenter ? new THREE.Vector3().copy(sceneCenter) : undefined;\r\n        this.blockSize = blockSize;\r\n        this.bucketSize = bucketSize;\r\n    }\r\n\r\n    generateFromUncompressedSplatArray(splatArray) {\r\n        const partitionResults = this.splatPartitioner.partitionUncompressedSplatArray(splatArray);\r\n        return SplatBuffer.generateFromUncompressedSplatArrays(partitionResults.splatArrays,\r\n                                                               this.alphaRemovalThreshold, this.compressionLevel,\r\n                                                               this.sceneCenter, this.blockSize, this.bucketSize,\r\n                                                               partitionResults.parameters);\r\n    }\r\n\r\n    static getStandardGenerator(alphaRemovalThreshold = 1, compressionLevel = 1, sectionSize = 0, sceneCenter = new THREE.Vector3(),\r\n                                blockSize = SplatBuffer.BucketBlockSize, bucketSize = SplatBuffer.BucketSize) {\r\n        const splatPartitioner = SplatPartitioner.getStandardPartitioner(sectionSize, sceneCenter, blockSize, bucketSize);\r\n        return new SplatBufferGenerator(splatPartitioner, alphaRemovalThreshold, compressionLevel,\r\n                                        sectionSize, sceneCenter, blockSize, bucketSize);\r\n    }\r\n}\r\n","export const LoaderStatus = {\r\n    'Downloading': 0,\r\n    'Processing': 1,\r\n    'Done': 2\r\n};\r\n","export class DirectLoadError extends Error {\r\n\r\n    constructor(msg) {\r\n        super(msg);\r\n    }\r\n\r\n}\r\n","export const InternalLoadType = {\r\n    ProgressiveToSplatBuffer: 0,\r\n    ProgressiveToSplatArray: 1,\r\n    DownloadBeforeProcessing: 2\r\n};\r\n","import * as THREE from 'three';\r\nimport { PlyParser } from './PlyParser.js';\r\nimport { PlyParserUtils } from './PlyParserUtils.js';\r\nimport { INRIAV1PlyParser } from './INRIAV1PlyParser.js';\r\nimport { PlayCanvasCompressedPlyParser } from './PlayCanvasCompressedPlyParser.js';\r\nimport { PlyFormat } from './PlyFormat.js';\r\nimport { fetchWithProgress, delayedExecute, nativePromiseWithExtractedComponents } from '../../Util.js';\r\nimport { SplatBuffer } from '../SplatBuffer.js';\r\nimport { SplatBufferGenerator } from '../SplatBufferGenerator.js';\r\nimport { LoaderStatus } from '../LoaderStatus.js';\r\nimport { DirectLoadError } from '../DirectLoadError.js';\r\nimport { Constants } from '../../Constants.js';\r\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\r\nimport { InternalLoadType } from '../InternalLoadType.js';\r\n\r\nfunction storeChunksInBuffer(chunks, buffer) {\r\n    let inBytes = 0;\r\n    for (let chunk of chunks) inBytes += chunk.sizeBytes;\r\n\r\n    if (!buffer || buffer.byteLength < inBytes) {\r\n        buffer = new ArrayBuffer(inBytes);\r\n    }\r\n\r\n    let offset = 0;\r\n    for (let chunk of chunks) {\r\n        new Uint8Array(buffer, offset, chunk.sizeBytes).set(chunk.data);\r\n        offset += chunk.sizeBytes;\r\n    }\r\n\r\n    return buffer;\r\n}\r\n\r\nfunction finalize(splatData, optimizeSplatData, minimumAlpha, compressionLevel, sectionSize, sceneCenter, blockSize, bucketSize) {\r\n    if (optimizeSplatData) {\r\n        const splatBufferGenerator = SplatBufferGenerator.getStandardGenerator(minimumAlpha, compressionLevel,\r\n                                                                               sectionSize, sceneCenter,\r\n                                                                               blockSize, bucketSize);\r\n        return splatBufferGenerator.generateFromUncompressedSplatArray(splatData);\r\n    } else {\r\n        return SplatBuffer.generateFromUncompressedSplatArrays([splatData], minimumAlpha, 0, new THREE.Vector3());\r\n    }\r\n}\r\n\r\nexport class PlyLoader {\r\n\r\n    static loadFromURL(fileName, onProgress, progressiveLoadToSplatBuffer, onProgressiveLoadSectionProgress,\r\n                       minimumAlpha, compressionLevel, optimizeSplatData = true, outSphericalHarmonicsDegree = 0,\r\n                       headers, sectionSize, sceneCenter, blockSize, bucketSize) {\r\n\r\n        let internalLoadType;\r\n        if (!progressiveLoadToSplatBuffer && !optimizeSplatData) {\r\n            internalLoadType = InternalLoadType.DownloadBeforeProcessing;\r\n        } else {\r\n            if (optimizeSplatData) internalLoadType = InternalLoadType.ProgressiveToSplatArray;\r\n            else internalLoadType = InternalLoadType.ProgressiveToSplatBuffer;\r\n        }\r\n\r\n        const directLoadSectionSizeBytes = Constants.ProgressiveLoadSectionSize;\r\n        const splatBufferDataOffsetBytes = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes;\r\n        const sectionCount = 1;\r\n\r\n        let plyFormat;\r\n        let directLoadBufferIn;\r\n        let directLoadBufferOut;\r\n        let directLoadSplatBuffer;\r\n        let compressedPlyHeaderChunksBuffer;\r\n        let maxSplatCount = 0;\r\n        let processedBaseSplatCount = 0;\r\n        let processedSphericalHarmonicsSplatCount = 0;\r\n\r\n        let headerLoaded = false;\r\n        let readyToLoadSplatData = false;\r\n        let baseSplatDataLoaded = false;\r\n\r\n        const loadPromise = nativePromiseWithExtractedComponents();\r\n\r\n        let numBytesStreamed = 0;\r\n        let numBytesParsed = 0;\r\n        let numBytesDownloaded = 0;\r\n        let endOfBaseSplatDataBytes = 0;\r\n        let headerText = '';\r\n        let header = null;\r\n        let chunks = [];\r\n\r\n        let standardLoadUncompressedSplatArray;\r\n\r\n        const textDecoder = new TextDecoder();\r\n\r\n        const localOnProgress = (percent, percentLabel, chunkData) => {\r\n            const loadComplete = percent >= 100;\r\n\r\n            if (chunkData) {\r\n                chunks.push({\r\n                    'data': chunkData,\r\n                    'sizeBytes': chunkData.byteLength,\r\n                    'startBytes': numBytesDownloaded,\r\n                    'endBytes': numBytesDownloaded + chunkData.byteLength\r\n                });\r\n                numBytesDownloaded += chunkData.byteLength;\r\n            }\r\n\r\n            if (internalLoadType === InternalLoadType.DownloadBeforeProcessing) {\r\n                if (loadComplete) {\r\n                    loadPromise.resolve(chunks);\r\n                }\r\n            } else {\r\n                if (!headerLoaded) {\r\n                    headerText += textDecoder.decode(chunkData);\r\n                    if (PlyParserUtils.checkTextForEndHeader(headerText)) {\r\n                        plyFormat = PlyParserUtils.determineHeaderFormatFromHeaderText(headerText);\r\n                        if (plyFormat === PlyFormat.INRIAV1) {\r\n                            header = INRIAV1PlyParser.decodeHeaderText(headerText);\r\n                            outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree);\r\n                            maxSplatCount = header.splatCount;\r\n                            readyToLoadSplatData = true;\r\n                            endOfBaseSplatDataBytes = header.headerSizeBytes + header.bytesPerSplat * maxSplatCount;\r\n                        } else if (plyFormat === PlyFormat.PlayCanvasCompressed) {\r\n                            header = PlayCanvasCompressedPlyParser.decodeHeaderText(headerText);\r\n                            outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree);\r\n                            if (internalLoadType === InternalLoadType.ProgressiveToSplatBuffer && outSphericalHarmonicsDegree > 0) {\r\n                                throw new DirectLoadError(\r\n                                    'PlyLoader.loadFromURL() -> Selected PLY format has spherical ' +\r\n                                    'harmonics data that cannot be progressively loaded.'\r\n                                );\r\n                            }\r\n                            maxSplatCount = header.vertexElement.count;\r\n                            endOfBaseSplatDataBytes = header.headerSizeBytes + header.bytesPerSplat * maxSplatCount +\r\n                                                      header.chunkElement.storageSizeBytes;\r\n                        } else {\r\n                            if (internalLoadType === InternalLoadType.ProgressiveToSplatBuffer) {\r\n                                throw new DirectLoadError(\r\n                                    'PlyLoader.loadFromURL() -> Selected PLY format cannot be progressively loaded.'\r\n                                );\r\n                            } else {\r\n                                internalLoadType = InternalLoadType.DownloadBeforeProcessing;\r\n                                return;\r\n                            }\r\n                        }\r\n\r\n                        if (internalLoadType === InternalLoadType.ProgressiveToSplatBuffer) {\r\n                            const shDescriptor = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[outSphericalHarmonicsDegree];\r\n                            const splatBufferSizeBytes = splatBufferDataOffsetBytes + shDescriptor.BytesPerSplat * maxSplatCount;\r\n                            directLoadBufferOut = new ArrayBuffer(splatBufferSizeBytes);\r\n                            SplatBuffer.writeHeaderToBuffer({\r\n                                versionMajor: SplatBuffer.CurrentMajorVersion,\r\n                                versionMinor: SplatBuffer.CurrentMinorVersion,\r\n                                maxSectionCount: sectionCount,\r\n                                sectionCount: sectionCount,\r\n                                maxSplatCount: maxSplatCount,\r\n                                splatCount: 0,\r\n                                compressionLevel: 0,\r\n                                sceneCenter: new THREE.Vector3()\r\n                            }, directLoadBufferOut);\r\n                        } else {\r\n                            standardLoadUncompressedSplatArray = new UncompressedSplatArray(outSphericalHarmonicsDegree);\r\n                        }\r\n\r\n                        numBytesStreamed = header.headerSizeBytes;\r\n                        numBytesParsed = header.headerSizeBytes;\r\n                        headerLoaded = true;\r\n                    }\r\n                } else if (plyFormat === PlyFormat.PlayCanvasCompressed && !readyToLoadSplatData) {\r\n                    const sizeRequiredForHeaderAndChunks = header.headerSizeBytes + header.chunkElement.storageSizeBytes;\r\n                    compressedPlyHeaderChunksBuffer = storeChunksInBuffer(chunks, compressedPlyHeaderChunksBuffer);\r\n                    if (compressedPlyHeaderChunksBuffer.byteLength >= sizeRequiredForHeaderAndChunks) {\r\n                        PlayCanvasCompressedPlyParser.readElementData(header.chunkElement, compressedPlyHeaderChunksBuffer,\r\n                                                                      header.headerSizeBytes);\r\n                        numBytesStreamed = sizeRequiredForHeaderAndChunks;\r\n                        numBytesParsed = sizeRequiredForHeaderAndChunks;\r\n                        readyToLoadSplatData = true;\r\n                    }\r\n                }\r\n\r\n                if (headerLoaded && readyToLoadSplatData && chunks.length > 0) {\r\n\r\n                    directLoadBufferIn = storeChunksInBuffer(chunks, directLoadBufferIn);\r\n\r\n                    const bytesLoadedSinceLastStreamedSection = numBytesDownloaded - numBytesStreamed;\r\n                    if (bytesLoadedSinceLastStreamedSection > directLoadSectionSizeBytes ||\r\n                        (numBytesDownloaded >= endOfBaseSplatDataBytes && !baseSplatDataLoaded) ||\r\n                        loadComplete) {\r\n                        const bytesPerSplat = baseSplatDataLoaded ? header.sphericalHarmonicsPerSplat : header.bytesPerSplat;\r\n                        const endOfBytesToProcess = baseSplatDataLoaded ? numBytesDownloaded :\r\n                                                    Math.min(endOfBaseSplatDataBytes, numBytesDownloaded);\r\n                        const numBytesToProcess = endOfBytesToProcess - numBytesParsed;\r\n                        const addedSplatCount = Math.floor(numBytesToProcess / bytesPerSplat);\r\n                        const numBytesToParse = addedSplatCount * bytesPerSplat;\r\n                        const numBytesLeftOver = numBytesDownloaded - numBytesParsed - numBytesToParse;\r\n                        const parsedDataViewOffset = numBytesParsed - chunks[0].startBytes;\r\n                        const dataToParse = new DataView(directLoadBufferIn, parsedDataViewOffset, numBytesToParse);\r\n\r\n                        if (!baseSplatDataLoaded) {\r\n                            if (internalLoadType === InternalLoadType.ProgressiveToSplatBuffer) {\r\n                                const shDesc = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[outSphericalHarmonicsDegree];\r\n                                const outOffset = processedBaseSplatCount * shDesc.BytesPerSplat + splatBufferDataOffsetBytes;\r\n                                if (plyFormat === PlyFormat.PlayCanvasCompressed) {\r\n                                    PlayCanvasCompressedPlyParser.parseToUncompressedSplatBufferSection(\r\n                                        header.chunkElement, header.vertexElement, 0, addedSplatCount - 1,\r\n                                        processedBaseSplatCount, dataToParse, directLoadBufferOut, outOffset\r\n                                    );\r\n                                } else {\r\n                                    INRIAV1PlyParser.parseToUncompressedSplatBufferSection(\r\n                                        header, 0, addedSplatCount - 1, dataToParse, 0,\r\n                                        directLoadBufferOut, outOffset, outSphericalHarmonicsDegree\r\n                                    );\r\n                                }\r\n                            } else {\r\n                                if (plyFormat === PlyFormat.PlayCanvasCompressed) {\r\n                                    PlayCanvasCompressedPlyParser.parseToUncompressedSplatArraySection(\r\n                                        header.chunkElement, header.vertexElement, 0, addedSplatCount - 1,\r\n                                        processedBaseSplatCount, dataToParse, standardLoadUncompressedSplatArray\r\n                                    );\r\n                                } else {\r\n                                    INRIAV1PlyParser.parseToUncompressedSplatArraySection(\r\n                                        header, 0, addedSplatCount - 1, dataToParse, 0,\r\n                                        standardLoadUncompressedSplatArray, outSphericalHarmonicsDegree\r\n                                    );\r\n                                }\r\n                            }\r\n\r\n                            processedBaseSplatCount += addedSplatCount;\r\n\r\n                            if (internalLoadType === InternalLoadType.ProgressiveToSplatBuffer) {\r\n                                if (!directLoadSplatBuffer) {\r\n                                    SplatBuffer.writeSectionHeaderToBuffer({\r\n                                        maxSplatCount: maxSplatCount,\r\n                                        splatCount: processedBaseSplatCount,\r\n                                        bucketSize: 0,\r\n                                        bucketCount: 0,\r\n                                        bucketBlockSize: 0,\r\n                                        compressionScaleRange: 0,\r\n                                        storageSizeBytes: 0,\r\n                                        fullBucketCount: 0,\r\n                                        partiallyFilledBucketCount: 0,\r\n                                        sphericalHarmonicsDegree: outSphericalHarmonicsDegree\r\n                                    }, 0, directLoadBufferOut, SplatBuffer.HeaderSizeBytes);\r\n                                    directLoadSplatBuffer = new SplatBuffer(directLoadBufferOut, false);\r\n                                }\r\n                                directLoadSplatBuffer.updateLoadedCounts(1, processedBaseSplatCount);\r\n                            }\r\n                            if (numBytesDownloaded >= endOfBaseSplatDataBytes) {\r\n                                baseSplatDataLoaded = true;\r\n                            }\r\n                        } else {\r\n                            if (plyFormat === PlyFormat.PlayCanvasCompressed) {\r\n                                if (internalLoadType === InternalLoadType.ProgressiveToSplatArray) {\r\n                                    PlayCanvasCompressedPlyParser.parseSphericalHarmonicsToUncompressedSplatArraySection(\r\n                                        header.chunkElement, header.shElement, processedSphericalHarmonicsSplatCount,\r\n                                        processedSphericalHarmonicsSplatCount + addedSplatCount - 1,\r\n                                        dataToParse, 0, outSphericalHarmonicsDegree, header.sphericalHarmonicsDegree,\r\n                                        standardLoadUncompressedSplatArray\r\n                                    );\r\n                                    processedSphericalHarmonicsSplatCount += addedSplatCount;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        if (numBytesLeftOver === 0) {\r\n                            chunks = [];\r\n                        } else {\r\n                            let keepChunks = [];\r\n                            let keepSize = 0;\r\n                            for (let i = chunks.length - 1; i >= 0; i--) {\r\n                                const chunk = chunks[i];\r\n                                keepSize += chunk.sizeBytes;\r\n                                keepChunks.unshift(chunk);\r\n                                if (keepSize >= numBytesLeftOver) break;\r\n                            }\r\n                            chunks = keepChunks;\r\n                        }\r\n\r\n                        numBytesStreamed += directLoadSectionSizeBytes;\r\n                        numBytesParsed += numBytesToParse;\r\n                    }\r\n                }\r\n\r\n                if (onProgressiveLoadSectionProgress && directLoadSplatBuffer) {\r\n                    onProgressiveLoadSectionProgress(directLoadSplatBuffer, loadComplete);\r\n                }\r\n\r\n                if (loadComplete) {\r\n                    if (internalLoadType === InternalLoadType.ProgressiveToSplatBuffer) {\r\n                        loadPromise.resolve(directLoadSplatBuffer);\r\n                    } else {\r\n                        loadPromise.resolve(standardLoadUncompressedSplatArray);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (onProgress) onProgress(percent, percentLabel, LoaderStatus.Downloading);\r\n        };\r\n\r\n        if (onProgress) onProgress(0, '0%', LoaderStatus.Downloading);\r\n        return fetchWithProgress(fileName, localOnProgress, false, headers).then(() => {\r\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\r\n            return loadPromise.promise.then((splatData) => {\r\n                if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\r\n                if (internalLoadType === InternalLoadType.DownloadBeforeProcessing) {\r\n                    const chunkDatas = chunks.map((chunk) => chunk.data);\r\n                    return new Blob(chunkDatas).arrayBuffer().then((plyFileData) => {\r\n                        return PlyLoader.loadFromFileData(plyFileData, minimumAlpha, compressionLevel, optimizeSplatData,\r\n                                                          outSphericalHarmonicsDegree, sectionSize, sceneCenter, blockSize, bucketSize);\r\n                    });\r\n                } else if (internalLoadType === InternalLoadType.ProgressiveToSplatBuffer) {\r\n                    return splatData;\r\n                } else {\r\n                    return delayedExecute(() => {\r\n                        return finalize(splatData, optimizeSplatData, minimumAlpha, compressionLevel,\r\n                                        sectionSize, sceneCenter, blockSize, bucketSize);\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    static loadFromFileData(plyFileData, minimumAlpha, compressionLevel, optimizeSplatData, outSphericalHarmonicsDegree = 0,\r\n                            sectionSize, sceneCenter, blockSize, bucketSize) {\r\n        if (optimizeSplatData) {\r\n            return delayedExecute(() => {\r\n                return PlyParser.parseToUncompressedSplatArray(plyFileData, outSphericalHarmonicsDegree);\r\n            })\r\n            .then((splatArray) => {\r\n                return finalize(splatArray, optimizeSplatData, minimumAlpha, compressionLevel,\r\n                                sectionSize, sceneCenter, blockSize, bucketSize);\r\n            });\r\n        } else {\r\n            return delayedExecute(() => {\r\n                return PlyParser.parseToUncompressedSplatBuffer(plyFileData, outSphericalHarmonicsDegree);\r\n            });\r\n        }\r\n    }\r\n}\r\n","const createStream = (data)=> {\r\n    return new ReadableStream({\r\n        async start(controller) {\r\n            controller.enqueue(data);\r\n            controller.close();\r\n        },\r\n    });\r\n};\r\n\r\nexport async function decompressGzipped(data) {\r\n    try {\r\n        const stream = createStream(data);\r\n        if (!stream) throw new Error('Failed to create stream from data');\r\n\r\n        return await decompressGzipStream(stream);\r\n    } catch (error) {\r\n        console.error('Error decompressing gzipped data:', error);\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport async function decompressGzipStream(stream) {\r\n    const decompressedStream = stream.pipeThrough(new DecompressionStream('gzip'));\r\n    const response = new Response(decompressedStream);\r\n    const buffer = await response.arrayBuffer();\r\n\r\n    return new Uint8Array(buffer);\r\n}\r\n\r\nexport async function compressGzipped(data) {\r\n    try {\r\n        const stream = createStream(data);\r\n        const compressedStream = stream.pipeThrough(new CompressionStream('gzip'));\r\n        const response = new Response(compressedStream);\r\n        const buffer = await response.arrayBuffer();\r\n\r\n        return new Uint8Array(buffer);\r\n    } catch (error) {\r\n        console.error('Error compressing gzipped data:', error);\r\n        throw error;\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { fetchWithProgress, delayedExecute } from '../../Util.js';\r\nimport { SplatBuffer } from '../SplatBuffer.js';\r\nimport { SplatBufferGenerator } from '../SplatBufferGenerator.js';\r\nimport { LoaderStatus } from '../LoaderStatus.js';\r\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\r\nimport { decompressGzipped } from '../Compression.js';\r\nimport { clamp } from '../../Util.js';\r\n\r\nconst SPZ_MAGIC = 1347635022;\r\nconst FLAG_ANTIALIASED = 1;\r\nconst COLOR_SCALE = 0.15;\r\n\r\nfunction halfToFloat(h) {\r\n    const sgn = (h >> 15) & 0x1;\r\n    const exponent = (h >> 10) & 0x1f;\r\n    const mantissa = h & 0x3ff;\r\n\r\n    const signMul = sgn === 1 ? -1.0 : 1.0;\r\n    if (exponent === 0) {\r\n        return signMul * Math.pow(2, -14) * mantissa / 1024;\r\n    }\r\n\r\n    if (exponent === 31) {\r\n        return mantissa !== 0 ? NaN : signMul * Infinity;\r\n    }\r\n\r\n    return signMul * Math.pow(2, exponent - 15) * (1 + mantissa / 1024);\r\n}\r\n\r\nfunction unquantizeSH(x) {\r\n    return (x - 128.0) / 128.0;\r\n}\r\n\r\nfunction dimForDegree(degree) {\r\n    switch (degree) {\r\n        case 0: return 0;\r\n        case 1: return 3;\r\n        case 2: return 8;\r\n        case 3: return 15;\r\n        default:\r\n            console.error(`[SPZ: ERROR] Unsupported SH degree: ${degree}`);\r\n            return 0;\r\n    }\r\n}\r\n\r\nconst unpackedSplatToUncompressedSplat = function() {\r\n\r\n    let rawSplat = [];\r\n    const tempRotation = new THREE.Quaternion();\r\n\r\n    const OFFSET_X = UncompressedSplatArray.OFFSET.X;\r\n    const OFFSET_Y = UncompressedSplatArray.OFFSET.Y;\r\n    const OFFSET_Z = UncompressedSplatArray.OFFSET.Z;\r\n\r\n    const OFFSET_SCALE0 = UncompressedSplatArray.OFFSET.SCALE0;\r\n    const OFFSET_SCALE1 = UncompressedSplatArray.OFFSET.SCALE1;\r\n    const OFFSET_SCALE2 = UncompressedSplatArray.OFFSET.SCALE2;\r\n\r\n    const OFFSET_ROTATION0 = UncompressedSplatArray.OFFSET.ROTATION0;\r\n    const OFFSET_ROTATION1 = UncompressedSplatArray.OFFSET.ROTATION1;\r\n    const OFFSET_ROTATION2 = UncompressedSplatArray.OFFSET.ROTATION2;\r\n    const OFFSET_ROTATION3 = UncompressedSplatArray.OFFSET.ROTATION3;\r\n\r\n    const OFFSET_FDC0 = UncompressedSplatArray.OFFSET.FDC0;\r\n    const OFFSET_FDC1 = UncompressedSplatArray.OFFSET.FDC1;\r\n    const OFFSET_FDC2 = UncompressedSplatArray.OFFSET.FDC2;\r\n    const OFFSET_OPACITY = UncompressedSplatArray.OFFSET.OPACITY;\r\n\r\n    const OFFSET_FRC = [];\r\n\r\n    for (let i = 0; i < 45; i++) {\r\n        OFFSET_FRC[i] = UncompressedSplatArray.OFFSET.FRC0 + i;\r\n    }\r\n\r\n    const shCoeffMap = [dimForDegree(0), dimForDegree(1), dimForDegree(2), dimForDegree(3)];\r\n\r\n    const shIndexMap = [\r\n        0, 1, 2, 9, 10, 11, 12, 13, 24, 25, 26, 27, 28, 29, 30,\r\n        3, 4, 5, 14, 15, 16, 17, 18, 31, 32, 33, 34, 35, 36, 37,\r\n        6, 7, 8, 19, 20, 21, 22, 23, 38, 39, 40, 41, 42, 43, 44\r\n    ];\r\n\r\n    return function(unpackedSplat, unpackedSphericalHarmonicsDegree, outSphericalHarmonicsDegree) {\r\n                    outSphericalHarmonicsDegree = Math.min(unpackedSphericalHarmonicsDegree, outSphericalHarmonicsDegree);\r\n\r\n        const newSplat = UncompressedSplatArray.createSplat(outSphericalHarmonicsDegree);\r\n        if (unpackedSplat.scale[0] !== undefined) {\r\n            newSplat[OFFSET_SCALE0] = unpackedSplat.scale[0];\r\n            newSplat[OFFSET_SCALE1] = unpackedSplat.scale[1];\r\n            newSplat[OFFSET_SCALE2] = unpackedSplat.scale[2];\r\n        } else {\r\n            newSplat[OFFSET_SCALE0] = 0.01;\r\n            newSplat[OFFSET_SCALE1] = 0.01;\r\n            newSplat[OFFSET_SCALE2] = 0.01;\r\n        }\r\n\r\n        if (unpackedSplat.color[0] !== undefined) {\r\n            newSplat[OFFSET_FDC0] = unpackedSplat.color[0];\r\n            newSplat[OFFSET_FDC1] = unpackedSplat.color[1];\r\n            newSplat[OFFSET_FDC2] = unpackedSplat.color[2];\r\n        } else if (rawSplat[RED] !== undefined) {\r\n            newSplat[OFFSET_FDC0] = rawSplat[RED] * 255;\r\n            newSplat[OFFSET_FDC1] = rawSplat[GREEN] * 255;\r\n            newSplat[OFFSET_FDC2] = rawSplat[BLUE] * 255;\r\n        } else {\r\n            newSplat[OFFSET_FDC0] = 0;\r\n            newSplat[OFFSET_FDC1] = 0;\r\n            newSplat[OFFSET_FDC2] = 0;\r\n        }\r\n\r\n        if (unpackedSplat.alpha !== undefined) {\r\n            newSplat[OFFSET_OPACITY] = unpackedSplat.alpha;\r\n        }\r\n\r\n        newSplat[OFFSET_FDC0] = clamp(Math.floor(newSplat[OFFSET_FDC0]), 0, 255);\r\n        newSplat[OFFSET_FDC1] = clamp(Math.floor(newSplat[OFFSET_FDC1]), 0, 255);\r\n        newSplat[OFFSET_FDC2] = clamp(Math.floor(newSplat[OFFSET_FDC2]), 0, 255);\r\n        newSplat[OFFSET_OPACITY] = clamp(Math.floor(newSplat[OFFSET_OPACITY]), 0, 255);\r\n\r\n        let outSHCoeff = shCoeffMap[outSphericalHarmonicsDegree];\r\n        let readSHCoeff = shCoeffMap[unpackedSphericalHarmonicsDegree];\r\n        for (let j = 0; j < 3; ++j) {\r\n            for (let k = 0; k < 15; ++k) {\r\n                const outIndex = shIndexMap[j * 15 + k];\r\n                if (k < outSHCoeff && k < readSHCoeff) {\r\n                    newSplat[UncompressedSplatArray.OFFSET.FRC0 + outIndex] = unpackedSplat.sh[j * readSHCoeff + k];\r\n                }\r\n            }\r\n        }\r\n\r\n        tempRotation.set(unpackedSplat.rotation[3], unpackedSplat.rotation[0], unpackedSplat.rotation[1], unpackedSplat.rotation[2]);\r\n        tempRotation.normalize();\r\n\r\n        newSplat[OFFSET_ROTATION0] = tempRotation.x;\r\n        newSplat[OFFSET_ROTATION1] = tempRotation.y;\r\n        newSplat[OFFSET_ROTATION2] = tempRotation.z;\r\n        newSplat[OFFSET_ROTATION3] = tempRotation.w;\r\n\r\n        newSplat[OFFSET_X] = unpackedSplat.position[0];\r\n        newSplat[OFFSET_Y] = unpackedSplat.position[1];\r\n        newSplat[OFFSET_Z] = unpackedSplat.position[2];\r\n\r\n        return newSplat;\r\n    };\r\n\r\n}();\r\n\r\n// Helper function to check sizes (matching C++ checkSizes function)\r\nfunction checkSizes2(packed, numPoints, shDim, usesFloat16) {\r\n    if (packed.positions.length !== numPoints * 3 * (usesFloat16 ? 2 : 3)) return false;\r\n    if (packed.scales.length !== numPoints * 3) return false;\r\n    if (packed.rotations.length !== numPoints * 3) return false;\r\n    if (packed.alphas.length !== numPoints) return false;\r\n    if (packed.colors.length !== numPoints * 3) return false;\r\n    if (packed.sh.length !== numPoints * shDim * 3) return false;\r\n    return true;\r\n}\r\n\r\nfunction unpackGaussians(packed, outSphericalHarmonicsDegree, directToSplatBuffer, outTarget, outTargetOffset) {\r\n    outSphericalHarmonicsDegree = Math.min(outSphericalHarmonicsDegree, packed.shDegree);\r\n    const numPoints = packed.numPoints;\r\n    const shDim = dimForDegree(packed.shDegree);\r\n    const usesFloat16 = packed.positions.length === numPoints * 3 * 2;\r\n\r\n    // Validate sizes\r\n    if (!checkSizes2(packed, numPoints, shDim, usesFloat16)) {\r\n        return null;\r\n    }\r\n\r\n    const splat = {\r\n        position: [],\r\n        scale: [],\r\n        rotation: [],\r\n        alpha: undefined,\r\n        color: [],\r\n        sh: []\r\n    };\r\n\r\n    let halfData;\r\n    if (usesFloat16) {\r\n       halfData = new Uint16Array(packed.positions.buffer, packed.positions.byteOffset, numPoints * 3);\r\n    }\r\n    const fullPrecisionPositionScale = 1.0 / (1 << packed.fractionalBits);\r\n    const shCoeffPerChannelPerSplat = dimForDegree(packed.shDegree);\r\n    const SH_C0 = 0.28209479177387814;\r\n\r\n    for (let i = 0; i < numPoints; i++) {\r\n        // Splat position\r\n        if (usesFloat16) {\r\n            // Decode legacy float16 format\r\n            for (let j = 0; j < 3; j++) {\r\n                splat.position[j] = halfToFloat(halfData[i * 3 + j]);\r\n            }\r\n        } else {\r\n            // Decode 24-bit fixed point coordinates\r\n            for (let j = 0; j < 3; j++) {\r\n                const base = i * 9 + j * 3;\r\n                let fixed32 = packed.positions[base];\r\n                fixed32 |= packed.positions[base + 1] << 8;\r\n                fixed32 |= packed.positions[base + 2] << 16;\r\n                fixed32 |= (fixed32 & 0x800000) ? 0xff000000 : 0;\r\n                splat.position[j] = fixed32 * fullPrecisionPositionScale;\r\n            }\r\n        }\r\n\r\n        // Splat scale\r\n        for (let j = 0; j < 3; j++) {\r\n            splat.scale[j] = Math.exp(packed.scales[i * 3 + j] / 16.0 - 10.0);\r\n        }\r\n\r\n        // Splat rotation\r\n        const r = packed.rotations.subarray(i * 3, i * 3 + 3);\r\n        const xyz = [\r\n            r[0] / 127.5 - 1.0,\r\n            r[1] / 127.5 - 1.0,\r\n            r[2] / 127.5 - 1.0\r\n        ];\r\n        splat.rotation[0] = xyz[0];\r\n        splat.rotation[1] = xyz[1];\r\n        splat.rotation[2] = xyz[2];\r\n        const squaredNorm = xyz[0] * xyz[0] + xyz[1] * xyz[1] + xyz[2] * xyz[2];\r\n        splat.rotation[3] = Math.sqrt(Math.max(0.0, 1.0 - squaredNorm));\r\n\r\n        // Splat alpha\r\n        // splat.alpha = invSigmoid(packed.alphas[i] / 255.0);\r\n        splat.alpha = Math.floor(packed.alphas[i]);\r\n\r\n        // Splat color\r\n        for (let j = 0; j < 3; j++) {\r\n            splat.color[j] = Math.floor(((((packed.colors[i * 3 + j] / 255.0) - 0.5) / COLOR_SCALE) * SH_C0 + 0.5) * 255);\r\n        }\r\n\r\n        // Splat spherical harmonics\r\n        for (let j = 0; j < 3; j++) {\r\n            for (let k = 0; k < shCoeffPerChannelPerSplat; k++) {\r\n                splat.sh[j * shCoeffPerChannelPerSplat + k] = unquantizeSH(packed.sh[shCoeffPerChannelPerSplat * 3 * i + k * 3 + j]);\r\n            }\r\n        }\r\n\r\n        const uncompressedSplat = unpackedSplatToUncompressedSplat(splat, packed.shDegree, outSphericalHarmonicsDegree);\r\n        if (directToSplatBuffer) {\r\n            const outBytesPerSplat = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[outSphericalHarmonicsDegree].BytesPerSplat;\r\n            const outBase = i * outBytesPerSplat + outTargetOffset;\r\n            SplatBuffer.writeSplatDataToSectionBuffer(uncompressedSplat, outTarget, outBase, 0, outSphericalHarmonicsDegree);\r\n        } else {\r\n            outTarget.addSplat(uncompressedSplat);\r\n        }\r\n    }\r\n}\r\n\r\nconst HEADER_SIZE = 16; // 4 + 4 + 4 + 1 + 1 + 1 + 1 bytes\r\nconst MAX_POINTS_TO_READ = 10000000;\r\n\r\nfunction deserializePackedGaussians(buffer) {\r\n    const view = new DataView(buffer);\r\n    let offset = 0;\r\n\r\n    // Read and validate header\r\n    const header = {\r\n        magic: view.getUint32(offset, true),\r\n        version: view.getUint32(offset + 4, true),\r\n        numPoints: view.getUint32(offset + 8, true),\r\n        shDegree: view.getUint8(offset + 12),\r\n        fractionalBits: view.getUint8(offset + 13),\r\n        flags: view.getUint8(offset + 14),\r\n        reserved: view.getUint8(offset + 15)\r\n    };\r\n\r\n    offset += HEADER_SIZE;\r\n\r\n    // Validate header\r\n    if (header.magic !== SPZ_MAGIC) {\r\n        console.error('[SPZ ERROR] deserializePackedGaussians: header not found');\r\n        return null;\r\n    }\r\n    if (header.version < 1 || header.version > 2) {\r\n        console.error(`[SPZ ERROR] deserializePackedGaussians: version not supported: ${header.version}`);\r\n        return null;\r\n    }\r\n    if (header.numPoints > MAX_POINTS_TO_READ) {\r\n        console.error(`[SPZ ERROR] deserializePackedGaussians: Too many points: ${header.numPoints}`);\r\n        return null;\r\n    }\r\n    if (header.shDegree > 3) {\r\n        console.error(`[SPZ ERROR] deserializePackedGaussians: Unsupported SH degree: ${header.shDegree}`);\r\n        return null;\r\n    }\r\n\r\n    const numPoints = header.numPoints;\r\n    const shDim = dimForDegree(header.shDegree);\r\n    const usesFloat16 = header.version === 1;\r\n\r\n    // Initialize result object\r\n    const result = {\r\n        numPoints,\r\n        shDegree: header.shDegree,\r\n        fractionalBits: header.fractionalBits,\r\n        antialiased: (header.flags & FLAG_ANTIALIASED) !== 0,\r\n        positions: new Uint8Array(numPoints * 3 * (usesFloat16 ? 2 : 3)),\r\n        scales: new Uint8Array(numPoints * 3),\r\n        rotations: new Uint8Array(numPoints * 3),\r\n        alphas: new Uint8Array(numPoints),\r\n        colors: new Uint8Array(numPoints * 3),\r\n        sh: new Uint8Array(numPoints * shDim * 3)\r\n    };\r\n\r\n    // Read data sections\r\n    try {\r\n        const uint8View = new Uint8Array(buffer);\r\n        let positionsSize = result.positions.length;\r\n        let currentOffset = offset;\r\n\r\n        result.positions.set(uint8View.slice(currentOffset, currentOffset + positionsSize));\r\n        currentOffset += positionsSize;\r\n\r\n        result.alphas.set(uint8View.slice(currentOffset, currentOffset + result.alphas.length));\r\n        currentOffset += result.alphas.length;\r\n\r\n        result.colors.set(uint8View.slice(currentOffset, currentOffset + result.colors.length));\r\n        currentOffset += result.colors.length;\r\n\r\n        result.scales.set(uint8View.slice(currentOffset, currentOffset + result.scales.length));\r\n        currentOffset += result.scales.length;\r\n\r\n        result.rotations.set(uint8View.slice(currentOffset, currentOffset + result.rotations.length));\r\n        currentOffset += result.rotations.length;\r\n\r\n        result.sh.set(uint8View.slice(currentOffset, currentOffset + result.sh.length));\r\n\r\n        // Verify we read the expected amount of data\r\n        if (currentOffset + result.sh.length !== buffer.byteLength) {\r\n            console.error('[SPZ ERROR] deserializePackedGaussians: incorrect buffer size');\r\n            return null;\r\n        }\r\n    } catch (error) {\r\n        console.error('[SPZ ERROR] deserializePackedGaussians: read error', error);\r\n        return null;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nasync function loadSpzPacked(compressedData) {\r\n    try {\r\n        const decompressed = await decompressGzipped(compressedData);\r\n        return deserializePackedGaussians(decompressed.buffer);\r\n    } catch (error) {\r\n        console.error('[SPZ ERROR] loadSpzPacked: decompression error', error);\r\n        return null;\r\n    }\r\n}\r\n\r\nexport class SpzLoader {\r\n\r\n    static loadFromURL(fileName, onProgress, minimumAlpha, compressionLevel, optimizeSplatData = true,\r\n                       outSphericalHarmonicsDegree = 0, headers, sectionSize, sceneCenter, blockSize, bucketSize) {\r\n        if (onProgress) onProgress(0, '0%', LoaderStatus.Downloading);\r\n        return fetchWithProgress(fileName, onProgress, true, headers).then((fileData) => {\r\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\r\n            return SpzLoader.loadFromFileData(fileData, minimumAlpha, compressionLevel, optimizeSplatData,\r\n                                              outSphericalHarmonicsDegree, sectionSize, sceneCenter, blockSize, bucketSize);\r\n        });\r\n    }\r\n\r\n    static async loadFromFileData(spzFileData, minimumAlpha, compressionLevel, optimizeSplatData,\r\n                                  outSphericalHarmonicsDegree = 0, sectionSize, sceneCenter, blockSize, bucketSize) {\r\n        await delayedExecute();\r\n        const packed = await loadSpzPacked(spzFileData);\r\n        outSphericalHarmonicsDegree = Math.min(packed.shDegree, outSphericalHarmonicsDegree);\r\n\r\n        const splatArray = new UncompressedSplatArray(outSphericalHarmonicsDegree);\r\n\r\n        if (optimizeSplatData) {\r\n            unpackGaussians(packed, outSphericalHarmonicsDegree, false, splatArray, 0);\r\n            const splatBufferGenerator = SplatBufferGenerator.getStandardGenerator(minimumAlpha, compressionLevel,\r\n                                                                                   sectionSize, sceneCenter,\r\n                                                                                   blockSize, bucketSize);\r\n            return splatBufferGenerator.generateFromUncompressedSplatArray(splatArray);\r\n        } else {\r\n            const {\r\n                splatBuffer,\r\n                splatBufferDataOffsetBytes\r\n              } = SplatBuffer.preallocateUncompressed(packed.numPoints, outSphericalHarmonicsDegree);\r\n            unpackGaussians(packed, outSphericalHarmonicsDegree, true, splatBuffer.bufferData, splatBufferDataOffsetBytes);\r\n            return splatBuffer;\r\n        }\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { SplatBuffer } from '../SplatBuffer.js';\r\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\r\n\r\nexport class SplatParser {\r\n\r\n    static RowSizeBytes = 32;\r\n    static CenterSizeBytes = 12;\r\n    static ScaleSizeBytes = 12;\r\n    static RotationSizeBytes = 4;\r\n    static ColorSizeBytes = 4;\r\n\r\n    static parseToUncompressedSplatBufferSection(fromSplat, toSplat, fromBuffer, fromOffset, toBuffer, toOffset) {\r\n\r\n        const outBytesPerCenter = SplatBuffer.CompressionLevels[0].BytesPerCenter;\r\n        const outBytesPerScale = SplatBuffer.CompressionLevels[0].BytesPerScale;\r\n        const outBytesPerRotation = SplatBuffer.CompressionLevels[0].BytesPerRotation;\r\n        const outBytesPerSplat = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat;\r\n\r\n        for (let i = fromSplat; i <= toSplat; i++) {\r\n            const inBase = i * SplatParser.RowSizeBytes + fromOffset;\r\n            const inCenter = new Float32Array(fromBuffer, inBase, 3);\r\n            const inScale = new Float32Array(fromBuffer, inBase + SplatParser.CenterSizeBytes, 3);\r\n            const inColor = new Uint8Array(fromBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes, 4);\r\n            const inRotation = new Uint8Array(fromBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes +\r\n                                              SplatParser.RotationSizeBytes, 4);\r\n\r\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\r\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\r\n            quat.normalize();\r\n\r\n            const outBase = i * outBytesPerSplat + toOffset;\r\n            const outCenter = new Float32Array(toBuffer, outBase, 3);\r\n            const outScale = new Float32Array(toBuffer, outBase + outBytesPerCenter, 3);\r\n            const outRotation = new Float32Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale, 4);\r\n            const outColor = new Uint8Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale + outBytesPerRotation, 4);\r\n\r\n            outCenter[0] = inCenter[0];\r\n            outCenter[1] = inCenter[1];\r\n            outCenter[2] = inCenter[2];\r\n\r\n            outScale[0] = inScale[0];\r\n            outScale[1] = inScale[1];\r\n            outScale[2] = inScale[2];\r\n\r\n            outRotation[0] = quat.w;\r\n            outRotation[1] = quat.x;\r\n            outRotation[2] = quat.y;\r\n            outRotation[3] = quat.z;\r\n\r\n            outColor[0] = inColor[0];\r\n            outColor[1] = inColor[1];\r\n            outColor[2] = inColor[2];\r\n            outColor[3] = inColor[3];\r\n        }\r\n    }\r\n\r\n    static parseToUncompressedSplatArraySection(fromSplat, toSplat, fromBuffer, fromOffset, splatArray) {\r\n\r\n        for (let i = fromSplat; i <= toSplat; i++) {\r\n            const inBase = i * SplatParser.RowSizeBytes + fromOffset;\r\n            const inCenter = new Float32Array(fromBuffer, inBase, 3);\r\n            const inScale = new Float32Array(fromBuffer, inBase + SplatParser.CenterSizeBytes, 3);\r\n            const inColor = new Uint8Array(fromBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes, 4);\r\n            const inRotation = new Uint8Array(fromBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes +\r\n                                              SplatParser.RotationSizeBytes, 4);\r\n\r\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\r\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\r\n            quat.normalize();\r\n\r\n            splatArray.addSplatFromComonents(inCenter[0], inCenter[1], inCenter[2], inScale[0], inScale[1], inScale[2],\r\n                                             quat.w, quat.x, quat.y, quat.z, inColor[0], inColor[1], inColor[2], inColor[3]);\r\n        }\r\n    }\r\n\r\n    static parseStandardSplatToUncompressedSplatArray(inBuffer) {\r\n        // Standard .splat row layout:\r\n        // XYZ - Position (Float32)\r\n        // XYZ - Scale (Float32)\r\n        // RGBA - colors (uint8)\r\n        // IJKL - quaternion/rot (uint8)\r\n\r\n        const splatCount = inBuffer.byteLength / SplatParser.RowSizeBytes;\r\n\r\n        const splatArray = new UncompressedSplatArray();\r\n\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const inBase = i * SplatParser.RowSizeBytes;\r\n            const inCenter = new Float32Array(inBuffer, inBase, 3);\r\n            const inScale = new Float32Array(inBuffer, inBase + SplatParser.CenterSizeBytes, 3);\r\n            const inColor = new Uint8Array(inBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes, 4);\r\n            const inRotation = new Uint8Array(inBuffer, inBase + SplatParser.CenterSizeBytes +\r\n                                              SplatParser.ScaleSizeBytes + SplatParser.ColorSizeBytes, 4);\r\n\r\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\r\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\r\n            quat.normalize();\r\n\r\n            splatArray.addSplatFromComonents(inCenter[0], inCenter[1], inCenter[2], inScale[0], inScale[1], inScale[2],\r\n                                             quat.w, quat.x, quat.y, quat.z, inColor[0], inColor[1], inColor[2], inColor[3]);\r\n        }\r\n\r\n        return splatArray;\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { SplatBuffer } from '../SplatBuffer.js';\r\nimport { SplatBufferGenerator } from '../SplatBufferGenerator.js';\r\nimport { SplatParser } from './SplatParser.js';\r\nimport { fetchWithProgress, delayedExecute, nativePromiseWithExtractedComponents } from '../../Util.js';\r\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\r\nimport { LoaderStatus } from '../LoaderStatus.js';\r\nimport { DirectLoadError } from '../DirectLoadError.js';\r\nimport { Constants } from '../../Constants.js';\r\nimport { InternalLoadType } from '../InternalLoadType.js';\r\n\r\nfunction finalize(splatData, optimizeSplatData, minimumAlpha, compressionLevel, sectionSize, sceneCenter, blockSize, bucketSize) {\r\n    if (optimizeSplatData) {\r\n        const splatBufferGenerator = SplatBufferGenerator.getStandardGenerator(minimumAlpha, compressionLevel,\r\n                                                                               sectionSize, sceneCenter,\r\n                                                                               blockSize, bucketSize);\r\n        return splatBufferGenerator.generateFromUncompressedSplatArray(splatData);\r\n    } else {\r\n        // TODO: Implement direct-to-SplatBuffer when not optimizing splat data\r\n        return SplatBuffer.generateFromUncompressedSplatArrays([splatData], minimumAlpha, 0, new THREE.Vector3());\r\n    }\r\n}\r\n\r\nexport class SplatLoader {\r\n\r\n    static loadFromURL(fileName, onProgress, progressiveLoadToSplatBuffer, onProgressiveLoadSectionProgress, minimumAlpha, compressionLevel,\r\n                       optimizeSplatData = true, headers, sectionSize, sceneCenter, blockSize, bucketSize) {\r\n\r\n        let internalLoadType = progressiveLoadToSplatBuffer ? InternalLoadType.ProgressiveToSplatBuffer :\r\n                                                          InternalLoadType.ProgressiveToSplatArray;\r\n        if (optimizeSplatData) internalLoadType = InternalLoadType.ProgressiveToSplatArray;\r\n\r\n        const splatDataOffsetBytes = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes;\r\n        const directLoadSectionSizeBytes = Constants.ProgressiveLoadSectionSize;\r\n        const sectionCount = 1;\r\n\r\n        let directLoadBufferIn;\r\n        let directLoadBufferOut;\r\n        let directLoadSplatBuffer;\r\n        let maxSplatCount = 0;\r\n        let splatCount = 0;\r\n\r\n        let standardLoadUncompressedSplatArray;\r\n\r\n        const loadPromise = nativePromiseWithExtractedComponents();\r\n\r\n        let numBytesStreamed = 0;\r\n        let numBytesLoaded = 0;\r\n        let chunks = [];\r\n\r\n        const localOnProgress = (percent, percentStr, chunk, fileSize) => {\r\n            const loadComplete = percent >= 100;\r\n\r\n            if (chunk) {\r\n                chunks.push(chunk);\r\n            }\r\n\r\n            if (internalLoadType === InternalLoadType.DownloadBeforeProcessing) {\r\n                if (loadComplete) {\r\n                    loadPromise.resolve(chunks);\r\n                }\r\n                return;\r\n            }\r\n\r\n            if (!fileSize) {\r\n                if (progressiveLoadToSplatBuffer) {\r\n                    throw new DirectLoadError('Cannon directly load .splat because no file size info is available.');\r\n                } else {\r\n                    internalLoadType = InternalLoadType.DownloadBeforeProcessing;\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (!directLoadBufferIn) {\r\n                maxSplatCount = fileSize / SplatParser.RowSizeBytes;\r\n                directLoadBufferIn = new ArrayBuffer(fileSize);\r\n                const bytesPerSplat = SplatBuffer.CompressionLevels[0].SphericalHarmonicsDegrees[0].BytesPerSplat;\r\n                const splatBufferSizeBytes = splatDataOffsetBytes + bytesPerSplat * maxSplatCount;\r\n\r\n                if (internalLoadType === InternalLoadType.ProgressiveToSplatBuffer) {\r\n                    directLoadBufferOut = new ArrayBuffer(splatBufferSizeBytes);\r\n                    SplatBuffer.writeHeaderToBuffer({\r\n                        versionMajor: SplatBuffer.CurrentMajorVersion,\r\n                        versionMinor: SplatBuffer.CurrentMinorVersion,\r\n                        maxSectionCount: sectionCount,\r\n                        sectionCount: sectionCount,\r\n                        maxSplatCount: maxSplatCount,\r\n                        splatCount: splatCount,\r\n                        compressionLevel: 0,\r\n                        sceneCenter: new THREE.Vector3()\r\n                    }, directLoadBufferOut);\r\n                } else {\r\n                    standardLoadUncompressedSplatArray = new UncompressedSplatArray(0);\r\n                }\r\n            }\r\n\r\n            if (chunk) {\r\n                new Uint8Array(directLoadBufferIn, numBytesLoaded, chunk.byteLength).set(new Uint8Array(chunk));\r\n                numBytesLoaded += chunk.byteLength;\r\n\r\n                const bytesLoadedSinceLastSection = numBytesLoaded - numBytesStreamed;\r\n                if (bytesLoadedSinceLastSection > directLoadSectionSizeBytes || loadComplete) {\r\n                    const bytesToUpdate = loadComplete ? bytesLoadedSinceLastSection : directLoadSectionSizeBytes;\r\n                    const addedSplatCount = bytesToUpdate / SplatParser.RowSizeBytes;\r\n                    const newSplatCount = splatCount + addedSplatCount;\r\n\r\n                    if (internalLoadType === InternalLoadType.ProgressiveToSplatBuffer) {\r\n                        SplatParser.parseToUncompressedSplatBufferSection(splatCount, newSplatCount - 1, directLoadBufferIn, 0,\r\n                                                                            directLoadBufferOut, splatDataOffsetBytes);\r\n                    } else {\r\n                        SplatParser.parseToUncompressedSplatArraySection(splatCount, newSplatCount - 1, directLoadBufferIn, 0,\r\n                                                                            standardLoadUncompressedSplatArray);\r\n                    }\r\n\r\n                    splatCount = newSplatCount;\r\n\r\n                    if (internalLoadType === InternalLoadType.ProgressiveToSplatBuffer) {\r\n                        if (!directLoadSplatBuffer) {\r\n                            SplatBuffer.writeSectionHeaderToBuffer({\r\n                                maxSplatCount: maxSplatCount,\r\n                                splatCount: splatCount,\r\n                                bucketSize: 0,\r\n                                bucketCount: 0,\r\n                                bucketBlockSize: 0,\r\n                                compressionScaleRange: 0,\r\n                                storageSizeBytes: 0,\r\n                                fullBucketCount: 0,\r\n                                partiallyFilledBucketCount: 0\r\n                            }, 0, directLoadBufferOut, SplatBuffer.HeaderSizeBytes);\r\n                            directLoadSplatBuffer = new SplatBuffer(directLoadBufferOut, false);\r\n                        }\r\n                        directLoadSplatBuffer.updateLoadedCounts(1, splatCount);\r\n                        if (onProgressiveLoadSectionProgress) {\r\n                            onProgressiveLoadSectionProgress(directLoadSplatBuffer, loadComplete);\r\n                        }\r\n                    }\r\n\r\n                    numBytesStreamed += directLoadSectionSizeBytes;\r\n                }\r\n            }\r\n\r\n            if (loadComplete) {\r\n                if (internalLoadType === InternalLoadType.ProgressiveToSplatBuffer) {\r\n                    loadPromise.resolve(directLoadSplatBuffer);\r\n                } else {\r\n                    loadPromise.resolve(standardLoadUncompressedSplatArray);\r\n                }\r\n            }\r\n\r\n            if (onProgress) onProgress(percent, percentStr, LoaderStatus.Downloading);\r\n        };\r\n\r\n        if (onProgress) onProgress(0, '0%', LoaderStatus.Downloading);\r\n        return fetchWithProgress(fileName, localOnProgress, false, headers).then(() => {\r\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\r\n            return loadPromise.promise.then((splatData) => {\r\n                if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\r\n                if (internalLoadType === InternalLoadType.DownloadBeforeProcessing) {\r\n                    return new Blob(chunks).arrayBuffer().then((splatData) => {\r\n                        return SplatLoader.loadFromFileData(splatData, minimumAlpha, compressionLevel, optimizeSplatData,\r\n                                                            sectionSize, sceneCenter, blockSize, bucketSize);\r\n                    });\r\n                } else if (internalLoadType === InternalLoadType.ProgressiveToSplatBuffer) {\r\n                    return splatData;\r\n                } else {\r\n                    return delayedExecute(() => {\r\n                        return finalize(splatData, optimizeSplatData, minimumAlpha, compressionLevel,\r\n                                        sectionSize, sceneCenter, blockSize, bucketSize);\r\n                    });\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    static loadFromFileData(splatFileData, minimumAlpha, compressionLevel, optimizeSplatData,\r\n                            sectionSize, sceneCenter, blockSize, bucketSize) {\r\n        return delayedExecute(() => {\r\n            const splatArray = SplatParser.parseStandardSplatToUncompressedSplatArray(splatFileData);\r\n            return finalize(splatArray, optimizeSplatData, minimumAlpha, compressionLevel,\r\n                            sectionSize, sceneCenter, blockSize, bucketSize);\r\n        });\r\n    }\r\n\r\n}\r\n","import { SplatBuffer } from '../SplatBuffer.js';\r\nimport { fetchWithProgress, delayedExecute, nativePromiseWithExtractedComponents } from '../../Util.js';\r\nimport { LoaderStatus } from '../LoaderStatus.js';\r\nimport { Constants } from '../../Constants.js';\r\n\r\nexport class KSplatLoader {\r\n\r\n   static checkVersion(buffer) {\r\n        const minVersionMajor = SplatBuffer.CurrentMajorVersion;\r\n        const minVersionMinor = SplatBuffer.CurrentMinorVersion;\r\n        const header = SplatBuffer.parseHeader(buffer);\r\n        if (header.versionMajor === minVersionMajor &&\r\n            header.versionMinor >= minVersionMinor ||\r\n            header.versionMajor > minVersionMajor) {\r\n           return true;\r\n        } else {\r\n            throw new Error(`KSplat version not supported: v${header.versionMajor}.${header.versionMinor}. ` +\r\n                            `Minimum required: v${minVersionMajor}.${minVersionMinor}`);\r\n        }\r\n    };\r\n\r\n    static loadFromURL(fileName, externalOnProgress, progressiveLoadToSplatBuffer, onSectionBuilt, headers) {\r\n        let directLoadBuffer;\r\n        let directLoadSplatBuffer;\r\n\r\n        let headerBuffer;\r\n        let header;\r\n        let headerLoaded = false;\r\n        let headerLoading = false;\r\n\r\n        let sectionHeadersBuffer;\r\n        let sectionHeaders = [];\r\n        let sectionHeadersLoaded = false;\r\n        let sectionHeadersLoading = false;\r\n\r\n        let numBytesLoaded = 0;\r\n        let numBytesProgressivelyLoaded = 0;\r\n        let totalBytesToDownload = 0;\r\n\r\n        let downloadComplete = false;\r\n        let loadComplete = false;\r\n        let loadSectionQueued = false;\r\n\r\n        let chunks = [];\r\n\r\n        const directLoadPromise = nativePromiseWithExtractedComponents();\r\n\r\n        const checkAndLoadHeader = () => {\r\n            if (!headerLoaded && !headerLoading && numBytesLoaded >= SplatBuffer.HeaderSizeBytes) {\r\n                headerLoading = true;\r\n                const headerAssemblyPromise = new Blob(chunks).arrayBuffer();\r\n                headerAssemblyPromise.then((bufferData) => {\r\n                    headerBuffer = new ArrayBuffer(SplatBuffer.HeaderSizeBytes);\r\n                    new Uint8Array(headerBuffer).set(new Uint8Array(bufferData, 0, SplatBuffer.HeaderSizeBytes));\r\n                    KSplatLoader.checkVersion(headerBuffer);\r\n                    headerLoading = false;\r\n                    headerLoaded = true;\r\n                    header = SplatBuffer.parseHeader(headerBuffer);\r\n                    window.setTimeout(() => {\r\n                        checkAndLoadSectionHeaders();\r\n                    }, 1);\r\n                });\r\n            }\r\n        };\r\n\r\n        let queuedCheckAndLoadSectionsCount = 0;\r\n        const queueCheckAndLoadSections = () => {\r\n            if (queuedCheckAndLoadSectionsCount === 0) {\r\n                queuedCheckAndLoadSectionsCount++;\r\n                window.setTimeout(() => {\r\n                    queuedCheckAndLoadSectionsCount--;\r\n                    checkAndLoadSections();\r\n                }, 1);\r\n            }\r\n        };\r\n\r\n        const checkAndLoadSectionHeaders = () => {\r\n            const performLoad = () => {\r\n                sectionHeadersLoading = true;\r\n                const sectionHeadersAssemblyPromise = new Blob(chunks).arrayBuffer();\r\n                sectionHeadersAssemblyPromise.then((bufferData) => {\r\n                    sectionHeadersLoading = false;\r\n                    sectionHeadersLoaded = true;\r\n                    sectionHeadersBuffer = new ArrayBuffer(header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes);\r\n                    new Uint8Array(sectionHeadersBuffer).set(new Uint8Array(bufferData, SplatBuffer.HeaderSizeBytes,\r\n                                                                            header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes));\r\n                    sectionHeaders = SplatBuffer.parseSectionHeaders(header, sectionHeadersBuffer, 0, false);\r\n                    let totalSectionStorageStorageByes = 0;\r\n                    for (let i = 0; i < header.maxSectionCount; i++) {\r\n                        totalSectionStorageStorageByes += sectionHeaders[i].storageSizeBytes;\r\n                    }\r\n                    const totalStorageSizeBytes = SplatBuffer.HeaderSizeBytes + header.maxSectionCount *\r\n                                                  SplatBuffer.SectionHeaderSizeBytes + totalSectionStorageStorageByes;\r\n                    if (!directLoadBuffer) {\r\n                        directLoadBuffer = new ArrayBuffer(totalStorageSizeBytes);\r\n                        let offset = 0;\r\n                        for (let i = 0; i < chunks.length; i++) {\r\n                            const chunk = chunks[i];\r\n                            new Uint8Array(directLoadBuffer, offset, chunk.byteLength).set(new Uint8Array(chunk));\r\n                            offset += chunk.byteLength;\r\n                        }\r\n                    }\r\n\r\n                    totalBytesToDownload = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount;\r\n                    for (let i = 0; i <= sectionHeaders.length && i < header.maxSectionCount; i++) {\r\n                        totalBytesToDownload += sectionHeaders[i].storageSizeBytes;\r\n                    }\r\n\r\n                    queueCheckAndLoadSections();\r\n                });\r\n            };\r\n\r\n            if (!sectionHeadersLoading && !sectionHeadersLoaded && headerLoaded &&\r\n                numBytesLoaded >= SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount) {\r\n                performLoad();\r\n            }\r\n        };\r\n\r\n        const checkAndLoadSections = () => {\r\n            if (loadSectionQueued) return;\r\n            loadSectionQueued = true;\r\n            const checkAndLoadFunc = () => {\r\n                loadSectionQueued = false;\r\n                if (sectionHeadersLoaded) {\r\n\r\n                    if (loadComplete) return;\r\n\r\n                    downloadComplete = numBytesLoaded >= totalBytesToDownload;\r\n\r\n                    let bytesLoadedSinceLastSection = numBytesLoaded - numBytesProgressivelyLoaded;\r\n                    if (bytesLoadedSinceLastSection > Constants.ProgressiveLoadSectionSize || downloadComplete) {\r\n\r\n                        numBytesProgressivelyLoaded += Constants.ProgressiveLoadSectionSize;\r\n                        loadComplete = numBytesProgressivelyLoaded >= totalBytesToDownload;\r\n\r\n                        if (!directLoadSplatBuffer) directLoadSplatBuffer = new SplatBuffer(directLoadBuffer, false);\r\n\r\n                        const baseDataOffset = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount;\r\n                        let sectionBase = 0;\r\n                        let reachedSections = 0;\r\n                        let loadedSplatCount = 0;\r\n                        for (let i = 0; i < header.maxSectionCount; i++) {\r\n                            const sectionHeader = sectionHeaders[i];\r\n                            const bucketsDataOffset = sectionBase + sectionHeader.partiallyFilledBucketCount * 4 +\r\n                                                    sectionHeader.bucketStorageSizeBytes * sectionHeader.bucketCount;\r\n                            const bytesRequiredToReachSectionSplatData = baseDataOffset + bucketsDataOffset;\r\n                            if (numBytesProgressivelyLoaded >= bytesRequiredToReachSectionSplatData) {\r\n                                reachedSections++;\r\n                                const bytesPastSSectionSplatDataStart = numBytesProgressivelyLoaded - bytesRequiredToReachSectionSplatData;\r\n                                const baseDescriptor = SplatBuffer.CompressionLevels[header.compressionLevel];\r\n                                const shDesc = baseDescriptor.SphericalHarmonicsDegrees[sectionHeader.sphericalHarmonicsDegree];\r\n                                const bytesPerSplat = shDesc.BytesPerSplat;\r\n                                let loadedSplatsForSection = Math.floor(bytesPastSSectionSplatDataStart / bytesPerSplat);\r\n                                loadedSplatsForSection = Math.min(loadedSplatsForSection, sectionHeader.maxSplatCount);\r\n                                loadedSplatCount += loadedSplatsForSection;\r\n                                directLoadSplatBuffer.updateLoadedCounts(reachedSections, loadedSplatCount);\r\n                                directLoadSplatBuffer.updateSectionLoadedCounts(i, loadedSplatsForSection);\r\n                            } else {\r\n                                break;\r\n                            }\r\n                            sectionBase += sectionHeader.storageSizeBytes;\r\n                        }\r\n\r\n                        onSectionBuilt(directLoadSplatBuffer, loadComplete);\r\n\r\n                        const percentComplete = numBytesProgressivelyLoaded / totalBytesToDownload * 100;\r\n                        const percentLabel = (percentComplete).toFixed(2) + '%';\r\n\r\n                        if (externalOnProgress) externalOnProgress(percentComplete, percentLabel, LoaderStatus.Downloading);\r\n\r\n                        if (loadComplete) {\r\n                            directLoadPromise.resolve(directLoadSplatBuffer);\r\n                        } else {\r\n                            checkAndLoadSections();\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            window.setTimeout(checkAndLoadFunc, Constants.ProgressiveLoadSectionDelayDuration);\r\n        };\r\n\r\n        const localOnProgress = (percent, percentStr, chunk) => {\r\n            if (chunk) {\r\n                chunks.push(chunk);\r\n                if (directLoadBuffer) {\r\n                    new Uint8Array(directLoadBuffer, numBytesLoaded, chunk.byteLength).set(new Uint8Array(chunk));\r\n                }\r\n                numBytesLoaded += chunk.byteLength;\r\n            }\r\n            if (progressiveLoadToSplatBuffer) {\r\n                checkAndLoadHeader();\r\n                checkAndLoadSectionHeaders();\r\n                checkAndLoadSections();\r\n            } else {\r\n                if (externalOnProgress) externalOnProgress(percent, percentStr, LoaderStatus.Downloading);\r\n            }\r\n        };\r\n\r\n        return fetchWithProgress(fileName, localOnProgress, !progressiveLoadToSplatBuffer, headers).then((fullBuffer) => {\r\n            if (externalOnProgress) externalOnProgress(0, '0%', LoaderStatus.Processing);\r\n            const loadPromise = progressiveLoadToSplatBuffer ? directLoadPromise.promise : KSplatLoader.loadFromFileData(fullBuffer);\r\n            return loadPromise.then((splatBuffer) => {\r\n                if (externalOnProgress) externalOnProgress(100, '100%', LoaderStatus.Done);\r\n                return splatBuffer;\r\n            });\r\n        });\r\n    }\r\n\r\n    static loadFromFileData(fileData) {\r\n        return delayedExecute(() => {\r\n            KSplatLoader.checkVersion(fileData);\r\n            return new SplatBuffer(fileData);\r\n        });\r\n    }\r\n\r\n    static downloadFile = function() {\r\n\r\n        let downLoadLink;\r\n\r\n        return function(splatBuffer, fileName) {\r\n            const blob = new Blob([splatBuffer.bufferData], {\r\n                type: 'application/octet-stream',\r\n            });\r\n\r\n            if (!downLoadLink) {\r\n                downLoadLink = document.createElement('a');\r\n                document.body.appendChild(downLoadLink);\r\n            }\r\n            downLoadLink.download = fileName;\r\n            downLoadLink.href = URL.createObjectURL(blob);\r\n            downLoadLink.click();\r\n        };\r\n\r\n    }();\r\n\r\n}\r\n","export const SceneFormat = {\r\n    'Splat': 0,\r\n    'KSplat': 1,\r\n    'Ply': 2,\r\n    'Spz': 3\r\n};\r\n","import { SceneFormat } from './SceneFormat.js';\r\n\r\nexport const sceneFormatFromPath = (path) => {\r\n    if (path.endsWith('.ply')) return SceneFormat.Ply;\r\n    else if (path.endsWith('.splat')) return SceneFormat.Splat;\r\n    else if (path.endsWith('.ksplat')) return SceneFormat.KSplat;\r\n    else if (path.endsWith('.spz')) return SceneFormat.Spz;\r\n    return null;\r\n};\r\n","/*\r\nCopyright © 2010-2024 three.js authors & Mark Kellogg\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n*/\r\n\r\nimport {\r\n    EventDispatcher,\r\n    MOUSE,\r\n    Quaternion,\r\n    Spherical,\r\n    TOUCH,\r\n    Vector2,\r\n    Vector3,\r\n    Plane,\r\n    Ray,\r\n    MathUtils\r\n} from 'three';\r\n\r\n// OrbitControls performs orbiting, dollying (zooming), and panning.\r\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\r\n//\r\n//    Orbit - left mouse / touch: one-finger move\r\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\r\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\r\n\r\nconst _changeEvent = { type: 'change' };\r\nconst _startEvent = { type: 'start' };\r\nconst _endEvent = { type: 'end' };\r\nconst _ray = new Ray();\r\nconst _plane = new Plane();\r\nconst TILT_LIMIT = Math.cos( 70 * MathUtils.DEG2RAD );\r\n\r\nclass OrbitControls extends EventDispatcher {\r\n\r\n    constructor( object, domElement ) {\r\n\r\n        super();\r\n\r\n        this.object = object;\r\n        this.domElement = domElement;\r\n        this.domElement.style.touchAction = 'none'; // disable touch scroll\r\n\r\n        // Set to false to disable this control\r\n        this.enabled = true;\r\n\r\n        // \"target\" sets the location of focus, where the object orbits around\r\n        this.target = new Vector3();\r\n\r\n        // How far you can dolly in and out ( PerspectiveCamera only )\r\n        this.minDistance = 0;\r\n        this.maxDistance = Infinity;\r\n\r\n        // How far you can zoom in and out ( OrthographicCamera only )\r\n        this.minZoom = 0;\r\n        this.maxZoom = Infinity;\r\n\r\n        // How far you can orbit vertically, upper and lower limits.\r\n        // Range is 0 to Math.PI radians.\r\n        this.minPolarAngle = 0; // radians\r\n        this.maxPolarAngle = Math.PI; // radians\r\n\r\n        // How far you can orbit horizontally, upper and lower limits.\r\n        // If set, the interval [min, max] must be a sub-interval of [- 2 PI, 2 PI], with ( max - min < 2 PI )\r\n        this.minAzimuthAngle = - Infinity; // radians\r\n        this.maxAzimuthAngle = Infinity; // radians\r\n\r\n        // Set to true to enable damping (inertia)\r\n        // If damping is enabled, you must call controls.update() in your animation loop\r\n        this.enableDamping = false;\r\n        this.dampingFactor = 0.05;\r\n\r\n        // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\r\n        // Set to false to disable zooming\r\n        this.enableZoom = true;\r\n        this.zoomSpeed = 1.0;\r\n\r\n        // Set to false to disable rotating\r\n        this.enableRotate = true;\r\n        this.rotateSpeed = 1.0;\r\n\r\n        // Set to false to disable panning\r\n        this.enablePan = true;\r\n        this.panSpeed = 1.0;\r\n        this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\r\n        this.keyPanSpeed = 7.0; // pixels moved per arrow key push\r\n        this.zoomToCursor = false;\r\n\r\n        // Set to true to automatically rotate around the target\r\n        // If auto-rotate is enabled, you must call controls.update() in your animation loop\r\n        this.autoRotate = false;\r\n        this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\r\n\r\n        // The four arrow keys\r\n        this.keys = { LEFT: 'KeyA', UP: 'KeyW', RIGHT: 'KeyD', BOTTOM: 'KeyS' };\r\n\r\n        // Mouse buttons\r\n        this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\r\n\r\n        // Touch fingers\r\n        this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\r\n\r\n        // for reset\r\n        this.target0 = this.target.clone();\r\n        this.position0 = this.object.position.clone();\r\n        this.zoom0 = this.object.zoom;\r\n\r\n        // the target DOM element for key events\r\n        this._domElementKeyEvents = null;\r\n\r\n        //\r\n        // public methods\r\n        //\r\n\r\n        this.getPolarAngle = function() {\r\n\r\n            return spherical.phi;\r\n\r\n        };\r\n\r\n        this.getAzimuthalAngle = function() {\r\n\r\n            return spherical.theta;\r\n\r\n        };\r\n\r\n        this.getDistance = function() {\r\n\r\n            return this.object.position.distanceTo( this.target );\r\n\r\n        };\r\n\r\n        this.listenToKeyEvents = function( domElement ) {\r\n\r\n            domElement.addEventListener( 'keydown', onKeyDown );\r\n            this._domElementKeyEvents = domElement;\r\n\r\n        };\r\n\r\n        this.stopListenToKeyEvents = function() {\r\n\r\n            this._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\r\n            this._domElementKeyEvents = null;\r\n\r\n        };\r\n\r\n        this.saveState = function() {\r\n\r\n            scope.target0.copy( scope.target );\r\n            scope.position0.copy( scope.object.position );\r\n            scope.zoom0 = scope.object.zoom;\r\n\r\n        };\r\n\r\n        this.reset = function() {\r\n\r\n            scope.target.copy( scope.target0 );\r\n            scope.object.position.copy( scope.position0 );\r\n            scope.object.zoom = scope.zoom0;\r\n            this.clearDampedRotation();\r\n            this.clearDampedPan();\r\n\r\n            scope.object.updateProjectionMatrix();\r\n            scope.dispatchEvent( _changeEvent );\r\n\r\n            scope.update();\r\n\r\n            state = STATE.NONE;\r\n\r\n        };\r\n\r\n        this.clearDampedRotation = function() {\r\n            sphericalDelta.theta = 0.0;\r\n            sphericalDelta.phi = 0.0;\r\n        };\r\n\r\n        this.clearDampedPan = function() {\r\n            panOffset.set(0, 0, 0);\r\n        };\r\n\r\n        // this method is exposed, but perhaps it would be better if we can make it private...\r\n        this.update = function() {\r\n\r\n            const offset = new Vector3();\r\n\r\n            // so camera.up is the orbit axis\r\n            const quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\r\n            const quatInverse = quat.clone().invert();\r\n\r\n            const lastPosition = new Vector3();\r\n            const lastQuaternion = new Quaternion();\r\n            const lastTargetPosition = new Vector3();\r\n\r\n            const twoPI = 2 * Math.PI;\r\n\r\n            return function update() {\r\n\r\n                quat.setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\r\n                quatInverse.copy(quat).invert();\r\n\r\n                const position = scope.object.position;\r\n\r\n                offset.copy( position ).sub( scope.target );\r\n\r\n                // rotate offset to \"y-axis-is-up\" space\r\n                offset.applyQuaternion( quat );\r\n\r\n                // angle from z-axis around y-axis\r\n                spherical.setFromVector3( offset );\r\n\r\n                if ( scope.autoRotate && state === STATE.NONE ) {\r\n\r\n                    rotateLeft( getAutoRotationAngle() );\r\n\r\n                }\r\n\r\n                if ( scope.enableDamping ) {\r\n\r\n                    spherical.theta += sphericalDelta.theta * scope.dampingFactor;\r\n                    spherical.phi += sphericalDelta.phi * scope.dampingFactor;\r\n\r\n                } else {\r\n\r\n                    spherical.theta += sphericalDelta.theta;\r\n                    spherical.phi += sphericalDelta.phi;\r\n\r\n                }\r\n\r\n                // restrict theta to be between desired limits\r\n\r\n                let min = scope.minAzimuthAngle;\r\n                let max = scope.maxAzimuthAngle;\r\n\r\n                if ( isFinite( min ) && isFinite( max ) ) {\r\n\r\n                    if ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\r\n\r\n                    if ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\r\n\r\n                    if ( min <= max ) {\r\n\r\n                        spherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\r\n\r\n                    } else {\r\n\r\n                        spherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\r\n                            Math.max( min, spherical.theta ) :\r\n                            Math.min( max, spherical.theta );\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                // restrict phi to be between desired limits\r\n                spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\r\n\r\n                spherical.makeSafe();\r\n\r\n\r\n                // move target to panned location\r\n\r\n                if ( scope.enableDamping === true ) {\r\n\r\n                    scope.target.addScaledVector( panOffset, scope.dampingFactor );\r\n\r\n                } else {\r\n\r\n                    scope.target.add( panOffset );\r\n\r\n                }\r\n\r\n                // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\r\n                // we adjust zoom later in these cases\r\n                if ( scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera ) {\r\n\r\n                    spherical.radius = clampDistance( spherical.radius );\r\n\r\n                } else {\r\n\r\n                    spherical.radius = clampDistance( spherical.radius * scale );\r\n\r\n                }\r\n\r\n\r\n                offset.setFromSpherical( spherical );\r\n\r\n                // rotate offset back to \"camera-up-vector-is-up\" space\r\n                offset.applyQuaternion( quatInverse );\r\n\r\n                position.copy( scope.target ).add( offset );\r\n\r\n                scope.object.lookAt( scope.target );\r\n\r\n                if ( scope.enableDamping === true ) {\r\n\r\n                    sphericalDelta.theta *= ( 1 - scope.dampingFactor );\r\n                    sphericalDelta.phi *= ( 1 - scope.dampingFactor );\r\n\r\n                    panOffset.multiplyScalar( 1 - scope.dampingFactor );\r\n\r\n                } else {\r\n\r\n                    sphericalDelta.set( 0, 0, 0 );\r\n\r\n                    panOffset.set( 0, 0, 0 );\r\n\r\n                }\r\n\r\n                // adjust camera position\r\n                let zoomChanged = false;\r\n                if ( scope.zoomToCursor && performCursorZoom ) {\r\n\r\n                    let newRadius = null;\r\n                    if ( scope.object.isPerspectiveCamera ) {\r\n\r\n                        // move the camera down the pointer ray\r\n                        // this method avoids floating point error\r\n                        const prevRadius = offset.length();\r\n                        newRadius = clampDistance( prevRadius * scale );\r\n\r\n                        const radiusDelta = prevRadius - newRadius;\r\n                        scope.object.position.addScaledVector( dollyDirection, radiusDelta );\r\n                        scope.object.updateMatrixWorld();\r\n\r\n                    } else if ( scope.object.isOrthographicCamera ) {\r\n\r\n                        // adjust the ortho camera position based on zoom changes\r\n                        const mouseBefore = new Vector3( mouse.x, mouse.y, 0 );\r\n                        mouseBefore.unproject( scope.object );\r\n\r\n                        scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\r\n                        scope.object.updateProjectionMatrix();\r\n                        zoomChanged = true;\r\n\r\n                        const mouseAfter = new Vector3( mouse.x, mouse.y, 0 );\r\n                        mouseAfter.unproject( scope.object );\r\n\r\n                        scope.object.position.sub( mouseAfter ).add( mouseBefore );\r\n                        scope.object.updateMatrixWorld();\r\n\r\n                        newRadius = offset.length();\r\n\r\n                    } else {\r\n\r\n                        console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.' );\r\n                        scope.zoomToCursor = false;\r\n\r\n                    }\r\n\r\n                    // handle the placement of the target\r\n                    if ( newRadius !== null ) {\r\n\r\n                        if ( this.screenSpacePanning ) {\r\n\r\n                            // position the orbit target in front of the new camera position\r\n                            scope.target.set( 0, 0, - 1 )\r\n                                .transformDirection( scope.object.matrix )\r\n                                .multiplyScalar( newRadius )\r\n                                .add( scope.object.position );\r\n\r\n                        } else {\r\n\r\n                            // get the ray and translation plane to compute target\r\n                            _ray.origin.copy( scope.object.position );\r\n                            _ray.direction.set( 0, 0, - 1 ).transformDirection( scope.object.matrix );\r\n\r\n                            // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\r\n                            // extremely large values\r\n                            if ( Math.abs( scope.object.up.dot( _ray.direction ) ) < TILT_LIMIT ) {\r\n\r\n                                object.lookAt( scope.target );\r\n\r\n                            } else {\r\n\r\n                                _plane.setFromNormalAndCoplanarPoint( scope.object.up, scope.target );\r\n                                _ray.intersectPlane( _plane, scope.target );\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                } else if ( scope.object.isOrthographicCamera ) {\r\n\r\n                    scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\r\n                    scope.object.updateProjectionMatrix();\r\n                    zoomChanged = true;\r\n\r\n                }\r\n\r\n                scale = 1;\r\n                performCursorZoom = false;\r\n\r\n                // update condition is:\r\n                // min(camera displacement, camera rotation in radians)^2 > EPS\r\n                // using small-angle approximation cos(x/2) = 1 - x^2 / 8\r\n\r\n                if ( zoomChanged ||\r\n                    lastPosition.distanceToSquared( scope.object.position ) > EPS ||\r\n                    8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ||\r\n                    lastTargetPosition.distanceToSquared( scope.target ) > 0 ) {\r\n\r\n                    scope.dispatchEvent( _changeEvent );\r\n\r\n                    lastPosition.copy( scope.object.position );\r\n                    lastQuaternion.copy( scope.object.quaternion );\r\n                    lastTargetPosition.copy( scope.target );\r\n\r\n                    zoomChanged = false;\r\n\r\n                    return true;\r\n\r\n                }\r\n\r\n                return false;\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        this.dispose = function() {\r\n\r\n            scope.domElement.removeEventListener( 'contextmenu', onContextMenu );\r\n\r\n            scope.domElement.removeEventListener( 'pointerdown', onPointerDown );\r\n            scope.domElement.removeEventListener( 'pointercancel', onPointerUp );\r\n            scope.domElement.removeEventListener( 'wheel', onMouseWheel );\r\n\r\n            scope.domElement.removeEventListener( 'pointermove', onPointerMove );\r\n            scope.domElement.removeEventListener( 'pointerup', onPointerUp );\r\n\r\n\r\n            if ( scope._domElementKeyEvents !== null ) {\r\n\r\n                scope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\r\n                scope._domElementKeyEvents = null;\r\n\r\n            }\r\n\r\n        };\r\n\r\n        //\r\n        // internals\r\n        //\r\n\r\n        const scope = this;\r\n\r\n        const STATE = {\r\n            NONE: - 1,\r\n            ROTATE: 0,\r\n            DOLLY: 1,\r\n            PAN: 2,\r\n            TOUCH_ROTATE: 3,\r\n            TOUCH_PAN: 4,\r\n            TOUCH_DOLLY_PAN: 5,\r\n            TOUCH_DOLLY_ROTATE: 6\r\n        };\r\n\r\n        let state = STATE.NONE;\r\n\r\n        const EPS = 0.000001;\r\n\r\n        // current position in spherical coordinates\r\n        const spherical = new Spherical();\r\n        const sphericalDelta = new Spherical();\r\n\r\n        let scale = 1;\r\n        const panOffset = new Vector3();\r\n\r\n        const rotateStart = new Vector2();\r\n        const rotateEnd = new Vector2();\r\n        const rotateDelta = new Vector2();\r\n\r\n        const panStart = new Vector2();\r\n        const panEnd = new Vector2();\r\n        const panDelta = new Vector2();\r\n\r\n        const dollyStart = new Vector2();\r\n        const dollyEnd = new Vector2();\r\n        const dollyDelta = new Vector2();\r\n\r\n        const dollyDirection = new Vector3();\r\n        const mouse = new Vector2();\r\n        let performCursorZoom = false;\r\n\r\n        const pointers = [];\r\n        const pointerPositions = {};\r\n\r\n        function getAutoRotationAngle() {\r\n\r\n            return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\r\n\r\n        }\r\n\r\n        function getZoomScale() {\r\n\r\n            return Math.pow( 0.95, scope.zoomSpeed );\r\n\r\n        }\r\n\r\n        function rotateLeft( angle ) {\r\n\r\n            sphericalDelta.theta -= angle;\r\n\r\n        }\r\n\r\n        function rotateUp( angle ) {\r\n\r\n            sphericalDelta.phi -= angle;\r\n\r\n        }\r\n\r\n        const panLeft = function() {\r\n\r\n            const v = new Vector3();\r\n\r\n            return function panLeft( distance, objectMatrix ) {\r\n\r\n                v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\r\n                v.multiplyScalar( - distance );\r\n\r\n                panOffset.add( v );\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        const panUp = function() {\r\n\r\n            const v = new Vector3();\r\n\r\n            return function panUp( distance, objectMatrix ) {\r\n\r\n                if ( scope.screenSpacePanning === true ) {\r\n\r\n                    v.setFromMatrixColumn( objectMatrix, 1 );\r\n\r\n                } else {\r\n\r\n                    v.setFromMatrixColumn( objectMatrix, 0 );\r\n                    v.crossVectors( scope.object.up, v );\r\n\r\n                }\r\n\r\n                v.multiplyScalar( distance );\r\n\r\n                panOffset.add( v );\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        // deltaX and deltaY are in pixels; right and down are positive\r\n        const pan = function() {\r\n\r\n            const offset = new Vector3();\r\n\r\n            return function pan( deltaX, deltaY ) {\r\n\r\n                const element = scope.domElement;\r\n\r\n                if ( scope.object.isPerspectiveCamera ) {\r\n\r\n                    // perspective\r\n                    const position = scope.object.position;\r\n                    offset.copy( position ).sub( scope.target );\r\n                    let targetDistance = offset.length();\r\n\r\n                    // half of the fov is center to top of screen\r\n                    targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\r\n\r\n                    // we use only clientHeight here so aspect ratio does not distort speed\r\n                    panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\r\n                    panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\r\n\r\n                } else if ( scope.object.isOrthographicCamera ) {\r\n\r\n                    // orthographic\r\n                    panLeft( deltaX * ( scope.object.right - scope.object.left ) /\r\n                                        scope.object.zoom / element.clientWidth, scope.object.matrix );\r\n                    panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom /\r\n                                      element.clientHeight, scope.object.matrix );\r\n\r\n                } else {\r\n\r\n                    // camera neither orthographic nor perspective\r\n                    console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\r\n                    scope.enablePan = false;\r\n\r\n                }\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        function dollyOut( dollyScale ) {\r\n\r\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\r\n\r\n                scale /= dollyScale;\r\n\r\n            } else {\r\n\r\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\r\n                scope.enableZoom = false;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function dollyIn( dollyScale ) {\r\n\r\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\r\n\r\n                scale *= dollyScale;\r\n\r\n            } else {\r\n\r\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\r\n                scope.enableZoom = false;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function updateMouseParameters( event ) {\r\n\r\n            if ( ! scope.zoomToCursor ) {\r\n\r\n                return;\r\n\r\n            }\r\n\r\n            performCursorZoom = true;\r\n\r\n            const rect = scope.domElement.getBoundingClientRect();\r\n            const x = event.clientX - rect.left;\r\n            const y = event.clientY - rect.top;\r\n            const w = rect.width;\r\n            const h = rect.height;\r\n\r\n            mouse.x = ( x / w ) * 2 - 1;\r\n            mouse.y = - ( y / h ) * 2 + 1;\r\n\r\n            dollyDirection.set( mouse.x, mouse.y, 1 ).unproject( object ).sub( object.position ).normalize();\r\n\r\n        }\r\n\r\n        function clampDistance( dist ) {\r\n\r\n            return Math.max( scope.minDistance, Math.min( scope.maxDistance, dist ) );\r\n\r\n        }\r\n\r\n        //\r\n        // event callbacks - update the object state\r\n        //\r\n\r\n        function handleMouseDownRotate( event ) {\r\n\r\n            rotateStart.set( event.clientX, event.clientY );\r\n\r\n        }\r\n\r\n        function handleMouseDownDolly( event ) {\r\n\r\n            updateMouseParameters( event );\r\n            dollyStart.set( event.clientX, event.clientY );\r\n\r\n        }\r\n\r\n        function handleMouseDownPan( event ) {\r\n\r\n            panStart.set( event.clientX, event.clientY );\r\n\r\n        }\r\n\r\n        function handleMouseMoveRotate( event ) {\r\n\r\n            rotateEnd.set( event.clientX, event.clientY );\r\n\r\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\r\n\r\n            const element = scope.domElement;\r\n\r\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\r\n\r\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\r\n\r\n            rotateStart.copy( rotateEnd );\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleMouseMoveDolly( event ) {\r\n\r\n            dollyEnd.set( event.clientX, event.clientY );\r\n\r\n            dollyDelta.subVectors( dollyEnd, dollyStart );\r\n\r\n            if ( dollyDelta.y > 0 ) {\r\n\r\n                dollyOut( getZoomScale() );\r\n\r\n            } else if ( dollyDelta.y < 0 ) {\r\n\r\n                dollyIn( getZoomScale() );\r\n\r\n            }\r\n\r\n            dollyStart.copy( dollyEnd );\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleMouseMovePan( event ) {\r\n\r\n            panEnd.set( event.clientX, event.clientY );\r\n\r\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\r\n\r\n            pan( panDelta.x, panDelta.y );\r\n\r\n            panStart.copy( panEnd );\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleMouseWheel( event ) {\r\n\r\n            updateMouseParameters( event );\r\n\r\n            if ( event.deltaY < 0 ) {\r\n\r\n                dollyIn( getZoomScale() );\r\n\r\n            } else if ( event.deltaY > 0 ) {\r\n\r\n                dollyOut( getZoomScale() );\r\n\r\n            }\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleKeyDown( event ) {\r\n\r\n            let needsUpdate = false;\r\n\r\n            switch ( event.code ) {\r\n\r\n                case scope.keys.UP:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateUp( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( 0, scope.keyPanSpeed );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n                case scope.keys.BOTTOM:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateUp( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( 0, - scope.keyPanSpeed );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n                case scope.keys.LEFT:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateLeft( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( scope.keyPanSpeed, 0 );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n                case scope.keys.RIGHT:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateLeft( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( - scope.keyPanSpeed, 0 );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n            }\r\n\r\n            if ( needsUpdate ) {\r\n\r\n                // prevent the browser from scrolling on cursor keys\r\n                event.preventDefault();\r\n\r\n                scope.update();\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n        function handleTouchStartRotate() {\r\n\r\n            if ( pointers.length === 1 ) {\r\n\r\n                rotateStart.set( pointers[0].pageX, pointers[0].pageY );\r\n\r\n            } else {\r\n\r\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\r\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\r\n\r\n                rotateStart.set( x, y );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function handleTouchStartPan() {\r\n\r\n            if ( pointers.length === 1 ) {\r\n\r\n                panStart.set( pointers[0].pageX, pointers[0].pageY );\r\n\r\n            } else {\r\n\r\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\r\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\r\n\r\n                panStart.set( x, y );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function handleTouchStartDolly() {\r\n\r\n            const dx = pointers[0].pageX - pointers[1].pageX;\r\n            const dy = pointers[0].pageY - pointers[1].pageY;\r\n\r\n            const distance = Math.sqrt( dx * dx + dy * dy );\r\n\r\n            dollyStart.set( 0, distance );\r\n\r\n        }\r\n\r\n        function handleTouchStartDollyPan() {\r\n\r\n            if ( scope.enableZoom ) handleTouchStartDolly();\r\n\r\n            if ( scope.enablePan ) handleTouchStartPan();\r\n\r\n        }\r\n\r\n        function handleTouchStartDollyRotate() {\r\n\r\n            if ( scope.enableZoom ) handleTouchStartDolly();\r\n\r\n            if ( scope.enableRotate ) handleTouchStartRotate();\r\n\r\n        }\r\n\r\n        function handleTouchMoveRotate( event ) {\r\n\r\n            if ( pointers.length == 1 ) {\r\n\r\n                rotateEnd.set( event.pageX, event.pageY );\r\n\r\n            } else {\r\n\r\n                const position = getSecondPointerPosition( event );\r\n\r\n                const x = 0.5 * ( event.pageX + position.x );\r\n                const y = 0.5 * ( event.pageY + position.y );\r\n\r\n                rotateEnd.set( x, y );\r\n\r\n            }\r\n\r\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\r\n\r\n            const element = scope.domElement;\r\n\r\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\r\n\r\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\r\n\r\n            rotateStart.copy( rotateEnd );\r\n\r\n        }\r\n\r\n        function handleTouchMovePan( event ) {\r\n\r\n            if ( pointers.length === 1 ) {\r\n\r\n                panEnd.set( event.pageX, event.pageY );\r\n\r\n            } else {\r\n\r\n                const position = getSecondPointerPosition( event );\r\n\r\n                const x = 0.5 * ( event.pageX + position.x );\r\n                const y = 0.5 * ( event.pageY + position.y );\r\n\r\n                panEnd.set( x, y );\r\n\r\n            }\r\n\r\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\r\n\r\n            pan( panDelta.x, panDelta.y );\r\n\r\n            panStart.copy( panEnd );\r\n\r\n        }\r\n\r\n        function handleTouchMoveDolly( event ) {\r\n\r\n            const position = getSecondPointerPosition( event );\r\n\r\n            const dx = event.pageX - position.x;\r\n            const dy = event.pageY - position.y;\r\n\r\n            const distance = Math.sqrt( dx * dx + dy * dy );\r\n\r\n            dollyEnd.set( 0, distance );\r\n\r\n            dollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\r\n\r\n            dollyOut( dollyDelta.y );\r\n\r\n            dollyStart.copy( dollyEnd );\r\n\r\n        }\r\n\r\n        function handleTouchMoveDollyPan( event ) {\r\n\r\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\r\n\r\n            if ( scope.enablePan ) handleTouchMovePan( event );\r\n\r\n        }\r\n\r\n        function handleTouchMoveDollyRotate( event ) {\r\n\r\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\r\n\r\n            if ( scope.enableRotate ) handleTouchMoveRotate( event );\r\n\r\n        }\r\n\r\n        //\r\n        // event handlers - FSM: listen for events and reset state\r\n        //\r\n\r\n        function onPointerDown( event ) {\r\n\r\n            if ( scope.enabled === false ) return;\r\n\r\n            if ( pointers.length === 0 ) {\r\n\r\n                scope.domElement.setPointerCapture( event.pointerId );\r\n\r\n                scope.domElement.addEventListener( 'pointermove', onPointerMove );\r\n                scope.domElement.addEventListener( 'pointerup', onPointerUp );\r\n\r\n            }\r\n\r\n            //\r\n\r\n            addPointer( event );\r\n\r\n            if ( event.pointerType === 'touch' ) {\r\n\r\n                onTouchStart( event );\r\n\r\n            } else {\r\n\r\n                onMouseDown( event );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onPointerMove( event ) {\r\n\r\n            if ( scope.enabled === false ) return;\r\n\r\n            if ( event.pointerType === 'touch' ) {\r\n\r\n                onTouchMove( event );\r\n\r\n            } else {\r\n\r\n                onMouseMove( event );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onPointerUp( event ) {\r\n\r\n            removePointer( event );\r\n\r\n            if ( pointers.length === 0 ) {\r\n\r\n                scope.domElement.releasePointerCapture( event.pointerId );\r\n\r\n                scope.domElement.removeEventListener( 'pointermove', onPointerMove );\r\n                scope.domElement.removeEventListener( 'pointerup', onPointerUp );\r\n\r\n            }\r\n\r\n            scope.dispatchEvent( _endEvent );\r\n\r\n            state = STATE.NONE;\r\n\r\n        }\r\n\r\n        function onMouseDown( event ) {\r\n\r\n            let mouseAction;\r\n\r\n            switch ( event.button ) {\r\n\r\n                case 0:\r\n\r\n                    mouseAction = scope.mouseButtons.LEFT;\r\n                    break;\r\n\r\n                case 1:\r\n\r\n                    mouseAction = scope.mouseButtons.MIDDLE;\r\n                    break;\r\n\r\n                case 2:\r\n\r\n                    mouseAction = scope.mouseButtons.RIGHT;\r\n                    break;\r\n\r\n                default:\r\n\r\n                    mouseAction = - 1;\r\n\r\n            }\r\n\r\n            switch ( mouseAction ) {\r\n\r\n                case MOUSE.DOLLY:\r\n\r\n                    if ( scope.enableZoom === false ) return;\r\n\r\n                    handleMouseDownDolly( event );\r\n\r\n                    state = STATE.DOLLY;\r\n\r\n                    break;\r\n\r\n                case MOUSE.ROTATE:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        if ( scope.enablePan === false ) return;\r\n\r\n                        handleMouseDownPan( event );\r\n\r\n                        state = STATE.PAN;\r\n\r\n                    } else {\r\n\r\n                        if ( scope.enableRotate === false ) return;\r\n\r\n                        handleMouseDownRotate( event );\r\n\r\n                        state = STATE.ROTATE;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                case MOUSE.PAN:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        if ( scope.enableRotate === false ) return;\r\n\r\n                        handleMouseDownRotate( event );\r\n\r\n                        state = STATE.ROTATE;\r\n\r\n                    } else {\r\n\r\n                        if ( scope.enablePan === false ) return;\r\n\r\n                        handleMouseDownPan( event );\r\n\r\n                        state = STATE.PAN;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                default:\r\n\r\n                    state = STATE.NONE;\r\n\r\n            }\r\n\r\n            if ( state !== STATE.NONE ) {\r\n\r\n                scope.dispatchEvent( _startEvent );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onMouseMove( event ) {\r\n\r\n            switch ( state ) {\r\n\r\n                case STATE.ROTATE:\r\n\r\n                    if ( scope.enableRotate === false ) return;\r\n\r\n                    handleMouseMoveRotate( event );\r\n\r\n                    break;\r\n\r\n                case STATE.DOLLY:\r\n\r\n                    if ( scope.enableZoom === false ) return;\r\n\r\n                    handleMouseMoveDolly( event );\r\n\r\n                    break;\r\n\r\n                case STATE.PAN:\r\n\r\n                    if ( scope.enablePan === false ) return;\r\n\r\n                    handleMouseMovePan( event );\r\n\r\n                    break;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onMouseWheel( event ) {\r\n\r\n            if ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;\r\n\r\n            event.preventDefault();\r\n\r\n            scope.dispatchEvent( _startEvent );\r\n\r\n            handleMouseWheel( event );\r\n\r\n            scope.dispatchEvent( _endEvent );\r\n\r\n        }\r\n\r\n        function onKeyDown( event ) {\r\n\r\n            if ( scope.enabled === false || scope.enablePan === false ) return;\r\n\r\n            handleKeyDown( event );\r\n\r\n        }\r\n\r\n        function onTouchStart( event ) {\r\n\r\n            trackPointer( event );\r\n\r\n            switch ( pointers.length ) {\r\n\r\n                case 1:\r\n\r\n                    switch ( scope.touches.ONE ) {\r\n\r\n                        case TOUCH.ROTATE:\r\n\r\n                            if ( scope.enableRotate === false ) return;\r\n\r\n                            handleTouchStartRotate();\r\n\r\n                            state = STATE.TOUCH_ROTATE;\r\n\r\n                            break;\r\n\r\n                        case TOUCH.PAN:\r\n\r\n                            if ( scope.enablePan === false ) return;\r\n\r\n                            handleTouchStartPan();\r\n\r\n                            state = STATE.TOUCH_PAN;\r\n\r\n                            break;\r\n\r\n                        default:\r\n\r\n                            state = STATE.NONE;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                case 2:\r\n\r\n                    switch ( scope.touches.TWO ) {\r\n\r\n                        case TOUCH.DOLLY_PAN:\r\n\r\n                            if ( scope.enableZoom === false && scope.enablePan === false ) return;\r\n\r\n                            handleTouchStartDollyPan();\r\n\r\n                            state = STATE.TOUCH_DOLLY_PAN;\r\n\r\n                            break;\r\n\r\n                        case TOUCH.DOLLY_ROTATE:\r\n\r\n                            if ( scope.enableZoom === false && scope.enableRotate === false ) return;\r\n\r\n                            handleTouchStartDollyRotate();\r\n\r\n                            state = STATE.TOUCH_DOLLY_ROTATE;\r\n\r\n                            break;\r\n\r\n                        default:\r\n\r\n                            state = STATE.NONE;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                default:\r\n\r\n                    state = STATE.NONE;\r\n\r\n            }\r\n\r\n            if ( state !== STATE.NONE ) {\r\n\r\n                scope.dispatchEvent( _startEvent );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onTouchMove( event ) {\r\n\r\n            trackPointer( event );\r\n\r\n            switch ( state ) {\r\n\r\n                case STATE.TOUCH_ROTATE:\r\n\r\n                    if ( scope.enableRotate === false ) return;\r\n\r\n                    handleTouchMoveRotate( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                case STATE.TOUCH_PAN:\r\n\r\n                    if ( scope.enablePan === false ) return;\r\n\r\n                    handleTouchMovePan( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                case STATE.TOUCH_DOLLY_PAN:\r\n\r\n                    if ( scope.enableZoom === false && scope.enablePan === false ) return;\r\n\r\n                    handleTouchMoveDollyPan( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                case STATE.TOUCH_DOLLY_ROTATE:\r\n\r\n                    if ( scope.enableZoom === false && scope.enableRotate === false ) return;\r\n\r\n                    handleTouchMoveDollyRotate( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                default:\r\n\r\n                    state = STATE.NONE;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onContextMenu( event ) {\r\n\r\n            if ( scope.enabled === false ) return;\r\n\r\n            event.preventDefault();\r\n\r\n        }\r\n\r\n        function addPointer( event ) {\r\n\r\n            pointers.push( event );\r\n\r\n        }\r\n\r\n        function removePointer( event ) {\r\n\r\n            delete pointerPositions[event.pointerId];\r\n\r\n            for ( let i = 0; i < pointers.length; i ++ ) {\r\n\r\n                if ( pointers[i].pointerId == event.pointerId ) {\r\n\r\n                    pointers.splice( i, 1 );\r\n                    return;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function trackPointer( event ) {\r\n\r\n            let position = pointerPositions[event.pointerId];\r\n\r\n            if ( position === undefined ) {\r\n\r\n                position = new Vector2();\r\n                pointerPositions[event.pointerId] = position;\r\n\r\n            }\r\n\r\n            position.set( event.pageX, event.pageY );\r\n\r\n        }\r\n\r\n        function getSecondPointerPosition( event ) {\r\n\r\n            const pointer = ( event.pointerId === pointers[0].pointerId ) ? pointers[1] : pointers[0];\r\n\r\n            return pointerPositions[pointer.pointerId];\r\n\r\n        }\r\n\r\n        //\r\n\r\n        scope.domElement.addEventListener( 'contextmenu', onContextMenu );\r\n\r\n        scope.domElement.addEventListener( 'pointerdown', onPointerDown );\r\n        scope.domElement.addEventListener( 'pointercancel', onPointerUp );\r\n        scope.domElement.addEventListener( 'wheel', onMouseWheel, { passive: false } );\r\n\r\n        // force an update at start\r\n\r\n        this.update();\r\n\r\n    }\r\n\r\n}\r\n\r\nexport { OrbitControls };\r\n","import { fadeElement } from './Util.js';\r\n\r\nconst STANDARD_FADE_DURATION = 500;\r\n\r\nexport class LoadingSpinner {\r\n\r\n    static elementIDGen = 0;\r\n\r\n    constructor(message, container) {\r\n\r\n        this.taskIDGen = 0;\r\n        this.elementID = LoadingSpinner.elementIDGen++;\r\n\r\n        this.tasks = [];\r\n\r\n        this.message = message || 'Loading...';\r\n        this.container = container || document.body;\r\n\r\n        this.spinnerContainerOuter = document.createElement('div');\r\n        this.spinnerContainerOuter.className = `spinnerOuterContainer${this.elementID}`;\r\n        this.spinnerContainerOuter.style.display = 'none';\r\n\r\n        this.spinnerContainerPrimary = document.createElement('div');\r\n        this.spinnerContainerPrimary.className = `spinnerContainerPrimary${this.elementID}`;\r\n        this.spinnerPrimary = document.createElement('div');\r\n        this.spinnerPrimary.classList.add(`spinner${this.elementID}`, `spinnerPrimary${this.elementID}`);\r\n        this.messageContainerPrimary = document.createElement('div');\r\n        this.messageContainerPrimary.classList.add(`messageContainer${this.elementID}`, `messageContainerPrimary${this.elementID}`);\r\n        this.messageContainerPrimary.innerHTML = this.message;\r\n\r\n        this.spinnerContainerMin = document.createElement('div');\r\n        this.spinnerContainerMin.className = `spinnerContainerMin${this.elementID}`;\r\n        this.spinnerMin = document.createElement('div');\r\n        this.spinnerMin.classList.add(`spinner${this.elementID}`, `spinnerMin${this.elementID}`);\r\n        this.messageContainerMin = document.createElement('div');\r\n        this.messageContainerMin.classList.add(`messageContainer${this.elementID}`, `messageContainerMin${this.elementID}`);\r\n        this.messageContainerMin.innerHTML = this.message;\r\n\r\n        this.spinnerContainerPrimary.appendChild(this.spinnerPrimary);\r\n        this.spinnerContainerPrimary.appendChild(this.messageContainerPrimary);\r\n        this.spinnerContainerOuter.appendChild(this.spinnerContainerPrimary);\r\n\r\n        this.spinnerContainerMin.appendChild(this.spinnerMin);\r\n        this.spinnerContainerMin.appendChild(this.messageContainerMin);\r\n        this.spinnerContainerOuter.appendChild(this.spinnerContainerMin);\r\n\r\n        const style = document.createElement('style');\r\n        style.innerHTML = `\r\n\r\n            .spinnerOuterContainer${this.elementID} {\r\n                width: 100%;\r\n                height: 100%;\r\n                margin: 0;\r\n                top: 0;\r\n                left: 0;\r\n                position: absolute;\r\n                pointer-events: none;\r\n            }\r\n\r\n            .messageContainer${this.elementID} {\r\n                height: 20px;\r\n                font-family: arial;\r\n                font-size: 12pt;\r\n                color: #ffffff;\r\n                text-align: center;\r\n                vertical-align: middle;\r\n            }\r\n\r\n            .spinner${this.elementID} {\r\n                padding: 15px;\r\n                background: #07e8d6;\r\n                z-index:99999;\r\n            \r\n                aspect-ratio: 1;\r\n                border-radius: 50%;\r\n                --_m: \r\n                    conic-gradient(#0000,#000),\r\n                    linear-gradient(#000 0 0) content-box;\r\n                -webkit-mask: var(--_m);\r\n                    mask: var(--_m);\r\n                -webkit-mask-composite: source-out;\r\n                    mask-composite: subtract;\r\n                box-sizing: border-box;\r\n                animation: load 1s linear infinite;\r\n            }\r\n\r\n            .spinnerContainerPrimary${this.elementID} {\r\n                z-index:99999;\r\n                background-color: rgba(128, 128, 128, 0.75);\r\n                border: #666666 1px solid;\r\n                border-radius: 5px;\r\n                padding-top: 20px;\r\n                padding-bottom: 10px;\r\n                margin: 0;\r\n                position: absolute;\r\n                top: 50%;\r\n                left: 50%;\r\n                transform: translate(-80px, -80px);\r\n                width: 180px;\r\n                pointer-events: auto;\r\n            }\r\n\r\n            .spinnerPrimary${this.elementID} {\r\n                width: 120px;\r\n                margin-left: 30px;\r\n            }\r\n\r\n            .messageContainerPrimary${this.elementID} {\r\n                padding-top: 15px;\r\n            }\r\n\r\n            .spinnerContainerMin${this.elementID} {\r\n                z-index:99999;\r\n                background-color: rgba(128, 128, 128, 0.75);\r\n                border: #666666 1px solid;\r\n                border-radius: 5px;\r\n                padding-top: 20px;\r\n                padding-bottom: 15px;\r\n                margin: 0;\r\n                position: absolute;\r\n                bottom: 50px;\r\n                left: 50%;\r\n                transform: translate(-50%, 0);\r\n                display: flex;\r\n                flex-direction: left;\r\n                pointer-events: auto;\r\n                min-width: 250px;\r\n            }\r\n\r\n            .messageContainerMin${this.elementID} {\r\n                margin-right: 15px;\r\n            }\r\n\r\n            .spinnerMin${this.elementID} {\r\n                width: 50px;\r\n                height: 50px;\r\n                margin-left: 15px;\r\n                margin-right: 25px;\r\n            }\r\n\r\n            .messageContainerMin${this.elementID} {\r\n                padding-top: 15px;\r\n            }\r\n            \r\n            @keyframes load {\r\n                to{transform: rotate(1turn)}\r\n            }\r\n\r\n        `;\r\n        this.spinnerContainerOuter.appendChild(style);\r\n        this.container.appendChild(this.spinnerContainerOuter);\r\n\r\n        this.setMinimized(false, true);\r\n\r\n        this.fadeTransitions = [];\r\n    }\r\n\r\n    addTask(message) {\r\n        const newTask = {\r\n            'message': message,\r\n            'id': this.taskIDGen++\r\n        };\r\n        this.tasks.push(newTask);\r\n        this.update();\r\n        return newTask.id;\r\n    }\r\n\r\n    removeTask(id) {\r\n        let index = 0;\r\n        for (let task of this.tasks) {\r\n            if (task.id === id) {\r\n                this.tasks.splice(index, 1);\r\n                break;\r\n            }\r\n            index++;\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    removeAllTasks() {\r\n        this.tasks = [];\r\n        this.update();\r\n    }\r\n\r\n    setMessageForTask(id, message) {\r\n        for (let task of this.tasks) {\r\n            if (task.id === id) {\r\n                task.message = message;\r\n                break;\r\n            }\r\n        }\r\n        this.update();\r\n    }\r\n\r\n    update() {\r\n        if (this.tasks.length > 0) {\r\n            this.show();\r\n            this.setMessage(this.tasks[this.tasks.length - 1].message);\r\n        } else {\r\n            this.hide();\r\n        }\r\n    }\r\n\r\n    show() {\r\n        this.spinnerContainerOuter.style.display = 'block';\r\n        this.visible = true;\r\n    }\r\n\r\n    hide() {\r\n        this.spinnerContainerOuter.style.display = 'none';\r\n        this.visible = false;\r\n    }\r\n\r\n    setContainer(container) {\r\n        if (this.container && this.spinnerContainerOuter.parentElement === this.container) {\r\n            this.container.removeChild(this.spinnerContainerOuter);\r\n        }\r\n        if (container) {\r\n            this.container = container;\r\n            this.container.appendChild(this.spinnerContainerOuter);\r\n            this.spinnerContainerOuter.style.zIndex = this.container.style.zIndex + 1;\r\n        }\r\n    }\r\n\r\n    setMinimized(minimized, instant) {\r\n        const showHideSpinner = (element, show, instant, displayStyle, fadeTransitionsIndex) => {\r\n            if (instant) {\r\n                element.style.display = show ? displayStyle : 'none';\r\n            } else {\r\n                this.fadeTransitions[fadeTransitionsIndex] = fadeElement(element, !show, displayStyle, STANDARD_FADE_DURATION, () => {\r\n                    this.fadeTransitions[fadeTransitionsIndex] = null;\r\n                });\r\n            }\r\n        };\r\n        showHideSpinner(this.spinnerContainerPrimary, !minimized, instant, 'block', 0);\r\n        showHideSpinner(this.spinnerContainerMin, minimized, instant, 'flex', 1);\r\n        this.minimized = minimized;\r\n    }\r\n\r\n    setMessage(msg) {\r\n        this.messageContainerPrimary.innerHTML = msg;\r\n        this.messageContainerMin.innerHTML = msg;\r\n    }\r\n}\r\n","export const fadeElement = (element, out, displayStyle, duration, onComplete) => {\r\n    const startTime = performance.now();\r\n\r\n    let startOpacity = element.style.display === 'none' ? 0 : parseFloat(element.style.opacity);\r\n    if (isNaN(startOpacity)) startOpacity = 1;\r\n\r\n    const interval = window.setInterval(() => {\r\n        const currentTime = performance.now();\r\n        const elapsed = currentTime - startTime;\r\n\r\n        let t = Math.min(elapsed / duration, 1.0);\r\n        if (t > 0.999) t = 1;\r\n\r\n        let opacity;\r\n        if (out) {\r\n            opacity = (1.0 - t) * startOpacity;\r\n            if (opacity < 0.0001) opacity = 0;\r\n        } else {\r\n            opacity = (1.0 - startOpacity) * t + startOpacity;\r\n        }\r\n\r\n        if (opacity > 0) {\r\n            element.style.display = displayStyle;\r\n            element.style.opacity = opacity;\r\n        } else {\r\n            element.style.display = 'none';\r\n        }\r\n\r\n        if (t >= 1) {\r\n            if (onComplete) onComplete();\r\n            window.clearInterval(interval);\r\n        }\r\n    }, 16);\r\n    return interval;\r\n};\r\n\r\nexport const cancelFade = (interval) => {\r\n    window.clearInterval(interval);\r\n};\r\n","export class LoadingProgressBar {\r\n\r\n    constructor(container) {\r\n\r\n        this.idGen = 0;\r\n\r\n        this.tasks = [];\r\n\r\n        this.container = container || document.body;\r\n\r\n        this.progressBarContainerOuter = document.createElement('div');\r\n        this.progressBarContainerOuter.className = 'progressBarOuterContainer';\r\n        this.progressBarContainerOuter.style.display = 'none';\r\n\r\n        this.progressBarBox = document.createElement('div');\r\n        this.progressBarBox.className = 'progressBarBox';\r\n\r\n        this.progressBarBackground = document.createElement('div');\r\n        this.progressBarBackground.className = 'progressBarBackground';\r\n\r\n        this.progressBar = document.createElement('div');\r\n        this.progressBar.className = 'progressBar';\r\n\r\n        this.progressBarBackground.appendChild(this.progressBar);\r\n        this.progressBarBox.appendChild(this.progressBarBackground);\r\n        this.progressBarContainerOuter.appendChild(this.progressBarBox);\r\n\r\n        const style = document.createElement('style');\r\n        style.innerHTML = `\r\n\r\n            .progressBarOuterContainer {\r\n                width: 100%;\r\n                height: 100%;\r\n                margin: 0;\r\n                top: 0;\r\n                left: 0;\r\n                position: absolute;\r\n                pointer-events: none;\r\n            }\r\n\r\n            .progressBarBox {\r\n                z-index:99999;\r\n                padding: 7px 9px 5px 7px;\r\n                background-color: rgba(190, 190, 190, 0.75);\r\n                border: #555555 1px solid;\r\n                border-radius: 15px;\r\n                margin: 0;\r\n                position: absolute;\r\n                bottom: 50px;\r\n                left: 50%;\r\n                transform: translate(-50%, 0);\r\n                width: 180px;\r\n                height: 30px;\r\n                pointer-events: auto;\r\n            }\r\n\r\n            .progressBarBackground {\r\n                width: 100%;\r\n                height: 25px;\r\n                border-radius:10px;\r\n                background-color: rgba(128, 128, 128, 0.75);\r\n                border: #444444 1px solid;\r\n                box-shadow: inset 0 0 10px #333333;\r\n            }\r\n\r\n            .progressBar {\r\n                height: 25px;\r\n                width: 0px;\r\n                border-radius:10px;\r\n                background-color: rgba(0, 200, 0, 0.75);\r\n                box-shadow: inset 0 0 10px #003300;\r\n            }\r\n\r\n        `;\r\n        this.progressBarContainerOuter.appendChild(style);\r\n        this.container.appendChild(this.progressBarContainerOuter);\r\n    }\r\n\r\n    show() {\r\n        this.progressBarContainerOuter.style.display = 'block';\r\n    }\r\n\r\n    hide() {\r\n        this.progressBarContainerOuter.style.display = 'none';\r\n    }\r\n\r\n    setProgress(progress) {\r\n        this.progressBar.style.width = progress + '%';\r\n    }\r\n\r\n    setContainer(container) {\r\n        if (this.container && this.progressBarContainerOuter.parentElement === this.container) {\r\n            this.container.removeChild(this.progressBarContainerOuter);\r\n        }\r\n        if (container) {\r\n            this.container = container;\r\n            this.container.appendChild(this.progressBarContainerOuter);\r\n            this.progressBarContainerOuter.style.zIndex = this.container.style.zIndex + 1;\r\n        }\r\n    }\r\n\r\n}\r\n","export class InfoPanel {\r\n\r\n    constructor(container) {\r\n\r\n        this.container = container || document.body;\r\n\r\n        this.infoCells = {};\r\n\r\n        const layout = [\r\n            ['Camera position', 'cameraPosition'],\r\n            ['Camera look-at', 'cameraLookAt'],\r\n            ['Camera up', 'cameraUp'],\r\n            ['Camera mode', 'orthographicCamera'],\r\n            ['Cursor position', 'cursorPosition'],\r\n            ['FPS', 'fps'],\r\n            ['Rendering:', 'renderSplatCount'],\r\n            ['Sort time', 'sortTime'],\r\n            ['Render window', 'renderWindow'],\r\n            ['Focal adjustment', 'focalAdjustment'],\r\n            ['Splat scale', 'splatScale'],\r\n            ['Point cloud mode', 'pointCloudMode']\r\n        ];\r\n\r\n        this.infoPanelContainer = document.createElement('div');\r\n        const style = document.createElement('style');\r\n        style.innerHTML = `\r\n\r\n            .infoPanel {\r\n                width: 430px;\r\n                padding: 10px;\r\n                background-color: rgba(50, 50, 50, 0.85);\r\n                border: #555555 2px solid;\r\n                color: #dddddd;\r\n                border-radius: 10px;\r\n                z-index: 9999;\r\n                font-family: arial;\r\n                font-size: 11pt;\r\n                text-align: left;\r\n                margin: 0;\r\n                top: 10px;\r\n                left:10px;\r\n                position: absolute;\r\n                pointer-events: auto;\r\n            }\r\n\r\n            .info-panel-cell {\r\n                margin-bottom: 5px;\r\n                padding-bottom: 2px;\r\n            }\r\n\r\n            .label-cell {\r\n                font-weight: bold;\r\n                font-size: 12pt;\r\n                width: 140px;\r\n            }\r\n\r\n        `;\r\n        this.infoPanelContainer.append(style);\r\n\r\n        this.infoPanel = document.createElement('div');\r\n        this.infoPanel.className = 'infoPanel';\r\n\r\n        const infoTable = document.createElement('div');\r\n        infoTable.style.display = 'table';\r\n\r\n        for (let layoutEntry of layout) {\r\n            const row = document.createElement('div');\r\n            row.style.display = 'table-row';\r\n            row.className = 'info-panel-row';\r\n\r\n            const labelCell = document.createElement('div');\r\n            labelCell.style.display = 'table-cell';\r\n            labelCell.innerHTML = `${layoutEntry[0]}: `;\r\n            labelCell.classList.add('info-panel-cell', 'label-cell');\r\n\r\n            const spacerCell = document.createElement('div');\r\n            spacerCell.style.display = 'table-cell';\r\n            spacerCell.style.width = '10px';\r\n            spacerCell.innerHTML = ' ';\r\n            spacerCell.className = 'info-panel-cell';\r\n\r\n            const infoCell = document.createElement('div');\r\n            infoCell.style.display = 'table-cell';\r\n            infoCell.innerHTML = '';\r\n            infoCell.className = 'info-panel-cell';\r\n\r\n            this.infoCells[layoutEntry[1]] = infoCell;\r\n\r\n            row.appendChild(labelCell);\r\n            row.appendChild(spacerCell);\r\n            row.appendChild(infoCell);\r\n\r\n            infoTable.appendChild(row);\r\n        }\r\n\r\n        this.infoPanel.appendChild(infoTable);\r\n        this.infoPanelContainer.append(this.infoPanel);\r\n        this.infoPanelContainer.style.display = 'none';\r\n        this.container.appendChild(this.infoPanelContainer);\r\n\r\n        this.visible = false;\r\n    }\r\n\r\n    update = function(renderDimensions, cameraPosition, cameraLookAtPosition, cameraUp, orthographicCamera,\r\n                      meshCursorPosition, currentFPS, splatCount, splatRenderCount,\r\n                      splatRenderCountPct, lastSortTime, focalAdjustment, splatScale, pointCloudMode) {\r\n\r\n        const cameraPosString = `${cameraPosition.x.toFixed(5)}, ${cameraPosition.y.toFixed(5)}, ${cameraPosition.z.toFixed(5)}`;\r\n        if (this.infoCells.cameraPosition.innerHTML !== cameraPosString) {\r\n            this.infoCells.cameraPosition.innerHTML = cameraPosString;\r\n        }\r\n\r\n        if (cameraLookAtPosition) {\r\n            const cla = cameraLookAtPosition;\r\n            const cameraLookAtString = `${cla.x.toFixed(5)}, ${cla.y.toFixed(5)}, ${cla.z.toFixed(5)}`;\r\n            if (this.infoCells.cameraLookAt.innerHTML !== cameraLookAtString) {\r\n                this.infoCells.cameraLookAt.innerHTML = cameraLookAtString;\r\n            }\r\n        }\r\n\r\n        const cameraUpString = `${cameraUp.x.toFixed(5)}, ${cameraUp.y.toFixed(5)}, ${cameraUp.z.toFixed(5)}`;\r\n        if (this.infoCells.cameraUp.innerHTML !== cameraUpString) {\r\n            this.infoCells.cameraUp.innerHTML = cameraUpString;\r\n        }\r\n\r\n        this.infoCells.orthographicCamera.innerHTML = orthographicCamera ? 'Orthographic' : 'Perspective';\r\n\r\n        if (meshCursorPosition) {\r\n            const cursPos = meshCursorPosition;\r\n            const cursorPosString = `${cursPos.x.toFixed(5)}, ${cursPos.y.toFixed(5)}, ${cursPos.z.toFixed(5)}`;\r\n            this.infoCells.cursorPosition.innerHTML = cursorPosString;\r\n        } else {\r\n            this.infoCells.cursorPosition.innerHTML = 'N/A';\r\n        }\r\n\r\n        this.infoCells.fps.innerHTML = currentFPS;\r\n        this.infoCells.renderWindow.innerHTML = `${renderDimensions.x} x ${renderDimensions.y}`;\r\n\r\n        this.infoCells.renderSplatCount.innerHTML =\r\n            `${splatRenderCount} splats out of ${splatCount} (${splatRenderCountPct.toFixed(2)}%)`;\r\n\r\n        this.infoCells.sortTime.innerHTML = `${lastSortTime.toFixed(3)} ms`;\r\n        this.infoCells.focalAdjustment.innerHTML = `${focalAdjustment.toFixed(3)}`;\r\n        this.infoCells.splatScale.innerHTML = `${splatScale.toFixed(3)}`;\r\n        this.infoCells.pointCloudMode.innerHTML = `${pointCloudMode}`;\r\n    };\r\n\r\n    setContainer(container) {\r\n        if (this.container && this.infoPanelContainer.parentElement === this.container) {\r\n            this.container.removeChild(this.infoPanelContainer);\r\n        }\r\n        if (container) {\r\n            this.container = container;\r\n            this.container.appendChild(this.infoPanelContainer);\r\n            this.infoPanelContainer.style.zIndex = this.container.style.zIndex + 1;\r\n        }\r\n    }\r\n\r\n    show() {\r\n        this.infoPanelContainer.style.display = 'block';\r\n        this.visible = true;\r\n    }\r\n\r\n    hide() {\r\n        this.infoPanelContainer.style.display = 'none';\r\n        this.visible = false;\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\n\r\nconst _axis = new THREE.Vector3();\r\n\r\nexport class ArrowHelper extends THREE.Object3D {\r\n\r\n    constructor(dir = new THREE.Vector3(0, 0, 1), origin = new THREE.Vector3(0, 0, 0), length = 1,\r\n                radius = 0.1, color = 0xffff00, headLength = length * 0.2, headRadius = headLength * 0.2) {\r\n        super();\r\n\r\n        this.type = 'ArrowHelper';\r\n\r\n        const lineGeometry = new THREE.CylinderGeometry(radius, radius, length, 32);\r\n        lineGeometry.translate(0, length / 2.0, 0);\r\n        const coneGeometry = new THREE.CylinderGeometry( 0, headRadius, headLength, 32);\r\n        coneGeometry.translate(0, length, 0);\r\n\r\n        this.position.copy( origin );\r\n\r\n        this.line = new THREE.Mesh(lineGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\r\n        this.line.matrixAutoUpdate = false;\r\n        this.add(this.line);\r\n\r\n        this.cone = new THREE.Mesh(coneGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\r\n        this.cone.matrixAutoUpdate = false;\r\n        this.add(this.cone);\r\n\r\n        this.setDirection(dir);\r\n    }\r\n\r\n    setDirection( dir ) {\r\n        if (dir.y > 0.99999) {\r\n            this.quaternion.set(0, 0, 0, 1);\r\n        } else if (dir.y < - 0.99999) {\r\n            this.quaternion.set(1, 0, 0, 0);\r\n        } else {\r\n            _axis.set(dir.z, 0, -dir.x).normalize();\r\n            const radians = Math.acos(dir.y);\r\n            this.quaternion.setFromAxisAngle(_axis, radians);\r\n        }\r\n    }\r\n\r\n    setColor( color ) {\r\n        this.line.material.color.set(color);\r\n        this.cone.material.color.set(color);\r\n    }\r\n\r\n    copy(source) {\r\n        super.copy(source, false);\r\n        this.line.copy(source.line);\r\n        this.cone.copy(source.cone);\r\n        return this;\r\n    }\r\n\r\n    dispose() {\r\n        this.line.geometry.dispose();\r\n        this.line.material.dispose();\r\n        this.cone.geometry.dispose();\r\n        this.cone.material.dispose();\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { ArrowHelper } from './ArrowHelper.js';\r\nimport { disposeAllMeshes } from './Util.js';\r\n\r\nexport class SceneHelper {\r\n\r\n    constructor(threeScene) {\r\n        this.threeScene = threeScene;\r\n        this.splatRenderTarget = null;\r\n        this.renderTargetCopyQuad = null;\r\n        this.renderTargetCopyCamera = null;\r\n        this.meshCursor = null;\r\n        this.focusMarker = null;\r\n        this.controlPlane = null;\r\n        this.debugRoot = null;\r\n        this.secondaryDebugRoot = null;\r\n    }\r\n\r\n    updateSplatRenderTargetForRenderDimensions(width, height) {\r\n        this.destroySplatRendertarget();\r\n        this.splatRenderTarget = new THREE.WebGLRenderTarget(width, height, {\r\n            format: THREE.RGBAFormat,\r\n            stencilBuffer: false,\r\n            depthBuffer: true,\r\n\r\n        });\r\n        this.splatRenderTarget.depthTexture = new THREE.DepthTexture(width, height);\r\n        this.splatRenderTarget.depthTexture.format = THREE.DepthFormat;\r\n        this.splatRenderTarget.depthTexture.type = THREE.UnsignedIntType;\r\n    }\r\n\r\n    destroySplatRendertarget() {\r\n        if (this.splatRenderTarget) {\r\n            this.splatRenderTarget = null;\r\n        }\r\n    }\r\n\r\n    setupRenderTargetCopyObjects() {\r\n        const uniforms = {\r\n            'sourceColorTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'sourceDepthTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n        };\r\n        const renderTargetCopyMaterial = new THREE.ShaderMaterial({\r\n            vertexShader: `\r\n                varying vec2 vUv;\r\n                void main() {\r\n                    vUv = uv;\r\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \r\n                }\r\n            `,\r\n            fragmentShader: `\r\n                #include <common>\r\n                #include <packing>\r\n                varying vec2 vUv;\r\n                uniform sampler2D sourceColorTexture;\r\n                uniform sampler2D sourceDepthTexture;\r\n                void main() {\r\n                    vec4 color = texture2D(sourceColorTexture, vUv);\r\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\r\n                    gl_FragDepth = fragDepth;\r\n                    gl_FragColor = vec4(color.rgb, color.a * 2.0);\r\n              }\r\n            `,\r\n            uniforms: uniforms,\r\n            depthWrite: false,\r\n            depthTest: false,\r\n            transparent: true,\r\n            blending: THREE.CustomBlending,\r\n            blendSrc: THREE.SrcAlphaFactor,\r\n            blendSrcAlpha: THREE.SrcAlphaFactor,\r\n            blendDst: THREE.OneMinusSrcAlphaFactor,\r\n            blendDstAlpha: THREE.OneMinusSrcAlphaFactor\r\n        });\r\n        renderTargetCopyMaterial.extensions.fragDepth = true;\r\n        this.renderTargetCopyQuad = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), renderTargetCopyMaterial);\r\n        this.renderTargetCopyCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\r\n    }\r\n\r\n    destroyRenderTargetCopyObjects() {\r\n        if (this.renderTargetCopyQuad) {\r\n            disposeAllMeshes(this.renderTargetCopyQuad);\r\n            this.renderTargetCopyQuad = null;\r\n        }\r\n    }\r\n\r\n    setupMeshCursor() {\r\n        if (!this.meshCursor) {\r\n            const coneGeometry = new THREE.ConeGeometry(0.5, 1.5, 32);\r\n            const coneMaterial = new THREE.MeshBasicMaterial({color: 0xFFFFFF});\r\n\r\n            const downArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            downArrow.rotation.set(0, 0, Math.PI);\r\n            downArrow.position.set(0, 1, 0);\r\n            const upArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            upArrow.position.set(0, -1, 0);\r\n            const leftArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            leftArrow.rotation.set(0, 0, Math.PI / 2.0);\r\n            leftArrow.position.set(1, 0, 0);\r\n            const rightArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            rightArrow.rotation.set(0, 0, -Math.PI / 2.0);\r\n            rightArrow.position.set(-1, 0, 0);\r\n\r\n            this.meshCursor = new THREE.Object3D();\r\n            this.meshCursor.add(downArrow);\r\n            this.meshCursor.add(upArrow);\r\n            this.meshCursor.add(leftArrow);\r\n            this.meshCursor.add(rightArrow);\r\n            this.meshCursor.scale.set(0.1, 0.1, 0.1);\r\n            this.threeScene.add(this.meshCursor);\r\n            this.meshCursor.visible = false;\r\n        }\r\n    }\r\n\r\n    destroyMeshCursor() {\r\n        if (this.meshCursor) {\r\n            disposeAllMeshes(this.meshCursor);\r\n            this.threeScene.remove(this.meshCursor);\r\n            this.meshCursor = null;\r\n        }\r\n    }\r\n\r\n    setMeshCursorVisibility(visible) {\r\n        this.meshCursor.visible = visible;\r\n    }\r\n\r\n    getMeschCursorVisibility() {\r\n        return this.meshCursor.visible;\r\n    }\r\n\r\n    setMeshCursorPosition(position) {\r\n        this.meshCursor.position.copy(position);\r\n    }\r\n\r\n    positionAndOrientMeshCursor(position, camera) {\r\n        this.meshCursor.position.copy(position);\r\n        this.meshCursor.up.copy(camera.up);\r\n        this.meshCursor.lookAt(camera.position);\r\n    }\r\n\r\n    setupFocusMarker() {\r\n        if (!this.focusMarker) {\r\n            const sphereGeometry = new THREE.SphereGeometry(.5, 32, 32);\r\n            const focusMarkerMaterial = SceneHelper.buildFocusMarkerMaterial();\r\n            focusMarkerMaterial.depthTest = false;\r\n            focusMarkerMaterial.depthWrite = false;\r\n            focusMarkerMaterial.transparent = true;\r\n            this.focusMarker = new THREE.Mesh(sphereGeometry, focusMarkerMaterial);\r\n        }\r\n    }\r\n\r\n    destroyFocusMarker() {\r\n        if (this.focusMarker) {\r\n            disposeAllMeshes(this.focusMarker);\r\n            this.focusMarker = null;\r\n        }\r\n    }\r\n\r\n    updateFocusMarker = function() {\r\n\r\n        const tempPosition = new THREE.Vector3();\r\n        const tempMatrix = new THREE.Matrix4();\r\n        const toCamera = new THREE.Vector3();\r\n\r\n        return function(position, camera, viewport) {\r\n            tempMatrix.copy(camera.matrixWorld).invert();\r\n            tempPosition.copy(position).applyMatrix4(tempMatrix);\r\n            tempPosition.normalize().multiplyScalar(10);\r\n            tempPosition.applyMatrix4(camera.matrixWorld);\r\n            toCamera.copy(camera.position).sub(position);\r\n            const toCameraDistance = toCamera.length();\r\n            this.focusMarker.position.copy(position);\r\n            this.focusMarker.scale.set(toCameraDistance, toCameraDistance, toCameraDistance);\r\n            this.focusMarker.material.uniforms.realFocusPosition.value.copy(position);\r\n            this.focusMarker.material.uniforms.viewport.value.copy(viewport);\r\n            this.focusMarker.material.uniformsNeedUpdate = true;\r\n        };\r\n\r\n    }();\r\n\r\n    setFocusMarkerVisibility(visible) {\r\n        this.focusMarker.visible = visible;\r\n    }\r\n\r\n    setFocusMarkerOpacity(opacity) {\r\n        this.focusMarker.material.uniforms.opacity.value = opacity;\r\n        this.focusMarker.material.uniformsNeedUpdate = true;\r\n    }\r\n\r\n    getFocusMarkerOpacity() {\r\n        return this.focusMarker.material.uniforms.opacity.value;\r\n    }\r\n\r\n    setupControlPlane() {\r\n        if (!this.controlPlane) {\r\n            const planeGeometry = new THREE.PlaneGeometry(1, 1);\r\n            planeGeometry.rotateX(-Math.PI / 2);\r\n            const planeMaterial = new THREE.MeshBasicMaterial({color: 0xffffff});\r\n            planeMaterial.transparent = true;\r\n            planeMaterial.opacity = 0.6;\r\n            planeMaterial.depthTest = false;\r\n            planeMaterial.depthWrite = false;\r\n            planeMaterial.side = THREE.DoubleSide;\r\n            const planeMesh = new THREE.Mesh(planeGeometry, planeMaterial);\r\n\r\n            const arrowDir = new THREE.Vector3(0, 1, 0);\r\n            arrowDir.normalize();\r\n            const arrowOrigin = new THREE.Vector3(0, 0, 0);\r\n            const arrowLength = 0.5;\r\n            const arrowRadius = 0.01;\r\n            const arrowColor = 0x00dd00;\r\n            const arrowHelper = new ArrowHelper(arrowDir, arrowOrigin, arrowLength, arrowRadius, arrowColor, 0.1, 0.03);\r\n\r\n            this.controlPlane = new THREE.Object3D();\r\n            this.controlPlane.add(planeMesh);\r\n            this.controlPlane.add(arrowHelper);\r\n        }\r\n    }\r\n\r\n    destroyControlPlane() {\r\n        if (this.controlPlane) {\r\n            disposeAllMeshes(this.controlPlane);\r\n            this.controlPlane = null;\r\n        }\r\n    }\r\n\r\n    setControlPlaneVisibility(visible) {\r\n        this.controlPlane.visible = visible;\r\n    }\r\n\r\n    positionAndOrientControlPlane = function() {\r\n\r\n        const tempQuaternion = new THREE.Quaternion();\r\n        const defaultUp = new THREE.Vector3(0, 1, 0);\r\n\r\n        return function(position, up) {\r\n            tempQuaternion.setFromUnitVectors(defaultUp, up);\r\n            this.controlPlane.position.copy(position);\r\n            this.controlPlane.quaternion.copy(tempQuaternion);\r\n        };\r\n\r\n    }();\r\n\r\n    addDebugMeshes() {\r\n        this.debugRoot = this.createDebugMeshes();\r\n        this.secondaryDebugRoot = this.createSecondaryDebugMeshes();\r\n        this.threeScene.add(this.debugRoot);\r\n        this.threeScene.add(this.secondaryDebugRoot);\r\n    }\r\n\r\n    destroyDebugMeshes() {\r\n        for (let debugRoot of [this.debugRoot, this.secondaryDebugRoot]) {\r\n            if (debugRoot) {\r\n                disposeAllMeshes(debugRoot);\r\n                this.threeScene.remove(debugRoot);\r\n            }\r\n        }\r\n        this.debugRoot = null;\r\n        this.secondaryDebugRoot = null;\r\n    }\r\n\r\n    createDebugMeshes(renderOrder) {\r\n        const sphereGeometry = new THREE.SphereGeometry(1, 32, 32);\r\n        const debugMeshRoot = new THREE.Object3D();\r\n\r\n        const createMesh = (color, position) => {\r\n            let sphereMesh = new THREE.Mesh(sphereGeometry, SceneHelper.buildDebugMaterial(color));\r\n            sphereMesh.renderOrder = renderOrder;\r\n            debugMeshRoot.add(sphereMesh);\r\n            sphereMesh.position.fromArray(position);\r\n        };\r\n\r\n        createMesh(0xff0000, [-50, 0, 0]);\r\n        createMesh(0xff0000, [50, 0, 0]);\r\n        createMesh(0x00ff00, [0, 0, -50]);\r\n        createMesh(0x00ff00, [0, 0, 50]);\r\n        createMesh(0xffaa00, [5, 0, 5]);\r\n\r\n        return debugMeshRoot;\r\n    }\r\n\r\n    createSecondaryDebugMeshes(renderOrder) {\r\n        const boxGeometry = new THREE.BoxGeometry(3, 3, 3);\r\n        const debugMeshRoot = new THREE.Object3D();\r\n\r\n        let boxColor = 0xBBBBBB;\r\n        const createMesh = (position) => {\r\n            let boxMesh = new THREE.Mesh(boxGeometry, SceneHelper.buildDebugMaterial(boxColor));\r\n            boxMesh.renderOrder = renderOrder;\r\n            debugMeshRoot.add(boxMesh);\r\n            boxMesh.position.fromArray(position);\r\n        };\r\n\r\n        let separation = 10;\r\n        createMesh([-separation, 0, -separation]);\r\n        createMesh([-separation, 0, separation]);\r\n        createMesh([separation, 0, -separation]);\r\n        createMesh([separation, 0, separation]);\r\n\r\n        return debugMeshRoot;\r\n    }\r\n\r\n    static buildDebugMaterial(color) {\r\n        const vertexShaderSource = `\r\n            #include <common>\r\n            varying float ndcDepth;\r\n\r\n            void main() {\r\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\r\n                ndcDepth = gl_Position.z / gl_Position.w;\r\n                gl_Position.x = gl_Position.x / gl_Position.w;\r\n                gl_Position.y = gl_Position.y / gl_Position.w;\r\n                gl_Position.z = 0.0;\r\n                gl_Position.w = 1.0;\r\n    \r\n            }\r\n        `;\r\n\r\n        const fragmentShaderSource = `\r\n            #include <common>\r\n            uniform vec3 color;\r\n            varying float ndcDepth;\r\n            void main() {\r\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\r\n                gl_FragColor = vec4(color.rgb, 0.0);\r\n            }\r\n        `;\r\n\r\n        const uniforms = {\r\n            'color': {\r\n                'type': 'v3',\r\n                'value': new THREE.Color(color)\r\n            },\r\n        };\r\n\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: vertexShaderSource,\r\n            fragmentShader: fragmentShaderSource,\r\n            transparent: false,\r\n            depthTest: true,\r\n            depthWrite: true,\r\n            side: THREE.FrontSide\r\n        });\r\n        material.extensions.fragDepth = true;\r\n\r\n        return material;\r\n    }\r\n\r\n    static buildFocusMarkerMaterial(color) {\r\n        const vertexShaderSource = `\r\n            #include <common>\r\n\r\n            uniform vec2 viewport;\r\n            uniform vec3 realFocusPosition;\r\n\r\n            varying vec4 ndcPosition;\r\n            varying vec4 ndcCenter;\r\n            varying vec4 ndcFocusPosition;\r\n\r\n            void main() {\r\n                float radius = 0.01;\r\n\r\n                vec4 viewPosition = modelViewMatrix * vec4(position.xyz, 1.0);\r\n                vec4 viewCenter = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\r\n\r\n                vec4 viewFocusPosition = modelViewMatrix * vec4(realFocusPosition, 1.0);\r\n\r\n                ndcPosition = projectionMatrix * viewPosition;\r\n                ndcPosition = ndcPosition * vec4(1.0 / ndcPosition.w);\r\n                ndcCenter = projectionMatrix * viewCenter;\r\n                ndcCenter = ndcCenter * vec4(1.0 / ndcCenter.w);\r\n\r\n                ndcFocusPosition = projectionMatrix * viewFocusPosition;\r\n                ndcFocusPosition = ndcFocusPosition * vec4(1.0 / ndcFocusPosition.w);\r\n\r\n                gl_Position = projectionMatrix * viewPosition;\r\n\r\n            }\r\n        `;\r\n\r\n        const fragmentShaderSource = `\r\n            #include <common>\r\n            uniform vec3 color;\r\n            uniform vec2 viewport;\r\n            uniform float opacity;\r\n\r\n            varying vec4 ndcPosition;\r\n            varying vec4 ndcCenter;\r\n            varying vec4 ndcFocusPosition;\r\n\r\n            void main() {\r\n                vec2 screenPosition = vec2(ndcPosition) * viewport;\r\n                vec2 screenCenter = vec2(ndcCenter) * viewport;\r\n\r\n                vec2 screenVec = screenPosition - screenCenter;\r\n\r\n                float projectedRadius = length(screenVec);\r\n\r\n                float lineWidth = 0.0005 * viewport.y;\r\n                float aaRange = 0.0025 * viewport.y;\r\n                float radius = 0.06 * viewport.y;\r\n                float radDiff = abs(projectedRadius - radius) - lineWidth;\r\n                float alpha = 1.0 - clamp(radDiff / 5.0, 0.0, 1.0); \r\n\r\n                gl_FragColor = vec4(color.rgb, alpha * opacity);\r\n            }\r\n        `;\r\n\r\n        const uniforms = {\r\n            'color': {\r\n                'type': 'v3',\r\n                'value': new THREE.Color(color)\r\n            },\r\n            'realFocusPosition': {\r\n                'type': 'v3',\r\n                'value': new THREE.Vector3()\r\n            },\r\n            'viewport': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'opacity': {\r\n                'value': 0.0\r\n            }\r\n        };\r\n\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: vertexShaderSource,\r\n            fragmentShader: fragmentShaderSource,\r\n            transparent: true,\r\n            depthTest: false,\r\n            depthWrite: false,\r\n            side: THREE.FrontSide\r\n        });\r\n\r\n        return material;\r\n    }\r\n\r\n    dispose() {\r\n        this.destroyMeshCursor();\r\n        this.destroyFocusMarker();\r\n        this.destroyDebugMeshes();\r\n        this.destroyControlPlane();\r\n        this.destroyRenderTargetCopyObjects();\r\n        this.destroySplatRendertarget();\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\n\r\nconst VectorRight = new THREE.Vector3(1, 0, 0);\r\nconst VectorUp = new THREE.Vector3(0, 1, 0);\r\nconst VectorBackward = new THREE.Vector3(0, 0, 1);\r\n\r\nexport class Ray {\r\n\r\n    constructor(origin = new THREE.Vector3(), direction = new THREE.Vector3()) {\r\n        this.origin = new THREE.Vector3();\r\n        this.direction = new THREE.Vector3();\r\n        this.setParameters(origin, direction);\r\n    }\r\n\r\n    setParameters(origin, direction) {\r\n        this.origin.copy(origin);\r\n        this.direction.copy(direction).normalize();\r\n    }\r\n\r\n    boxContainsPoint(box, point, epsilon) {\r\n        return point.x < box.min.x - epsilon || point.x > box.max.x + epsilon ||\r\n               point.y < box.min.y - epsilon || point.y > box.max.y + epsilon ||\r\n               point.z < box.min.z - epsilon || point.z > box.max.z + epsilon ? false : true;\r\n    }\r\n\r\n    intersectBox = function() {\r\n\r\n        const planeIntersectionPoint = new THREE.Vector3();\r\n        const planeIntersectionPointArray = [];\r\n        const originArray = [];\r\n        const directionArray = [];\r\n\r\n        return function(box, outHit) {\r\n\r\n            originArray[0] = this.origin.x;\r\n            originArray[1] = this.origin.y;\r\n            originArray[2] = this.origin.z;\r\n            directionArray[0] = this.direction.x;\r\n            directionArray[1] = this.direction.y;\r\n            directionArray[2] = this.direction.z;\r\n\r\n            if (this.boxContainsPoint(box, this.origin, 0.0001)) {\r\n                if (outHit) {\r\n                    outHit.origin.copy(this.origin);\r\n                    outHit.normal.set(0, 0, 0);\r\n                    outHit.distance = -1;\r\n                }\r\n                return true;\r\n            }\r\n\r\n            for (let i = 0; i < 3; i++) {\r\n                if (directionArray[i] == 0.0) continue;\r\n\r\n                const hitNormal = i == 0 ? VectorRight : i == 1 ? VectorUp : VectorBackward;\r\n                const extremeVec = directionArray[i] < 0 ? box.max : box.min;\r\n                let multiplier = -Math.sign(directionArray[i]);\r\n                planeIntersectionPointArray[0] = i == 0 ? extremeVec.x : i == 1 ? extremeVec.y : extremeVec.z;\r\n                let toSide = planeIntersectionPointArray[0] - originArray[i];\r\n\r\n                if (toSide * multiplier < 0) {\r\n                    const idx1 = (i + 1) % 3;\r\n                    const idx2 = (i + 2) % 3;\r\n                    planeIntersectionPointArray[2] = directionArray[idx1] / directionArray[i] * toSide + originArray[idx1];\r\n                    planeIntersectionPointArray[1] = directionArray[idx2] / directionArray[i] * toSide + originArray[idx2];\r\n                    planeIntersectionPoint.set(planeIntersectionPointArray[i],\r\n                                               planeIntersectionPointArray[idx2],\r\n                                               planeIntersectionPointArray[idx1]);\r\n                    if (this.boxContainsPoint(box, planeIntersectionPoint, 0.0001)) {\r\n                        if (outHit) {\r\n                            outHit.origin.copy(planeIntersectionPoint);\r\n                            outHit.normal.copy(hitNormal).multiplyScalar(multiplier);\r\n                            outHit.distance = planeIntersectionPoint.sub(this.origin).length();\r\n                        }\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n    }();\r\n\r\n    intersectSphere = function() {\r\n\r\n        const toSphereCenterVec = new THREE.Vector3();\r\n\r\n        return function(center, radius, outHit) {\r\n            toSphereCenterVec.copy(center).sub(this.origin);\r\n            const toClosestApproach = toSphereCenterVec.dot(this.direction);\r\n            const toClosestApproachSq = toClosestApproach * toClosestApproach;\r\n            const toSphereCenterSq = toSphereCenterVec.dot(toSphereCenterVec);\r\n            const diffSq = toSphereCenterSq - toClosestApproachSq;\r\n            const radiusSq = radius * radius;\r\n\r\n            if (diffSq > radiusSq) return false;\r\n\r\n            const thc = Math.sqrt(radiusSq - diffSq);\r\n            const t0 = toClosestApproach - thc;\r\n            const t1 = toClosestApproach + thc;\r\n\r\n            if (t1 < 0) return false;\r\n            let t = t0 < 0 ? t1 : t0;\r\n\r\n            if (outHit) {\r\n                outHit.origin.copy(this.origin).addScaledVector(this.direction, t);\r\n                outHit.normal.copy(outHit.origin).sub(center).normalize();\r\n                outHit.distance = t;\r\n            }\r\n            return true;\r\n        };\r\n\r\n    }();\r\n}\r\n","import * as THREE from 'three';\r\n\r\nexport class Hit {\r\n\r\n    constructor() {\r\n        this.origin = new THREE.Vector3();\r\n        this.normal = new THREE.Vector3();\r\n        this.distance = 0;\r\n        this.splatIndex = 0;\r\n    }\r\n\r\n    set(origin, normal, distance, splatIndex) {\r\n        this.origin.copy(origin);\r\n        this.normal.copy(normal);\r\n        this.distance = distance;\r\n        this.splatIndex = splatIndex;\r\n    }\r\n\r\n    clone() {\r\n        const hitClone = new Hit();\r\n        hitClone.origin.copy(this.origin);\r\n        hitClone.normal.copy(this.normal);\r\n        hitClone.distance = this.distance;\r\n        hitClone.splatIndex = this.splatIndex;\r\n        return hitClone;\r\n    }\r\n\r\n}\r\n","export const SplatRenderMode = {\r\n    ThreeD: 0,\r\n    TwoD: 1\r\n};\r\n","import * as THREE from 'three';\r\nimport { Ray } from './Ray.js';\r\nimport { Hit } from './Hit.js';\r\nimport { SplatRenderMode } from '../SplatRenderMode.js';\r\n\r\nexport class Raycaster {\r\n\r\n    constructor(origin, direction, raycastAgainstTrueSplatEllipsoid = false) {\r\n        this.ray = new Ray(origin, direction);\r\n        this.raycastAgainstTrueSplatEllipsoid = raycastAgainstTrueSplatEllipsoid;\r\n    }\r\n\r\n    setFromCameraAndScreenPosition = function() {\r\n\r\n        const ndcCoords = new THREE.Vector2();\r\n\r\n        return function(camera, screenPosition, screenDimensions) {\r\n            ndcCoords.x = screenPosition.x / screenDimensions.x * 2.0 - 1.0;\r\n            ndcCoords.y = (screenDimensions.y - screenPosition.y) / screenDimensions.y * 2.0 - 1.0;\r\n            if (camera.isPerspectiveCamera) {\r\n                this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\r\n                this.ray.direction.set(ndcCoords.x, ndcCoords.y, 0.5 ).unproject(camera).sub(this.ray.origin).normalize();\r\n                this.camera = camera;\r\n            } else if (camera.isOrthographicCamera) {\r\n                this.ray.origin.set(ndcCoords.x, ndcCoords.y,\r\n                                   (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera);\r\n                this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\r\n                this.camera = camera;\r\n            } else {\r\n                throw new Error('Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type');\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    intersectSplatMesh = function() {\r\n\r\n        const toLocal = new THREE.Matrix4();\r\n        const fromLocal = new THREE.Matrix4();\r\n        const sceneTransform = new THREE.Matrix4();\r\n        const localRay = new Ray();\r\n        const tempPoint = new THREE.Vector3();\r\n\r\n        return function(splatMesh, outHits = []) {\r\n            const splatTree = splatMesh.getSplatTree();\r\n\r\n            if (!splatTree) return;\r\n\r\n            for (let s = 0; s < splatTree.subTrees.length; s++) {\r\n                const subTree = splatTree.subTrees[s];\r\n\r\n                fromLocal.copy(splatMesh.matrixWorld);\r\n                if (splatMesh.dynamicMode) {\r\n                    splatMesh.getSceneTransform(s, sceneTransform);\r\n                    fromLocal.multiply(sceneTransform);\r\n                }\r\n                toLocal.copy(fromLocal).invert();\r\n\r\n                localRay.origin.copy(this.ray.origin).applyMatrix4(toLocal);\r\n                localRay.direction.copy(this.ray.origin).add(this.ray.direction);\r\n                localRay.direction.applyMatrix4(toLocal).sub(localRay.origin).normalize();\r\n\r\n                const outHitsForSubTree = [];\r\n                if (subTree.rootNode) {\r\n                    this.castRayAtSplatTreeNode(localRay, splatTree, subTree.rootNode, outHitsForSubTree);\r\n                }\r\n\r\n                outHitsForSubTree.forEach((hit) => {\r\n                    hit.origin.applyMatrix4(fromLocal);\r\n                    hit.normal.applyMatrix4(fromLocal).normalize();\r\n                    hit.distance = tempPoint.copy(hit.origin).sub(this.ray.origin).length();\r\n                });\r\n\r\n                outHits.push(...outHitsForSubTree);\r\n            }\r\n\r\n            outHits.sort((a, b) => {\r\n                if (a.distance > b.distance) return 1;\r\n                else return -1;\r\n            });\r\n\r\n            return outHits;\r\n        };\r\n\r\n    }();\r\n\r\n    castRayAtSplatTreeNode = function() {\r\n\r\n        const tempColor = new THREE.Vector4();\r\n        const tempCenter = new THREE.Vector3();\r\n        const tempScale = new THREE.Vector3();\r\n        const tempRotation = new THREE.Quaternion();\r\n        const tempHit = new Hit();\r\n        const scaleEpsilon = 0.0000001;\r\n\r\n        const origin = new THREE.Vector3(0, 0, 0);\r\n        const uniformScaleMatrix = new THREE.Matrix4();\r\n        const scaleMatrix = new THREE.Matrix4();\r\n        const rotationMatrix = new THREE.Matrix4();\r\n        const toSphereSpace = new THREE.Matrix4();\r\n        const fromSphereSpace = new THREE.Matrix4();\r\n        const tempRay = new Ray();\r\n\r\n        return function(ray, splatTree, node, outHits = []) {\r\n            if (!ray.intersectBox(node.boundingBox)) {\r\n                return;\r\n            }\r\n            if (node.data && node.data.indexes && node.data.indexes.length > 0) {\r\n                for (let i = 0; i < node.data.indexes.length; i++) {\r\n\r\n                    const splatGlobalIndex = node.data.indexes[i];\r\n                    const splatSceneIndex = splatTree.splatMesh.getSceneIndexForSplat(splatGlobalIndex);\r\n                    const splatScene = splatTree.splatMesh.getScene(splatSceneIndex);\r\n                    if (!splatScene.visible) continue;\r\n\r\n                    splatTree.splatMesh.getSplatColor(splatGlobalIndex, tempColor);\r\n                    splatTree.splatMesh.getSplatCenter(splatGlobalIndex, tempCenter);\r\n                    splatTree.splatMesh.getSplatScaleAndRotation(splatGlobalIndex, tempScale, tempRotation);\r\n\r\n                    if (tempScale.x <= scaleEpsilon || tempScale.y <= scaleEpsilon ||\r\n                        splatTree.splatMesh.splatRenderMode === SplatRenderMode.ThreeD && tempScale.z <= scaleEpsilon) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (!this.raycastAgainstTrueSplatEllipsoid) {\r\n                        let radius = (tempScale.x + tempScale.y);\r\n                        let componentCount = 2;\r\n                        if (splatTree.splatMesh.splatRenderMode === SplatRenderMode.ThreeD) {\r\n                            radius += tempScale.z;\r\n                            componentCount = 3;\r\n                        }\r\n                        radius = radius / componentCount;\r\n                        if (ray.intersectSphere(tempCenter, radius, tempHit)) {\r\n                            const hitClone = tempHit.clone();\r\n                            hitClone.splatIndex = splatGlobalIndex;\r\n                            outHits.push(hitClone);\r\n                        }\r\n                    } else {\r\n                        scaleMatrix.makeScale(tempScale.x, tempScale.y, tempScale.z);\r\n                        rotationMatrix.makeRotationFromQuaternion(tempRotation);\r\n                        const uniformScale = Math.log10(tempColor.w) * 2.0;\r\n                        uniformScaleMatrix.makeScale(uniformScale, uniformScale, uniformScale);\r\n                        fromSphereSpace.copy(uniformScaleMatrix).multiply(rotationMatrix).multiply(scaleMatrix);\r\n                        toSphereSpace.copy(fromSphereSpace).invert();\r\n                        tempRay.origin.copy(ray.origin).sub(tempCenter).applyMatrix4(toSphereSpace);\r\n                        tempRay.direction.copy(ray.origin).add(ray.direction).sub(tempCenter);\r\n                        tempRay.direction.applyMatrix4(toSphereSpace).sub(tempRay.origin).normalize();\r\n                        if (tempRay.intersectSphere(origin, 1.0, tempHit)) {\r\n                            const hitClone = tempHit.clone();\r\n                            hitClone.splatIndex = splatGlobalIndex;\r\n                            hitClone.origin.applyMatrix4(fromSphereSpace).add(tempCenter);\r\n                            outHits.push(hitClone);\r\n                        }\r\n                    }\r\n                }\r\n             }\r\n            if (node.children && node.children.length > 0) {\r\n                for (let child of node.children) {\r\n                    this.castRayAtSplatTreeNode(ray, splatTree, child, outHits);\r\n                }\r\n            }\r\n            return outHits;\r\n        };\r\n\r\n    }();\r\n}\r\n","import * as THREE from 'three';\r\nimport { Constants } from '../Constants.js';\r\n\r\nexport class SplatMaterial {\r\n\r\n    static buildVertexShaderBase(dynamicMode = false, enableOptionalEffects = false, maxSphericalHarmonicsDegree = 0, customVars = '') {\r\n        let vertexShaderSource = `\r\n        precision highp float;\r\n        #include <common>\r\n\r\n        attribute uint splatIndex;\r\n        uniform highp usampler2D centersColorsTexture;\r\n        uniform highp sampler2D sphericalHarmonicsTexture;\r\n        uniform highp sampler2D sphericalHarmonicsTextureR;\r\n        uniform highp sampler2D sphericalHarmonicsTextureG;\r\n        uniform highp sampler2D sphericalHarmonicsTextureB;\r\n\r\n        uniform highp usampler2D sceneIndexesTexture;\r\n        uniform vec2 sceneIndexesTextureSize;\r\n        uniform int sceneCount;\r\n    `;\r\n\r\n    if (enableOptionalEffects) {\r\n        vertexShaderSource += `\r\n            uniform float sceneOpacity[${Constants.MaxScenes}];\r\n            uniform int sceneVisibility[${Constants.MaxScenes}];\r\n        `;\r\n    }\r\n\r\n    if (dynamicMode) {\r\n        vertexShaderSource += `\r\n            uniform highp mat4 transforms[${Constants.MaxScenes}];\r\n        `;\r\n    }\r\n\r\n    vertexShaderSource += `\r\n        ${customVars}\r\n        uniform vec2 focal;\r\n        uniform float orthoZoom;\r\n        uniform int orthographicMode;\r\n        uniform int pointCloudModeEnabled;\r\n        uniform float inverseFocalAdjustment;\r\n        uniform vec2 viewport;\r\n        uniform vec2 basisViewport;\r\n        uniform vec2 centersColorsTextureSize;\r\n        uniform int sphericalHarmonicsDegree;\r\n        uniform vec2 sphericalHarmonicsTextureSize;\r\n        uniform int sphericalHarmonics8BitMode;\r\n        uniform int sphericalHarmonicsMultiTextureMode;\r\n        uniform float visibleRegionRadius;\r\n        uniform float visibleRegionFadeStartRadius;\r\n        uniform float firstRenderTime;\r\n        uniform float currentTime;\r\n        uniform int fadeInComplete;\r\n        uniform vec3 sceneCenter;\r\n        uniform float splatScale;\r\n        uniform float sphericalHarmonics8BitCompressionRangeMin[${Constants.MaxScenes}];\r\n        uniform float sphericalHarmonics8BitCompressionRangeMax[${Constants.MaxScenes}];\r\n\r\n        varying vec4 vColor;\r\n        varying vec2 vUv;\r\n        varying vec2 vPosition;\r\n\r\n        mat3 quaternionToRotationMatrix(float x, float y, float z, float w) {\r\n            float s = 1.0 / sqrt(w * w + x * x + y * y + z * z);\r\n        \r\n            return mat3(\r\n                1. - 2. * (y * y + z * z),\r\n                2. * (x * y + w * z),\r\n                2. * (x * z - w * y),\r\n                2. * (x * y - w * z),\r\n                1. - 2. * (x * x + z * z),\r\n                2. * (y * z + w * x),\r\n                2. * (x * z + w * y),\r\n                2. * (y * z - w * x),\r\n                1. - 2. * (x * x + y * y)\r\n            );\r\n        }\r\n\r\n        const float sqrt8 = sqrt(8.0);\r\n        const float minAlpha = 1.0 / 255.0;\r\n\r\n        const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\r\n        const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));\r\n        const uvec4 shift4 = uvec4(0, 8, 16, 24);\r\n        vec4 uintToRGBAVec (uint u) {\r\n           uvec4 urgba = mask4 & u;\r\n           urgba = urgba >> shift4;\r\n           vec4 rgba = vec4(urgba) * encodeNorm4;\r\n           return rgba;\r\n        }\r\n\r\n        vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\r\n            vec2 samplerUV = vec2(0.0, 0.0);\r\n            float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\r\n            samplerUV.y = float(floor(d)) / dimensions.y;\r\n            samplerUV.x = fract(d);\r\n            return samplerUV;\r\n        }\r\n\r\n        vec2 getDataUVF(in uint sIndex, in float stride, in uint offset, in vec2 dimensions) {\r\n            vec2 samplerUV = vec2(0.0, 0.0);\r\n            float d = float(uint(float(sIndex) * stride) + offset) / dimensions.x;\r\n            samplerUV.y = float(floor(d)) / dimensions.y;\r\n            samplerUV.x = fract(d);\r\n            return samplerUV;\r\n        }\r\n\r\n        const float SH_C1 = 0.4886025119029199f;\r\n        const float[5] SH_C2 = float[](1.0925484, -1.0925484, 0.3153916, -1.0925484, 0.5462742);\r\n\r\n        void main () {\r\n\r\n            uint oddOffset = splatIndex & uint(0x00000001);\r\n            uint doubleOddOffset = oddOffset * uint(2);\r\n            bool isEven = oddOffset == uint(0);\r\n            uint nearestEvenIndex = splatIndex - oddOffset;\r\n            float fOddOffset = float(oddOffset);\r\n\r\n            uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));\r\n            vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));\r\n\r\n            uint sceneIndex = uint(0);\r\n            if (sceneCount > 1) {\r\n                sceneIndex = texture(sceneIndexesTexture, getDataUV(1, 0, sceneIndexesTextureSize)).r;\r\n            }\r\n            `;\r\n\r\n        if (enableOptionalEffects) {\r\n            vertexShaderSource += `\r\n                float splatOpacityFromScene = sceneOpacity[sceneIndex];\r\n                int sceneVisible = sceneVisibility[sceneIndex];\r\n                if (splatOpacityFromScene <= 0.01 || sceneVisible == 0) {\r\n                    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\r\n                    return;\r\n                }\r\n            `;\r\n        }\r\n\r\n        if (dynamicMode) {\r\n            vertexShaderSource += `\r\n                mat4 transform = transforms[sceneIndex];\r\n                mat4 transformModelViewMatrix = viewMatrix * transform;\r\n            `;\r\n        } else {\r\n            vertexShaderSource += `mat4 transformModelViewMatrix = modelViewMatrix;`;\r\n        }\r\n\r\n        vertexShaderSource += `\r\n            float sh8BitCompressionRangeMinForScene = sphericalHarmonics8BitCompressionRangeMin[sceneIndex];\r\n            float sh8BitCompressionRangeMaxForScene = sphericalHarmonics8BitCompressionRangeMax[sceneIndex];\r\n            float sh8BitCompressionRangeForScene = sh8BitCompressionRangeMaxForScene - sh8BitCompressionRangeMinForScene;\r\n            float sh8BitCompressionHalfRangeForScene = sh8BitCompressionRangeForScene / 2.0;\r\n            vec3 vec8BitSHShift = vec3(sh8BitCompressionRangeMinForScene);\r\n\r\n            vec4 viewCenter = transformModelViewMatrix * vec4(splatCenter, 1.0);\r\n\r\n            vec4 clipCenter = projectionMatrix * viewCenter;\r\n\r\n            float clip = 1.2 * clipCenter.w;\r\n            if (clipCenter.z < -clip || clipCenter.x < -clip || clipCenter.x > clip || clipCenter.y < -clip || clipCenter.y > clip) {\r\n                gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\r\n                return;\r\n            }\r\n\r\n            vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\r\n\r\n            vPosition = position.xy;\r\n            vColor = uintToRGBAVec(sampledCenterColor.r);\r\n        `;\r\n\r\n        // Proceed to sampling and rendering 1st degree spherical harmonics\r\n        if (maxSphericalHarmonicsDegree >= 1) {\r\n\r\n            vertexShaderSource += `   \r\n            if (sphericalHarmonicsDegree >= 1) {\r\n            `;\r\n\r\n            if (dynamicMode) {\r\n                vertexShaderSource += `\r\n                    vec3 worldViewDir = normalize(splatCenter - vec3(inverse(transform) * vec4(cameraPosition, 1.0)));\r\n                `;\r\n            } else {\r\n                vertexShaderSource += `\r\n                    vec3 worldViewDir = normalize(splatCenter - cameraPosition);\r\n                `;\r\n            }\r\n\r\n            vertexShaderSource += `\r\n                vec3 sh1;\r\n                vec3 sh2;\r\n                vec3 sh3;\r\n            `;\r\n\r\n            if (maxSphericalHarmonicsDegree >= 2) {\r\n                vertexShaderSource += `\r\n                    vec3 sh4;\r\n                    vec3 sh5;\r\n                    vec3 sh6;\r\n                    vec3 sh7;\r\n                    vec3 sh8;\r\n                `;\r\n            }\r\n\r\n            // Determining how to sample spherical harmonics textures to get the coefficients for calculations for a given degree\r\n            // depends on how many total degrees (maxSphericalHarmonicsDegree) are present in the textures. This is because that\r\n            // number affects how they are packed in the textures, and therefore the offset & stride required to access them.\r\n\r\n            // Sample spherical harmonics textures with 1 degree worth of data for 1st degree calculations, and store in sh1, sh2, and sh3\r\n            if (maxSphericalHarmonicsDegree === 1) {\r\n                vertexShaderSource += `\r\n                    if (sphericalHarmonicsMultiTextureMode == 0) {\r\n                        vec2 shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset, sphericalHarmonicsTextureSize);\r\n                        vec4 sampledSH0123 = texture(sphericalHarmonicsTexture, shUV);\r\n                        shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset + uint(1), sphericalHarmonicsTextureSize);\r\n                        vec4 sampledSH4567 = texture(sphericalHarmonicsTexture, shUV);\r\n                        shUV = getDataUVF(nearestEvenIndex, 2.5, doubleOddOffset + uint(2), sphericalHarmonicsTextureSize);\r\n                        vec4 sampledSH891011 = texture(sphericalHarmonicsTexture, shUV);\r\n                        sh1 = vec3(sampledSH0123.rgb) * (1.0 - fOddOffset) + vec3(sampledSH0123.ba, sampledSH4567.r) * fOddOffset;\r\n                        sh2 = vec3(sampledSH0123.a, sampledSH4567.rg) * (1.0 - fOddOffset) + vec3(sampledSH4567.gba) * fOddOffset;\r\n                        sh3 = vec3(sampledSH4567.ba, sampledSH891011.r) * (1.0 - fOddOffset) + vec3(sampledSH891011.rgb) * fOddOffset;\r\n                    } else {\r\n                        vec2 sampledSH01R = texture(sphericalHarmonicsTextureR, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;\r\n                        vec2 sampledSH23R = texture(sphericalHarmonicsTextureR, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;\r\n                        vec2 sampledSH01G = texture(sphericalHarmonicsTextureG, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;\r\n                        vec2 sampledSH23G = texture(sphericalHarmonicsTextureG, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;\r\n                        vec2 sampledSH01B = texture(sphericalHarmonicsTextureB, getDataUV(2, 0, sphericalHarmonicsTextureSize)).rg;\r\n                        vec2 sampledSH23B = texture(sphericalHarmonicsTextureB, getDataUV(2, 1, sphericalHarmonicsTextureSize)).rg;\r\n                        sh1 = vec3(sampledSH01R.rg, sampledSH23R.r);\r\n                        sh2 = vec3(sampledSH01G.rg, sampledSH23G.r);\r\n                        sh3 = vec3(sampledSH01B.rg, sampledSH23B.r);\r\n                    }\r\n                `;\r\n            // Sample spherical harmonics textures with 2 degrees worth of data for 1st degree calculations, and store in sh1, sh2, and sh3\r\n            } else if (maxSphericalHarmonicsDegree === 2) {\r\n                vertexShaderSource += `\r\n                    vec4 sampledSH0123;\r\n                    vec4 sampledSH4567;\r\n                    vec4 sampledSH891011;\r\n\r\n                    vec4 sampledSH0123R;\r\n                    vec4 sampledSH0123G;\r\n                    vec4 sampledSH0123B;\r\n\r\n                    if (sphericalHarmonicsMultiTextureMode == 0) {\r\n                        sampledSH0123 = texture(sphericalHarmonicsTexture, getDataUV(6, 0, sphericalHarmonicsTextureSize));\r\n                        sampledSH4567 = texture(sphericalHarmonicsTexture, getDataUV(6, 1, sphericalHarmonicsTextureSize));\r\n                        sampledSH891011 = texture(sphericalHarmonicsTexture, getDataUV(6, 2, sphericalHarmonicsTextureSize));\r\n                        sh1 = sampledSH0123.rgb;\r\n                        sh2 = vec3(sampledSH0123.a, sampledSH4567.rg);\r\n                        sh3 = vec3(sampledSH4567.ba, sampledSH891011.r);\r\n                    } else {\r\n                        sampledSH0123R = texture(sphericalHarmonicsTextureR, getDataUV(2, 0, sphericalHarmonicsTextureSize));\r\n                        sampledSH0123G = texture(sphericalHarmonicsTextureG, getDataUV(2, 0, sphericalHarmonicsTextureSize));\r\n                        sampledSH0123B = texture(sphericalHarmonicsTextureB, getDataUV(2, 0, sphericalHarmonicsTextureSize));\r\n                        sh1 = vec3(sampledSH0123R.rgb);\r\n                        sh2 = vec3(sampledSH0123G.rgb);\r\n                        sh3 = vec3(sampledSH0123B.rgb);\r\n                    }\r\n                `;\r\n            }\r\n\r\n            // Perform 1st degree spherical harmonics calculations\r\n            vertexShaderSource += `\r\n                    if (sphericalHarmonics8BitMode == 1) {\r\n                        sh1 = sh1 * sh8BitCompressionRangeForScene + vec8BitSHShift;\r\n                        sh2 = sh2 * sh8BitCompressionRangeForScene + vec8BitSHShift;\r\n                        sh3 = sh3 * sh8BitCompressionRangeForScene + vec8BitSHShift;\r\n                    }\r\n                    float x = worldViewDir.x;\r\n                    float y = worldViewDir.y;\r\n                    float z = worldViewDir.z;\r\n                    vColor.rgb += SH_C1 * (-sh1 * y + sh2 * z - sh3 * x);\r\n            `;\r\n\r\n            // Proceed to sampling and rendering 2nd degree spherical harmonics\r\n            if (maxSphericalHarmonicsDegree >= 2) {\r\n\r\n                vertexShaderSource += `\r\n                    if (sphericalHarmonicsDegree >= 2) {\r\n                        float xx = x * x;\r\n                        float yy = y * y;\r\n                        float zz = z * z;\r\n                        float xy = x * y;\r\n                        float yz = y * z;\r\n                        float xz = x * z;\r\n                `;\r\n\r\n                // Sample spherical harmonics textures with 2 degrees worth of data for 2nd degree calculations,\r\n                // and store in sh4, sh5, sh6, sh7, and sh8\r\n                if (maxSphericalHarmonicsDegree === 2) {\r\n                    vertexShaderSource += `\r\n                        if (sphericalHarmonicsMultiTextureMode == 0) {\r\n                            vec4 sampledSH12131415 = texture(sphericalHarmonicsTexture, getDataUV(6, 3, sphericalHarmonicsTextureSize));\r\n                            vec4 sampledSH16171819 = texture(sphericalHarmonicsTexture, getDataUV(6, 4, sphericalHarmonicsTextureSize));\r\n                            vec4 sampledSH20212223 = texture(sphericalHarmonicsTexture, getDataUV(6, 5, sphericalHarmonicsTextureSize));\r\n                            sh4 = sampledSH891011.gba;\r\n                            sh5 = sampledSH12131415.rgb;\r\n                            sh6 = vec3(sampledSH12131415.a, sampledSH16171819.rg);\r\n                            sh7 = vec3(sampledSH16171819.ba, sampledSH20212223.r);\r\n                            sh8 = sampledSH20212223.gba;\r\n                        } else {\r\n                            vec4 sampledSH4567R = texture(sphericalHarmonicsTextureR, getDataUV(2, 1, sphericalHarmonicsTextureSize));\r\n                            vec4 sampledSH4567G = texture(sphericalHarmonicsTextureG, getDataUV(2, 1, sphericalHarmonicsTextureSize));\r\n                            vec4 sampledSH4567B = texture(sphericalHarmonicsTextureB, getDataUV(2, 1, sphericalHarmonicsTextureSize));\r\n                            sh4 = vec3(sampledSH0123R.a, sampledSH4567R.rg);\r\n                            sh5 = vec3(sampledSH4567R.ba, sampledSH0123G.a);\r\n                            sh6 = vec3(sampledSH4567G.rgb);\r\n                            sh7 = vec3(sampledSH4567G.a, sampledSH0123B.a, sampledSH4567B.r);\r\n                            sh8 = vec3(sampledSH4567B.gba);\r\n                        }\r\n                    `;\r\n                }\r\n\r\n                // Perform 2nd degree spherical harmonics calculations\r\n                vertexShaderSource += `\r\n                        if (sphericalHarmonics8BitMode == 1) {\r\n                            sh4 = sh4 * sh8BitCompressionRangeForScene + vec8BitSHShift;\r\n                            sh5 = sh5 * sh8BitCompressionRangeForScene + vec8BitSHShift;\r\n                            sh6 = sh6 * sh8BitCompressionRangeForScene + vec8BitSHShift;\r\n                            sh7 = sh7 * sh8BitCompressionRangeForScene + vec8BitSHShift;\r\n                            sh8 = sh8 * sh8BitCompressionRangeForScene + vec8BitSHShift;\r\n                        }\r\n\r\n                        vColor.rgb +=\r\n                            (SH_C2[0] * xy) * sh4 +\r\n                            (SH_C2[1] * yz) * sh5 +\r\n                            (SH_C2[2] * (2.0 * zz - xx - yy)) * sh6 +\r\n                            (SH_C2[3] * xz) * sh7 +\r\n                            (SH_C2[4] * (xx - yy)) * sh8;\r\n                    }\r\n                `;\r\n            }\r\n\r\n            vertexShaderSource += `\r\n\r\n                vColor.rgb = clamp(vColor.rgb, vec3(0.), vec3(1.));\r\n\r\n            }\r\n\r\n            `;\r\n        }\r\n\r\n        return vertexShaderSource;\r\n    }\r\n\r\n    static getVertexShaderFadeIn() {\r\n        return `\r\n            if (fadeInComplete == 0) {\r\n                float opacityAdjust = 1.0;\r\n                float centerDist = length(splatCenter - sceneCenter);\r\n                float renderTime = max(currentTime - firstRenderTime, 0.0);\r\n\r\n                float fadeDistance = 0.75;\r\n                float distanceLoadFadeInFactor = step(visibleRegionFadeStartRadius, centerDist);\r\n                distanceLoadFadeInFactor = (1.0 - distanceLoadFadeInFactor) +\r\n                                        (1.0 - clamp((centerDist - visibleRegionFadeStartRadius) / fadeDistance, 0.0, 1.0)) *\r\n                                        distanceLoadFadeInFactor;\r\n                opacityAdjust *= distanceLoadFadeInFactor;\r\n                vColor.a *= opacityAdjust;\r\n            }\r\n        `;\r\n    }\r\n\r\n    static getUniforms(dynamicMode = false, enableOptionalEffects = false, maxSphericalHarmonicsDegree = 0,\r\n                       splatScale = 1.0, pointCloudModeEnabled = false) {\r\n\r\n        const uniforms = {\r\n            'sceneCenter': {\r\n                'type': 'v3',\r\n                'value': new THREE.Vector3()\r\n            },\r\n            'fadeInComplete': {\r\n                'type': 'i',\r\n                'value': 0\r\n            },\r\n            'orthographicMode': {\r\n                'type': 'i',\r\n                'value': 0\r\n            },\r\n            'visibleRegionFadeStartRadius': {\r\n                'type': 'f',\r\n                'value': 0.0\r\n            },\r\n            'visibleRegionRadius': {\r\n                'type': 'f',\r\n                'value': 0.0\r\n            },\r\n            'currentTime': {\r\n                'type': 'f',\r\n                'value': 0.0\r\n            },\r\n            'firstRenderTime': {\r\n                'type': 'f',\r\n                'value': 0.0\r\n            },\r\n            'centersColorsTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'sphericalHarmonicsTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'sphericalHarmonicsTextureR': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'sphericalHarmonicsTextureG': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'sphericalHarmonicsTextureB': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'sphericalHarmonics8BitCompressionRangeMin': {\r\n                'type': 'f',\r\n                'value': []\r\n            },\r\n            'sphericalHarmonics8BitCompressionRangeMax': {\r\n                'type': 'f',\r\n                'value': []\r\n            },\r\n            'focal': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'orthoZoom': {\r\n                'type': 'f',\r\n                'value': 1.0\r\n            },\r\n            'inverseFocalAdjustment': {\r\n                'type': 'f',\r\n                'value': 1.0\r\n            },\r\n            'viewport': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'basisViewport': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'debugColor': {\r\n                'type': 'v3',\r\n                'value': new THREE.Color()\r\n            },\r\n            'centersColorsTextureSize': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2(1024, 1024)\r\n            },\r\n            'sphericalHarmonicsDegree': {\r\n                'type': 'i',\r\n                'value': maxSphericalHarmonicsDegree\r\n            },\r\n            'sphericalHarmonicsTextureSize': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2(1024, 1024)\r\n            },\r\n            'sphericalHarmonics8BitMode': {\r\n                'type': 'i',\r\n                'value': 0\r\n            },\r\n            'sphericalHarmonicsMultiTextureMode': {\r\n                'type': 'i',\r\n                'value': 0\r\n            },\r\n            'splatScale': {\r\n                'type': 'f',\r\n                'value': splatScale\r\n            },\r\n            'pointCloudModeEnabled': {\r\n                'type': 'i',\r\n                'value': pointCloudModeEnabled ? 1 : 0\r\n            },\r\n            'sceneIndexesTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'sceneIndexesTextureSize': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2(1024, 1024)\r\n            },\r\n            'sceneCount': {\r\n                'type': 'i',\r\n                'value': 1\r\n            }\r\n        };\r\n        for (let i = 0; i < Constants.MaxScenes; i++) {\r\n            uniforms.sphericalHarmonics8BitCompressionRangeMin.value.push(-Constants.SphericalHarmonics8BitCompressionRange / 2.0);\r\n            uniforms.sphericalHarmonics8BitCompressionRangeMax.value.push(Constants.SphericalHarmonics8BitCompressionRange / 2.0);\r\n        }\r\n\r\n        if (enableOptionalEffects) {\r\n            const sceneOpacity = [];\r\n            for (let i = 0; i < Constants.MaxScenes; i++) {\r\n                sceneOpacity.push(1.0);\r\n            }\r\n            uniforms['sceneOpacity'] ={\r\n                'type': 'f',\r\n                'value': sceneOpacity\r\n            };\r\n\r\n            const sceneVisibility = [];\r\n            for (let i = 0; i < Constants.MaxScenes; i++) {\r\n                sceneVisibility.push(1);\r\n            }\r\n            uniforms['sceneVisibility'] ={\r\n                'type': 'i',\r\n                'value': sceneVisibility\r\n            };\r\n        }\r\n\r\n        if (dynamicMode) {\r\n            const transformMatrices = [];\r\n            for (let i = 0; i < Constants.MaxScenes; i++) {\r\n                transformMatrices.push(new THREE.Matrix4());\r\n            }\r\n            uniforms['transforms'] = {\r\n                'type': 'mat4',\r\n                'value': transformMatrices\r\n            };\r\n        }\r\n\r\n        return uniforms;\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { SplatMaterial } from './SplatMaterial.js';\r\n\r\nexport class SplatMaterial3D {\r\n\r\n    /**\r\n     * Build the Three.js material that is used to render the splats.\r\n     * @param {number} dynamicMode If true, it means the scene geometry represented by this splat mesh is not stationary or\r\n     *                             that the splat count might change\r\n     * @param {boolean} enableOptionalEffects When true, allows for usage of extra properties and attributes in the shader for effects\r\n     *                                        such as opacity adjustment. Default is false for performance reasons.\r\n     * @param {boolean} antialiased If true, calculate compensation factor to deal with gaussians being rendered at a significantly\r\n     *                              different resolution than that of their training\r\n     * @param {number} maxScreenSpaceSplatSize The maximum clip space splat size\r\n     * @param {number} splatScale Value by which all splats are scaled in screen-space (default is 1.0)\r\n     * @param {number} pointCloudModeEnabled Render all splats as screen-space circles\r\n     * @param {number} maxSphericalHarmonicsDegree Degree of spherical harmonics to utilize in rendering splats\r\n     * @return {THREE.ShaderMaterial}\r\n     */\r\n    static build(dynamicMode = false, enableOptionalEffects = false, antialiased = false, maxScreenSpaceSplatSize = 2048,\r\n                 splatScale = 1.0, pointCloudModeEnabled = false, maxSphericalHarmonicsDegree = 0, kernel2DSize = 0.3) {\r\n\r\n        const customVertexVars = `\r\n            uniform vec2 covariancesTextureSize;\r\n            uniform highp sampler2D covariancesTexture;\r\n            uniform highp usampler2D covariancesTextureHalfFloat;\r\n            uniform int covariancesAreHalfFloat;\r\n\r\n            void fromCovarianceHalfFloatV4(uvec4 val, out vec4 first, out vec4 second) {\r\n                vec2 r = unpackHalf2x16(val.r);\r\n                vec2 g = unpackHalf2x16(val.g);\r\n                vec2 b = unpackHalf2x16(val.b);\r\n\r\n                first = vec4(r.x, r.y, g.x, g.y);\r\n                second = vec4(b.x, b.y, 0.0, 0.0);\r\n            }\r\n        `;\r\n\r\n        let vertexShaderSource = SplatMaterial.buildVertexShaderBase(dynamicMode, enableOptionalEffects,\r\n                                                                     maxSphericalHarmonicsDegree, customVertexVars);\r\n        vertexShaderSource += SplatMaterial3D.buildVertexShaderProjection(antialiased, enableOptionalEffects,\r\n                                                                          maxScreenSpaceSplatSize, kernel2DSize);\r\n        const fragmentShaderSource = SplatMaterial3D.buildFragmentShader();\r\n\r\n        const uniforms = SplatMaterial.getUniforms(dynamicMode, enableOptionalEffects,\r\n                                                   maxSphericalHarmonicsDegree, splatScale, pointCloudModeEnabled);\r\n\r\n        uniforms['covariancesTextureSize'] = {\r\n            'type': 'v2',\r\n            'value': new THREE.Vector2(1024, 1024)\r\n        };\r\n        uniforms['covariancesTexture'] = {\r\n            'type': 't',\r\n            'value': null\r\n        };\r\n        uniforms['covariancesTextureHalfFloat'] = {\r\n            'type': 't',\r\n            'value': null\r\n        };\r\n        uniforms['covariancesAreHalfFloat'] = {\r\n            'type': 'i',\r\n            'value': 0\r\n        };\r\n\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: vertexShaderSource,\r\n            fragmentShader: fragmentShaderSource,\r\n            transparent: true,\r\n            alphaTest: 1.0,\r\n            blending: THREE.NormalBlending,\r\n            depthTest: true,\r\n            depthWrite: false,\r\n            side: THREE.DoubleSide\r\n        });\r\n\r\n        return material;\r\n    }\r\n\r\n    static buildVertexShaderProjection(antialiased, enableOptionalEffects, maxScreenSpaceSplatSize, kernel2DSize) {\r\n        let vertexShaderSource = `\r\n\r\n            vec4 sampledCovarianceA;\r\n            vec4 sampledCovarianceB;\r\n            vec3 cov3D_M11_M12_M13;\r\n            vec3 cov3D_M22_M23_M33;\r\n            if (covariancesAreHalfFloat == 0) {\r\n                sampledCovarianceA = texture(covariancesTexture, getDataUVF(nearestEvenIndex, 1.5, oddOffset,\r\n                                                                            covariancesTextureSize));\r\n                sampledCovarianceB = texture(covariancesTexture, getDataUVF(nearestEvenIndex, 1.5, oddOffset + uint(1),\r\n                                                                            covariancesTextureSize));\r\n\r\n                cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rgb) * (1.0 - fOddOffset) +\r\n                                    vec3(sampledCovarianceA.ba, sampledCovarianceB.r) * fOddOffset;\r\n                cov3D_M22_M23_M33 = vec3(sampledCovarianceA.a, sampledCovarianceB.rg) * (1.0 - fOddOffset) +\r\n                                    vec3(sampledCovarianceB.gba) * fOddOffset;\r\n            } else {\r\n                uvec4 sampledCovarianceU = texture(covariancesTextureHalfFloat, getDataUV(1, 0, covariancesTextureSize));\r\n                fromCovarianceHalfFloatV4(sampledCovarianceU, sampledCovarianceA, sampledCovarianceB);\r\n                cov3D_M11_M12_M13 = sampledCovarianceA.rgb;\r\n                cov3D_M22_M23_M33 = vec3(sampledCovarianceA.a, sampledCovarianceB.rg);\r\n            }\r\n        \r\n            // Construct the 3D covariance matrix\r\n            mat3 Vrk = mat3(\r\n                cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\r\n                cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\r\n                cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\r\n            );\r\n\r\n            mat3 J;\r\n            if (orthographicMode == 1) {\r\n                // Since the projection is linear, we don't need an approximation\r\n                J = transpose(mat3(orthoZoom, 0.0, 0.0,\r\n                                0.0, orthoZoom, 0.0,\r\n                                0.0, 0.0, 0.0));\r\n            } else {\r\n                // Construct the Jacobian of the affine approximation of the projection matrix. It will be used to transform the\r\n                // 3D covariance matrix instead of using the actual projection matrix because that transformation would\r\n                // require a non-linear component (perspective division) which would yield a non-gaussian result.\r\n                float s = 1.0 / (viewCenter.z * viewCenter.z);\r\n                J = mat3(\r\n                    focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) * s,\r\n                    0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) * s,\r\n                    0., 0., 0.\r\n                );\r\n            }\r\n\r\n            // Concatenate the projection approximation with the model-view transformation\r\n            mat3 W = transpose(mat3(transformModelViewMatrix));\r\n            mat3 T = W * J;\r\n\r\n            // Transform the 3D covariance matrix (Vrk) to compute the 2D covariance matrix\r\n            mat3 cov2Dm = transpose(T) * Vrk * T;\r\n            `;\r\n\r\n        if (antialiased) {\r\n            vertexShaderSource += `\r\n                float detOrig = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\r\n                cov2Dm[0][0] += ${kernel2DSize};\r\n                cov2Dm[1][1] += ${kernel2DSize};\r\n                float detBlur = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\r\n                vColor.a *= sqrt(max(detOrig / detBlur, 0.0));\r\n                if (vColor.a < minAlpha) return;\r\n            `;\r\n        } else {\r\n            vertexShaderSource += `\r\n                cov2Dm[0][0] += ${kernel2DSize};\r\n                cov2Dm[1][1] += ${kernel2DSize};\r\n            `;\r\n        }\r\n\r\n        vertexShaderSource += `\r\n\r\n            // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\r\n            // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\r\n            // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\r\n            // need cov2Dm[1][0] because it is a symetric matrix.\r\n            vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\r\n\r\n            // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\r\n            // so that we can determine the 2D basis for the splat. This is done using the method described\r\n            // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\r\n            // After calculating the eigen-values and eigen-vectors, we calculate the basis for rendering the splat\r\n            // by normalizing the eigen-vectors and then multiplying them by (sqrt(8) * sqrt(eigen-value)), which is\r\n            // equal to scaling them by sqrt(8) standard deviations.\r\n            //\r\n            // This is a different approach than in the original work at INRIA. In that work they compute the\r\n            // max extents of the projected splat in screen space to form a screen-space aligned bounding rectangle\r\n            // which forms the geometry that is actually rasterized. The dimensions of that bounding box are 3.0\r\n            // times the square root of the maximum eigen-value, or 3 standard deviations. They then use the inverse\r\n            // 2D covariance matrix (called 'conic') in the CUDA rendering thread to determine fragment opacity by\r\n            // calculating the full gaussian: exp(-0.5 * (X - mean) * conic * (X - mean)) * splat opacity\r\n            float a = cov2Dv.x;\r\n            float d = cov2Dv.z;\r\n            float b = cov2Dv.y;\r\n            float D = a * d - b * b;\r\n            float trace = a + d;\r\n            float traceOver2 = 0.5 * trace;\r\n            float term2 = sqrt(max(0.1f, traceOver2 * traceOver2 - D));\r\n            float eigenValue1 = traceOver2 + term2;\r\n            float eigenValue2 = traceOver2 - term2;\r\n\r\n            if (pointCloudModeEnabled == 1) {\r\n                eigenValue1 = eigenValue2 = 0.2;\r\n            }\r\n\r\n            if (eigenValue2 <= 0.0) return;\r\n\r\n            vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\r\n            // since the eigen vectors are orthogonal, we derive the second one from the first\r\n            vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);\r\n\r\n            // We use sqrt(8) standard deviations instead of 3 to eliminate more of the splat with a very low opacity.\r\n            vec2 basisVector1 = eigenVector1 * splatScale * min(sqrt8 * sqrt(eigenValue1), ${parseInt(maxScreenSpaceSplatSize)}.0);\r\n            vec2 basisVector2 = eigenVector2 * splatScale * min(sqrt8 * sqrt(eigenValue2), ${parseInt(maxScreenSpaceSplatSize)}.0);\r\n            `;\r\n\r\n        if (enableOptionalEffects) {\r\n            vertexShaderSource += `\r\n                vColor.a *= splatOpacityFromScene;\r\n            `;\r\n        }\r\n\r\n        vertexShaderSource += `\r\n            vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) *\r\n                             basisViewport * 2.0 * inverseFocalAdjustment;\r\n\r\n            vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\r\n            gl_Position = quadPos;\r\n\r\n            // Scale the position data we send to the fragment shader\r\n            vPosition *= sqrt8;\r\n        `;\r\n\r\n        vertexShaderSource += SplatMaterial.getVertexShaderFadeIn();\r\n        vertexShaderSource += `}`;\r\n\r\n        return vertexShaderSource;\r\n    }\r\n\r\n    static buildFragmentShader() {\r\n        let fragmentShaderSource = `\r\n            precision highp float;\r\n            #include <common>\r\n \r\n            uniform vec3 debugColor;\r\n\r\n            varying vec4 vColor;\r\n            varying vec2 vUv;\r\n            varying vec2 vPosition;\r\n        `;\r\n\r\n        fragmentShaderSource += `\r\n            void main () {\r\n                // Compute the positional squared distance from the center of the splat to the current fragment.\r\n                float A = dot(vPosition, vPosition);\r\n                // Since the positional data in vPosition has been scaled by sqrt(8), the squared result will be\r\n                // scaled by a factor of 8. If the squared result is larger than 8, it means it is outside the ellipse\r\n                // defined by the rectangle formed by vPosition. It also means it's farther\r\n                // away than sqrt(8) standard deviations from the mean.\r\n                if (A > 8.0) discard;\r\n                vec3 color = vColor.rgb;\r\n\r\n                // Since the rendered splat is scaled by sqrt(8), the inverse covariance matrix that is part of\r\n                // the gaussian formula becomes the identity matrix. We're then left with (X - mean) * (X - mean),\r\n                // and since 'mean' is zero, we have X * X, which is the same as A:\r\n                float opacity = exp(-0.5 * A) * vColor.a;\r\n\r\n                gl_FragColor = vec4(color.rgb, opacity);\r\n            }\r\n        `;\r\n\r\n        return fragmentShaderSource;\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { SplatMaterial } from './SplatMaterial.js';\r\n\r\nexport class SplatMaterial2D {\r\n\r\n    /**\r\n     * Build the Three.js material that is used to render the splats.\r\n     * @param {number} dynamicMode If true, it means the scene geometry represented by this splat mesh is not stationary or\r\n     *                             that the splat count might change\r\n     * @param {boolean} enableOptionalEffects When true, allows for usage of extra properties and attributes in the shader for effects\r\n     *                                        such as opacity adjustment. Default is false for performance reasons.\r\n     * @param {number} splatScale Value by which all splats are scaled in screen-space (default is 1.0)\r\n     * @param {number} pointCloudModeEnabled Render all splats as screen-space circles\r\n     * @param {number} maxSphericalHarmonicsDegree Degree of spherical harmonics to utilize in rendering splats\r\n     * @return {THREE.ShaderMaterial}\r\n     */\r\n    static build(dynamicMode = false, enableOptionalEffects = false, splatScale = 1.0,\r\n                 pointCloudModeEnabled = false, maxSphericalHarmonicsDegree = 0) {\r\n\r\n        const customVertexVars = `\r\n            uniform vec2 scaleRotationsTextureSize;\r\n            uniform highp sampler2D scaleRotationsTexture;\r\n            varying mat3 vT;\r\n            varying vec2 vQuadCenter;\r\n            varying vec2 vFragCoord;\r\n        `;\r\n\r\n        let vertexShaderSource = SplatMaterial.buildVertexShaderBase(dynamicMode, enableOptionalEffects,\r\n                                                                     maxSphericalHarmonicsDegree, customVertexVars);\r\n        vertexShaderSource += SplatMaterial2D.buildVertexShaderProjection();\r\n        const fragmentShaderSource = SplatMaterial2D.buildFragmentShader();\r\n\r\n        const uniforms = SplatMaterial.getUniforms(dynamicMode, enableOptionalEffects,\r\n                                                   maxSphericalHarmonicsDegree, splatScale, pointCloudModeEnabled);\r\n\r\n        uniforms['scaleRotationsTexture'] = {\r\n            'type': 't',\r\n            'value': null\r\n        };\r\n        uniforms['scaleRotationsTextureSize'] = {\r\n            'type': 'v2',\r\n            'value': new THREE.Vector2(1024, 1024)\r\n        };\r\n\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: vertexShaderSource,\r\n            fragmentShader: fragmentShaderSource,\r\n            transparent: true,\r\n            alphaTest: 1.0,\r\n            blending: THREE.NormalBlending,\r\n            depthTest: true,\r\n            depthWrite: false,\r\n            side: THREE.DoubleSide\r\n        });\r\n\r\n        return material;\r\n    }\r\n\r\n    static buildVertexShaderProjection() {\r\n\r\n        // Original CUDA code for calculating splat-to-screen transformation, for reference\r\n        /*\r\n            glm::mat3 R = quat_to_rotmat(rot);\r\n            glm::mat3 S = scale_to_mat(scale, mod);\r\n            glm::mat3 L = R * S;\r\n\r\n            // center of Gaussians in the camera coordinate\r\n            glm::mat3x4 splat2world = glm::mat3x4(\r\n                glm::vec4(L[0], 0.0),\r\n                glm::vec4(L[1], 0.0),\r\n                glm::vec4(p_orig.x, p_orig.y, p_orig.z, 1)\r\n            );\r\n\r\n            glm::mat4 world2ndc = glm::mat4(\r\n                projmatrix[0], projmatrix[4], projmatrix[8], projmatrix[12],\r\n                projmatrix[1], projmatrix[5], projmatrix[9], projmatrix[13],\r\n                projmatrix[2], projmatrix[6], projmatrix[10], projmatrix[14],\r\n                projmatrix[3], projmatrix[7], projmatrix[11], projmatrix[15]\r\n            );\r\n\r\n            glm::mat3x4 ndc2pix = glm::mat3x4(\r\n                glm::vec4(float(W) / 2.0, 0.0, 0.0, float(W-1) / 2.0),\r\n                glm::vec4(0.0, float(H) / 2.0, 0.0, float(H-1) / 2.0),\r\n                glm::vec4(0.0, 0.0, 0.0, 1.0)\r\n            );\r\n\r\n            T = glm::transpose(splat2world) * world2ndc * ndc2pix;\r\n            normal = transformVec4x3({L[2].x, L[2].y, L[2].z}, viewmatrix);\r\n        */\r\n\r\n        // Compute a 2D-to-2D mapping matrix from a tangent plane into a image plane\r\n        // given a 2D gaussian parameters. T = WH (from the paper: https://arxiv.org/pdf/2403.17888)\r\n        let vertexShaderSource = `\r\n\r\n            vec4 scaleRotationA = texture(scaleRotationsTexture, getDataUVF(nearestEvenIndex, 1.5,\r\n                                                                            oddOffset, scaleRotationsTextureSize));\r\n            vec4 scaleRotationB = texture(scaleRotationsTexture, getDataUVF(nearestEvenIndex, 1.5,\r\n                                                                            oddOffset + uint(1), scaleRotationsTextureSize));\r\n\r\n            vec3 scaleRotation123 = vec3(scaleRotationA.rgb) * (1.0 - fOddOffset) +\r\n                                    vec3(scaleRotationA.ba, scaleRotationB.r) * fOddOffset;\r\n            vec3 scaleRotation456 = vec3(scaleRotationA.a, scaleRotationB.rg) * (1.0 - fOddOffset) +\r\n                                    vec3(scaleRotationB.gba) * fOddOffset;\r\n\r\n            float missingW = sqrt(1.0 - scaleRotation456.x * scaleRotation456.x - scaleRotation456.y *\r\n                                    scaleRotation456.y - scaleRotation456.z * scaleRotation456.z);\r\n            mat3 R = quaternionToRotationMatrix(scaleRotation456.r, scaleRotation456.g, scaleRotation456.b, missingW);\r\n            mat3 S = mat3(scaleRotation123.r, 0.0, 0.0,\r\n                            0.0, scaleRotation123.g, 0.0,\r\n                            0.0, 0.0, scaleRotation123.b);\r\n            \r\n            mat3 L = R * S;\r\n\r\n            mat3x4 splat2World = mat3x4(vec4(L[0], 0.0),\r\n                                        vec4(L[1], 0.0),\r\n                                        vec4(splatCenter.x, splatCenter.y, splatCenter.z, 1.0));\r\n\r\n            mat4 world2ndc = transpose(projectionMatrix * transformModelViewMatrix);\r\n\r\n            mat3x4 ndc2pix = mat3x4(vec4(viewport.x / 2.0, 0.0, 0.0, (viewport.x - 1.0) / 2.0),\r\n                                    vec4(0.0, viewport.y / 2.0, 0.0, (viewport.y - 1.0) / 2.0),\r\n                                    vec4(0.0, 0.0, 0.0, 1.0));\r\n\r\n            mat3 T = transpose(splat2World) * world2ndc * ndc2pix;\r\n            vec3 normal = vec3(viewMatrix * vec4(L[0][2], L[1][2], L[2][2], 0.0));\r\n        `;\r\n\r\n        // Original CUDA code for projection to 2D, for reference\r\n        /*\r\n            float3 T0 = {T[0][0], T[0][1], T[0][2]};\r\n            float3 T1 = {T[1][0], T[1][1], T[1][2]};\r\n            float3 T3 = {T[2][0], T[2][1], T[2][2]};\r\n\r\n            // Compute AABB\r\n            float3 temp_point = {1.0f, 1.0f, -1.0f};\r\n            float distance = sumf3(T3 * T3 * temp_point);\r\n            float3 f = (1 / distance) * temp_point;\r\n            if (distance == 0.0) return false;\r\n\r\n            point_image = {\r\n                sumf3(f * T0 * T3),\r\n                sumf3(f * T1 * T3)\r\n            };\r\n\r\n            float2 temp = {\r\n                sumf3(f * T0 * T0),\r\n                sumf3(f * T1 * T1)\r\n            };\r\n            float2 half_extend = point_image * point_image - temp;\r\n            extent = sqrtf2(maxf2(1e-4, half_extend));\r\n            return true;\r\n        */\r\n\r\n        // Computing the bounding box of the 2D Gaussian and its center\r\n        // The center of the bounding box is used to create a low pass filter.\r\n        // This code is based off the reference implementation and creates an AABB aligned\r\n        // with the screen for the quad to be rendered.\r\n        const referenceQuadGeneration = `\r\n            vec3 T0 = vec3(T[0][0], T[0][1], T[0][2]);\r\n            vec3 T1 = vec3(T[1][0], T[1][1], T[1][2]);\r\n            vec3 T3 = vec3(T[2][0], T[2][1], T[2][2]);\r\n\r\n            vec3 tempPoint = vec3(1.0, 1.0, -1.0);\r\n            float distance = (T3.x * T3.x * tempPoint.x) + (T3.y * T3.y * tempPoint.y) + (T3.z * T3.z * tempPoint.z);\r\n            vec3 f = (1.0 / distance) * tempPoint;\r\n            if (abs(distance) < 0.00001) return;\r\n\r\n            float pointImageX = (T0.x * T3.x * f.x) + (T0.y * T3.y * f.y) + (T0.z * T3.z * f.z);\r\n            float pointImageY = (T1.x * T3.x * f.x) + (T1.y * T3.y * f.y) + (T1.z * T3.z * f.z);\r\n            vec2 pointImage = vec2(pointImageX, pointImageY);\r\n\r\n            float tempX = (T0.x * T0.x * f.x) + (T0.y * T0.y * f.y) + (T0.z * T0.z * f.z);\r\n            float tempY = (T1.x * T1.x * f.x) + (T1.y * T1.y * f.y) + (T1.z * T1.z * f.z);\r\n            vec2 temp = vec2(tempX, tempY);\r\n\r\n            vec2 halfExtend = pointImage * pointImage - temp;\r\n            vec2 extent = sqrt(max(vec2(0.0001), halfExtend));\r\n            float radius = max(extent.x, extent.y);\r\n\r\n            vec2 ndcOffset = ((position.xy * radius * 3.0) * basisViewport * 2.0);\r\n\r\n            vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\r\n            gl_Position = quadPos;\r\n\r\n            vT = T;\r\n            vQuadCenter = pointImage;\r\n            vFragCoord = (quadPos.xy * 0.5 + 0.5) * viewport;\r\n        `;\r\n\r\n        const useRefImplementation = false;\r\n        if (useRefImplementation) {\r\n            vertexShaderSource += referenceQuadGeneration;\r\n        } else {\r\n            // Create a quad that is aligned with the eigen vectors of the projected gaussian for rendering.\r\n            // This is a different approach than the reference implementation, similar to how the rendering of\r\n            // 3D gaussians in this viewer differs from the reference implementation. If the quad is too small\r\n            // (smaller than a pixel), then revert to the reference implementation.\r\n            vertexShaderSource += `\r\n\r\n                mat4 splat2World4 = mat4(vec4(L[0], 0.0),\r\n                                        vec4(L[1], 0.0),\r\n                                        vec4(L[2], 0.0),\r\n                                        vec4(splatCenter.x, splatCenter.y, splatCenter.z, 1.0));\r\n\r\n                mat4 Tt = transpose(transpose(splat2World4) * world2ndc);\r\n\r\n                vec4 tempPoint1 = Tt * vec4(1.0, 0.0, 0.0, 1.0);\r\n                tempPoint1 /= tempPoint1.w;\r\n\r\n                vec4 tempPoint2 = Tt * vec4(0.0, 1.0, 0.0, 1.0);\r\n                tempPoint2 /= tempPoint2.w;\r\n\r\n                vec4 center = Tt * vec4(0.0, 0.0, 0.0, 1.0);\r\n                center /= center.w;\r\n\r\n                vec2 basisVector1 = tempPoint1.xy - center.xy;\r\n                vec2 basisVector2 = tempPoint2.xy - center.xy;\r\n\r\n                vec2 basisVector1Screen = basisVector1 * 0.5 * viewport;\r\n                vec2 basisVector2Screen = basisVector2 * 0.5 * viewport;\r\n\r\n                const float minPix = 1.;\r\n                if (length(basisVector1Screen) < minPix || length(basisVector2Screen) < minPix) {\r\n                    ${referenceQuadGeneration}\r\n                } else {\r\n                    vec2 ndcOffset = vec2(position.x * basisVector1 + position.y * basisVector2) * 3.0 * inverseFocalAdjustment;\r\n                    vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\r\n                    gl_Position = quadPos;\r\n\r\n                    vT = T;\r\n                    vQuadCenter = center.xy;\r\n                    vFragCoord = (quadPos.xy * 0.5 + 0.5) * viewport;\r\n                }\r\n            `;\r\n        }\r\n\r\n        vertexShaderSource += SplatMaterial.getVertexShaderFadeIn();\r\n        vertexShaderSource += `}`;\r\n\r\n        return vertexShaderSource;\r\n    }\r\n\r\n    static buildFragmentShader() {\r\n\r\n        // Original CUDA code for splat intersection, for reference\r\n        /*\r\n            const float2 xy = collected_xy[j];\r\n            const float3 Tu = collected_Tu[j];\r\n            const float3 Tv = collected_Tv[j];\r\n            const float3 Tw = collected_Tw[j];\r\n            float3 k = pix.x * Tw - Tu;\r\n            float3 l = pix.y * Tw - Tv;\r\n            float3 p = cross(k, l);\r\n            if (p.z == 0.0) continue;\r\n            float2 s = {p.x / p.z, p.y / p.z};\r\n            float rho3d = (s.x * s.x + s.y * s.y);\r\n            float2 d = {xy.x - pixf.x, xy.y - pixf.y};\r\n            float rho2d = FilterInvSquare * (d.x * d.x + d.y * d.y);\r\n\r\n            // compute intersection and depth\r\n            float rho = min(rho3d, rho2d);\r\n            float depth = (rho3d <= rho2d) ? (s.x * Tw.x + s.y * Tw.y) + Tw.z : Tw.z;\r\n            if (depth < near_n) continue;\r\n            float4 nor_o = collected_normal_opacity[j];\r\n            float normal[3] = {nor_o.x, nor_o.y, nor_o.z};\r\n            float opa = nor_o.w;\r\n\r\n            float power = -0.5f * rho;\r\n            if (power > 0.0f)\r\n                continue;\r\n\r\n            // Eq. (2) from 3D Gaussian splatting paper.\r\n            // Obtain alpha by multiplying with Gaussian opacity\r\n            // and its exponential falloff from mean.\r\n            // Avoid numerical instabilities (see paper appendix).\r\n            float alpha = min(0.99f, opa * exp(power));\r\n            if (alpha < 1.0f / 255.0f)\r\n                continue;\r\n            float test_T = T * (1 - alpha);\r\n            if (test_T < 0.0001f)\r\n            {\r\n                done = true;\r\n                continue;\r\n            }\r\n\r\n            float w = alpha * T;\r\n        */\r\n        let fragmentShaderSource = `\r\n            precision highp float;\r\n            #include <common>\r\n\r\n            uniform vec3 debugColor;\r\n\r\n            varying vec4 vColor;\r\n            varying vec2 vUv;\r\n            varying vec2 vPosition;\r\n            varying mat3 vT;\r\n            varying vec2 vQuadCenter;\r\n            varying vec2 vFragCoord;\r\n\r\n            void main () {\r\n\r\n                const float FilterInvSquare = 2.0;\r\n                const float near_n = 0.2;\r\n                const float T = 1.0;\r\n\r\n                vec2 xy = vQuadCenter;\r\n                vec3 Tu = vT[0];\r\n                vec3 Tv = vT[1];\r\n                vec3 Tw = vT[2];\r\n                vec3 k = vFragCoord.x * Tw - Tu;\r\n                vec3 l = vFragCoord.y * Tw - Tv;\r\n                vec3 p = cross(k, l);\r\n                if (p.z == 0.0) discard;\r\n                vec2 s = vec2(p.x / p.z, p.y / p.z);\r\n                float rho3d = (s.x * s.x + s.y * s.y); \r\n                vec2 d = vec2(xy.x - vFragCoord.x, xy.y - vFragCoord.y);\r\n                float rho2d = FilterInvSquare * (d.x * d.x + d.y * d.y); \r\n\r\n                // compute intersection and depth\r\n                float rho = min(rho3d, rho2d);\r\n                float depth = (rho3d <= rho2d) ? (s.x * Tw.x + s.y * Tw.y) + Tw.z : Tw.z; \r\n                if (depth < near_n) discard;\r\n                //  vec4 nor_o = collected_normal_opacity[j];\r\n                //  float normal[3] = {nor_o.x, nor_o.y, nor_o.z};\r\n                float opa = vColor.a;\r\n\r\n                float power = -0.5f * rho;\r\n                if (power > 0.0f) discard;\r\n\r\n                // Eq. (2) from 3D Gaussian splatting paper.\r\n                // Obtain alpha by multiplying with Gaussian opacity\r\n                // and its exponential falloff from mean.\r\n                // Avoid numerical instabilities (see paper appendix). \r\n                float alpha = min(0.99f, opa * exp(power));\r\n                if (alpha < 1.0f / 255.0f) discard;\r\n                float test_T = T * (1.0 - alpha);\r\n                if (test_T < 0.0001)discard;\r\n\r\n                float w = alpha * T;\r\n                gl_FragColor = vec4(vColor.rgb, w);\r\n            }\r\n        `;\r\n\r\n        return fragmentShaderSource;\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\n\r\nexport class SplatGeometry {\r\n\r\n    /**\r\n     * Build the Three.js geometry that will be used to render the splats. The geometry is instanced and is made up of\r\n     * vertices for a single quad as well as an attribute buffer for the splat indexes.\r\n     * @param {number} maxSplatCount The maximum number of splats that the geometry will need to accomodate\r\n     * @return {THREE.InstancedBufferGeometry}\r\n     */\r\n    static build(maxSplatCount) {\r\n\r\n        const baseGeometry = new THREE.BufferGeometry();\r\n        baseGeometry.setIndex([0, 1, 2, 0, 2, 3]);\r\n\r\n        // Vertices for the instanced quad\r\n        const positionsArray = new Float32Array(4 * 3);\r\n        const positions = new THREE.BufferAttribute(positionsArray, 3);\r\n        baseGeometry.setAttribute('position', positions);\r\n        positions.setXYZ(0, -1.0, -1.0, 0.0);\r\n        positions.setXYZ(1, -1.0, 1.0, 0.0);\r\n        positions.setXYZ(2, 1.0, 1.0, 0.0);\r\n        positions.setXYZ(3, 1.0, -1.0, 0.0);\r\n        positions.needsUpdate = true;\r\n\r\n        const geometry = new THREE.InstancedBufferGeometry().copy(baseGeometry);\r\n\r\n        // Splat index buffer\r\n        const splatIndexArray = new Uint32Array(maxSplatCount);\r\n        const splatIndexes = new THREE.InstancedBufferAttribute(splatIndexArray, 1, false);\r\n        splatIndexes.setUsage(THREE.DynamicDrawUsage);\r\n        geometry.setAttribute('splatIndex', splatIndexes);\r\n\r\n        geometry.instanceCount = 0;\r\n\r\n        return geometry;\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\n\r\n/**\r\n * SplatScene: Descriptor for a single splat scene managed by an instance of SplatMesh.\r\n */\r\nexport class SplatScene extends THREE.Object3D {\r\n\r\n    constructor(splatBuffer, position = new THREE.Vector3(), quaternion = new THREE.Quaternion(),\r\n                scale = new THREE.Vector3(1, 1, 1), minimumAlpha = 1, opacity = 1.0, visible = true) {\r\n        super();\r\n        this.splatBuffer = splatBuffer;\r\n        this.position.copy(position);\r\n        this.quaternion.copy(quaternion);\r\n        this.scale.copy(scale);\r\n        this.transform = new THREE.Matrix4();\r\n        this.minimumAlpha = minimumAlpha;\r\n        this.opacity = opacity;\r\n        this.visible = visible;\r\n    }\r\n\r\n    copyTransformData(otherScene) {\r\n        this.position.copy(otherScene.position);\r\n        this.quaternion.copy(otherScene.quaternion);\r\n        this.scale.copy(otherScene.scale);\r\n        this.transform.copy(otherScene.transform);\r\n    }\r\n\r\n    updateTransform(dynamicMode) {\r\n        if (dynamicMode) {\r\n            if (this.matrixWorldAutoUpdate) this.updateWorldMatrix(true, false);\r\n            this.transform.copy(this.matrixWorld);\r\n        } else {\r\n            if (this.matrixAutoUpdate) this.updateMatrix();\r\n            this.transform.copy(this.matrix);\r\n        }\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { delayedExecute } from '../Util.js';\r\n\r\nclass SplatTreeNode {\r\n\r\n    static idGen = 0;\r\n\r\n    constructor(min, max, depth, id) {\r\n        this.min = new THREE.Vector3().copy(min);\r\n        this.max = new THREE.Vector3().copy(max);\r\n        this.boundingBox = new THREE.Box3(this.min, this.max);\r\n        this.center = new THREE.Vector3().copy(this.max).sub(this.min).multiplyScalar(0.5).add(this.min);\r\n        this.depth = depth;\r\n        this.children = [];\r\n        this.data = null;\r\n        this.id = id || SplatTreeNode.idGen++;\r\n    }\r\n\r\n}\r\n\r\nclass SplatSubTree {\r\n\r\n    constructor(maxDepth, maxCentersPerNode) {\r\n        this.maxDepth = maxDepth;\r\n        this.maxCentersPerNode = maxCentersPerNode;\r\n        this.sceneDimensions = new THREE.Vector3();\r\n        this.sceneMin = new THREE.Vector3();\r\n        this.sceneMax = new THREE.Vector3();\r\n        this.rootNode = null;\r\n        this.nodesWithIndexes = [];\r\n        this.splatMesh = null;\r\n    }\r\n\r\n    static convertWorkerSubTreeNode(workerSubTreeNode) {\r\n        const minVector = new THREE.Vector3().fromArray(workerSubTreeNode.min);\r\n        const maxVector = new THREE.Vector3().fromArray(workerSubTreeNode.max);\r\n        const convertedNode = new SplatTreeNode(minVector, maxVector, workerSubTreeNode.depth, workerSubTreeNode.id);\r\n        if (workerSubTreeNode.data.indexes) {\r\n            convertedNode.data = {\r\n                'indexes': []\r\n            };\r\n            for (let index of workerSubTreeNode.data.indexes) {\r\n                convertedNode.data.indexes.push(index);\r\n            }\r\n        }\r\n        if (workerSubTreeNode.children) {\r\n            for (let child of workerSubTreeNode.children) {\r\n                convertedNode.children.push(SplatSubTree.convertWorkerSubTreeNode(child));\r\n            }\r\n        }\r\n        return convertedNode;\r\n    }\r\n\r\n    static convertWorkerSubTree(workerSubTree, splatMesh) {\r\n        const convertedSubTree = new SplatSubTree(workerSubTree.maxDepth, workerSubTree.maxCentersPerNode);\r\n        convertedSubTree.sceneMin = new THREE.Vector3().fromArray(workerSubTree.sceneMin);\r\n        convertedSubTree.sceneMax = new THREE.Vector3().fromArray(workerSubTree.sceneMax);\r\n\r\n        convertedSubTree.splatMesh = splatMesh;\r\n        convertedSubTree.rootNode = SplatSubTree.convertWorkerSubTreeNode(workerSubTree.rootNode);\r\n\r\n\r\n        const visitLeavesFromNode = (node, visitFunc) => {\r\n            if (node.children.length === 0) visitFunc(node);\r\n            for (let child of node.children) {\r\n                visitLeavesFromNode(child, visitFunc);\r\n            }\r\n        };\r\n\r\n        convertedSubTree.nodesWithIndexes = [];\r\n        visitLeavesFromNode(convertedSubTree.rootNode, (node) => {\r\n            if (node.data && node.data.indexes && node.data.indexes.length > 0) {\r\n                convertedSubTree.nodesWithIndexes.push(node);\r\n            }\r\n        });\r\n\r\n        return convertedSubTree;\r\n    }\r\n}\r\n\r\nfunction createSplatTreeWorker(self) {\r\n\r\n    let WorkerSplatTreeNodeIDGen = 0;\r\n\r\n    class WorkerBox3 {\r\n\r\n        constructor(min, max) {\r\n            this.min = [min[0], min[1], min[2]];\r\n            this.max = [max[0], max[1], max[2]];\r\n        }\r\n\r\n        containsPoint(point) {\r\n            return point[0] >= this.min[0] && point[0] <= this.max[0] &&\r\n                   point[1] >= this.min[1] && point[1] <= this.max[1] &&\r\n                   point[2] >= this.min[2] && point[2] <= this.max[2];\r\n        }\r\n    }\r\n\r\n    class WorkerSplatSubTree {\r\n\r\n        constructor(maxDepth, maxCentersPerNode) {\r\n            this.maxDepth = maxDepth;\r\n            this.maxCentersPerNode = maxCentersPerNode;\r\n            this.sceneDimensions = [];\r\n            this.sceneMin = [];\r\n            this.sceneMax = [];\r\n            this.rootNode = null;\r\n            this.addedIndexes = {};\r\n            this.nodesWithIndexes = [];\r\n            this.splatMesh = null;\r\n            this.disposed = false;\r\n        }\r\n\r\n    }\r\n\r\n    class WorkerSplatTreeNode {\r\n\r\n        constructor(min, max, depth, id) {\r\n            this.min = [min[0], min[1], min[2]];\r\n            this.max = [max[0], max[1], max[2]];\r\n            this.center = [(max[0] - min[0]) * 0.5 + min[0],\r\n                           (max[1] - min[1]) * 0.5 + min[1],\r\n                           (max[2] - min[2]) * 0.5 + min[2]];\r\n            this.depth = depth;\r\n            this.children = [];\r\n            this.data = null;\r\n            this.id = id || WorkerSplatTreeNodeIDGen++;\r\n        }\r\n\r\n    }\r\n\r\n    processSplatTreeNode = function(tree, node, indexToCenter, sceneCenters) {\r\n        const splatCount = node.data.indexes.length;\r\n\r\n        if (splatCount < tree.maxCentersPerNode || node.depth > tree.maxDepth) {\r\n            const newIndexes = [];\r\n            for (let i = 0; i < node.data.indexes.length; i++) {\r\n                if (!tree.addedIndexes[node.data.indexes[i]]) {\r\n                    newIndexes.push(node.data.indexes[i]);\r\n                    tree.addedIndexes[node.data.indexes[i]] = true;\r\n                }\r\n            }\r\n            node.data.indexes = newIndexes;\r\n            node.data.indexes.sort((a, b) => {\r\n                if (a > b) return 1;\r\n                else return -1;\r\n            });\r\n            tree.nodesWithIndexes.push(node);\r\n            return;\r\n        }\r\n\r\n        const nodeDimensions = [node.max[0] - node.min[0],\r\n                                node.max[1] - node.min[1],\r\n                                node.max[2] - node.min[2]];\r\n        const halfDimensions = [nodeDimensions[0] * 0.5,\r\n                                nodeDimensions[1] * 0.5,\r\n                                nodeDimensions[2] * 0.5];\r\n        const nodeCenter = [node.min[0] + halfDimensions[0],\r\n                            node.min[1] + halfDimensions[1],\r\n                            node.min[2] + halfDimensions[2]];\r\n\r\n        const childrenBounds = [\r\n            // top section, clockwise from upper-left (looking from above, +Y)\r\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1], nodeCenter[2] - halfDimensions[2]],\r\n                           [nodeCenter[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2]]),\r\n            new WorkerBox3([nodeCenter[0], nodeCenter[1], nodeCenter[2] - halfDimensions[2]],\r\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2]]),\r\n            new WorkerBox3([nodeCenter[0], nodeCenter[1], nodeCenter[2]],\r\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2] + halfDimensions[2]]),\r\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1], nodeCenter[2]],\r\n                           [nodeCenter[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2] + halfDimensions[2]]),\r\n\r\n            // bottom section, clockwise from lower-left (looking from above, +Y)\r\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2] - halfDimensions[2]],\r\n                           [nodeCenter[0], nodeCenter[1], nodeCenter[2]]),\r\n            new WorkerBox3([nodeCenter[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2] - halfDimensions[2]],\r\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1], nodeCenter[2]]),\r\n            new WorkerBox3([nodeCenter[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2]],\r\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1], nodeCenter[2] + halfDimensions[2]]),\r\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2]],\r\n                           [nodeCenter[0], nodeCenter[1], nodeCenter[2] + halfDimensions[2]]),\r\n        ];\r\n\r\n        const splatCounts = [];\r\n        const baseIndexes = [];\r\n        for (let i = 0; i < childrenBounds.length; i++) {\r\n            splatCounts[i] = 0;\r\n            baseIndexes[i] = [];\r\n        }\r\n\r\n        const center = [0, 0, 0];\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const splatGlobalIndex = node.data.indexes[i];\r\n            const centerBase = indexToCenter[splatGlobalIndex];\r\n            center[0] = sceneCenters[centerBase];\r\n            center[1] = sceneCenters[centerBase + 1];\r\n            center[2] = sceneCenters[centerBase + 2];\r\n            for (let j = 0; j < childrenBounds.length; j++) {\r\n                if (childrenBounds[j].containsPoint(center)) {\r\n                    splatCounts[j]++;\r\n                    baseIndexes[j].push(splatGlobalIndex);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < childrenBounds.length; i++) {\r\n            const childNode = new WorkerSplatTreeNode(childrenBounds[i].min, childrenBounds[i].max, node.depth + 1);\r\n            childNode.data = {\r\n                'indexes': baseIndexes[i]\r\n            };\r\n            node.children.push(childNode);\r\n        }\r\n\r\n        node.data = {};\r\n        for (let child of node.children) {\r\n            processSplatTreeNode(tree, child, indexToCenter, sceneCenters);\r\n        }\r\n        return;\r\n    };\r\n\r\n    const buildSubTree = (sceneCenters, maxDepth, maxCentersPerNode) => {\r\n\r\n        const sceneMin = [0, 0, 0];\r\n        const sceneMax = [0, 0, 0];\r\n        const indexes = [];\r\n        const centerCount = Math.floor(sceneCenters.length / 4);\r\n        for ( let i = 0; i < centerCount; i ++) {\r\n            const base = i * 4;\r\n            const x = sceneCenters[base];\r\n            const y = sceneCenters[base + 1];\r\n            const z = sceneCenters[base + 2];\r\n            const index = Math.round(sceneCenters[base + 3]);\r\n            if (i === 0 || x < sceneMin[0]) sceneMin[0] = x;\r\n            if (i === 0 || x > sceneMax[0]) sceneMax[0] = x;\r\n            if (i === 0 || y < sceneMin[1]) sceneMin[1] = y;\r\n            if (i === 0 || y > sceneMax[1]) sceneMax[1] = y;\r\n            if (i === 0 || z < sceneMin[2]) sceneMin[2] = z;\r\n            if (i === 0 || z > sceneMax[2]) sceneMax[2] = z;\r\n            indexes.push(index);\r\n        }\r\n        const subTree = new WorkerSplatSubTree(maxDepth, maxCentersPerNode);\r\n        subTree.sceneMin = sceneMin;\r\n        subTree.sceneMax = sceneMax;\r\n        subTree.rootNode = new WorkerSplatTreeNode(subTree.sceneMin, subTree.sceneMax, 0);\r\n        subTree.rootNode.data = {\r\n            'indexes': indexes\r\n        };\r\n\r\n        return subTree;\r\n    };\r\n\r\n    function createSplatTree(allCenters, maxDepth, maxCentersPerNode) {\r\n        const indexToCenter = [];\r\n        for (let sceneCenters of allCenters) {\r\n            const centerCount = Math.floor(sceneCenters.length / 4);\r\n            for ( let i = 0; i < centerCount; i ++) {\r\n                const base = i * 4;\r\n                const index = Math.round(sceneCenters[base + 3]);\r\n                indexToCenter[index] = base;\r\n            }\r\n        }\r\n        const subTrees = [];\r\n        for (let sceneCenters of allCenters) {\r\n            const subTree = buildSubTree(sceneCenters, maxDepth, maxCentersPerNode);\r\n            subTrees.push(subTree);\r\n            processSplatTreeNode(subTree, subTree.rootNode, indexToCenter, sceneCenters);\r\n        }\r\n        self.postMessage({\r\n            'subTrees': subTrees\r\n        });\r\n    }\r\n\r\n    self.onmessage = (e) => {\r\n        if (e.data.process) {\r\n            createSplatTree(e.data.process.centers, e.data.process.maxDepth, e.data.process.maxCentersPerNode);\r\n        }\r\n    };\r\n}\r\n\r\nfunction workerProcessCenters(splatTreeWorker, centers, transferBuffers, maxDepth, maxCentersPerNode) {\r\n    splatTreeWorker.postMessage({\r\n        'process': {\r\n            'centers': centers,\r\n            'maxDepth': maxDepth,\r\n            'maxCentersPerNode': maxCentersPerNode\r\n        }\r\n    }, transferBuffers);\r\n}\r\n\r\nfunction checkAndCreateWorker() {\r\n    const splatTreeWorker = new Worker(\r\n        URL.createObjectURL(\r\n            new Blob(['(', createSplatTreeWorker.toString(), ')(self)'], {\r\n                type: 'application/javascript',\r\n            }),\r\n        ),\r\n    );\r\n    return splatTreeWorker;\r\n}\r\n\r\n/**\r\n * SplatTree: Octree tailored to splat data from a SplatMesh instance\r\n */\r\nexport class SplatTree {\r\n\r\n    constructor(maxDepth, maxCentersPerNode) {\r\n        this.maxDepth = maxDepth;\r\n        this.maxCentersPerNode = maxCentersPerNode;\r\n        this.subTrees = [];\r\n        this.splatMesh = null;\r\n    }\r\n\r\n\r\n    dispose() {\r\n        this.diposeSplatTreeWorker();\r\n        this.disposed = true;\r\n    }\r\n\r\n    diposeSplatTreeWorker() {\r\n        if (this.splatTreeWorker) this.splatTreeWorker.terminate();\r\n        this.splatTreeWorker = null;\r\n    };\r\n\r\n    /**\r\n     * Construct this instance of SplatTree from an instance of SplatMesh.\r\n     *\r\n     * @param {SplatMesh} splatMesh The instance of SplatMesh from which to construct this splat tree.\r\n     * @param {function} filterFunc Optional function to filter out unwanted splats.\r\n     * @param {function} onIndexesUpload Function to be called when the upload of splat centers to the splat tree\r\n     *                                   builder worker starts and finishes.\r\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\r\n     *                                           the format produced by the splat tree builder worker starts and ends.\r\n     * @return {undefined}\r\n     */\r\n    processSplatMesh = function(splatMesh, filterFunc = () => true, onIndexesUpload, onSplatTreeConstruction) {\r\n        if (!this.splatTreeWorker) this.splatTreeWorker = checkAndCreateWorker();\r\n\r\n        this.splatMesh = splatMesh;\r\n        this.subTrees = [];\r\n        const center = new THREE.Vector3();\r\n\r\n        const addCentersForScene = (splatOffset, splatCount) => {\r\n            const sceneCenters = new Float32Array(splatCount * 4);\r\n            let addedCount = 0;\r\n            for (let i = 0; i < splatCount; i++) {\r\n                const globalSplatIndex = i + splatOffset;\r\n                if (filterFunc(globalSplatIndex)) {\r\n                    splatMesh.getSplatCenter(globalSplatIndex, center);\r\n                    const addBase = addedCount * 4;\r\n                    sceneCenters[addBase] = center.x;\r\n                    sceneCenters[addBase + 1] = center.y;\r\n                    sceneCenters[addBase + 2] = center.z;\r\n                    sceneCenters[addBase + 3] = globalSplatIndex;\r\n                    addedCount++;\r\n                }\r\n            }\r\n            return sceneCenters;\r\n        };\r\n\r\n        return new Promise((resolve) => {\r\n\r\n            const checkForEarlyExit = () => {\r\n                if (this.disposed) {\r\n                    this.diposeSplatTreeWorker();\r\n                    resolve();\r\n                    return true;\r\n                }\r\n                return false;\r\n            };\r\n\r\n            if (onIndexesUpload) onIndexesUpload(false);\r\n\r\n            delayedExecute(() => {\r\n\r\n                if (checkForEarlyExit()) return;\r\n\r\n                const allCenters = [];\r\n                if (splatMesh.dynamicMode) {\r\n                    let splatOffset = 0;\r\n                    for (let s = 0; s < splatMesh.scenes.length; s++) {\r\n                        const scene = splatMesh.getScene(s);\r\n                        const splatCount = scene.splatBuffer.getSplatCount();\r\n                        const sceneCenters = addCentersForScene(splatOffset, splatCount);\r\n                        allCenters.push(sceneCenters);\r\n                        splatOffset += splatCount;\r\n                    }\r\n                } else {\r\n                    const sceneCenters = addCentersForScene(0, splatMesh.getSplatCount());\r\n                    allCenters.push(sceneCenters);\r\n                }\r\n\r\n                this.splatTreeWorker.onmessage = (e) => {\r\n\r\n                    if (checkForEarlyExit()) return;\r\n\r\n                    if (e.data.subTrees) {\r\n\r\n                        if (onSplatTreeConstruction) onSplatTreeConstruction(false);\r\n\r\n                        delayedExecute(() => {\r\n\r\n                            if (checkForEarlyExit()) return;\r\n\r\n                            for (let workerSubTree of e.data.subTrees) {\r\n                                const convertedSubTree = SplatSubTree.convertWorkerSubTree(workerSubTree, splatMesh);\r\n                                this.subTrees.push(convertedSubTree);\r\n                            }\r\n                            this.diposeSplatTreeWorker();\r\n\r\n                            if (onSplatTreeConstruction) onSplatTreeConstruction(true);\r\n\r\n                            delayedExecute(() => {\r\n                                resolve();\r\n                            });\r\n\r\n                        });\r\n                    }\r\n                };\r\n\r\n                delayedExecute(() => {\r\n                    if (checkForEarlyExit()) return;\r\n                    if (onIndexesUpload) onIndexesUpload(true);\r\n                    const transferBuffers = allCenters.map((array) => array.buffer);\r\n                    workerProcessCenters(this.splatTreeWorker, allCenters, transferBuffers, this.maxDepth, this.maxCentersPerNode);\r\n                });\r\n\r\n            });\r\n\r\n        });\r\n\r\n    };\r\n\r\n    countLeaves() {\r\n\r\n        let leafCount = 0;\r\n        this.visitLeaves(() => {\r\n            leafCount++;\r\n        });\r\n\r\n        return leafCount;\r\n    }\r\n\r\n    visitLeaves(visitFunc) {\r\n\r\n        const visitLeavesFromNode = (node, visitFunc) => {\r\n            if (node.children.length === 0) visitFunc(node);\r\n            for (let child of node.children) {\r\n                visitLeavesFromNode(child, visitFunc);\r\n            }\r\n        };\r\n\r\n        for (let subTree of this.subTrees) {\r\n            visitLeavesFromNode(subTree.rootNode, visitFunc);\r\n        }\r\n    }\r\n\r\n}\r\n","function WebGLExtensions( gl ) {\r\n\r\n    const extensions = {};\r\n\r\n    function getExtension( name ) {\r\n\r\n        if ( extensions[name] !== undefined ) {\r\n\r\n            return extensions[name];\r\n\r\n        }\r\n\r\n        let extension;\r\n\r\n        switch ( name ) {\r\n\r\n            case 'WEBGL_depth_texture':\r\n                extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) ||\r\n                            gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\r\n                break;\r\n\r\n            case 'EXT_texture_filter_anisotropic':\r\n                extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) ||\r\n                            gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) ||\r\n                            gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\r\n                break;\r\n\r\n            case 'WEBGL_compressed_texture_s3tc':\r\n                extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) ||\r\n                            gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) ||\r\n                            gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\r\n                break;\r\n\r\n            case 'WEBGL_compressed_texture_pvrtc':\r\n                extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) ||\r\n                           gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\r\n                break;\r\n\r\n            default:\r\n                extension = gl.getExtension( name );\r\n\r\n        }\r\n\r\n        extensions[name] = extension;\r\n\r\n        return extension;\r\n\r\n    }\r\n\r\n    return {\r\n\r\n        has: function( name ) {\r\n\r\n            return getExtension( name ) !== null;\r\n\r\n        },\r\n\r\n        init: function( capabilities ) {\r\n\r\n            if ( capabilities.isWebGL2 ) {\r\n\r\n                getExtension( 'EXT_color_buffer_float' );\r\n                getExtension( 'WEBGL_clip_cull_distance' );\r\n\r\n            } else {\r\n\r\n                getExtension( 'WEBGL_depth_texture' );\r\n                getExtension( 'OES_texture_float' );\r\n                getExtension( 'OES_texture_half_float' );\r\n                getExtension( 'OES_texture_half_float_linear' );\r\n                getExtension( 'OES_standard_derivatives' );\r\n                getExtension( 'OES_element_index_uint' );\r\n                getExtension( 'OES_vertex_array_object' );\r\n                getExtension( 'ANGLE_instanced_arrays' );\r\n\r\n            }\r\n\r\n            getExtension( 'OES_texture_float_linear' );\r\n            getExtension( 'EXT_color_buffer_half_float' );\r\n            getExtension( 'WEBGL_multisampled_render_to_texture' );\r\n\r\n        },\r\n\r\n        get: function( name ) {\r\n\r\n            const extension = getExtension( name );\r\n\r\n            if ( extension === null ) {\r\n\r\n                console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\r\n\r\n            }\r\n\r\n            return extension;\r\n\r\n        }\r\n\r\n    };\r\n\r\n}\r\n\r\nexport { WebGLExtensions };\r\n","function WebGLCapabilities( gl, extensions, parameters ) {\r\n\r\n    let maxAnisotropy;\r\n\r\n    function getMaxAnisotropy() {\r\n\r\n        if ( maxAnisotropy !== undefined ) return maxAnisotropy;\r\n\r\n        if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\r\n\r\n            const extension = extensions.get( 'EXT_texture_filter_anisotropic' );\r\n\r\n            maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\r\n\r\n        } else {\r\n\r\n            maxAnisotropy = 0;\r\n\r\n        }\r\n\r\n        return maxAnisotropy;\r\n\r\n    }\r\n\r\n    function getMaxPrecision( precision ) {\r\n\r\n        if ( precision === 'highp' ) {\r\n\r\n            if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\r\n                gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\r\n\r\n                return 'highp';\r\n\r\n            }\r\n\r\n            precision = 'mediump';\r\n\r\n        }\r\n\r\n        if ( precision === 'mediump' ) {\r\n\r\n            if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\r\n                gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\r\n\r\n                return 'mediump';\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return 'lowp';\r\n\r\n    }\r\n\r\n    const isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl.constructor.name === 'WebGL2RenderingContext';\r\n\r\n    let precision = parameters.precision !== undefined ? parameters.precision : 'highp';\r\n    const maxPrecision = getMaxPrecision( precision );\r\n\r\n    if ( maxPrecision !== precision ) {\r\n\r\n        console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\r\n        precision = maxPrecision;\r\n\r\n    }\r\n\r\n    const drawBuffers = isWebGL2 || extensions.has( 'WEBGL_draw_buffers' );\r\n\r\n    const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\r\n\r\n    const maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\r\n    const maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\r\n    const maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\r\n    const maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\r\n\r\n    const maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\r\n    const maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\r\n    const maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\r\n    const maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\r\n\r\n    const vertexTextures = maxVertexTextures > 0;\r\n    const floatFragmentTextures = isWebGL2 || extensions.has( 'OES_texture_float' );\r\n    const floatVertexTextures = vertexTextures && floatFragmentTextures;\r\n\r\n    const maxSamples = isWebGL2 ? gl.getParameter( gl.MAX_SAMPLES ) : 0;\r\n\r\n    return {\r\n\r\n        isWebGL2: isWebGL2,\r\n\r\n        drawBuffers: drawBuffers,\r\n\r\n        getMaxAnisotropy: getMaxAnisotropy,\r\n        getMaxPrecision: getMaxPrecision,\r\n\r\n        precision: precision,\r\n        logarithmicDepthBuffer: logarithmicDepthBuffer,\r\n\r\n        maxTextures: maxTextures,\r\n        maxVertexTextures: maxVertexTextures,\r\n        maxTextureSize: maxTextureSize,\r\n        maxCubemapSize: maxCubemapSize,\r\n\r\n        maxAttributes: maxAttributes,\r\n        maxVertexUniforms: maxVertexUniforms,\r\n        maxVaryings: maxVaryings,\r\n        maxFragmentUniforms: maxFragmentUniforms,\r\n\r\n        vertexTextures: vertexTextures,\r\n        floatFragmentTextures: floatFragmentTextures,\r\n        floatVertexTextures: floatVertexTextures,\r\n\r\n        maxSamples: maxSamples\r\n\r\n    };\r\n\r\n}\r\n\r\n\r\nexport { WebGLCapabilities };\r\n","export const SceneRevealMode = {\r\n    Default: 0,\r\n    Gradual: 1,\r\n    Instant: 2\r\n};\r\n","export const LogLevel = {\r\n    None: 0,\r\n    Error: 1,\r\n    Warning: 2,\r\n    Info: 3,\r\n    Debug: 4\r\n};\r\n","import * as THREE from 'three';\r\nimport { SplatMaterial3D } from './SplatMaterial3D.js';\r\nimport { SplatMaterial2D } from './SplatMaterial2D.js';\r\nimport { SplatGeometry } from './SplatGeometry.js';\r\nimport { SplatScene } from './SplatScene.js';\r\nimport { SplatTree } from '../splattree/SplatTree.js';\r\nimport { WebGLExtensions } from '../three-shim/WebGLExtensions.js';\r\nimport { WebGLCapabilities } from '../three-shim/WebGLCapabilities.js';\r\nimport { uintEncodedFloat, rgbaArrayToInteger } from '../Util.js';\r\nimport { Constants } from '../Constants.js';\r\nimport { SceneRevealMode } from '../SceneRevealMode.js';\r\nimport { SplatRenderMode } from '../SplatRenderMode.js';\r\nimport { LogLevel } from '../LogLevel.js';\r\nimport { clamp, getSphericalHarmonicsComponentCountForDegree } from '../Util.js';\r\n\r\nconst dummyGeometry = new THREE.BufferGeometry();\r\nconst dummyMaterial = new THREE.MeshBasicMaterial();\r\n\r\nconst COVARIANCES_ELEMENTS_PER_SPLAT = 6;\r\nconst CENTER_COLORS_ELEMENTS_PER_SPLAT = 4;\r\n\r\nconst COVARIANCES_ELEMENTS_PER_TEXEL_STORED = 4;\r\nconst COVARIANCES_ELEMENTS_PER_TEXEL_ALLOCATED = 4;\r\nconst COVARIANCES_ELEMENTS_PER_TEXEL_COMPRESSED_STORED = 6;\r\nconst COVARIANCES_ELEMENTS_PER_TEXEL_COMPRESSED_ALLOCATED = 8;\r\nconst SCALES_ROTATIONS_ELEMENTS_PER_TEXEL = 4;\r\nconst CENTER_COLORS_ELEMENTS_PER_TEXEL = 4;\r\nconst SCENE_INDEXES_ELEMENTS_PER_TEXEL = 1;\r\n\r\nconst SCENE_FADEIN_RATE_FAST = 0.012;\r\nconst SCENE_FADEIN_RATE_GRADUAL = 0.003;\r\n\r\nconst VISIBLE_REGION_EXPANSION_DELTA = 1;\r\n\r\n// Based on my own observations across multiple devices, OSes and browsers, using textures that have one dimension\r\n// greater than 4096 while the other is greater than or equal to 4096 causes issues (Essentially any texture larger\r\n// than 4096 x 4096 (16777216) texels). Specifically it seems all texture data beyond the 4096 x 4096 texel boundary\r\n// is corrupted, while data below that boundary is usable. In these cases the texture has been valid in the eyes of\r\n// both Three.js and WebGL, and the texel format (RG, RGBA, etc.) has not mattered. More investigation will be needed,\r\n// but for now the work-around is to split the spherical harmonics into three textures (one for each color channel).\r\nconst MAX_TEXTURE_TEXELS = 16777216;\r\n\r\n/**\r\n * SplatMesh: Container for one or more splat scenes, abstracting them into a single unified container for\r\n * splat data. Additionally contains data structures and code to make the splat data renderable as a Three.js mesh.\r\n */\r\nexport class SplatMesh extends THREE.Mesh {\r\n\r\n    constructor(splatRenderMode = SplatRenderMode.ThreeD, dynamicMode = false, enableOptionalEffects = false,\r\n                halfPrecisionCovariancesOnGPU = false, devicePixelRatio = 1, enableDistancesComputationOnGPU = true,\r\n                integerBasedDistancesComputation = false, antialiased = false, maxScreenSpaceSplatSize = 1024, logLevel = LogLevel.None,\r\n                sphericalHarmonicsDegree = 0, sceneFadeInRateMultiplier = 1.0, kernel2DSize = 0.3) {\r\n        super(dummyGeometry, dummyMaterial);\r\n\r\n        // Reference to a Three.js renderer\r\n        this.renderer = undefined;\r\n\r\n        // Determine how the splats are rendered\r\n        this.splatRenderMode = splatRenderMode;\r\n\r\n        // When 'dynamicMode' is true, scenes are assumed to be non-static. Dynamic scenes are handled differently\r\n        // and certain optimizations cannot be made for them. Additionally, by default, all splat data retrieved from\r\n        // this splat mesh will not have their scene transform applied to them if the splat mesh is dynamic. That\r\n        // can be overriden via parameters to the individual functions that are used to retrieve splat data.\r\n        this.dynamicMode = dynamicMode;\r\n\r\n        // When true, allows for usage of extra properties and attributes during rendering for effects such as opacity adjustment.\r\n        // Default is false for performance reasons. These properties are separate from transform properties (scale, rotation, position)\r\n        // that are enabled by the 'dynamicScene' parameter.\r\n        this.enableOptionalEffects = enableOptionalEffects;\r\n\r\n        // Use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\r\n        this.halfPrecisionCovariancesOnGPU = halfPrecisionCovariancesOnGPU;\r\n\r\n        // Ratio of the resolution in physical pixels to the resolution in CSS pixels for the current display device\r\n        this.devicePixelRatio = devicePixelRatio;\r\n\r\n        // Use a transform feedback to calculate splat distances from the camera\r\n        this.enableDistancesComputationOnGPU = enableDistancesComputationOnGPU;\r\n\r\n        // Use a faster integer-based approach for calculating splat distances from the camera\r\n        this.integerBasedDistancesComputation = integerBasedDistancesComputation;\r\n\r\n        // When true, will perform additional steps during rendering to address artifacts caused by the rendering of gaussians at a\r\n        // substantially different resolution than that at which they were rendered during training. This will only work correctly\r\n        // for models that were trained using a process that utilizes this compensation calculation. For more details:\r\n        // https://github.com/nerfstudio-project/gsplat/pull/117\r\n        // https://github.com/graphdeco-inria/gaussian-splatting/issues/294#issuecomment-1772688093\r\n        this.antialiased = antialiased;\r\n\r\n        // The size of the 2D kernel used for splat rendering\r\n        // This will adjust the 2D kernel size after the projection\r\n        this.kernel2DSize = kernel2DSize;\r\n\r\n        // Specify the maximum clip space splat size, can help deal with large splats that get too unwieldy\r\n        this.maxScreenSpaceSplatSize = maxScreenSpaceSplatSize;\r\n\r\n        // The verbosity of console logging\r\n        this.logLevel = logLevel;\r\n\r\n        // Degree 0 means no spherical harmonics\r\n        this.sphericalHarmonicsDegree = sphericalHarmonicsDegree;\r\n        this.minSphericalHarmonicsDegree = 0;\r\n\r\n        this.sceneFadeInRateMultiplier = sceneFadeInRateMultiplier;\r\n\r\n        // The individual splat scenes stored in this splat mesh, each containing their own transform\r\n        this.scenes = [];\r\n\r\n        // Special octree tailored to SplatMesh instances\r\n        this.splatTree = null;\r\n        this.baseSplatTree = null;\r\n\r\n        // Cache textures and the intermediate data used to populate them\r\n        this.splatDataTextures = {};\r\n\r\n        this.distancesTransformFeedback = {\r\n            'id': null,\r\n            'vertexShader': null,\r\n            'fragmentShader': null,\r\n            'program': null,\r\n            'centersBuffer': null,\r\n            'sceneIndexesBuffer': null,\r\n            'outDistancesBuffer': null,\r\n            'centersLoc': -1,\r\n            'modelViewProjLoc': -1,\r\n            'sceneIndexesLoc': -1,\r\n            'transformsLocs': []\r\n        };\r\n\r\n        this.globalSplatIndexToLocalSplatIndexMap = [];\r\n        this.globalSplatIndexToSceneIndexMap = [];\r\n\r\n        this.lastBuildSplatCount = 0;\r\n        this.lastBuildScenes = [];\r\n        this.lastBuildMaxSplatCount = 0;\r\n        this.lastBuildSceneCount = 0;\r\n        this.firstRenderTime = -1;\r\n        this.finalBuild = false;\r\n\r\n        this.webGLUtils = null;\r\n\r\n        this.boundingBox = new THREE.Box3();\r\n        this.calculatedSceneCenter = new THREE.Vector3();\r\n        this.maxSplatDistanceFromSceneCenter = 0;\r\n        this.visibleRegionBufferRadius = 0;\r\n        this.visibleRegionRadius = 0;\r\n        this.visibleRegionFadeStartRadius = 0;\r\n        this.visibleRegionChanging = false;\r\n\r\n        this.splatScale = 1.0;\r\n        this.pointCloudModeEnabled = false;\r\n\r\n        this.disposed = false;\r\n        this.lastRenderer = null;\r\n        this.visible = false;\r\n    }\r\n\r\n    /**\r\n     * Build a container for each scene managed by this splat mesh based on an instance of SplatBuffer, along with optional\r\n     * transform data (position, scale, rotation) passed to the splat mesh during the build process.\r\n     * @param {Array<THREE.Matrix4>} splatBuffers SplatBuffer instances containing splats for each scene\r\n     * @param {Array<object>} sceneOptions Array of options objects: {\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     * }\r\n     * @return {Array<THREE.Matrix4>}\r\n     */\r\n    static buildScenes(parentObject, splatBuffers, sceneOptions) {\r\n        const scenes = [];\r\n        scenes.length = splatBuffers.length;\r\n        for (let i = 0; i < splatBuffers.length; i++) {\r\n            const splatBuffer = splatBuffers[i];\r\n            const options = sceneOptions[i] || {};\r\n            let positionArray = options['position'] || [0, 0, 0];\r\n            let rotationArray = options['rotation'] || [0, 0, 0, 1];\r\n            let scaleArray = options['scale'] || [1, 1, 1];\r\n            const position = new THREE.Vector3().fromArray(positionArray);\r\n            const rotation = new THREE.Quaternion().fromArray(rotationArray);\r\n            const scale = new THREE.Vector3().fromArray(scaleArray);\r\n            const scene = SplatMesh.createScene(splatBuffer, position, rotation, scale,\r\n                                                options.splatAlphaRemovalThreshold || 1, options.opacity, options.visible);\r\n            parentObject.add(scene);\r\n            scenes[i] = scene;\r\n        }\r\n        return scenes;\r\n    }\r\n\r\n    static createScene(splatBuffer, position, rotation, scale, minimumAlpha, opacity = 1.0, visible = true) {\r\n        return new SplatScene(splatBuffer, position, rotation, scale, minimumAlpha, opacity, visible);\r\n    }\r\n\r\n    /**\r\n     * Build data structures that map global splat indexes (based on a unified index across all splat buffers) to\r\n     * local data within a single scene.\r\n     * @param {Array<SplatBuffer>} splatBuffers Instances of SplatBuffer off which to build the maps\r\n     * @return {object}\r\n     */\r\n    static buildSplatIndexMaps(splatBuffers) {\r\n        const localSplatIndexMap = [];\r\n        const sceneIndexMap = [];\r\n        let totalSplatCount = 0;\r\n        for (let s = 0; s < splatBuffers.length; s++) {\r\n            const splatBuffer = splatBuffers[s];\r\n            const maxSplatCount = splatBuffer.getMaxSplatCount();\r\n            for (let i = 0; i < maxSplatCount; i++) {\r\n                localSplatIndexMap[totalSplatCount] = i;\r\n                sceneIndexMap[totalSplatCount] = s;\r\n                totalSplatCount++;\r\n            }\r\n        }\r\n        return {\r\n            localSplatIndexMap,\r\n            sceneIndexMap\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Build an instance of SplatTree (a specialized octree) for the given splat mesh.\r\n     * @param {Array<number>} minAlphas Array of minimum splat slphas for each scene\r\n     * @param {function} onSplatTreeIndexesUpload Function to be called when the upload of splat centers to the splat tree\r\n     *                                            builder worker starts and finishes.\r\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\r\n     *                                           the format produced by the splat tree builder worker starts and ends.\r\n     * @return {SplatTree}\r\n     */\r\n     buildSplatTree = function(minAlphas = [], onSplatTreeIndexesUpload, onSplatTreeConstruction) {\r\n        return new Promise((resolve) => {\r\n            this.disposeSplatTree();\r\n            // TODO: expose SplatTree constructor parameters (maximumDepth and maxCentersPerNode) so that they can\r\n            // be configured on a per-scene basis\r\n            this.baseSplatTree = new SplatTree(8, 1000);\r\n            const buildStartTime = performance.now();\r\n            const splatColor = new THREE.Vector4();\r\n            this.baseSplatTree.processSplatMesh(this, (splatIndex) => {\r\n                this.getSplatColor(splatIndex, splatColor);\r\n                const sceneIndex = this.getSceneIndexForSplat(splatIndex);\r\n                const minAlpha = minAlphas[sceneIndex] || 1;\r\n                return splatColor.w >= minAlpha;\r\n            }, onSplatTreeIndexesUpload, onSplatTreeConstruction)\r\n            .then(() => {\r\n                const buildTime = performance.now() - buildStartTime;\r\n                if (this.logLevel >= LogLevel.Info) console.log('SplatTree build: ' + buildTime + ' ms');\r\n                if (this.disposed) {\r\n                    resolve();\r\n                } else {\r\n\r\n                    this.splatTree = this.baseSplatTree;\r\n                    this.baseSplatTree = null;\r\n\r\n                    let leavesWithVertices = 0;\r\n                    let avgSplatCount = 0;\r\n                    let maxSplatCount = 0;\r\n                    let nodeCount = 0;\r\n\r\n                    this.splatTree.visitLeaves((node) => {\r\n                        const nodeSplatCount = node.data.indexes.length;\r\n                        if (nodeSplatCount > 0) {\r\n                            avgSplatCount += nodeSplatCount;\r\n                            maxSplatCount = Math.max(maxSplatCount, nodeSplatCount);\r\n                            nodeCount++;\r\n                            leavesWithVertices++;\r\n                        }\r\n                    });\r\n                    if (this.logLevel >= LogLevel.Info) {\r\n                        console.log(`SplatTree leaves: ${this.splatTree.countLeaves()}`);\r\n                        console.log(`SplatTree leaves with splats:${leavesWithVertices}`);\r\n                        avgSplatCount = avgSplatCount / nodeCount;\r\n                        console.log(`Avg splat count per node: ${avgSplatCount}`);\r\n                        console.log(`Total splat count: ${this.getSplatCount()}`);\r\n                    }\r\n                    resolve();\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Construct this instance of SplatMesh.\r\n     * @param {Array<SplatBuffer>} splatBuffers The base splat data, instances of SplatBuffer\r\n     * @param {Array<object>} sceneOptions Dynamic options for each scene {\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     *\r\n     * }\r\n     * @param {boolean} keepSceneTransforms For a scene that already exists and is being overwritten, this flag\r\n     *                                      says to keep the transform from the existing scene.\r\n     * @param {boolean} finalBuild Will the splat mesh be in its final state after this build?\r\n     * @param {function} onSplatTreeIndexesUpload Function to be called when the upload of splat centers to the splat tree\r\n     *                                            builder worker starts and finishes.\r\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\r\n     *                                           the format produced by the splat tree builder worker starts and ends.\r\n     * @return {object} Object containing info about the splats that are updated\r\n     */\r\n    build(splatBuffers, sceneOptions, keepSceneTransforms = true, finalBuild = false,\r\n          onSplatTreeIndexesUpload, onSplatTreeConstruction, preserveVisibleRegion = true) {\r\n\r\n        this.sceneOptions = sceneOptions;\r\n        this.finalBuild = finalBuild;\r\n\r\n        const maxSplatCount = SplatMesh.getTotalMaxSplatCountForSplatBuffers(splatBuffers);\r\n\r\n        const newScenes = SplatMesh.buildScenes(this, splatBuffers, sceneOptions);\r\n        if (keepSceneTransforms) {\r\n            for (let i = 0; i < this.scenes.length && i < newScenes.length; i++) {\r\n                const newScene = newScenes[i];\r\n                const existingScene = this.getScene(i);\r\n                newScene.copyTransformData(existingScene);\r\n            }\r\n        }\r\n        this.scenes = newScenes;\r\n\r\n        let minSphericalHarmonicsDegree = 3;\r\n        for (let splatBuffer of splatBuffers) {\r\n            const splatBufferSphericalHarmonicsDegree = splatBuffer.getMinSphericalHarmonicsDegree();\r\n            if (splatBufferSphericalHarmonicsDegree < minSphericalHarmonicsDegree) {\r\n                minSphericalHarmonicsDegree = splatBufferSphericalHarmonicsDegree;\r\n            }\r\n        }\r\n        this.minSphericalHarmonicsDegree = Math.min(minSphericalHarmonicsDegree, this.sphericalHarmonicsDegree);\r\n\r\n        let splatBuffersChanged = false;\r\n        if (splatBuffers.length !== this.lastBuildScenes.length) {\r\n            splatBuffersChanged = true;\r\n        } else {\r\n            for (let i = 0; i < splatBuffers.length; i++) {\r\n                const splatBuffer = splatBuffers[i];\r\n                if (splatBuffer !== this.lastBuildScenes[i].splatBuffer) {\r\n                    splatBuffersChanged = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        let isUpdateBuild = true;\r\n        if (this.scenes.length !== 1 ||\r\n            this.lastBuildSceneCount !== this.scenes.length ||\r\n            this.lastBuildMaxSplatCount !== maxSplatCount ||\r\n            splatBuffersChanged) {\r\n                isUpdateBuild = false;\r\n       }\r\n\r\n       if (!isUpdateBuild) {\r\n            this.boundingBox = new THREE.Box3();\r\n            if (!preserveVisibleRegion) {\r\n                this.maxSplatDistanceFromSceneCenter = 0;\r\n                this.visibleRegionBufferRadius = 0;\r\n                this.visibleRegionRadius = 0;\r\n                this.visibleRegionFadeStartRadius = 0;\r\n                this.firstRenderTime = -1;\r\n            }\r\n            this.lastBuildScenes = [];\r\n            this.lastBuildSplatCount = 0;\r\n            this.lastBuildMaxSplatCount = 0;\r\n            this.disposeMeshData();\r\n            this.geometry = SplatGeometry.build(maxSplatCount);\r\n            if (this.splatRenderMode === SplatRenderMode.ThreeD) {\r\n                this.material = SplatMaterial3D.build(this.dynamicMode, this.enableOptionalEffects, this.antialiased,\r\n                                                      this.maxScreenSpaceSplatSize, this.splatScale, this.pointCloudModeEnabled,\r\n                                                      this.minSphericalHarmonicsDegree, this.kernel2DSize);\r\n            } else {\r\n                this.material = SplatMaterial2D.build(this.dynamicMode, this.enableOptionalEffects,\r\n                                                      this.splatScale, this.pointCloudModeEnabled, this.minSphericalHarmonicsDegree);\r\n            }\r\n\r\n            const indexMaps = SplatMesh.buildSplatIndexMaps(splatBuffers);\r\n            this.globalSplatIndexToLocalSplatIndexMap = indexMaps.localSplatIndexMap;\r\n            this.globalSplatIndexToSceneIndexMap = indexMaps.sceneIndexMap;\r\n        }\r\n\r\n        const splatBufferSplatCount = this.getSplatCount(true);\r\n        if (this.enableDistancesComputationOnGPU) this.setupDistancesComputationTransformFeedback();\r\n        const dataUpdateResults = this.refreshGPUDataFromSplatBuffers(isUpdateBuild);\r\n\r\n        for (let i = 0; i < this.scenes.length; i++) {\r\n            this.lastBuildScenes[i] = this.scenes[i];\r\n        }\r\n        this.lastBuildSplatCount = splatBufferSplatCount;\r\n        this.lastBuildMaxSplatCount = this.getMaxSplatCount();\r\n        this.lastBuildSceneCount = this.scenes.length;\r\n\r\n        if (finalBuild && this.scenes.length > 0) {\r\n            this.buildSplatTree(sceneOptions.map(options => options.splatAlphaRemovalThreshold || 1),\r\n                                onSplatTreeIndexesUpload, onSplatTreeConstruction)\r\n            .then(() => {\r\n                if (this.onSplatTreeReadyCallback) this.onSplatTreeReadyCallback(this.splatTree);\r\n                this.onSplatTreeReadyCallback = null;\r\n            });\r\n        }\r\n\r\n        this.visible = (this.scenes.length > 0);\r\n\r\n        return dataUpdateResults;\r\n    }\r\n\r\n    freeIntermediateSplatData() {\r\n\r\n        const deleteTextureData = (texture) => {\r\n            delete texture.source.data;\r\n            delete texture.image;\r\n            texture.onUpdate = null;\r\n        };\r\n\r\n        delete this.splatDataTextures.baseData.covariances;\r\n        delete this.splatDataTextures.baseData.centers;\r\n        delete this.splatDataTextures.baseData.colors;\r\n        delete this.splatDataTextures.baseData.sphericalHarmonics;\r\n\r\n        delete this.splatDataTextures.centerColors.data;\r\n        delete this.splatDataTextures.covariances.data;\r\n        if (this.splatDataTextures.sphericalHarmonics) {\r\n            delete this.splatDataTextures.sphericalHarmonics.data;\r\n        }\r\n        if (this.splatDataTextures.sceneIndexes) {\r\n            delete this.splatDataTextures.sceneIndexes.data;\r\n        }\r\n\r\n        this.splatDataTextures.centerColors.texture.needsUpdate = true;\r\n        this.splatDataTextures.centerColors.texture.onUpdate = () => {\r\n            deleteTextureData(this.splatDataTextures.centerColors.texture);\r\n        };\r\n\r\n        this.splatDataTextures.covariances.texture.needsUpdate = true;\r\n        this.splatDataTextures.covariances.texture.onUpdate = () => {\r\n            deleteTextureData(this.splatDataTextures.covariances.texture);\r\n        };\r\n\r\n        if (this.splatDataTextures.sphericalHarmonics) {\r\n            if (this.splatDataTextures.sphericalHarmonics.texture) {\r\n                this.splatDataTextures.sphericalHarmonics.texture.needsUpdate = true;\r\n                this.splatDataTextures.sphericalHarmonics.texture.onUpdate = () => {\r\n                    deleteTextureData(this.splatDataTextures.sphericalHarmonics.texture);\r\n                };\r\n            } else {\r\n                this.splatDataTextures.sphericalHarmonics.textures.forEach((texture) => {\r\n                    texture.needsUpdate = true;\r\n                    texture.onUpdate = () => {\r\n                        deleteTextureData(texture);\r\n                    };\r\n                });\r\n            }\r\n        }\r\n        if (this.splatDataTextures.sceneIndexes) {\r\n            this.splatDataTextures.sceneIndexes.texture.needsUpdate = true;\r\n            this.splatDataTextures.sceneIndexes.texture.onUpdate = () => {\r\n                deleteTextureData(this.splatDataTextures.sceneIndexes.texture);\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Dispose all resources held by the splat mesh\r\n     */\r\n    dispose() {\r\n        this.disposeMeshData();\r\n        this.disposeTextures();\r\n        this.disposeSplatTree();\r\n        if (this.enableDistancesComputationOnGPU) {\r\n            if (this.computeDistancesOnGPUSyncTimeout) {\r\n                clearTimeout(this.computeDistancesOnGPUSyncTimeout);\r\n                this.computeDistancesOnGPUSyncTimeout = null;\r\n            }\r\n            this.disposeDistancesComputationGPUResources();\r\n        }\r\n        this.scenes = [];\r\n        this.distancesTransformFeedback = {\r\n            'id': null,\r\n            'vertexShader': null,\r\n            'fragmentShader': null,\r\n            'program': null,\r\n            'centersBuffer': null,\r\n            'sceneIndexesBuffer': null,\r\n            'outDistancesBuffer': null,\r\n            'centersLoc': -1,\r\n            'modelViewProjLoc': -1,\r\n            'sceneIndexesLoc': -1,\r\n            'transformsLocs': []\r\n        };\r\n        this.renderer = null;\r\n\r\n        this.globalSplatIndexToLocalSplatIndexMap = [];\r\n        this.globalSplatIndexToSceneIndexMap = [];\r\n\r\n        this.lastBuildSplatCount = 0;\r\n        this.lastBuildScenes = [];\r\n        this.lastBuildMaxSplatCount = 0;\r\n        this.lastBuildSceneCount = 0;\r\n        this.firstRenderTime = -1;\r\n        this.finalBuild = false;\r\n\r\n        this.webGLUtils = null;\r\n\r\n        this.boundingBox = new THREE.Box3();\r\n        this.calculatedSceneCenter = new THREE.Vector3();\r\n        this.maxSplatDistanceFromSceneCenter = 0;\r\n        this.visibleRegionBufferRadius = 0;\r\n        this.visibleRegionRadius = 0;\r\n        this.visibleRegionFadeStartRadius = 0;\r\n        this.visibleRegionChanging = false;\r\n\r\n        this.splatScale = 1.0;\r\n        this.pointCloudModeEnabled = false;\r\n\r\n        this.disposed = true;\r\n        this.lastRenderer = null;\r\n        this.visible = false;\r\n    }\r\n\r\n    /**\r\n     * Dispose of only the Three.js mesh resources (geometry, material, and texture)\r\n     */\r\n    disposeMeshData() {\r\n        if (this.geometry && this.geometry !== dummyGeometry) {\r\n            this.geometry.dispose();\r\n            this.geometry = null;\r\n        }\r\n        if (this.material) {\r\n            this.material.dispose();\r\n            this.material = null;\r\n        }\r\n    }\r\n\r\n    disposeTextures() {\r\n        for (let textureKey in this.splatDataTextures) {\r\n            if (this.splatDataTextures.hasOwnProperty(textureKey)) {\r\n                const textureContainer = this.splatDataTextures[textureKey];\r\n                if (textureContainer.texture) {\r\n                    textureContainer.texture.dispose();\r\n                    textureContainer.texture = null;\r\n                }\r\n            }\r\n        }\r\n        this.splatDataTextures = null;\r\n    }\r\n\r\n    disposeSplatTree() {\r\n        if (this.splatTree) {\r\n            this.splatTree.dispose();\r\n            this.splatTree = null;\r\n        }\r\n        if (this.baseSplatTree) {\r\n            this.baseSplatTree.dispose();\r\n            this.baseSplatTree = null;\r\n        }\r\n    }\r\n\r\n    getSplatTree() {\r\n        return this.splatTree;\r\n    }\r\n\r\n    onSplatTreeReady(callback) {\r\n        this.onSplatTreeReadyCallback = callback;\r\n    }\r\n\r\n    /**\r\n     * Get copies of data that are necessary for splat distance computation: splat center positions and splat\r\n     * scene indexes (necessary for applying dynamic scene transformations during distance computation)\r\n     * @param {*} start The index at which to start copying data\r\n     * @param {*} end  The index at which to stop copying data\r\n     * @return {object}\r\n     */\r\n    getDataForDistancesComputation(start, end) {\r\n        const centers = this.integerBasedDistancesComputation ?\r\n                        this.getIntegerCenters(start, end, true) :\r\n                        this.getFloatCenters(start, end, true);\r\n        const sceneIndexes = this.getSceneIndexes(start, end);\r\n        return {\r\n            centers,\r\n            sceneIndexes\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Refresh data textures and GPU buffers with splat data from the splat buffers belonging to this mesh.\r\n     * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\r\n     * @return {object}\r\n     */\r\n    refreshGPUDataFromSplatBuffers(sinceLastBuildOnly) {\r\n        const splatCount = this.getSplatCount(true);\r\n        this.refreshDataTexturesFromSplatBuffers(sinceLastBuildOnly);\r\n        const updateStart = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\r\n        const { centers, sceneIndexes } = this.getDataForDistancesComputation(updateStart, splatCount - 1);\r\n        if (this.enableDistancesComputationOnGPU) {\r\n            this.refreshGPUBuffersForDistancesComputation(centers, sceneIndexes, sinceLastBuildOnly);\r\n        }\r\n        return {\r\n            'from': updateStart,\r\n            'to': splatCount - 1,\r\n            'count': splatCount - updateStart,\r\n            'centers': centers,\r\n            'sceneIndexes': sceneIndexes\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Update the GPU buffers that are used for computing splat distances on the GPU.\r\n     * @param {Array<number>} centers Splat center positions\r\n     * @param {Array<number>} sceneIndexes Indexes of the scene to which each splat belongs\r\n     * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\r\n     */\r\n    refreshGPUBuffersForDistancesComputation(centers, sceneIndexes, sinceLastBuildOnly = false) {\r\n        const offset = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\r\n        this.updateGPUCentersBufferForDistancesComputation(sinceLastBuildOnly, centers, offset);\r\n        this.updateGPUTransformIndexesBufferForDistancesComputation(sinceLastBuildOnly, sceneIndexes, offset);\r\n    }\r\n\r\n    /**\r\n     * Refresh data textures with data from the splat buffers for this mesh.\r\n     * @param {boolean} sinceLastBuildOnly Specify whether or not to only update for splats that have been added since the last build.\r\n     */\r\n    refreshDataTexturesFromSplatBuffers(sinceLastBuildOnly) {\r\n        const splatCount = this.getSplatCount(true);\r\n        const fromSplat = this.lastBuildSplatCount;\r\n        const toSplat = splatCount - 1;\r\n\r\n        if (!sinceLastBuildOnly) {\r\n            this.setupDataTextures();\r\n            this.updateBaseDataFromSplatBuffers();\r\n        } else {\r\n            this.updateBaseDataFromSplatBuffers(fromSplat, toSplat);\r\n        }\r\n\r\n        this.updateDataTexturesFromBaseData(fromSplat, toSplat);\r\n        this.updateVisibleRegion(sinceLastBuildOnly);\r\n    }\r\n\r\n    setupDataTextures() {\r\n        const maxSplatCount = this.getMaxSplatCount();\r\n        const splatCount = this.getSplatCount(true);\r\n\r\n        this.disposeTextures();\r\n\r\n        const computeDataTextureSize = (elementsPerTexel, elementsPerSplat) => {\r\n            const texSize = new THREE.Vector2(4096, 1024);\r\n            while (texSize.x * texSize.y * elementsPerTexel < maxSplatCount * elementsPerSplat) texSize.y *= 2;\r\n            return texSize;\r\n        };\r\n\r\n        const getCovariancesElementsPertexelStored = (compressionLevel) => {\r\n            return compressionLevel >= 1 ? COVARIANCES_ELEMENTS_PER_TEXEL_COMPRESSED_STORED : COVARIANCES_ELEMENTS_PER_TEXEL_STORED;\r\n        };\r\n\r\n        const getCovariancesInitialTextureSpecs = (compressionLevel) => {\r\n            const elementsPerTexelStored = getCovariancesElementsPertexelStored(compressionLevel);\r\n            const texSize = computeDataTextureSize(elementsPerTexelStored, 6);\r\n            return {elementsPerTexelStored, texSize};\r\n        };\r\n\r\n        let covarianceCompressionLevel = this.getTargetCovarianceCompressionLevel();\r\n        const scaleRotationCompressionLevel = 0;\r\n        const shCompressionLevel = this.getTargetSphericalHarmonicsCompressionLevel();\r\n\r\n        let covariances;\r\n        let scales;\r\n        let rotations;\r\n        if (this.splatRenderMode === SplatRenderMode.ThreeD) {\r\n            const initialCovTexSpecs = getCovariancesInitialTextureSpecs(covarianceCompressionLevel);\r\n            if (initialCovTexSpecs.texSize.x * initialCovTexSpecs.texSize.y > MAX_TEXTURE_TEXELS && covarianceCompressionLevel === 0) {\r\n                covarianceCompressionLevel = 1;\r\n            }\r\n            covariances = new Float32Array(maxSplatCount * COVARIANCES_ELEMENTS_PER_SPLAT);\r\n        } else {\r\n            scales = new Float32Array(maxSplatCount * 3);\r\n            rotations = new Float32Array(maxSplatCount * 4);\r\n        }\r\n\r\n        const centers = new Float32Array(maxSplatCount * 3);\r\n        const colors = new Uint8Array(maxSplatCount * 4);\r\n\r\n        let SphericalHarmonicsArrayType = Float32Array;\r\n        if (shCompressionLevel === 1) SphericalHarmonicsArrayType = Uint16Array;\r\n        else if (shCompressionLevel === 2) SphericalHarmonicsArrayType = Uint8Array;\r\n        const shComponentCount = getSphericalHarmonicsComponentCountForDegree(this.minSphericalHarmonicsDegree);\r\n        const shData = this.minSphericalHarmonicsDegree ? new SphericalHarmonicsArrayType(maxSplatCount * shComponentCount) : undefined;\r\n\r\n        // set up centers/colors data texture\r\n        const centersColsTexSize = computeDataTextureSize(CENTER_COLORS_ELEMENTS_PER_TEXEL, 4);\r\n        const paddedCentersCols = new Uint32Array(centersColsTexSize.x * centersColsTexSize.y * CENTER_COLORS_ELEMENTS_PER_TEXEL);\r\n        SplatMesh.updateCenterColorsPaddedData(0, splatCount - 1, centers, colors, paddedCentersCols);\r\n\r\n        const centersColsTex = new THREE.DataTexture(paddedCentersCols, centersColsTexSize.x, centersColsTexSize.y,\r\n                                                     THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\r\n        centersColsTex.internalFormat = 'RGBA32UI';\r\n        centersColsTex.needsUpdate = true;\r\n        this.material.uniforms.centersColorsTexture.value = centersColsTex;\r\n        this.material.uniforms.centersColorsTextureSize.value.copy(centersColsTexSize);\r\n        this.material.uniformsNeedUpdate = true;\r\n\r\n        this.splatDataTextures = {\r\n            'baseData': {\r\n                'covariances': covariances,\r\n                'scales': scales,\r\n                'rotations': rotations,\r\n                'centers': centers,\r\n                'colors': colors,\r\n                'sphericalHarmonics': shData\r\n            },\r\n            'centerColors': {\r\n                'data': paddedCentersCols,\r\n                'texture': centersColsTex,\r\n                'size': centersColsTexSize\r\n            }\r\n        };\r\n\r\n        if (this.splatRenderMode === SplatRenderMode.ThreeD) {\r\n            // set up covariances data texture\r\n\r\n            const covTexSpecs = getCovariancesInitialTextureSpecs(covarianceCompressionLevel);\r\n            const covariancesElementsPerTexelStored = covTexSpecs.elementsPerTexelStored;\r\n            const covTexSize = covTexSpecs.texSize;\r\n\r\n            let CovariancesDataType = covarianceCompressionLevel >= 1 ? Uint32Array : Float32Array;\r\n            const covariancesElementsPerTexelAllocated = covarianceCompressionLevel >= 1 ?\r\n                                                         COVARIANCES_ELEMENTS_PER_TEXEL_COMPRESSED_ALLOCATED :\r\n                                                         COVARIANCES_ELEMENTS_PER_TEXEL_ALLOCATED;\r\n            const covariancesTextureData = new CovariancesDataType(covTexSize.x * covTexSize.y * covariancesElementsPerTexelAllocated);\r\n\r\n            if (covarianceCompressionLevel === 0) {\r\n                covariancesTextureData.set(covariances);\r\n            } else {\r\n                SplatMesh.updatePaddedCompressedCovariancesTextureData(covariances, covariancesTextureData, 0, 0, covariances.length);\r\n            }\r\n\r\n            let covTex;\r\n            if (covarianceCompressionLevel >= 1) {\r\n                covTex = new THREE.DataTexture(covariancesTextureData, covTexSize.x, covTexSize.y,\r\n                                               THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\r\n                covTex.internalFormat = 'RGBA32UI';\r\n                this.material.uniforms.covariancesTextureHalfFloat.value = covTex;\r\n            } else {\r\n                covTex = new THREE.DataTexture(covariancesTextureData, covTexSize.x, covTexSize.y, THREE.RGBAFormat, THREE.FloatType);\r\n                this.material.uniforms.covariancesTexture.value = covTex;\r\n\r\n                // For some reason a usampler2D needs to have a valid texture attached or WebGL complains\r\n                const dummyTex = new THREE.DataTexture(new Uint32Array(32), 2, 2, THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\r\n                dummyTex.internalFormat = 'RGBA32UI';\r\n                this.material.uniforms.covariancesTextureHalfFloat.value = dummyTex;\r\n                dummyTex.needsUpdate = true;\r\n            }\r\n            covTex.needsUpdate = true;\r\n\r\n            this.material.uniforms.covariancesAreHalfFloat.value = (covarianceCompressionLevel >= 1) ? 1 : 0;\r\n            this.material.uniforms.covariancesTextureSize.value.copy(covTexSize);\r\n\r\n            this.splatDataTextures['covariances'] = {\r\n                'data': covariancesTextureData,\r\n                'texture': covTex,\r\n                'size': covTexSize,\r\n                'compressionLevel': covarianceCompressionLevel,\r\n                'elementsPerTexelStored': covariancesElementsPerTexelStored,\r\n                'elementsPerTexelAllocated': covariancesElementsPerTexelAllocated\r\n            };\r\n        } else {\r\n            // set up scale & rotations data texture\r\n            const elementsPerSplat = 6;\r\n            const scaleRotationsTexSize = computeDataTextureSize(SCALES_ROTATIONS_ELEMENTS_PER_TEXEL, elementsPerSplat);\r\n            let ScaleRotationsDataType = scaleRotationCompressionLevel >= 1 ? Uint16Array : Float32Array;\r\n            let scaleRotationsTextureType = scaleRotationCompressionLevel >= 1 ? THREE.HalfFloatType : THREE.FloatType;\r\n            const paddedScaleRotations = new ScaleRotationsDataType(scaleRotationsTexSize.x * scaleRotationsTexSize.y *\r\n                                                                    SCALES_ROTATIONS_ELEMENTS_PER_TEXEL);\r\n\r\n            SplatMesh.updateScaleRotationsPaddedData(0, splatCount - 1, scales, rotations, paddedScaleRotations);\r\n\r\n            const scaleRotationsTex = new THREE.DataTexture(paddedScaleRotations, scaleRotationsTexSize.x, scaleRotationsTexSize.y,\r\n                                                            THREE.RGBAFormat, scaleRotationsTextureType);\r\n            scaleRotationsTex.needsUpdate = true;\r\n            this.material.uniforms.scaleRotationsTexture.value = scaleRotationsTex;\r\n            this.material.uniforms.scaleRotationsTextureSize.value.copy(scaleRotationsTexSize);\r\n\r\n            this.splatDataTextures['scaleRotations'] = {\r\n                'data': paddedScaleRotations,\r\n                'texture': scaleRotationsTex,\r\n                'size': scaleRotationsTexSize,\r\n                'compressionLevel': scaleRotationCompressionLevel\r\n            };\r\n        }\r\n\r\n        if (shData) {\r\n            const shTextureType = shCompressionLevel === 2 ? THREE.UnsignedByteType : THREE.HalfFloatType;\r\n\r\n            let paddedSHComponentCount = shComponentCount;\r\n            if (paddedSHComponentCount % 2 !== 0) paddedSHComponentCount++;\r\n            const shElementsPerTexel = 4;\r\n            const texelFormat = shElementsPerTexel === 4 ? THREE.RGBAFormat : THREE.RGFormat;\r\n            let shTexSize = computeDataTextureSize(shElementsPerTexel, paddedSHComponentCount);\r\n\r\n            // Use one texture for all spherical harmonics data\r\n            if (shTexSize.x * shTexSize.y <= MAX_TEXTURE_TEXELS) {\r\n                const paddedSHArraySize = shTexSize.x * shTexSize.y * shElementsPerTexel;\r\n                const paddedSHArray = new SphericalHarmonicsArrayType(paddedSHArraySize);\r\n                for (let c = 0; c < splatCount; c++) {\r\n                    const srcBase = shComponentCount * c;\r\n                    const destBase = paddedSHComponentCount * c;\r\n                    for (let i = 0; i < shComponentCount; i++) {\r\n                        paddedSHArray[destBase + i] = shData[srcBase + i];\r\n                    }\r\n                }\r\n\r\n                const shTexture = new THREE.DataTexture(paddedSHArray, shTexSize.x, shTexSize.y, texelFormat, shTextureType);\r\n                shTexture.needsUpdate = true;\r\n                this.material.uniforms.sphericalHarmonicsTexture.value = shTexture;\r\n                this.splatDataTextures['sphericalHarmonics'] = {\r\n                    'componentCount': shComponentCount,\r\n                    'paddedComponentCount': paddedSHComponentCount,\r\n                    'data': paddedSHArray,\r\n                    'textureCount': 1,\r\n                    'texture': shTexture,\r\n                    'size': shTexSize,\r\n                    'compressionLevel': shCompressionLevel,\r\n                    'elementsPerTexel': shElementsPerTexel\r\n                };\r\n            // Use three textures for spherical harmonics data, one per color channel\r\n            } else {\r\n                const shComponentCountPerChannel = shComponentCount / 3;\r\n                paddedSHComponentCount = shComponentCountPerChannel;\r\n                if (paddedSHComponentCount % 2 !== 0) paddedSHComponentCount++;\r\n                shTexSize = computeDataTextureSize(shElementsPerTexel, paddedSHComponentCount);\r\n\r\n                const paddedSHArraySize = shTexSize.x * shTexSize.y * shElementsPerTexel;\r\n                const textureUniforms = [this.material.uniforms.sphericalHarmonicsTextureR,\r\n                                         this.material.uniforms.sphericalHarmonicsTextureG,\r\n                                         this.material.uniforms.sphericalHarmonicsTextureB];\r\n                const paddedSHArrays = [];\r\n                const shTextures = [];\r\n                for (let t = 0; t < 3; t++) {\r\n                    const paddedSHArray = new SphericalHarmonicsArrayType(paddedSHArraySize);\r\n                    paddedSHArrays.push(paddedSHArray);\r\n                    for (let c = 0; c < splatCount; c++) {\r\n                        const srcBase = shComponentCount * c;\r\n                        const destBase = paddedSHComponentCount * c;\r\n                        if (shComponentCountPerChannel >= 3) {\r\n                            for (let i = 0; i < 3; i++) paddedSHArray[destBase + i] = shData[srcBase + t * 3 + i];\r\n                            if (shComponentCountPerChannel >= 8) {\r\n                                for (let i = 0; i < 5; i++) paddedSHArray[destBase + 3 + i] = shData[srcBase + 9 + t * 5 + i];\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    const shTexture = new THREE.DataTexture(paddedSHArray, shTexSize.x, shTexSize.y, texelFormat, shTextureType);\r\n                    shTextures.push(shTexture);\r\n                    shTexture.needsUpdate = true;\r\n                    textureUniforms[t].value = shTexture;\r\n                }\r\n\r\n                this.material.uniforms.sphericalHarmonicsMultiTextureMode.value = 1;\r\n                this.splatDataTextures['sphericalHarmonics'] = {\r\n                    'componentCount': shComponentCount,\r\n                    'componentCountPerChannel': shComponentCountPerChannel,\r\n                    'paddedComponentCount': paddedSHComponentCount,\r\n                    'data': paddedSHArrays,\r\n                    'textureCount': 3,\r\n                    'textures': shTextures,\r\n                    'size': shTexSize,\r\n                    'compressionLevel': shCompressionLevel,\r\n                    'elementsPerTexel': shElementsPerTexel\r\n                };\r\n            }\r\n\r\n            this.material.uniforms.sphericalHarmonicsTextureSize.value.copy(shTexSize);\r\n            this.material.uniforms.sphericalHarmonics8BitMode.value = shCompressionLevel === 2 ? 1 : 0;\r\n            for (let s = 0; s < this.scenes.length; s++) {\r\n                const splatBuffer = this.scenes[s].splatBuffer;\r\n                this.material.uniforms.sphericalHarmonics8BitCompressionRangeMin.value[s] =\r\n                    splatBuffer.minSphericalHarmonicsCoeff;\r\n                this.material.uniforms.sphericalHarmonics8BitCompressionRangeMax.value[s] =\r\n                    splatBuffer.maxSphericalHarmonicsCoeff;\r\n            }\r\n            this.material.uniformsNeedUpdate = true;\r\n        }\r\n\r\n        const sceneIndexesTexSize = computeDataTextureSize(SCENE_INDEXES_ELEMENTS_PER_TEXEL, 4);\r\n        const paddedTransformIndexes = new Uint32Array(sceneIndexesTexSize.x *\r\n                                                       sceneIndexesTexSize.y * SCENE_INDEXES_ELEMENTS_PER_TEXEL);\r\n        for (let c = 0; c < splatCount; c++) paddedTransformIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\r\n        const sceneIndexesTexture = new THREE.DataTexture(paddedTransformIndexes, sceneIndexesTexSize.x, sceneIndexesTexSize.y,\r\n                                                          THREE.RedIntegerFormat, THREE.UnsignedIntType);\r\n        sceneIndexesTexture.internalFormat = 'R32UI';\r\n        sceneIndexesTexture.needsUpdate = true;\r\n        this.material.uniforms.sceneIndexesTexture.value = sceneIndexesTexture;\r\n        this.material.uniforms.sceneIndexesTextureSize.value.copy(sceneIndexesTexSize);\r\n        this.material.uniformsNeedUpdate = true;\r\n        this.splatDataTextures['sceneIndexes'] = {\r\n            'data': paddedTransformIndexes,\r\n            'texture': sceneIndexesTexture,\r\n            'size': sceneIndexesTexSize\r\n        };\r\n        this.material.uniforms.sceneCount.value = this.scenes.length;\r\n    }\r\n\r\n    updateBaseDataFromSplatBuffers(fromSplat, toSplat) {\r\n        const covarancesTextureDesc = this.splatDataTextures['covariances'];\r\n        const covarianceCompressionLevel = covarancesTextureDesc ? covarancesTextureDesc.compressionLevel : undefined;\r\n        const scaleRotationsTextureDesc = this.splatDataTextures['scaleRotations'];\r\n        const scaleRotationCompressionLevel = scaleRotationsTextureDesc ? scaleRotationsTextureDesc.compressionLevel : undefined;\r\n        const shITextureDesc = this.splatDataTextures['sphericalHarmonics'];\r\n        const shCompressionLevel = shITextureDesc ? shITextureDesc.compressionLevel : 0;\r\n\r\n        this.fillSplatDataArrays(this.splatDataTextures.baseData.covariances, this.splatDataTextures.baseData.scales,\r\n                                 this.splatDataTextures.baseData.rotations, this.splatDataTextures.baseData.centers,\r\n                                 this.splatDataTextures.baseData.colors, this.splatDataTextures.baseData.sphericalHarmonics, undefined,\r\n                                 covarianceCompressionLevel, scaleRotationCompressionLevel, shCompressionLevel,\r\n                                 fromSplat, toSplat, fromSplat);\r\n    }\r\n\r\n    updateDataTexturesFromBaseData(fromSplat, toSplat) {\r\n        const covarancesTextureDesc = this.splatDataTextures['covariances'];\r\n        const covarianceCompressionLevel = covarancesTextureDesc ? covarancesTextureDesc.compressionLevel : undefined;\r\n        const scaleRotationsTextureDesc = this.splatDataTextures['scaleRotations'];\r\n        const scaleRotationCompressionLevel = scaleRotationsTextureDesc ? scaleRotationsTextureDesc.compressionLevel : undefined;\r\n        const shTextureDesc = this.splatDataTextures['sphericalHarmonics'];\r\n        const shCompressionLevel = shTextureDesc ? shTextureDesc.compressionLevel : 0;\r\n\r\n        // Update center & color data texture\r\n        const centerColorsTextureDescriptor = this.splatDataTextures['centerColors'];\r\n        const paddedCenterColors = centerColorsTextureDescriptor.data;\r\n        const centerColorsTexture = centerColorsTextureDescriptor.texture;\r\n        SplatMesh.updateCenterColorsPaddedData(fromSplat, toSplat, this.splatDataTextures.baseData.centers,\r\n                                               this.splatDataTextures.baseData.colors, paddedCenterColors);\r\n        const centerColorsTextureProps = this.renderer ? this.renderer.properties.get(centerColorsTexture) : null;\r\n        if (!centerColorsTextureProps || !centerColorsTextureProps.__webglTexture) {\r\n            centerColorsTexture.needsUpdate = true;\r\n        } else {\r\n            this.updateDataTexture(paddedCenterColors, centerColorsTextureDescriptor.texture, centerColorsTextureDescriptor.size,\r\n                                   centerColorsTextureProps, CENTER_COLORS_ELEMENTS_PER_TEXEL, CENTER_COLORS_ELEMENTS_PER_SPLAT, 4,\r\n                                   fromSplat, toSplat);\r\n        }\r\n\r\n        // update covariance data texture\r\n        if (covarancesTextureDesc) {\r\n            const covariancesTexture = covarancesTextureDesc.texture;\r\n            const covarancesStartElement = fromSplat * COVARIANCES_ELEMENTS_PER_SPLAT;\r\n            const covariancesEndElement = toSplat * COVARIANCES_ELEMENTS_PER_SPLAT;\r\n\r\n            if (covarianceCompressionLevel === 0) {\r\n                for (let i = covarancesStartElement; i <= covariancesEndElement; i++) {\r\n                    const covariance = this.splatDataTextures.baseData.covariances[i];\r\n                    covarancesTextureDesc.data[i] = covariance;\r\n                }\r\n            } else {\r\n                SplatMesh.updatePaddedCompressedCovariancesTextureData(this.splatDataTextures.baseData.covariances,\r\n                                                                       covarancesTextureDesc.data,\r\n                                                                       fromSplat * covarancesTextureDesc.elementsPerTexelAllocated,\r\n                                                                       covarancesStartElement, covariancesEndElement);\r\n            }\r\n\r\n            const covariancesTextureProps = this.renderer ? this.renderer.properties.get(covariancesTexture) : null;\r\n            if (!covariancesTextureProps || !covariancesTextureProps.__webglTexture) {\r\n                covariancesTexture.needsUpdate = true;\r\n            } else {\r\n                if (covarianceCompressionLevel === 0) {\r\n                    this.updateDataTexture(covarancesTextureDesc.data, covarancesTextureDesc.texture, covarancesTextureDesc.size,\r\n                                           covariancesTextureProps, covarancesTextureDesc.elementsPerTexelStored,\r\n                                           COVARIANCES_ELEMENTS_PER_SPLAT, 4, fromSplat, toSplat);\r\n                } else {\r\n                    this.updateDataTexture(covarancesTextureDesc.data, covarancesTextureDesc.texture, covarancesTextureDesc.size,\r\n                                           covariancesTextureProps, covarancesTextureDesc.elementsPerTexelAllocated,\r\n                                           covarancesTextureDesc.elementsPerTexelAllocated, 2, fromSplat, toSplat);\r\n                }\r\n            }\r\n        }\r\n\r\n        // update scale and rotation data texture\r\n        if (scaleRotationsTextureDesc) {\r\n            const paddedScaleRotations = scaleRotationsTextureDesc.data;\r\n            const scaleRotationsTexture = scaleRotationsTextureDesc.texture;\r\n            const elementsPerSplat = 6;\r\n            const bytesPerElement = scaleRotationCompressionLevel === 0 ? 4 : 2;\r\n\r\n            SplatMesh.updateScaleRotationsPaddedData(fromSplat, toSplat, this.splatDataTextures.baseData.scales,\r\n                                                     this.splatDataTextures.baseData.rotations, paddedScaleRotations);\r\n            const scaleRotationsTextureProps = this.renderer ? this.renderer.properties.get(scaleRotationsTexture) : null;\r\n            if (!scaleRotationsTextureProps || !scaleRotationsTextureProps.__webglTexture) {\r\n                scaleRotationsTexture.needsUpdate = true;\r\n            } else {\r\n                this.updateDataTexture(paddedScaleRotations, scaleRotationsTextureDesc.texture, scaleRotationsTextureDesc.size,\r\n                                       scaleRotationsTextureProps, SCALES_ROTATIONS_ELEMENTS_PER_TEXEL, elementsPerSplat, bytesPerElement,\r\n                                       fromSplat, toSplat);\r\n            }\r\n        }\r\n\r\n        // update spherical harmonics data texture\r\n        const shData = this.splatDataTextures.baseData.sphericalHarmonics;\r\n        if (shData) {\r\n            let shBytesPerElement = 4;\r\n            if (shCompressionLevel === 1) shBytesPerElement = 2;\r\n            else if (shCompressionLevel === 2) shBytesPerElement = 1;\r\n\r\n            const updateTexture = (shTexture, shTextureSize, elementsPerTexel, paddedSHArray, paddedSHComponentCount) => {\r\n                const shTextureProps = this.renderer ? this.renderer.properties.get(shTexture) : null;\r\n                if (!shTextureProps || !shTextureProps.__webglTexture) {\r\n                    shTexture.needsUpdate = true;\r\n                } else {\r\n                    this.updateDataTexture(paddedSHArray, shTexture, shTextureSize, shTextureProps, elementsPerTexel,\r\n                                           paddedSHComponentCount, shBytesPerElement, fromSplat, toSplat);\r\n                }\r\n            };\r\n\r\n            const shComponentCount = shTextureDesc.componentCount;\r\n            const paddedSHComponentCount = shTextureDesc.paddedComponentCount;\r\n\r\n            // Update for the case of a single texture for all spherical harmonics data\r\n            if (shTextureDesc.textureCount === 1) {\r\n                const paddedSHArray = shTextureDesc.data;\r\n                for (let c = fromSplat; c <= toSplat; c++) {\r\n                    const srcBase = shComponentCount * c;\r\n                    const destBase = paddedSHComponentCount * c;\r\n                    for (let i = 0; i < shComponentCount; i++) {\r\n                        paddedSHArray[destBase + i] = shData[srcBase + i];\r\n                    }\r\n                }\r\n                updateTexture(shTextureDesc.texture, shTextureDesc.size,\r\n                              shTextureDesc.elementsPerTexel, paddedSHArray, paddedSHComponentCount);\r\n            // Update for the case of spherical harmonics data split among three textures, one for each color channel\r\n            } else {\r\n                const shComponentCountPerChannel = shTextureDesc.componentCountPerChannel;\r\n                for (let t = 0; t < 3; t++) {\r\n                    const paddedSHArray = shTextureDesc.data[t];\r\n                    for (let c = fromSplat; c <= toSplat; c++) {\r\n                        const srcBase = shComponentCount * c;\r\n                        const destBase = paddedSHComponentCount * c;\r\n                        if (shComponentCountPerChannel >= 3) {\r\n                            for (let i = 0; i < 3; i++) paddedSHArray[destBase + i] = shData[srcBase + t * 3 + i];\r\n                            if (shComponentCountPerChannel >= 8) {\r\n                                for (let i = 0; i < 5; i++) paddedSHArray[destBase + 3 + i] = shData[srcBase + 9 + t * 5 + i];\r\n                            }\r\n                        }\r\n                    }\r\n                    updateTexture(shTextureDesc.textures[t], shTextureDesc.size,\r\n                                  shTextureDesc.elementsPerTexel, paddedSHArray, paddedSHComponentCount);\r\n                }\r\n            }\r\n        }\r\n\r\n        // update scene index & transform data\r\n        const sceneIndexesTexDesc = this.splatDataTextures['sceneIndexes'];\r\n        const paddedSceneIndexes = sceneIndexesTexDesc.data;\r\n        for (let c = this.lastBuildSplatCount; c <= toSplat; c++) {\r\n            paddedSceneIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\r\n        }\r\n        const sceneIndexesTexture = sceneIndexesTexDesc.texture;\r\n        const sceneIndexesTextureProps = this.renderer ? this.renderer.properties.get(sceneIndexesTexture) : null;\r\n        if (!sceneIndexesTextureProps || !sceneIndexesTextureProps.__webglTexture) {\r\n            sceneIndexesTexture.needsUpdate = true;\r\n        } else {\r\n            this.updateDataTexture(paddedSceneIndexes, sceneIndexesTexDesc.texture, sceneIndexesTexDesc.size,\r\n                                   sceneIndexesTextureProps, 1, 1, 1, this.lastBuildSplatCount, toSplat);\r\n        }\r\n    }\r\n\r\n    getTargetCovarianceCompressionLevel() {\r\n        return this.halfPrecisionCovariancesOnGPU ? 1 : 0;\r\n    }\r\n\r\n    getTargetSphericalHarmonicsCompressionLevel() {\r\n        return Math.max(1, this.getMaximumSplatBufferCompressionLevel());\r\n    }\r\n\r\n    getMaximumSplatBufferCompressionLevel() {\r\n        let maxCompressionLevel;\r\n        for (let i = 0; i < this.scenes.length; i++) {\r\n            const scene = this.getScene(i);\r\n            const splatBuffer = scene.splatBuffer;\r\n            if (i === 0 || splatBuffer.compressionLevel > maxCompressionLevel) {\r\n                maxCompressionLevel = splatBuffer.compressionLevel;\r\n            }\r\n        }\r\n        return maxCompressionLevel;\r\n    }\r\n\r\n    getMinimumSplatBufferCompressionLevel() {\r\n        let minCompressionLevel;\r\n        for (let i = 0; i < this.scenes.length; i++) {\r\n            const scene = this.getScene(i);\r\n            const splatBuffer = scene.splatBuffer;\r\n            if (i === 0 || splatBuffer.compressionLevel < minCompressionLevel) {\r\n                minCompressionLevel = splatBuffer.compressionLevel;\r\n            }\r\n        }\r\n        return minCompressionLevel;\r\n    }\r\n\r\n    static computeTextureUpdateRegion(startSplat, endSplat, textureWidth, elementsPerTexel, elementsPerSplat) {\r\n        const texelsPerSplat = elementsPerSplat / elementsPerTexel;\r\n\r\n        const startSplatTexels = startSplat * texelsPerSplat;\r\n        const startRow = Math.floor(startSplatTexels / textureWidth);\r\n        const startRowElement = startRow * textureWidth * elementsPerTexel;\r\n\r\n        const endSplatTexels = endSplat * texelsPerSplat;\r\n        const endRow = Math.floor(endSplatTexels / textureWidth);\r\n        const endRowEndElement = endRow * textureWidth * elementsPerTexel + (textureWidth * elementsPerTexel);\r\n\r\n        return {\r\n            'dataStart': startRowElement,\r\n            'dataEnd': endRowEndElement,\r\n            'startRow': startRow,\r\n            'endRow': endRow\r\n        };\r\n    }\r\n\r\n    updateDataTexture(paddedData, texture, textureSize, textureProps, elementsPerTexel, elementsPerSplat, bytesPerElement, from, to) {\r\n        const gl = this.renderer.getContext();\r\n        const updateRegion = SplatMesh.computeTextureUpdateRegion(from, to, textureSize.x, elementsPerTexel, elementsPerSplat);\r\n        const updateElementCount = updateRegion.dataEnd - updateRegion.dataStart;\r\n        const updateDataView = new paddedData.constructor(paddedData.buffer,\r\n                                                          updateRegion.dataStart * bytesPerElement, updateElementCount);\r\n        const updateHeight = updateRegion.endRow - updateRegion.startRow + 1;\r\n        const glType = this.webGLUtils.convert(texture.type);\r\n        const glFormat = this.webGLUtils.convert(texture.format, texture.colorSpace);\r\n        const currentTexture = gl.getParameter(gl.TEXTURE_BINDING_2D);\r\n        gl.bindTexture(gl.TEXTURE_2D, textureProps.__webglTexture);\r\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, updateRegion.startRow,\r\n                         textureSize.x, updateHeight, glFormat, glType, updateDataView);\r\n        gl.bindTexture(gl.TEXTURE_2D, currentTexture);\r\n    }\r\n\r\n    static updatePaddedCompressedCovariancesTextureData(sourceData, textureData, textureDataStartIndex, fromElement, toElement) {\r\n        let textureDataView = new DataView(textureData.buffer);\r\n        let textureDataIndex = textureDataStartIndex;\r\n        let sequentialCount = 0;\r\n        for (let i = fromElement; i <= toElement; i+=2) {\r\n            textureDataView.setUint16(textureDataIndex * 2, sourceData[i], true);\r\n            textureDataView.setUint16(textureDataIndex * 2 + 2, sourceData[i + 1], true);\r\n            textureDataIndex += 2;\r\n            sequentialCount++;\r\n            if (sequentialCount >= 3) {\r\n                textureDataIndex += 2;\r\n                sequentialCount = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    static updateCenterColorsPaddedData(from, to, centers, colors, paddedCenterColors) {\r\n        for (let c = from; c <= to; c++) {\r\n            const colorsBase = c * 4;\r\n            const centersBase = c * 3;\r\n            const centerColorsBase = c * 4;\r\n            paddedCenterColors[centerColorsBase] = rgbaArrayToInteger(colors, colorsBase);\r\n            paddedCenterColors[centerColorsBase + 1] = uintEncodedFloat(centers[centersBase]);\r\n            paddedCenterColors[centerColorsBase + 2] = uintEncodedFloat(centers[centersBase + 1]);\r\n            paddedCenterColors[centerColorsBase + 3] = uintEncodedFloat(centers[centersBase + 2]);\r\n        }\r\n    }\r\n\r\n    static updateScaleRotationsPaddedData(from, to, scales, rotations, paddedScaleRotations) {\r\n        const combinedSize = 6;\r\n        for (let c = from; c <= to; c++) {\r\n            const scaleBase = c * 3;\r\n            const rotationBase = c * 4;\r\n            const scaleRotationsBase = c * combinedSize;\r\n\r\n            paddedScaleRotations[scaleRotationsBase] = scales[scaleBase];\r\n            paddedScaleRotations[scaleRotationsBase + 1] = scales[scaleBase + 1];\r\n            paddedScaleRotations[scaleRotationsBase + 2] = scales[scaleBase + 2];\r\n\r\n            paddedScaleRotations[scaleRotationsBase + 3] = rotations[rotationBase];\r\n            paddedScaleRotations[scaleRotationsBase + 4] = rotations[rotationBase + 1];\r\n            paddedScaleRotations[scaleRotationsBase + 5] = rotations[rotationBase + 2];\r\n        }\r\n    }\r\n\r\n    updateVisibleRegion(sinceLastBuildOnly) {\r\n        const splatCount = this.getSplatCount(true);\r\n        const tempCenter = new THREE.Vector3();\r\n        if (!sinceLastBuildOnly) {\r\n            const avgCenter = new THREE.Vector3();\r\n            this.scenes.forEach((scene) => {\r\n                avgCenter.add(scene.splatBuffer.sceneCenter);\r\n            });\r\n            avgCenter.multiplyScalar(1.0 / this.scenes.length);\r\n            this.calculatedSceneCenter.copy(avgCenter);\r\n            this.material.uniforms.sceneCenter.value.copy(this.calculatedSceneCenter);\r\n            this.material.uniformsNeedUpdate = true;\r\n        }\r\n\r\n        const startSplatFormMaxDistanceCalc = sinceLastBuildOnly ? this.lastBuildSplatCount : 0;\r\n        for (let i = startSplatFormMaxDistanceCalc; i < splatCount; i++) {\r\n            this.getSplatCenter(i, tempCenter, true);\r\n            const distFromCSceneCenter = tempCenter.sub(this.calculatedSceneCenter).length();\r\n            if (distFromCSceneCenter > this.maxSplatDistanceFromSceneCenter) this.maxSplatDistanceFromSceneCenter = distFromCSceneCenter;\r\n        }\r\n\r\n        if (this.maxSplatDistanceFromSceneCenter - this.visibleRegionBufferRadius > VISIBLE_REGION_EXPANSION_DELTA) {\r\n            this.visibleRegionBufferRadius = this.maxSplatDistanceFromSceneCenter;\r\n            this.visibleRegionRadius = Math.max(this.visibleRegionBufferRadius - VISIBLE_REGION_EXPANSION_DELTA, 0.0);\r\n        }\r\n        if (this.finalBuild) this.visibleRegionRadius = this.visibleRegionBufferRadius = this.maxSplatDistanceFromSceneCenter;\r\n        this.updateVisibleRegionFadeDistance();\r\n    }\r\n\r\n    updateVisibleRegionFadeDistance(sceneRevealMode = SceneRevealMode.Default) {\r\n        const fastFadeRate = SCENE_FADEIN_RATE_FAST * this.sceneFadeInRateMultiplier;\r\n        const gradualFadeRate = SCENE_FADEIN_RATE_GRADUAL * this.sceneFadeInRateMultiplier;\r\n        const defaultFadeInRate = this.finalBuild ? fastFadeRate : gradualFadeRate;\r\n        const fadeInRate = sceneRevealMode === SceneRevealMode.Default ? defaultFadeInRate : gradualFadeRate;\r\n        this.visibleRegionFadeStartRadius = (this.visibleRegionRadius - this.visibleRegionFadeStartRadius) *\r\n                                             fadeInRate + this.visibleRegionFadeStartRadius;\r\n        const fadeInPercentage = (this.visibleRegionBufferRadius > 0) ?\r\n                                 (this.visibleRegionFadeStartRadius / this.visibleRegionBufferRadius) : 0;\r\n        const fadeInComplete = fadeInPercentage > 0.99;\r\n        const shaderFadeInComplete = (fadeInComplete || sceneRevealMode === SceneRevealMode.Instant) ? 1 : 0;\r\n\r\n        this.material.uniforms.visibleRegionFadeStartRadius.value = this.visibleRegionFadeStartRadius;\r\n        this.material.uniforms.visibleRegionRadius.value = this.visibleRegionRadius;\r\n        this.material.uniforms.firstRenderTime.value = this.firstRenderTime;\r\n        this.material.uniforms.currentTime.value = performance.now();\r\n        this.material.uniforms.fadeInComplete.value = shaderFadeInComplete;\r\n        this.material.uniformsNeedUpdate = true;\r\n        this.visibleRegionChanging = !fadeInComplete;\r\n    }\r\n\r\n    /**\r\n     * Set the indexes of splats that should be rendered; should be sorted in desired render order.\r\n     * @param {Uint32Array} globalIndexes Sorted index list of splats to be rendered\r\n     * @param {number} renderSplatCount Total number of splats to be rendered. Necessary because we may not want to render\r\n     *                                  every splat.\r\n     */\r\n    updateRenderIndexes(globalIndexes, renderSplatCount) {\r\n        const geometry = this.geometry;\r\n        geometry.attributes.splatIndex.set(globalIndexes);\r\n        geometry.attributes.splatIndex.needsUpdate = true;\r\n        if (renderSplatCount > 0 && this.firstRenderTime === -1) this.firstRenderTime = performance.now();\r\n        geometry.instanceCount = renderSplatCount;\r\n        geometry.setDrawRange(0, renderSplatCount);\r\n    }\r\n\r\n    /**\r\n     * Update the transforms for each scene in this splat mesh from their individual components (position,\r\n     * quaternion, and scale)\r\n     */\r\n    updateTransforms() {\r\n        for (let i = 0; i < this.scenes.length; i++) {\r\n            const scene = this.getScene(i);\r\n            scene.updateTransform(this.dynamicMode);\r\n        }\r\n    }\r\n\r\n    updateUniforms = function() {\r\n\r\n        const viewport = new THREE.Vector2();\r\n\r\n        return function(renderDimensions, cameraFocalLengthX, cameraFocalLengthY,\r\n                        orthographicMode, orthographicZoom, inverseFocalAdjustment) {\r\n            const splatCount = this.getSplatCount();\r\n            if (splatCount > 0) {\r\n                viewport.set(renderDimensions.x * this.devicePixelRatio,\r\n                             renderDimensions.y * this.devicePixelRatio);\r\n                this.material.uniforms.viewport.value.copy(viewport);\r\n                this.material.uniforms.basisViewport.value.set(1.0 / viewport.x, 1.0 / viewport.y);\r\n                this.material.uniforms.focal.value.set(cameraFocalLengthX, cameraFocalLengthY);\r\n                this.material.uniforms.orthographicMode.value = orthographicMode ? 1 : 0;\r\n                this.material.uniforms.orthoZoom.value = orthographicZoom;\r\n                this.material.uniforms.inverseFocalAdjustment.value = inverseFocalAdjustment;\r\n                if (this.dynamicMode) {\r\n                    for (let i = 0; i < this.scenes.length; i++) {\r\n                        this.material.uniforms.transforms.value[i].copy(this.getScene(i).transform);\r\n                    }\r\n                }\r\n                if (this.enableOptionalEffects) {\r\n                    for (let i = 0; i < this.scenes.length; i++) {\r\n                        this.material.uniforms.sceneOpacity.value[i] = clamp(this.getScene(i).opacity, 0.0, 1.0);\r\n                        this.material.uniforms.sceneVisibility.value[i] = this.getScene(i).visible ? 1 : 0;\r\n                        this.material.uniformsNeedUpdate = true;\r\n                    }\r\n                }\r\n                this.material.uniformsNeedUpdate = true;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    setSplatScale(splatScale = 1) {\r\n        this.splatScale = splatScale;\r\n        this.material.uniforms.splatScale.value = splatScale;\r\n        this.material.uniformsNeedUpdate = true;\r\n    }\r\n\r\n    getSplatScale() {\r\n        return this.splatScale;\r\n    }\r\n\r\n    setPointCloudModeEnabled(enabled) {\r\n        this.pointCloudModeEnabled = enabled;\r\n        this.material.uniforms.pointCloudModeEnabled.value = enabled ? 1 : 0;\r\n        this.material.uniformsNeedUpdate = true;\r\n    }\r\n\r\n    getPointCloudModeEnabled() {\r\n        return this.pointCloudModeEnabled;\r\n    }\r\n\r\n    getSplatDataTextures() {\r\n        return this.splatDataTextures;\r\n    }\r\n\r\n    getSplatCount(includeSinceLastBuild = false) {\r\n        if (!includeSinceLastBuild) return this.lastBuildSplatCount;\r\n        else return SplatMesh.getTotalSplatCountForScenes(this.scenes);\r\n    }\r\n\r\n    static getTotalSplatCountForScenes(scenes) {\r\n        let totalSplatCount = 0;\r\n        for (let scene of scenes) {\r\n            if (scene && scene.splatBuffer) totalSplatCount += scene.splatBuffer.getSplatCount();\r\n        }\r\n        return totalSplatCount;\r\n    }\r\n\r\n    static getTotalSplatCountForSplatBuffers(splatBuffers) {\r\n        let totalSplatCount = 0;\r\n        for (let splatBuffer of splatBuffers) totalSplatCount += splatBuffer.getSplatCount();\r\n        return totalSplatCount;\r\n    }\r\n\r\n    getMaxSplatCount() {\r\n        return SplatMesh.getTotalMaxSplatCountForScenes(this.scenes);\r\n    }\r\n\r\n    static getTotalMaxSplatCountForScenes(scenes) {\r\n        let totalSplatCount = 0;\r\n        for (let scene of scenes) {\r\n            if (scene && scene.splatBuffer) totalSplatCount += scene.splatBuffer.getMaxSplatCount();\r\n        }\r\n        return totalSplatCount;\r\n    }\r\n\r\n    static getTotalMaxSplatCountForSplatBuffers(splatBuffers) {\r\n        let totalSplatCount = 0;\r\n        for (let splatBuffer of splatBuffers) totalSplatCount += splatBuffer.getMaxSplatCount();\r\n        return totalSplatCount;\r\n    }\r\n\r\n    disposeDistancesComputationGPUResources() {\r\n\r\n        if (!this.renderer) return;\r\n\r\n        const gl = this.renderer.getContext();\r\n\r\n        if (this.distancesTransformFeedback.vao) {\r\n            gl.deleteVertexArray(this.distancesTransformFeedback.vao);\r\n            this.distancesTransformFeedback.vao = null;\r\n        }\r\n        if (this.distancesTransformFeedback.program) {\r\n            gl.deleteProgram(this.distancesTransformFeedback.program);\r\n            gl.deleteShader(this.distancesTransformFeedback.vertexShader);\r\n            gl.deleteShader(this.distancesTransformFeedback.fragmentShader);\r\n            this.distancesTransformFeedback.program = null;\r\n            this.distancesTransformFeedback.vertexShader = null;\r\n            this.distancesTransformFeedback.fragmentShader = null;\r\n        }\r\n        this.disposeDistancesComputationGPUBufferResources();\r\n        if (this.distancesTransformFeedback.id) {\r\n            gl.deleteTransformFeedback(this.distancesTransformFeedback.id);\r\n            this.distancesTransformFeedback.id = null;\r\n        }\r\n    }\r\n\r\n    disposeDistancesComputationGPUBufferResources() {\r\n\r\n        if (!this.renderer) return;\r\n\r\n        const gl = this.renderer.getContext();\r\n\r\n        if (this.distancesTransformFeedback.centersBuffer) {\r\n            this.distancesTransformFeedback.centersBuffer = null;\r\n            gl.deleteBuffer(this.distancesTransformFeedback.centersBuffer);\r\n        }\r\n        if (this.distancesTransformFeedback.outDistancesBuffer) {\r\n            gl.deleteBuffer(this.distancesTransformFeedback.outDistancesBuffer);\r\n            this.distancesTransformFeedback.outDistancesBuffer = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the Three.js renderer used by this splat mesh\r\n     * @param {THREE.WebGLRenderer} renderer Instance of THREE.WebGLRenderer\r\n     */\r\n    setRenderer(renderer) {\r\n        if (renderer !== this.renderer) {\r\n            this.renderer = renderer;\r\n            const gl = this.renderer.getContext();\r\n            const extensions = new WebGLExtensions(gl);\r\n            const capabilities = new WebGLCapabilities(gl, extensions, {});\r\n            extensions.init(capabilities);\r\n            this.webGLUtils = new THREE.WebGLUtils(gl, extensions, capabilities);\r\n            if (this.enableDistancesComputationOnGPU && this.getSplatCount() > 0) {\r\n                this.setupDistancesComputationTransformFeedback();\r\n                const { centers, sceneIndexes } = this.getDataForDistancesComputation(0, this.getSplatCount() - 1);\r\n                this.refreshGPUBuffersForDistancesComputation(centers, sceneIndexes);\r\n            }\r\n        }\r\n    }\r\n\r\n    setupDistancesComputationTransformFeedback = function() {\r\n\r\n        let currentMaxSplatCount;\r\n\r\n        return function() {\r\n            const maxSplatCount = this.getMaxSplatCount();\r\n\r\n            if (!this.renderer) return;\r\n\r\n            const rebuildGPUObjects = (this.lastRenderer !== this.renderer);\r\n            const rebuildBuffers = currentMaxSplatCount !== maxSplatCount;\r\n\r\n            if (!rebuildGPUObjects && !rebuildBuffers) return;\r\n\r\n            if (rebuildGPUObjects) {\r\n                this.disposeDistancesComputationGPUResources();\r\n            } else if (rebuildBuffers) {\r\n                this.disposeDistancesComputationGPUBufferResources();\r\n            }\r\n\r\n            const gl = this.renderer.getContext();\r\n\r\n            const createShader = (gl, type, source) => {\r\n                const shader = gl.createShader(type);\r\n                if (!shader) {\r\n                    console.error('Fatal error: gl could not create a shader object.');\r\n                    return null;\r\n                }\r\n\r\n                gl.shaderSource(shader, source);\r\n                gl.compileShader(shader);\r\n\r\n                const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n                if (!compiled) {\r\n                    let typeName = 'unknown';\r\n                    if (type === gl.VERTEX_SHADER) typeName = 'vertex shader';\r\n                    else if (type === gl.FRAGMENT_SHADER) typeName = 'fragement shader';\r\n                    const errors = gl.getShaderInfoLog(shader);\r\n                    console.error('Failed to compile ' + typeName + ' with these errors:' + errors);\r\n                    gl.deleteShader(shader);\r\n                    return null;\r\n                }\r\n\r\n                return shader;\r\n            };\r\n\r\n            let vsSource;\r\n            if (this.integerBasedDistancesComputation) {\r\n                vsSource =\r\n                `#version 300 es\r\n                in ivec4 center;\r\n                flat out int distance;`;\r\n                if (this.dynamicMode) {\r\n                    vsSource += `\r\n                        in uint sceneIndex;\r\n                        uniform ivec4 transforms[${Constants.MaxScenes}];\r\n                        void main(void) {\r\n                            ivec4 transform = transforms[sceneIndex];\r\n                            distance = center.x * transform.x + center.y * transform.y + center.z * transform.z + transform.w * center.w;\r\n                        }\r\n                    `;\r\n                } else {\r\n                    vsSource += `\r\n                        uniform ivec3 modelViewProj;\r\n                        void main(void) {\r\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\r\n                        }\r\n                    `;\r\n                }\r\n            } else {\r\n                vsSource =\r\n                `#version 300 es\r\n                in vec4 center;\r\n                flat out float distance;`;\r\n                if (this.dynamicMode) {\r\n                    vsSource += `\r\n                        in uint sceneIndex;\r\n                        uniform mat4 transforms[${Constants.MaxScenes}];\r\n                        void main(void) {\r\n                            vec4 transformedCenter = transforms[sceneIndex] * vec4(center.xyz, 1.0);\r\n                            distance = transformedCenter.z;\r\n                        }\r\n                    `;\r\n                } else {\r\n                    vsSource += `\r\n                        uniform vec3 modelViewProj;\r\n                        void main(void) {\r\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\r\n                        }\r\n                    `;\r\n                }\r\n            }\r\n\r\n            const fsSource =\r\n            `#version 300 es\r\n                precision lowp float;\r\n                out vec4 fragColor;\r\n                void main(){}\r\n            `;\r\n\r\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\r\n            const currentProgramDeleted = currentProgram ? gl.getProgramParameter(currentProgram, gl.DELETE_STATUS) : false;\r\n\r\n            if (rebuildGPUObjects) {\r\n                this.distancesTransformFeedback.vao = gl.createVertexArray();\r\n            }\r\n\r\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n\r\n            if (rebuildGPUObjects) {\r\n                const program = gl.createProgram();\r\n                const vertexShader = createShader(gl, gl.VERTEX_SHADER, vsSource);\r\n                const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fsSource);\r\n                if (!vertexShader || !fragmentShader) {\r\n                    throw new Error('Could not compile shaders for distances computation on GPU.');\r\n                }\r\n                gl.attachShader(program, vertexShader);\r\n                gl.attachShader(program, fragmentShader);\r\n                gl.transformFeedbackVaryings(program, ['distance'], gl.SEPARATE_ATTRIBS);\r\n                gl.linkProgram(program);\r\n\r\n                const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n                if (!linked) {\r\n                    const error = gl.getProgramInfoLog(program);\r\n                    console.error('Fatal error: Failed to link program: ' + error);\r\n                    gl.deleteProgram(program);\r\n                    gl.deleteShader(fragmentShader);\r\n                    gl.deleteShader(vertexShader);\r\n                    throw new Error('Could not link shaders for distances computation on GPU.');\r\n                }\r\n\r\n                this.distancesTransformFeedback.program = program;\r\n                this.distancesTransformFeedback.vertexShader = vertexShader;\r\n                this.distancesTransformFeedback.vertexShader = fragmentShader;\r\n            }\r\n\r\n            gl.useProgram(this.distancesTransformFeedback.program);\r\n\r\n            this.distancesTransformFeedback.centersLoc =\r\n                gl.getAttribLocation(this.distancesTransformFeedback.program, 'center');\r\n            if (this.dynamicMode) {\r\n                this.distancesTransformFeedback.sceneIndexesLoc =\r\n                    gl.getAttribLocation(this.distancesTransformFeedback.program, 'sceneIndex');\r\n                for (let i = 0; i < this.scenes.length; i++) {\r\n                    this.distancesTransformFeedback.transformsLocs[i] =\r\n                        gl.getUniformLocation(this.distancesTransformFeedback.program, `transforms[${i}]`);\r\n                }\r\n            } else {\r\n                this.distancesTransformFeedback.modelViewProjLoc =\r\n                    gl.getUniformLocation(this.distancesTransformFeedback.program, 'modelViewProj');\r\n            }\r\n\r\n            if (rebuildGPUObjects || rebuildBuffers) {\r\n                this.distancesTransformFeedback.centersBuffer = gl.createBuffer();\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\r\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\r\n                if (this.integerBasedDistancesComputation) {\r\n                    gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 4, gl.INT, 0, 0);\r\n                } else {\r\n                    gl.vertexAttribPointer(this.distancesTransformFeedback.centersLoc, 4, gl.FLOAT, false, 0, 0);\r\n                }\r\n\r\n                if (this.dynamicMode) {\r\n                    this.distancesTransformFeedback.sceneIndexesBuffer = gl.createBuffer();\r\n                    gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.sceneIndexesBuffer);\r\n                    gl.enableVertexAttribArray(this.distancesTransformFeedback.sceneIndexesLoc);\r\n                    gl.vertexAttribIPointer(this.distancesTransformFeedback.sceneIndexesLoc, 1, gl.UNSIGNED_INT, 0, 0);\r\n                }\r\n            }\r\n\r\n            if (rebuildGPUObjects || rebuildBuffers) {\r\n                this.distancesTransformFeedback.outDistancesBuffer = gl.createBuffer();\r\n            }\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\r\n            gl.bufferData(gl.ARRAY_BUFFER, maxSplatCount * 4, gl.STATIC_READ);\r\n\r\n            if (rebuildGPUObjects) {\r\n                this.distancesTransformFeedback.id = gl.createTransformFeedback();\r\n            }\r\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\r\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\r\n\r\n            if (currentProgram && currentProgramDeleted !== true) gl.useProgram(currentProgram);\r\n            if (currentVao) gl.bindVertexArray(currentVao);\r\n\r\n            this.lastRenderer = this.renderer;\r\n            currentMaxSplatCount = maxSplatCount;\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Refresh GPU buffers used for computing splat distances with centers data from the scenes for this mesh.\r\n     * @param {boolean} isUpdate Specify whether or not to update the GPU buffer or to initialize & fill\r\n     * @param {Array<number>} centers The splat centers data\r\n     * @param {number} offsetSplats Offset in the GPU buffer at which to start updating data, specified in splats\r\n     */\r\n    updateGPUCentersBufferForDistancesComputation(isUpdate, centers, offsetSplats) {\r\n\r\n        if (!this.renderer) return;\r\n\r\n        const gl = this.renderer.getContext();\r\n\r\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n\r\n        const ArrayType = this.integerBasedDistancesComputation ? Uint32Array : Float32Array;\r\n        const attributeBytesPerCenter = 16;\r\n        const subBufferOffset = offsetSplats * attributeBytesPerCenter;\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\r\n\r\n        if (isUpdate) {\r\n            gl.bufferSubData(gl.ARRAY_BUFFER, subBufferOffset, centers);\r\n        } else {\r\n            const maxArray = new ArrayType(this.getMaxSplatCount() * attributeBytesPerCenter);\r\n            maxArray.set(centers);\r\n            gl.bufferData(gl.ARRAY_BUFFER, maxArray, gl.STATIC_DRAW);\r\n        }\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        if (currentVao) gl.bindVertexArray(currentVao);\r\n    }\r\n\r\n    /**\r\n     * Refresh GPU buffers used for pre-computing splat distances with centers data from the scenes for this mesh.\r\n     * @param {boolean} isUpdate Specify whether or not to update the GPU buffer or to initialize & fill\r\n     * @param {Array<number>} sceneIndexes The splat scene indexes\r\n     * @param {number} offsetSplats Offset in the GPU buffer at which to start updating data, specified in splats\r\n     */\r\n    updateGPUTransformIndexesBufferForDistancesComputation(isUpdate, sceneIndexes, offsetSplats) {\r\n\r\n        if (!this.renderer || !this.dynamicMode) return;\r\n\r\n        const gl = this.renderer.getContext();\r\n\r\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n\r\n        const subBufferOffset = offsetSplats * 4;\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.sceneIndexesBuffer);\r\n\r\n        if (isUpdate) {\r\n            gl.bufferSubData(gl.ARRAY_BUFFER, subBufferOffset, sceneIndexes);\r\n        } else {\r\n            const maxArray = new Uint32Array(this.getMaxSplatCount() * 4);\r\n            maxArray.set(sceneIndexes);\r\n            gl.bufferData(gl.ARRAY_BUFFER, maxArray, gl.STATIC_DRAW);\r\n        }\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        if (currentVao) gl.bindVertexArray(currentVao);\r\n    }\r\n\r\n    /**\r\n     * Get a typed array containing a mapping from global splat indexes to their scene index.\r\n     * @param {number} start Starting splat index to store\r\n     * @param {number} end Ending splat index to store\r\n     * @return {Uint32Array}\r\n     */\r\n    getSceneIndexes(start, end) {\r\n\r\n        let sceneIndexes;\r\n        const fillCount = end - start + 1;\r\n        sceneIndexes = new Uint32Array(fillCount);\r\n        for (let i = start; i <= end; i++) {\r\n            sceneIndexes[i] = this.globalSplatIndexToSceneIndexMap[i];\r\n        }\r\n\r\n        return sceneIndexes;\r\n    }\r\n\r\n    /**\r\n     * Fill 'array' with the transforms for each scene in this splat mesh.\r\n     * @param {Array} array Empty array to be filled with scene transforms. If not empty, contents will be overwritten.\r\n     */\r\n    fillTransformsArray = function() {\r\n\r\n        const tempArray = [];\r\n\r\n        return function(array) {\r\n            if (tempArray.length !== array.length) tempArray.length = array.length;\r\n            for (let i = 0; i < this.scenes.length; i++) {\r\n                const sceneTransform = this.getScene(i).transform;\r\n                const sceneTransformElements = sceneTransform.elements;\r\n                for (let j = 0; j < 16; j++) {\r\n                    tempArray[i * 16 + j] = sceneTransformElements[j];\r\n                }\r\n            }\r\n            array.set(tempArray);\r\n        };\r\n\r\n    }();\r\n\r\n    computeDistancesOnGPU = function() {\r\n\r\n        const tempMatrix = new THREE.Matrix4();\r\n\r\n        return function(modelViewProjMatrix, outComputedDistances) {\r\n            if (!this.renderer) return;\r\n\r\n            // console.time(\"gpu_compute_distances\");\r\n            const gl = this.renderer.getContext();\r\n\r\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\r\n            const currentProgramDeleted = currentProgram ? gl.getProgramParameter(currentProgram, gl.DELETE_STATUS) : false;\r\n\r\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n            gl.useProgram(this.distancesTransformFeedback.program);\r\n\r\n            gl.enable(gl.RASTERIZER_DISCARD);\r\n\r\n            if (this.dynamicMode) {\r\n                for (let i = 0; i < this.scenes.length; i++) {\r\n                    tempMatrix.copy(this.getScene(i).transform);\r\n                    tempMatrix.premultiply(modelViewProjMatrix);\r\n\r\n                    if (this.integerBasedDistancesComputation) {\r\n                        const iTempMatrix = SplatMesh.getIntegerMatrixArray(tempMatrix);\r\n                        const iTransform = [iTempMatrix[2], iTempMatrix[6], iTempMatrix[10], iTempMatrix[14]];\r\n                        gl.uniform4i(this.distancesTransformFeedback.transformsLocs[i], iTransform[0], iTransform[1],\r\n                                                                                        iTransform[2], iTransform[3]);\r\n                    } else {\r\n                        gl.uniformMatrix4fv(this.distancesTransformFeedback.transformsLocs[i], false, tempMatrix.elements);\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.integerBasedDistancesComputation) {\r\n                    const iViewProjMatrix = SplatMesh.getIntegerMatrixArray(modelViewProjMatrix);\r\n                    const iViewProj = [iViewProjMatrix[2], iViewProjMatrix[6], iViewProjMatrix[10]];\r\n                    gl.uniform3i(this.distancesTransformFeedback.modelViewProjLoc, iViewProj[0], iViewProj[1], iViewProj[2]);\r\n                } else {\r\n                    const viewProj = [modelViewProjMatrix.elements[2], modelViewProjMatrix.elements[6], modelViewProjMatrix.elements[10]];\r\n                    gl.uniform3f(this.distancesTransformFeedback.modelViewProjLoc, viewProj[0], viewProj[1], viewProj[2]);\r\n                }\r\n            }\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\r\n            gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\r\n            if (this.integerBasedDistancesComputation) {\r\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 4, gl.INT, 0, 0);\r\n            } else {\r\n                gl.vertexAttribPointer(this.distancesTransformFeedback.centersLoc, 4, gl.FLOAT, false, 0, 0);\r\n            }\r\n\r\n            if (this.dynamicMode) {\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.sceneIndexesBuffer);\r\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.sceneIndexesLoc);\r\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.sceneIndexesLoc, 1, gl.UNSIGNED_INT, 0, 0);\r\n            }\r\n\r\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\r\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\r\n\r\n            gl.beginTransformFeedback(gl.POINTS);\r\n            gl.drawArrays(gl.POINTS, 0, this.getSplatCount());\r\n            gl.endTransformFeedback();\r\n\r\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);\r\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\r\n\r\n            gl.disable(gl.RASTERIZER_DISCARD);\r\n\r\n            const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\r\n            gl.flush();\r\n\r\n            const promise = new Promise((resolve) => {\r\n                const checkSync = () => {\r\n                    if (this.disposed) {\r\n                        resolve();\r\n                    } else {\r\n                        const timeout = 0;\r\n                        const bitflags = 0;\r\n                        const status = gl.clientWaitSync(sync, bitflags, timeout);\r\n                        switch (status) {\r\n                            case gl.TIMEOUT_EXPIRED:\r\n                                this.computeDistancesOnGPUSyncTimeout = setTimeout(checkSync);\r\n                                return this.computeDistancesOnGPUSyncTimeout;\r\n                            case gl.WAIT_FAILED:\r\n                                throw new Error('should never get here');\r\n                            default:\r\n                                this.computeDistancesOnGPUSyncTimeout = null;\r\n                                gl.deleteSync(sync);\r\n                                const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n                                gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n                                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\r\n                                gl.getBufferSubData(gl.ARRAY_BUFFER, 0, outComputedDistances);\r\n                                gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n                                if (currentVao) gl.bindVertexArray(currentVao);\r\n\r\n                                // console.timeEnd(\"gpu_compute_distances\");\r\n\r\n                                resolve();\r\n                        }\r\n                    }\r\n                };\r\n                this.computeDistancesOnGPUSyncTimeout = setTimeout(checkSync);\r\n            });\r\n\r\n            if (currentProgram && currentProgramDeleted !== true) gl.useProgram(currentProgram);\r\n            if (currentVao) gl.bindVertexArray(currentVao);\r\n\r\n            return promise;\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Given a global splat index, return corresponding local data (splat buffer, index of splat in that splat\r\n     * buffer, and the corresponding transform)\r\n     * @param {number} globalIndex Global splat index\r\n     * @param {object} paramsObj Object in which to store local data\r\n     * @param {boolean} returnSceneTransform By default, the transform of the scene to which the splat at 'globalIndex' belongs will be\r\n     *                                       returned via the 'sceneTransform' property of 'paramsObj' only if the splat mesh is static.\r\n     *                                       If 'returnSceneTransform' is true, the 'sceneTransform' property will always contain the scene\r\n     *                                       transform, and if 'returnSceneTransform' is false, the 'sceneTransform' property will always\r\n     *                                       be null.\r\n     */\r\n    getLocalSplatParameters(globalIndex, paramsObj, returnSceneTransform) {\r\n        if (returnSceneTransform === undefined || returnSceneTransform === null) {\r\n            returnSceneTransform = this.dynamicMode ? false : true;\r\n        }\r\n        paramsObj.splatBuffer = this.getSplatBufferForSplat(globalIndex);\r\n        paramsObj.localIndex = this.getSplatLocalIndex(globalIndex);\r\n        paramsObj.sceneTransform = returnSceneTransform ? this.getSceneTransformForSplat(globalIndex) : null;\r\n    }\r\n\r\n    /**\r\n     * Fill arrays with splat data and apply transforms if appropriate. Each array is optional.\r\n     * @param {Float32Array} covariances Target storage for splat covariances\r\n     * @param {Float32Array} scales Target storage for splat scales\r\n     * @param {Float32Array} rotations Target storage for splat rotations\r\n     * @param {Float32Array} centers Target storage for splat centers\r\n     * @param {Uint8Array} colors Target storage for splat colors\r\n     * @param {Float32Array} sphericalHarmonics Target storage for spherical harmonics\r\n     * @param {boolean} applySceneTransform By default, scene transforms are applied to relevant splat data only if the splat mesh is\r\n     *                                      static. If 'applySceneTransform' is true, scene transforms will always be applied and if\r\n     *                                      it is false, they will never be applied. If undefined, the default behavior will apply.\r\n     * @param {number} covarianceCompressionLevel The compression level for covariances in the destination array\r\n     * @param {number} sphericalHarmonicsCompressionLevel The compression level for spherical harmonics in the destination array\r\n     * @param {number} srcStart The start location from which to pull source data\r\n     * @param {number} srcEnd The end location from which to pull source data\r\n     * @param {number} destStart The start location from which to write data\r\n     */\r\n    fillSplatDataArrays(covariances, scales, rotations, centers, colors, sphericalHarmonics, applySceneTransform,\r\n                        covarianceCompressionLevel = 0, scaleRotationCompressionLevel = 0, sphericalHarmonicsCompressionLevel = 1,\r\n                        srcStart, srcEnd, destStart = 0, sceneIndex) {\r\n        const scaleOverride = new THREE.Vector3();\r\n        scaleOverride.x = undefined;\r\n        scaleOverride.y = undefined;\r\n        if (this.splatRenderMode === SplatRenderMode.ThreeD) {\r\n            scaleOverride.z = undefined;\r\n        } else {\r\n            scaleOverride.z = 1;\r\n        }\r\n        const tempTransform = new THREE.Matrix4();\r\n\r\n        let startSceneIndex = 0;\r\n        let endSceneIndex = this.scenes.length - 1;\r\n        if (sceneIndex !== undefined && sceneIndex !== null && sceneIndex >= 0 && sceneIndex <= this.scenes.length) {\r\n            startSceneIndex = sceneIndex;\r\n            endSceneIndex = sceneIndex;\r\n        }\r\n        for (let i = startSceneIndex; i <= endSceneIndex; i++) {\r\n            if (applySceneTransform === undefined || applySceneTransform === null) {\r\n                applySceneTransform = this.dynamicMode ? false : true;\r\n            }\r\n\r\n            const scene = this.getScene(i);\r\n            const splatBuffer = scene.splatBuffer;\r\n            let sceneTransform;\r\n            if (applySceneTransform) {\r\n                this.getSceneTransform(i, tempTransform);\r\n                sceneTransform = tempTransform;\r\n            }\r\n            if (covariances) {\r\n                splatBuffer.fillSplatCovarianceArray(covariances, sceneTransform, srcStart, srcEnd, destStart, covarianceCompressionLevel);\r\n            }\r\n            if (scales || rotations) {\r\n                if (!scales || !rotations) {\r\n                    throw new Error('SplatMesh::fillSplatDataArrays() -> \"scales\" and \"rotations\" must both be valid.');\r\n                }\r\n                splatBuffer.fillSplatScaleRotationArray(scales, rotations, sceneTransform,\r\n                                                        srcStart, srcEnd, destStart, scaleRotationCompressionLevel, scaleOverride);\r\n            }\r\n            if (centers) splatBuffer.fillSplatCenterArray(centers, sceneTransform, srcStart, srcEnd, destStart);\r\n            if (colors) splatBuffer.fillSplatColorArray(colors, scene.minimumAlpha, srcStart, srcEnd, destStart);\r\n            if (sphericalHarmonics) {\r\n                splatBuffer.fillSphericalHarmonicsArray(sphericalHarmonics, this.minSphericalHarmonicsDegree,\r\n                                                        sceneTransform, srcStart, srcEnd, destStart, sphericalHarmonicsCompressionLevel);\r\n            }\r\n            destStart += splatBuffer.getSplatCount();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert splat centers, which are floating point values, to an array of integers and multiply\r\n     * each by 1000. Centers will get transformed as appropriate before conversion to integer.\r\n     * @param {number} start The index at which to start retrieving data\r\n     * @param {number} end The index at which to stop retrieving data\r\n     * @param {boolean} padFour Enforce alignment of 4 by inserting a 1 after every 3 values\r\n     * @return {Int32Array}\r\n     */\r\n    getIntegerCenters(start, end, padFour = false) {\r\n        const splatCount = end - start + 1;\r\n        const floatCenters = new Float32Array(splatCount * 3);\r\n        this.fillSplatDataArrays(null, null, null, floatCenters, null, null, undefined, undefined, undefined, undefined, start);\r\n        let intCenters;\r\n        let componentCount = padFour ? 4 : 3;\r\n        intCenters = new Int32Array(splatCount * componentCount);\r\n        for (let i = 0; i < splatCount; i++) {\r\n            for (let t = 0; t < 3; t++) {\r\n                intCenters[i * componentCount + t] = Math.round(floatCenters[i * 3 + t] * 1000.0);\r\n            }\r\n            if (padFour) intCenters[i * componentCount + 3] = 1000;\r\n        }\r\n        return intCenters;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of splat centers, transformed as appropriate, optionally padded.\r\n     * @param {number} start The index at which to start retrieving data\r\n     * @param {number} end The index at which to stop retrieving data\r\n     * @param {boolean} padFour Enforce alignment of 4 by inserting a 1 after every 3 values\r\n     * @return {Float32Array}\r\n     */\r\n    getFloatCenters(start, end, padFour = false) {\r\n        const splatCount = end - start + 1;\r\n        const floatCenters = new Float32Array(splatCount * 3);\r\n        this.fillSplatDataArrays(null, null, null, floatCenters, null, null, undefined, undefined, undefined, undefined, start);\r\n        if (!padFour) return floatCenters;\r\n        let paddedFloatCenters = new Float32Array(splatCount * 4);\r\n        for (let i = 0; i < splatCount; i++) {\r\n            for (let t = 0; t < 3; t++) {\r\n                paddedFloatCenters[i * 4 + t] = floatCenters[i * 3 + t];\r\n            }\r\n            paddedFloatCenters[i * 4 + 3] = 1.0;\r\n        }\r\n        return paddedFloatCenters;\r\n    }\r\n\r\n    /**\r\n     * Get the center for a splat, transformed as appropriate.\r\n     * @param {number} globalIndex Global index of splat\r\n     * @param {THREE.Vector3} outCenter THREE.Vector3 instance in which to store splat center\r\n     * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\r\n     *                                      'globalIndex' belongs will be applied to the splat center. If 'applySceneTransform' is true,\r\n     *                                      the scene transform will always be applied and if 'applySceneTransform' is false, the\r\n     *                                      scene transform will never be applied. If undefined, the default behavior will apply.\r\n     */\r\n    getSplatCenter = function() {\r\n\r\n        const paramsObj = {};\r\n\r\n        return function(globalIndex, outCenter, applySceneTransform) {\r\n            this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\r\n            paramsObj.splatBuffer.getSplatCenter(paramsObj.localIndex, outCenter, paramsObj.sceneTransform);\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Get the scale and rotation for a splat, transformed as appropriate.\r\n     * @param {number} globalIndex Global index of splat\r\n     * @param {THREE.Vector3} outScale THREE.Vector3 instance in which to store splat scale\r\n     * @param {THREE.Quaternion} outRotation THREE.Quaternion instance in which to store splat rotation\r\n     * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\r\n     *                                      'globalIndex' belongs will be applied to the splat scale and rotation. If\r\n     *                                      'applySceneTransform' is true, the scene transform will always be applied and if\r\n     *                                      'applySceneTransform' is false, the scene transform will never be applied. If undefined,\r\n     *                                      the default behavior will apply.\r\n     */\r\n    getSplatScaleAndRotation = function() {\r\n\r\n        const paramsObj = {};\r\n        const scaleOverride = new THREE.Vector3();\r\n\r\n        return function(globalIndex, outScale, outRotation, applySceneTransform) {\r\n            this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\r\n            scaleOverride.x = undefined;\r\n            scaleOverride.y = undefined;\r\n            scaleOverride.z = undefined;\r\n            if (this.splatRenderMode === SplatRenderMode.TwoD) scaleOverride.z = 0;\r\n            paramsObj.splatBuffer.getSplatScaleAndRotation(paramsObj.localIndex, outScale, outRotation,\r\n                                                           paramsObj.sceneTransform, scaleOverride);\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Get the color for a splat.\r\n     * @param {number} globalIndex Global index of splat\r\n     * @param {THREE.Vector4} outColor THREE.Vector4 instance in which to store splat color\r\n     */\r\n    getSplatColor = function() {\r\n\r\n        const paramsObj = {};\r\n\r\n        return function(globalIndex, outColor) {\r\n            this.getLocalSplatParameters(globalIndex, paramsObj);\r\n            paramsObj.splatBuffer.getSplatColor(paramsObj.localIndex, outColor);\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Store the transform of the scene at 'sceneIndex' in 'outTransform'.\r\n     * @param {number} sceneIndex Index of the desired scene\r\n     * @param {THREE.Matrix4} outTransform Instance of THREE.Matrix4 in which to store the scene's transform\r\n     */\r\n    getSceneTransform(sceneIndex, outTransform) {\r\n        const scene = this.getScene(sceneIndex);\r\n        scene.updateTransform(this.dynamicMode);\r\n        outTransform.copy(scene.transform);\r\n    }\r\n\r\n    /**\r\n     * Get the scene at 'sceneIndex'.\r\n     * @param {number} sceneIndex Index of the desired scene\r\n     * @return {SplatScene}\r\n     */\r\n    getScene(sceneIndex) {\r\n        if (sceneIndex < 0 || sceneIndex >= this.scenes.length) {\r\n            throw new Error('SplatMesh::getScene() -> Invalid scene index.');\r\n        }\r\n        return this.scenes[sceneIndex];\r\n    }\r\n\r\n    getSceneCount() {\r\n        return this.scenes.length;\r\n    }\r\n\r\n    getSplatBufferForSplat(globalIndex) {\r\n        return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex]).splatBuffer;\r\n    }\r\n\r\n    getSceneIndexForSplat(globalIndex) {\r\n        return this.globalSplatIndexToSceneIndexMap[globalIndex];\r\n    }\r\n\r\n    getSceneTransformForSplat(globalIndex) {\r\n        return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex]).transform;\r\n    }\r\n\r\n    getSplatLocalIndex(globalIndex) {\r\n        return this.globalSplatIndexToLocalSplatIndexMap[globalIndex];\r\n    }\r\n\r\n    static getIntegerMatrixArray(matrix) {\r\n        const matrixElements = matrix.elements;\r\n        const intMatrixArray = [];\r\n        for (let i = 0; i < 16; i++) {\r\n            intMatrixArray[i] = Math.round(matrixElements[i] * 1000.0);\r\n        }\r\n        return intMatrixArray;\r\n    }\r\n\r\n    computeBoundingBox(applySceneTransforms = false, sceneIndex) {\r\n        let splatCount = this.getSplatCount();\r\n        if (sceneIndex !== undefined && sceneIndex !== null) {\r\n            if (sceneIndex < 0 || sceneIndex >= this.scenes.length) {\r\n                throw new Error('SplatMesh::computeBoundingBox() -> Invalid scene index.');\r\n            }\r\n            splatCount = this.scenes[sceneIndex].splatBuffer.getSplatCount();\r\n        }\r\n\r\n        const floatCenters = new Float32Array(splatCount * 3);\r\n        this.fillSplatDataArrays(null, null, null, floatCenters, null, null, applySceneTransforms,\r\n                                 undefined, undefined, undefined, undefined, sceneIndex);\r\n\r\n        const min = new THREE.Vector3();\r\n        const max = new THREE.Vector3();\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const offset = i * 3;\r\n            const x = floatCenters[offset];\r\n            const y = floatCenters[offset + 1];\r\n            const z = floatCenters[offset + 2];\r\n            if (i === 0 || x < min.x) min.x = x;\r\n            if (i === 0 || y < min.y) min.y = y;\r\n            if (i === 0 || z < min.z) min.z = z;\r\n            if (i === 0 || x > max.x) max.x = x;\r\n            if (i === 0 || y > max.y) max.y = y;\r\n            if (i === 0 || z > max.z) max.z = z;\r\n        }\r\n\r\n        return new THREE.Box3(min, max);\r\n    }\r\n}\r\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u001b\u0003`\u0000\u0000`\u0010\u0000`\u0000\u0001\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0004\u0003\u0000\u0001\u0002\u0007T\u0004\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\u0013emscripten_tls_init\u0000\u0002\n�\u0010\u0003\u0003\u0000\u0001\u000b�\u0010\u0004\u0001|\u0003{\u0003\u0003} \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00056\u0002\u0000 \u0005 \n \u0005 \nH\u001b!\n \u0005 \r \u0005 \rJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0015j(\u0002\u0000\"\u0016A\u0002tj(\u0002\u0000\"\u0014G\u0004@\u0002 \u0005�\t\u00028 \b \u0014A\u0006tj\"\u000e�\t\u0002\f \u000e*\u0002\u001c� \u0001 \u000e*\u0002,� \u0002 \u000e*\u0002<� \u0003��\u0001 \u0005�\t\u0002( \u000e�\t\u0002\b \u000e*\u0002\u0018� \u0001 \u000e*\u0002(� \u0002 \u000e*\u00028� \u0003��\u0001 \u0005�\t\u0002\b \u000e�\t\u0002\u0000 \u000e*\u0002\u0010� \u0001 \u000e*\u0002 � \u0002 \u000e*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000e�\t\u0002\u0004 \u000e*\u0002\u0014� \u0001 \u000e*\u0002$� \u0002 \u000e*\u00024� \u0003��\u0001��\u0001��\u0001��\u0001\"\u0011�_�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@\"\u0012��\u0001\"\u0013�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0013�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u0011 \u000e�\u001c\u0001\u0002 \u0011 \u0011�\r\b\t\n\u000b\f\r\u000e\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�_ \u0012��\u0001\"\u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0002\u0002 \u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0003!\u0012 \u0014!\u000f\u000b \u0003 \u0015j \u0001 \u0016A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j \u0011�\u001b\u0003j\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002\b��\u0014 \u0005*\u0002\u0018��\"\u0001�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@��\u0001\"\u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0005A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \u0002�\u0011 \u000e�\u001c\u0001 \u0005�\u001c\u0002!\u0012 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0002j \u0001 \u0000 \u0002j(\u0002\u0000A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j\"\u00026\u0002\u0000 \u0002 \n \u0002 \nH\u001b!\n \u0002 \r \u0002 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j\u0002 \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0017 \u0005*\u0002\u0018!\u0018 \u0005*\u0002\b!\u0019A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0017 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0019 \u0002*\u0002\u0000� \u0018 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0014j(\u0002\u0000A\u0002t\"\u0015j(\u0002\u0000\"\u000eG\u0004@ \u0005�\t\u00028 \b \u000eA\u0006tj\"\u000f�\t\u0002\f \u000f*\u0002\u001c� \u0001 \u000f*\u0002,� \u0002 \u000f*\u0002<� \u0003��\u0001 \u0005�\t\u0002( \u000f�\t\u0002\b \u000f*\u0002\u0018� \u0001 \u000f*\u0002(� \u0002 \u000f*\u00028� \u0003��\u0001 \u0005�\t\u0002\b \u000f�\t\u0002\u0000 \u000f*\u0002\u0010� \u0001 \u000f*\u0002 � \u0002 \u000f*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000f�\t\u0002\u0004 \u000f*\u0002\u0014� \u0001 \u000f*\u0002$� \u0002 \u000f*\u00024� \u0003��\u0001��\u0001��\u0001��\u0001!\u0011 \u000e!\u000f\u000b \u0003 \u0014j\u0002 \u0011�\u001f\u0003 \u0001 \u0015A\u0002t\"\u000eA\frj*\u0002\u0000� \u0011�\u001f\u0002 \u0001 \u000eA\brj*\u0002\u0000� \u0011�\u001f\u0000 \u0001 \u000ej*\u0002\u0000� \u0011�\u001f\u0001 \u0001 \u000eA\u0004rj*\u0002\u0000�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0017 \f!\r\u0003@\u0002 \u0017 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0018�C\u0000\u0000\u0000O]\u0004@ \u0018�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K!\u0002 \u0001!\n \u0002\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b\u0004\u0000A\u0000\u000b","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u0017\u0002`\u0000\u0000`\u0010\u0000\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0003\u0002\u0000\u0001\u0007>\u0003\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\n�\u000f\u0002\u0002\u0000\u000b�\u000f\u0003\u0001|\u0007}\u0006 \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00016\u0002\u0000 \u0001 \n \u0001 \nH\u001b!\n \u0001 \r \u0001 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001aj(\u0002\u0000A\u0002t\"\u001bj(\u0002\u0000\"\u000eG\u0004@\u0002 \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0018\u0002 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0019\u0002 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001c\u0002 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001d \u000e!\u000f\u000b \u0003 \u001aj \u0001 \u001bA\u0002tj\"\u000e(\u0002\u0004 \u001cl \u000e(\u0002\u0000 \u001dlj \u000e(\u0002\b \u0019lj \u000e(\u0002\f \u0018lj\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002\u0018�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0007 \u000b \fM\u0002 \u0005*\u0002\b�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000fA����\u0007!\nA����x!\r\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\bj \u0001 \u0000 \bj(\u0002\u0000A\u0004tj\"\b(\u0002\u0004 \u0007l \b(\u0002\u0000 \u000flj \b(\u0002\b \u0002lj\"\b6\u0002\u0000 \b \n \b \nH\u001b!\n \b \r \b \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j\u0002 \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0011 \u0005*\u0002\u0018!\u0012 \u0005*\u0002\b!\u0013A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0011 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0013 \u0002*\u0002\u0000� \u0012 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0018j(\u0002\u0000A\u0002t\"\u0019j(\u0002\u0000\"\u000eG\u0004@ \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024����!\u0015 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$����!\u0016 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014����!\u0017 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004����!\u0011 \u000e!\u000f\u000b \u0003 \u0018j\u0002 \u0015 \u0001 \u0019A\u0002tj\"\u000e*\u0002\f� \u0016 \u000e*\u0002\b� \u0011 \u000e*\u0002\u0000� \u0017 \u000e*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0011 \f!\r\u0003@\u0002 \u0011 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0012�C\u0000\u0000\u0000O]\u0004@ \u0012�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K \u0001!\n\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b","import SorterWasm from './sorter.wasm';\r\nimport SorterWasmNoSIMD from './sorter_no_simd.wasm';\r\nimport SorterWasmNonShared from './sorter_non_shared.wasm';\r\nimport SorterWasmNoSIMDNonShared from './sorter_no_simd_non_shared.wasm';\r\nimport { isIOS, getIOSSemever } from '../Util.js';\r\nimport { Constants } from '../Constants.js';\r\n\r\nfunction sortWorker(self) {\r\n\r\n    let wasmInstance;\r\n    let wasmMemory;\r\n    let useSharedMemory;\r\n    let integerBasedSort;\r\n    let dynamicMode;\r\n    let splatCount;\r\n    let indexesToSortOffset;\r\n    let sortedIndexesOffset;\r\n    let sceneIndexesOffset;\r\n    let transformsOffset;\r\n    let precomputedDistancesOffset;\r\n    let mappedDistancesOffset;\r\n    let frequenciesOffset;\r\n    let centersOffset;\r\n    let modelViewProjOffset;\r\n    let countsZero;\r\n    let sortedIndexesOut;\r\n    let distanceMapRange;\r\n    let uploadedSplatCount;\r\n    let Constants;\r\n\r\n    function sort(splatSortCount, splatRenderCount, modelViewProj,\r\n                  usePrecomputedDistances, copyIndexesToSort, copyPrecomputedDistances, copyTransforms) {\r\n        const sortStartTime = performance.now();\r\n\r\n        if (!useSharedMemory) {\r\n            const indexesToSort = new Uint32Array(wasmMemory, indexesToSortOffset, copyIndexesToSort.byteLength / Constants.BytesPerInt);\r\n            indexesToSort.set(copyIndexesToSort);\r\n            const transforms = new Float32Array(wasmMemory, transformsOffset, copyTransforms.byteLength / Constants.BytesPerFloat);\r\n            transforms.set(copyTransforms);\r\n            if (usePrecomputedDistances) {\r\n                let precomputedDistances;\r\n                if (integerBasedSort) {\r\n                    precomputedDistances = new Int32Array(wasmMemory, precomputedDistancesOffset,\r\n                                                          copyPrecomputedDistances.byteLength / Constants.BytesPerInt);\r\n                } else {\r\n                    precomputedDistances = new Float32Array(wasmMemory, precomputedDistancesOffset,\r\n                                                            copyPrecomputedDistances.byteLength / Constants.BytesPerFloat);\r\n                }\r\n                precomputedDistances.set(copyPrecomputedDistances);\r\n            }\r\n        }\r\n\r\n        if (!countsZero) countsZero = new Uint32Array(distanceMapRange);\r\n        new Float32Array(wasmMemory, modelViewProjOffset, 16).set(modelViewProj);\r\n        new Uint32Array(wasmMemory, frequenciesOffset, distanceMapRange).set(countsZero);\r\n        wasmInstance.exports.sortIndexes(indexesToSortOffset, centersOffset, precomputedDistancesOffset,\r\n                                         mappedDistancesOffset, frequenciesOffset, modelViewProjOffset,\r\n                                         sortedIndexesOffset, sceneIndexesOffset, transformsOffset, distanceMapRange,\r\n                                         splatSortCount, splatRenderCount, splatCount, usePrecomputedDistances, integerBasedSort,\r\n                                         dynamicMode);\r\n\r\n        const sortMessage = {\r\n            'sortDone': true,\r\n            'splatSortCount': splatSortCount,\r\n            'splatRenderCount': splatRenderCount,\r\n            'sortTime': 0\r\n        };\r\n        if (!useSharedMemory) {\r\n            const sortedIndexes = new Uint32Array(wasmMemory, sortedIndexesOffset, splatRenderCount);\r\n            if (!sortedIndexesOut || sortedIndexesOut.length < splatRenderCount) {\r\n                sortedIndexesOut = new Uint32Array(splatRenderCount);\r\n            }\r\n            sortedIndexesOut.set(sortedIndexes);\r\n            sortMessage.sortedIndexes = sortedIndexesOut;\r\n        }\r\n        const sortEndTime = performance.now();\r\n\r\n        sortMessage.sortTime = sortEndTime - sortStartTime;\r\n\r\n        self.postMessage(sortMessage);\r\n    }\r\n\r\n    self.onmessage = (e) => {\r\n        if (e.data.centers) {\r\n            centers = e.data.centers;\r\n            sceneIndexes = e.data.sceneIndexes;\r\n            if (integerBasedSort) {\r\n                new Int32Array(wasmMemory, centersOffset + e.data.range.from * Constants.BytesPerInt * 4,\r\n                               e.data.range.count * 4).set(new Int32Array(centers));\r\n            } else {\r\n                new Float32Array(wasmMemory, centersOffset + e.data.range.from * Constants.BytesPerFloat * 4,\r\n                                 e.data.range.count * 4).set(new Float32Array(centers));\r\n            }\r\n            if (dynamicMode) {\r\n                new Uint32Array(wasmMemory, sceneIndexesOffset + e.data.range.from * 4,\r\n                                e.data.range.count).set(new Uint32Array(sceneIndexes));\r\n            }\r\n            uploadedSplatCount = e.data.range.from + e.data.range.count;\r\n        } else if (e.data.sort) {\r\n            const renderCount = Math.min(e.data.sort.splatRenderCount || 0, uploadedSplatCount);\r\n            const sortCount = Math.min(e.data.sort.splatSortCount || 0, uploadedSplatCount);\r\n            const usePrecomputedDistances = e.data.sort.usePrecomputedDistances;\r\n\r\n            let copyIndexesToSort;\r\n            let copyPrecomputedDistances;\r\n            let copyTransforms;\r\n            if (!useSharedMemory) {\r\n                copyIndexesToSort = e.data.sort.indexesToSort;\r\n                copyTransforms = e.data.sort.transforms;\r\n                if (usePrecomputedDistances) copyPrecomputedDistances = e.data.sort.precomputedDistances;\r\n            }\r\n            sort(sortCount, renderCount, e.data.sort.modelViewProj, usePrecomputedDistances,\r\n                 copyIndexesToSort, copyPrecomputedDistances, copyTransforms);\r\n        } else if (e.data.init) {\r\n            // Yep, this is super hacky and gross :(\r\n            Constants = e.data.init.Constants;\r\n\r\n            splatCount = e.data.init.splatCount;\r\n            useSharedMemory = e.data.init.useSharedMemory;\r\n            integerBasedSort = e.data.init.integerBasedSort;\r\n            dynamicMode = e.data.init.dynamicMode;\r\n            distanceMapRange = e.data.init.distanceMapRange;\r\n            uploadedSplatCount = 0;\r\n\r\n            const CENTERS_BYTES_PER_ENTRY = integerBasedSort ? (Constants.BytesPerInt * 4) : (Constants.BytesPerFloat * 4);\r\n\r\n            const sorterWasmBytes = new Uint8Array(e.data.init.sorterWasmBytes);\r\n\r\n            const matrixSize = 16 * Constants.BytesPerFloat;\r\n            const memoryRequiredForIndexesToSort = splatCount * Constants.BytesPerInt;\r\n            const memoryRequiredForCenters = splatCount * CENTERS_BYTES_PER_ENTRY;\r\n            const memoryRequiredForModelViewProjectionMatrix = matrixSize;\r\n            const memoryRequiredForPrecomputedDistances = integerBasedSort ?\r\n                                                          (splatCount * Constants.BytesPerInt) : (splatCount * Constants.BytesPerFloat);\r\n            const memoryRequiredForMappedDistances = splatCount * Constants.BytesPerInt;\r\n            const memoryRequiredForSortedIndexes = splatCount * Constants.BytesPerInt;\r\n            const memoryRequiredForIntermediateSortBuffers = integerBasedSort ? (distanceMapRange * Constants.BytesPerInt * 2) :\r\n                                                                                (distanceMapRange * Constants.BytesPerFloat * 2);\r\n            const memoryRequiredforTransformIndexes = dynamicMode ? (splatCount * Constants.BytesPerInt) : 0;\r\n            const memoryRequiredforTransforms = dynamicMode ? (Constants.MaxScenes * matrixSize) : 0;\r\n            const extraMemory = Constants.MemoryPageSize * 32;\r\n\r\n            const totalRequiredMemory = memoryRequiredForIndexesToSort +\r\n                                        memoryRequiredForCenters +\r\n                                        memoryRequiredForModelViewProjectionMatrix +\r\n                                        memoryRequiredForPrecomputedDistances +\r\n                                        memoryRequiredForMappedDistances +\r\n                                        memoryRequiredForIntermediateSortBuffers +\r\n                                        memoryRequiredForSortedIndexes +\r\n                                        memoryRequiredforTransformIndexes +\r\n                                        memoryRequiredforTransforms +\r\n                                        extraMemory;\r\n            const totalPagesRequired = Math.floor(totalRequiredMemory / Constants.MemoryPageSize ) + 1;\r\n            const sorterWasmImport = {\r\n                module: {},\r\n                env: {\r\n                    memory: new WebAssembly.Memory({\r\n                        initial: totalPagesRequired,\r\n                        maximum: totalPagesRequired,\r\n                        shared: true,\r\n                    }),\r\n                }\r\n            };\r\n            WebAssembly.compile(sorterWasmBytes)\r\n            .then((wasmModule) => {\r\n                return WebAssembly.instantiate(wasmModule, sorterWasmImport);\r\n            })\r\n            .then((instance) => {\r\n                wasmInstance = instance;\r\n                indexesToSortOffset = 0;\r\n                centersOffset = indexesToSortOffset + memoryRequiredForIndexesToSort;\r\n                modelViewProjOffset = centersOffset + memoryRequiredForCenters;\r\n                precomputedDistancesOffset = modelViewProjOffset + memoryRequiredForModelViewProjectionMatrix;\r\n                mappedDistancesOffset = precomputedDistancesOffset + memoryRequiredForPrecomputedDistances;\r\n                frequenciesOffset = mappedDistancesOffset + memoryRequiredForMappedDistances;\r\n                sortedIndexesOffset = frequenciesOffset + memoryRequiredForIntermediateSortBuffers;\r\n                sceneIndexesOffset = sortedIndexesOffset + memoryRequiredForSortedIndexes;\r\n                transformsOffset = sceneIndexesOffset + memoryRequiredforTransformIndexes;\r\n                wasmMemory = sorterWasmImport.env.memory.buffer;\r\n                if (useSharedMemory) {\r\n                    self.postMessage({\r\n                        'sortSetupPhase1Complete': true,\r\n                        'indexesToSortBuffer': wasmMemory,\r\n                        'indexesToSortOffset': indexesToSortOffset,\r\n                        'sortedIndexesBuffer': wasmMemory,\r\n                        'sortedIndexesOffset': sortedIndexesOffset,\r\n                        'precomputedDistancesBuffer': wasmMemory,\r\n                        'precomputedDistancesOffset': precomputedDistancesOffset,\r\n                        'transformsBuffer': wasmMemory,\r\n                        'transformsOffset': transformsOffset\r\n                    });\r\n                } else {\r\n                    self.postMessage({\r\n                        'sortSetupPhase1Complete': true\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    };\r\n}\r\n\r\nexport function createSortWorker(splatCount, useSharedMemory, enableSIMDInSort, integerBasedSort, dynamicMode,\r\n                                 splatSortDistanceMapPrecision = Constants.DefaultSplatSortDistanceMapPrecision) {\r\n    const worker = new Worker(\r\n        URL.createObjectURL(\r\n            new Blob(['(', sortWorker.toString(), ')(self)'], {\r\n                type: 'application/javascript',\r\n            }),\r\n        ),\r\n    );\r\n\r\n    let sourceWasm = SorterWasm;\r\n\r\n    // iOS makes choosing the right WebAssembly configuration tricky :(\r\n    const iOSSemVer = isIOS() ? getIOSSemever() : null;\r\n    if (!enableSIMDInSort && !useSharedMemory) {\r\n        sourceWasm = SorterWasmNoSIMD;\r\n        // Testing on various devices has shown that even when shared memory is disabled, the WASM module with shared\r\n        // memory can still be used most of the time -- the exception seems to be iOS devices below 16.4\r\n        if (iOSSemVer && iOSSemVer.major <= 16 && iOSSemVer.minor < 4) {\r\n            sourceWasm = SorterWasmNoSIMDNonShared;\r\n        }\r\n    } else if (!enableSIMDInSort) {\r\n        sourceWasm = SorterWasmNoSIMD;\r\n    } else if (!useSharedMemory) {\r\n        // Same issue with shared memory as above on iOS devices\r\n        if (iOSSemVer && iOSSemVer.major <= 16 && iOSSemVer.minor < 4) {\r\n            sourceWasm = SorterWasmNonShared;\r\n        }\r\n    }\r\n\r\n    const sorterWasmBinaryString = atob(sourceWasm);\r\n    const sorterWasmBytes = new Uint8Array(sorterWasmBinaryString.length);\r\n    for (let i = 0; i < sorterWasmBinaryString.length; i++) {\r\n        sorterWasmBytes[i] = sorterWasmBinaryString.charCodeAt(i);\r\n    }\r\n\r\n    worker.postMessage({\r\n        'init': {\r\n            'sorterWasmBytes': sorterWasmBytes.buffer,\r\n            'splatCount': splatCount,\r\n            'useSharedMemory': useSharedMemory,\r\n            'integerBasedSort': integerBasedSort,\r\n            'dynamicMode': dynamicMode,\r\n            'distanceMapRange': 1 << splatSortDistanceMapPrecision,\r\n            // Super hacky\r\n            'Constants': {\r\n                'BytesPerFloat': Constants.BytesPerFloat,\r\n                'BytesPerInt': Constants.BytesPerInt,\r\n                'MemoryPageSize': Constants.MemoryPageSize,\r\n                'MaxScenes': Constants.MaxScenes\r\n            }\r\n        }\r\n    });\r\n    return worker;\r\n}\r\n","export const WebXRMode = {\r\n    None: 0,\r\n    VR: 1,\r\n    AR: 2\r\n};\r\n","/*\r\nCopyright © 2010-2024 three.js authors & Mark Kellogg\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n*/\r\n\r\nexport class VRButton {\r\n\r\n    static createButton( renderer, sessionInit = {} ) {\r\n\r\n        const button = document.createElement( 'button' );\r\n\r\n        function showEnterVR( /* device */ ) {\r\n\r\n            let currentSession = null;\r\n\r\n            async function onSessionStarted( session ) {\r\n\r\n                session.addEventListener( 'end', onSessionEnded );\r\n\r\n                await renderer.xr.setSession( session );\r\n                button.textContent = 'EXIT VR';\r\n\r\n                currentSession = session;\r\n\r\n            }\r\n\r\n            function onSessionEnded( /* event */ ) {\r\n\r\n                currentSession.removeEventListener( 'end', onSessionEnded );\r\n\r\n                button.textContent = 'ENTER VR';\r\n\r\n                currentSession = null;\r\n\r\n            }\r\n\r\n            //\r\n\r\n            button.style.display = '';\r\n\r\n            button.style.cursor = 'pointer';\r\n            button.style.left = 'calc(50% - 50px)';\r\n            button.style.width = '100px';\r\n\r\n            button.textContent = 'ENTER VR';\r\n\r\n            // WebXR's requestReferenceSpace only works if the corresponding feature\r\n            // was requested at session creation time. For simplicity, just ask for\r\n            // the interesting ones as optional features, but be aware that the\r\n            // requestReferenceSpace call will fail if it turns out to be unavailable.\r\n            // ('local' is always available for immersive sessions and doesn't need to\r\n            // be requested separately.)\r\n\r\n            const sessionOptions = {\r\n                ...sessionInit,\r\n                optionalFeatures: [\r\n                    'local-floor',\r\n                    'bounded-floor',\r\n                    'layers',\r\n                    ...( sessionInit.optionalFeatures || [] )\r\n                ],\r\n            };\r\n\r\n            button.onmouseenter = function() {\r\n\r\n                button.style.opacity = '1.0';\r\n\r\n            };\r\n\r\n            button.onmouseleave = function() {\r\n\r\n                button.style.opacity = '0.5';\r\n\r\n            };\r\n\r\n            button.onclick = function() {\r\n\r\n                if ( currentSession === null ) {\r\n\r\n                    navigator.xr.requestSession( 'immersive-vr', sessionOptions ).then( onSessionStarted );\r\n\r\n                } else {\r\n\r\n                    currentSession.end();\r\n\r\n                    if ( navigator.xr.offerSession !== undefined ) {\r\n\r\n                        navigator.xr.offerSession( 'immersive-vr', sessionOptions )\r\n                            .then( onSessionStarted )\r\n                            .catch( ( err ) => {\r\n\r\n                                console.warn( err );\r\n\r\n                            } );\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            };\r\n\r\n            if ( navigator.xr.offerSession !== undefined ) {\r\n\r\n                navigator.xr.offerSession( 'immersive-vr', sessionOptions )\r\n                    .then( onSessionStarted )\r\n                    .catch( ( err ) => {\r\n\r\n                        console.warn( err );\r\n\r\n                    } );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function disableButton() {\r\n\r\n            button.style.display = '';\r\n\r\n            button.style.cursor = 'auto';\r\n            button.style.left = 'calc(50% - 75px)';\r\n            button.style.width = '150px';\r\n\r\n            button.onmouseenter = null;\r\n            button.onmouseleave = null;\r\n\r\n            button.onclick = null;\r\n\r\n        }\r\n\r\n        function showWebXRNotFound() {\r\n\r\n            disableButton();\r\n\r\n            button.textContent = 'VR NOT SUPPORTED';\r\n\r\n        }\r\n\r\n        function showVRNotAllowed( exception ) {\r\n\r\n            disableButton();\r\n\r\n            console.warn( 'Exception when trying to call xr.isSessionSupported', exception );\r\n\r\n            button.textContent = 'VR NOT ALLOWED';\r\n\r\n        }\r\n\r\n        function stylizeElement( element ) {\r\n\r\n            element.style.position = 'absolute';\r\n            element.style.bottom = '20px';\r\n            element.style.padding = '12px 6px';\r\n            element.style.border = '1px solid #fff';\r\n            element.style.borderRadius = '4px';\r\n            element.style.background = 'rgba(0,0,0,0.1)';\r\n            element.style.color = '#fff';\r\n            element.style.font = 'normal 13px sans-serif';\r\n            element.style.textAlign = 'center';\r\n            element.style.opacity = '0.5';\r\n            element.style.outline = 'none';\r\n            element.style.zIndex = '999';\r\n\r\n        }\r\n\r\n        if ( 'xr' in navigator ) {\r\n\r\n            button.id = 'VRButton';\r\n            button.style.display = 'none';\r\n\r\n            stylizeElement( button );\r\n\r\n            navigator.xr.isSessionSupported( 'immersive-vr' ).then( function( supported ) {\r\n\r\n                supported ? showEnterVR() : showWebXRNotFound();\r\n\r\n                if ( supported && VRButton.xrSessionIsGranted ) {\r\n\r\n                    button.click();\r\n\r\n                }\r\n\r\n            } ).catch( showVRNotAllowed );\r\n\r\n            return button;\r\n\r\n        } else {\r\n\r\n            const message = document.createElement( 'a' );\r\n\r\n            if ( window.isSecureContext === false ) {\r\n\r\n                message.href = document.location.href.replace( /^http:/, 'https:' );\r\n                message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\r\n\r\n            } else {\r\n\r\n                message.href = 'https://immersiveweb.dev/';\r\n                message.innerHTML = 'WEBXR NOT AVAILABLE';\r\n\r\n            }\r\n\r\n            message.style.left = 'calc(50% - 90px)';\r\n            message.style.width = '180px';\r\n            message.style.textDecoration = 'none';\r\n\r\n            stylizeElement( message );\r\n\r\n            return message;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    static registerSessionGrantedListener() {\r\n\r\n        if ( typeof navigator !== 'undefined' && 'xr' in navigator ) {\r\n\r\n            // WebXRViewer (based on Firefox) has a bug where addEventListener\r\n            // throws a silent exception and aborts execution entirely.\r\n            if ( /WebXRViewer\\//i.test( navigator.userAgent ) ) return;\r\n\r\n            navigator.xr.addEventListener( 'sessiongranted', () => {\r\n\r\n                VRButton.xrSessionIsGranted = true;\r\n\r\n            } );\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nVRButton.xrSessionIsGranted = false;\r\nVRButton.registerSessionGrantedListener();\r\n","/*\r\nCopyright © 2010-2024 three.js authors & Mark Kellogg\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n*/\r\n\r\nexport class ARButton {\r\n\r\n    static createButton( renderer, sessionInit = {} ) {\r\n\r\n        const button = document.createElement( 'button' );\r\n\r\n        function showStartAR( /* device */ ) {\r\n\r\n            if ( sessionInit.domOverlay === undefined ) {\r\n\r\n                const overlay = document.createElement( 'div' );\r\n                overlay.style.display = 'none';\r\n                document.body.appendChild( overlay );\r\n\r\n                const svg = document.createElementNS( 'http://www.w3.org/2000/svg', 'svg' );\r\n                svg.setAttribute( 'width', 38 );\r\n                svg.setAttribute( 'height', 38 );\r\n                svg.style.position = 'absolute';\r\n                svg.style.right = '20px';\r\n                svg.style.top = '20px';\r\n                svg.addEventListener( 'click', function() {\r\n\r\n                    currentSession.end();\r\n\r\n                } );\r\n                overlay.appendChild( svg );\r\n\r\n                const path = document.createElementNS( 'http://www.w3.org/2000/svg', 'path' );\r\n                path.setAttribute( 'd', 'M 12,12 L 28,28 M 28,12 12,28' );\r\n                path.setAttribute( 'stroke', '#fff' );\r\n                path.setAttribute( 'stroke-width', 2 );\r\n                svg.appendChild( path );\r\n\r\n                if ( sessionInit.optionalFeatures === undefined ) {\r\n\r\n                    sessionInit.optionalFeatures = [];\r\n\r\n                }\r\n\r\n                sessionInit.optionalFeatures.push( 'dom-overlay' );\r\n                sessionInit.domOverlay = { root: overlay };\r\n\r\n            }\r\n\r\n            //\r\n\r\n            let currentSession = null;\r\n\r\n            async function onSessionStarted( session ) {\r\n\r\n                session.addEventListener( 'end', onSessionEnded );\r\n\r\n                renderer.xr.setReferenceSpaceType( 'local' );\r\n\r\n                await renderer.xr.setSession( session );\r\n\r\n                button.textContent = 'STOP AR';\r\n                sessionInit.domOverlay.root.style.display = '';\r\n\r\n                currentSession = session;\r\n\r\n            }\r\n\r\n            function onSessionEnded( /* event */ ) {\r\n\r\n                currentSession.removeEventListener( 'end', onSessionEnded );\r\n\r\n                button.textContent = 'START AR';\r\n                sessionInit.domOverlay.root.style.display = 'none';\r\n\r\n                currentSession = null;\r\n\r\n            }\r\n\r\n            //\r\n\r\n            button.style.display = '';\r\n\r\n            button.style.cursor = 'pointer';\r\n            button.style.left = 'calc(50% - 50px)';\r\n            button.style.width = '100px';\r\n\r\n            button.textContent = 'START AR';\r\n\r\n            button.onmouseenter = function() {\r\n\r\n                button.style.opacity = '1.0';\r\n\r\n            };\r\n\r\n            button.onmouseleave = function() {\r\n\r\n                button.style.opacity = '0.5';\r\n\r\n            };\r\n\r\n            button.onclick = function() {\r\n\r\n                if ( currentSession === null ) {\r\n\r\n                    navigator.xr.requestSession( 'immersive-ar', sessionInit ).then( onSessionStarted );\r\n\r\n                } else {\r\n\r\n                    currentSession.end();\r\n\r\n                    if ( navigator.xr.offerSession !== undefined ) {\r\n\r\n                        navigator.xr.offerSession( 'immersive-ar', sessionInit )\r\n                            .then( onSessionStarted )\r\n                            .catch( ( err ) => {\r\n\r\n                                console.warn( err );\r\n\r\n                            } );\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            };\r\n\r\n            if ( navigator.xr.offerSession !== undefined ) {\r\n\r\n                navigator.xr.offerSession( 'immersive-ar', sessionInit )\r\n                    .then( onSessionStarted )\r\n                    .catch( ( err ) => {\r\n\r\n                        console.warn( err );\r\n\r\n                    } );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function disableButton() {\r\n\r\n            button.style.display = '';\r\n\r\n            button.style.cursor = 'auto';\r\n            button.style.left = 'calc(50% - 75px)';\r\n            button.style.width = '150px';\r\n\r\n            button.onmouseenter = null;\r\n            button.onmouseleave = null;\r\n\r\n            button.onclick = null;\r\n\r\n        }\r\n\r\n        function showARNotSupported() {\r\n\r\n            disableButton();\r\n\r\n            button.textContent = 'AR NOT SUPPORTED';\r\n\r\n        }\r\n\r\n        function showARNotAllowed( exception ) {\r\n\r\n            disableButton();\r\n\r\n            console.warn( 'Exception when trying to call xr.isSessionSupported', exception );\r\n\r\n            button.textContent = 'AR NOT ALLOWED';\r\n\r\n        }\r\n\r\n        function stylizeElement( element ) {\r\n\r\n            element.style.position = 'absolute';\r\n            element.style.bottom = '20px';\r\n            element.style.padding = '12px 6px';\r\n            element.style.border = '1px solid #fff';\r\n            element.style.borderRadius = '4px';\r\n            element.style.background = 'rgba(0,0,0,0.1)';\r\n            element.style.color = '#fff';\r\n            element.style.font = 'normal 13px sans-serif';\r\n            element.style.textAlign = 'center';\r\n            element.style.opacity = '0.5';\r\n            element.style.outline = 'none';\r\n            element.style.zIndex = '999';\r\n\r\n        }\r\n\r\n        if ( 'xr' in navigator ) {\r\n\r\n            button.id = 'ARButton';\r\n            button.style.display = 'none';\r\n\r\n            stylizeElement( button );\r\n\r\n            navigator.xr.isSessionSupported( 'immersive-ar' ).then( function( supported ) {\r\n\r\n                supported ? showStartAR() : showARNotSupported();\r\n\r\n            } ).catch( showARNotAllowed );\r\n\r\n            return button;\r\n\r\n        } else {\r\n\r\n            const message = document.createElement( 'a' );\r\n\r\n            if ( window.isSecureContext === false ) {\r\n\r\n                message.href = document.location.href.replace( /^http:/, 'https:' );\r\n                message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\r\n\r\n            } else {\r\n\r\n                message.href = 'https://immersiveweb.dev/';\r\n                message.innerHTML = 'WEBXR NOT AVAILABLE';\r\n\r\n            }\r\n\r\n            message.style.left = 'calc(50% - 90px)';\r\n            message.style.width = '180px';\r\n            message.style.textDecoration = 'none';\r\n\r\n            stylizeElement( message );\r\n\r\n            return message;\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n","export const RenderMode = {\r\n    Always: 0,\r\n    OnChange: 1,\r\n    Never: 2\r\n};\r\n","import * as THREE from 'three';\r\nimport { OrbitControls } from './OrbitControls.js';\r\nimport { PlyLoader } from './loaders/ply/PlyLoader.js';\r\nimport { SplatLoader } from './loaders/splat/SplatLoader.js';\r\nimport { KSplatLoader } from './loaders/ksplat/KSplatLoader.js';\r\nimport { SpzLoader } from './loaders/spz/SpzLoader.js';\r\nimport { sceneFormatFromPath } from './loaders/Utils.js';\r\nimport { LoadingSpinner } from './ui/LoadingSpinner.js';\r\nimport { LoadingProgressBar } from './ui/LoadingProgressBar.js';\r\nimport { InfoPanel } from './ui/InfoPanel.js';\r\nimport { SceneHelper } from './SceneHelper.js';\r\nimport { Raycaster } from './raycaster/Raycaster.js';\r\nimport { SplatMesh } from './splatmesh/SplatMesh.js';\r\nimport { createSortWorker } from './worker/SortWorker.js';\r\nimport { Constants } from './Constants.js';\r\nimport { getCurrentTime, isIOS, getIOSSemever, clamp } from './Util.js';\r\nimport { AbortablePromise, AbortedPromiseError } from './AbortablePromise.js';\r\nimport { SceneFormat } from './loaders/SceneFormat.js';\r\nimport { WebXRMode } from './webxr/WebXRMode.js';\r\nimport { VRButton } from './webxr/VRButton.js';\r\nimport { ARButton } from './webxr/ARButton.js';\r\nimport { delayedExecute, abortablePromiseWithExtractedComponents } from './Util.js';\r\nimport { LoaderStatus } from './loaders/LoaderStatus.js';\r\nimport { DirectLoadError } from './loaders/DirectLoadError.js';\r\nimport { RenderMode } from './RenderMode.js';\r\nimport { LogLevel } from './LogLevel.js';\r\nimport { SceneRevealMode } from './SceneRevealMode.js';\r\nimport { SplatRenderMode } from './SplatRenderMode.js';\r\n\r\nconst THREE_CAMERA_FOV = 50;\r\nconst MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT = .75;\r\nconst MIN_SPLAT_COUNT_TO_SHOW_SPLAT_TREE_LOADING_SPINNER = 1500000;\r\nconst FOCUS_MARKER_FADE_IN_SPEED = 10.0;\r\nconst FOCUS_MARKER_FADE_OUT_SPEED = 2.5;\r\nconst CONSECUTIVE_RENDERED_FRAMES_FOR_FPS_CALCULATION = 60;\r\n\r\n/**\r\n * Viewer: Manages the rendering of splat scenes. Manages an instance of SplatMesh as well as a web worker\r\n * that performs the sort for its splats.\r\n */\r\nexport class Viewer {\r\n\r\n    constructor(options = {}) {\r\n\r\n        // The natural 'up' vector for viewing the scene (only has an effect when used with orbit controls and\r\n        // when the viewer uses its own camera).\r\n        if (!options.cameraUp) options.cameraUp = [0, 1, 0];\r\n        this.cameraUp = new THREE.Vector3().fromArray(options.cameraUp);\r\n\r\n        // The camera's initial position (only used when the viewer uses its own camera).\r\n        if (!options.initialCameraPosition) options.initialCameraPosition = [0, 10, 15];\r\n        this.initialCameraPosition = new THREE.Vector3().fromArray(options.initialCameraPosition);\r\n\r\n        // The initial focal point of the camera and center of the camera's orbit (only used when the viewer uses its own camera).\r\n        if (!options.initialCameraLookAt) options.initialCameraLookAt = [0, 0, 0];\r\n        this.initialCameraLookAt = new THREE.Vector3().fromArray(options.initialCameraLookAt);\r\n\r\n        // 'dropInMode' is a flag that is used internally to support the usage of the viewer as a Three.js scene object\r\n        this.dropInMode = options.dropInMode || false;\r\n\r\n        // If 'selfDrivenMode' is true, the viewer manages its own update/animation loop via requestAnimationFrame()\r\n        if (options.selfDrivenMode === undefined || options.selfDrivenMode === null) options.selfDrivenMode = true;\r\n        this.selfDrivenMode = options.selfDrivenMode && !this.dropInMode;\r\n        this.selfDrivenUpdateFunc = this.selfDrivenUpdate.bind(this);\r\n\r\n        // If 'useBuiltInControls' is true, the viewer will create its own instance of OrbitControls and attach to the camera\r\n        if (options.useBuiltInControls === undefined) options.useBuiltInControls = true;\r\n        this.useBuiltInControls = options.useBuiltInControls;\r\n\r\n        // parent element of the Three.js renderer canvas\r\n        this.rootElement = options.rootElement;\r\n\r\n        // Tells the viewer to pretend the device pixel ratio is 1, which can boost performance on devices where it is larger,\r\n        // at a small cost to visual quality\r\n        this.ignoreDevicePixelRatio = options.ignoreDevicePixelRatio || false;\r\n        this.devicePixelRatio = this.ignoreDevicePixelRatio ? 1 : (window.devicePixelRatio || 1);\r\n\r\n        // Tells the viewer to use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\r\n        this.halfPrecisionCovariancesOnGPU = options.halfPrecisionCovariancesOnGPU || false;\r\n\r\n        // If 'threeScene' is valid, it will be rendered by the viewer along with the splat mesh\r\n        this.threeScene = options.threeScene;\r\n        // Allows for usage of an external Three.js renderer\r\n        this.renderer = options.renderer;\r\n        // Allows for usage of an external Three.js camera\r\n        this.camera = options.camera;\r\n\r\n        // If 'gpuAcceleratedSort' is true, a partially GPU-accelerated approach to sorting splats will be used.\r\n        // Currently this means pre-computing splat distances from the camera on the GPU\r\n        this.gpuAcceleratedSort = options.gpuAcceleratedSort || false;\r\n\r\n        // if 'integerBasedSort' is true, the integer version of splat centers as well as other values used to calculate\r\n        // splat distances are used instead of the float version. This speeds up computation, but introduces the possibility of\r\n        // overflow in larger scenes.\r\n        if (options.integerBasedSort === undefined || options.integerBasedSort === null) {\r\n            options.integerBasedSort = true;\r\n        }\r\n        this.integerBasedSort = options.integerBasedSort;\r\n\r\n        // If 'sharedMemoryForWorkers' is true, a SharedArrayBuffer will be used to communicate with web workers. This method\r\n        // is faster than copying memory to or from web workers, but comes with security implications as outlined here:\r\n        // https://web.dev/articles/cross-origin-isolation-guide\r\n        // If enabled, it requires specific CORS headers to be present in the response from the server that is sent when\r\n        // loading the application. More information is available in the README.\r\n        if (options.sharedMemoryForWorkers === undefined || options.sharedMemoryForWorkers === null) options.sharedMemoryForWorkers = true;\r\n        this.sharedMemoryForWorkers = options.sharedMemoryForWorkers;\r\n\r\n        // if 'dynamicScene' is true, it tells the viewer to assume scene elements are not stationary or that the number of splats in the\r\n        // scene may change. This prevents optimizations that depend on a static scene from being made. Additionally, if 'dynamicScene' is\r\n        // true it tells the splat mesh to not apply scene tranforms to splat data that is returned by functions like\r\n        // SplatMesh.getSplatCenter() by default.\r\n        this.dynamicScene = !!options.dynamicScene;\r\n\r\n        // When true, will perform additional steps during rendering to address artifacts caused by the rendering of gaussians at a\r\n        // substantially different resolution than that at which they were rendered during training. This will only work correctly\r\n        // for models that were trained using a process that utilizes this compensation calculation. For more details:\r\n        // https://github.com/nerfstudio-project/gsplat/pull/117\r\n        // https://github.com/graphdeco-inria/gaussian-splatting/issues/294#issuecomment-1772688093\r\n        this.antialiased = options.antialiased || false;\r\n\r\n        // This constant is added to the projected 2D screen-space splat scales\r\n        this.kernel2DSize = (options.kernel2DSize === undefined) ? 0.3 : options.kernel2DSize;\r\n\r\n        this.webXRMode = options.webXRMode || WebXRMode.None;\r\n        if (this.webXRMode !== WebXRMode.None) {\r\n            this.gpuAcceleratedSort = false;\r\n        }\r\n        this.webXRActive = false;\r\n\r\n        this.webXRSessionInit = options.webXRSessionInit || {};\r\n\r\n        // if 'renderMode' is RenderMode.Always, then the viewer will rrender the scene on every update. If it is RenderMode.OnChange,\r\n        // it will only render when something in the scene has changed.\r\n        this.renderMode = options.renderMode || RenderMode.Always;\r\n\r\n        // SceneRevealMode.Default results in a nice, slow fade-in effect for progressively loaded scenes,\r\n        // and a fast fade-in for non progressively loaded scenes.\r\n        // SceneRevealMode.Gradual will force a slow fade-in for all scenes.\r\n        // SceneRevealMode.Instant will force all loaded scene data to be immediately visible.\r\n        this.sceneRevealMode = options.sceneRevealMode || SceneRevealMode.Default;\r\n\r\n        // Hacky, experimental, non-scientific parameter for tweaking focal length related calculations. For scenes with very\r\n        // small gaussians, small details, and small dimensions -- increasing this value can help improve visual quality.\r\n        this.focalAdjustment = options.focalAdjustment || 1.0;\r\n\r\n        // Specify the maximum screen-space splat size, can help deal with large splats that get too unwieldy\r\n        this.maxScreenSpaceSplatSize = options.maxScreenSpaceSplatSize || 1024;\r\n\r\n        // The verbosity of console logging\r\n        this.logLevel = options.logLevel || LogLevel.None;\r\n\r\n        // Degree of spherical harmonics to utilize in rendering splats (assuming the data is present in the splat scene).\r\n        // Valid values are 0 - 2. Default value is 0.\r\n        this.sphericalHarmonicsDegree = options.sphericalHarmonicsDegree || 0;\r\n\r\n        // When true, allows for usage of extra properties and attributes during rendering for effects such as opacity adjustment.\r\n        // Default is false for performance reasons. These properties are separate from transform properties (scale, rotation, position)\r\n        // that are enabled by the 'dynamicScene' parameter.\r\n        this.enableOptionalEffects = options.enableOptionalEffects || false;\r\n\r\n        // Enable the usage of SIMD WebAssembly instructions for the splat sort\r\n        if (options.enableSIMDInSort === undefined || options.enableSIMDInSort === null) options.enableSIMDInSort = true;\r\n        this.enableSIMDInSort = options.enableSIMDInSort;\r\n\r\n        // Level to compress non KSPLAT files when loading them for direct rendering\r\n        if (options.inMemoryCompressionLevel === undefined || options.inMemoryCompressionLevel === null) {\r\n            options.inMemoryCompressionLevel = 0;\r\n        }\r\n        this.inMemoryCompressionLevel = options.inMemoryCompressionLevel;\r\n\r\n        // Reorder splat data in memory after loading is complete to optimize cache utilization. Default is true.\r\n        // Does not apply if splat scene is progressively loaded.\r\n        if (options.optimizeSplatData === undefined || options.optimizeSplatData === null) {\r\n            options.optimizeSplatData = true;\r\n        }\r\n        this.optimizeSplatData = options.optimizeSplatData;\r\n\r\n        // When true, the intermediate splat data that is the result of decompressing splat bufffer(s) and is used to\r\n        // populate the data textures will be freed. This will reduces memory usage, but if that data needs to be modified\r\n        // it will need to be re-populated from the splat buffer(s). Default is false.\r\n        if (options.freeIntermediateSplatData === undefined || options.freeIntermediateSplatData === null) {\r\n            options.freeIntermediateSplatData = false;\r\n        }\r\n        this.freeIntermediateSplatData = options.freeIntermediateSplatData;\r\n\r\n        // It appears that for certain iOS versions, special actions need to be taken with the\r\n        // usage of SIMD instructions and shared memory\r\n        if (isIOS()) {\r\n            const semver = getIOSSemever();\r\n            if (semver.major < 17) {\r\n                this.enableSIMDInSort = false;\r\n            }\r\n            if (semver.major < 16) {\r\n                this.sharedMemoryForWorkers = false;\r\n            }\r\n        }\r\n\r\n        // Tell the viewer how to render the splats\r\n        if (options.splatRenderMode === undefined || options.splatRenderMode === null) {\r\n            options.splatRenderMode = SplatRenderMode.ThreeD;\r\n        }\r\n        this.splatRenderMode = options.splatRenderMode;\r\n\r\n        // Customize the speed at which the scene is revealed\r\n        this.sceneFadeInRateMultiplier = options.sceneFadeInRateMultiplier || 1.0;\r\n\r\n        // Set the range for the depth map for the counting sort used to sort the splats\r\n        this.splatSortDistanceMapPrecision = options.splatSortDistanceMapPrecision || Constants.DefaultSplatSortDistanceMapPrecision;\r\n        const maxPrecision = this.integerBasedSort ? 20 : 24;\r\n        this.splatSortDistanceMapPrecision = clamp(this.splatSortDistanceMapPrecision, 10, maxPrecision);\r\n\r\n        this.onSplatMeshChangedCallback = null;\r\n        this.createSplatMesh();\r\n\r\n        this.controls = null;\r\n        this.perspectiveControls = null;\r\n        this.orthographicControls = null;\r\n\r\n        this.orthographicCamera = null;\r\n        this.perspectiveCamera = null;\r\n\r\n        this.showMeshCursor = false;\r\n        this.showControlPlane = false;\r\n        this.showInfo = false;\r\n\r\n        this.sceneHelper = null;\r\n\r\n        this.sortWorker = null;\r\n        this.sortRunning = false;\r\n        this.splatRenderCount = 0;\r\n        this.splatSortCount = 0;\r\n        this.lastSplatSortCount = 0;\r\n        this.sortWorkerIndexesToSort = null;\r\n        this.sortWorkerSortedIndexes = null;\r\n        this.sortWorkerPrecomputedDistances = null;\r\n        this.sortWorkerTransforms = null;\r\n        this.preSortMessages = [];\r\n        this.runAfterNextSort = [];\r\n\r\n        this.selfDrivenModeRunning = false;\r\n        this.splatRenderReady = false;\r\n\r\n        this.raycaster = new Raycaster();\r\n\r\n        this.infoPanel = null;\r\n\r\n        this.startInOrthographicMode = false;\r\n\r\n        this.currentFPS = 0;\r\n        this.lastSortTime = 0;\r\n        this.consecutiveRenderFrames = 0;\r\n\r\n        this.previousCameraTarget = new THREE.Vector3();\r\n        this.nextCameraTarget = new THREE.Vector3();\r\n\r\n        this.mousePosition = new THREE.Vector2();\r\n        this.mouseDownPosition = new THREE.Vector2();\r\n        this.mouseDownTime = null;\r\n\r\n        this.resizeObserver = null;\r\n        this.mouseMoveListener = null;\r\n        this.mouseDownListener = null;\r\n        this.mouseUpListener = null;\r\n        this.keyDownListener = null;\r\n\r\n        this.sortPromise = null;\r\n        this.sortPromiseResolver = null;\r\n        this.splatSceneDownloadPromises = {};\r\n        this.splatSceneDownloadAndBuildPromise = null;\r\n        this.splatSceneRemovalPromise = null;\r\n\r\n        this.loadingSpinner = new LoadingSpinner(null, this.rootElement || document.body);\r\n        this.loadingSpinner.hide();\r\n        this.loadingProgressBar = new LoadingProgressBar(this.rootElement || document.body);\r\n        this.loadingProgressBar.hide();\r\n        this.infoPanel = new InfoPanel(this.rootElement || document.body);\r\n        this.infoPanel.hide();\r\n\r\n        this.usingExternalCamera = (this.dropInMode || this.camera) ? true : false;\r\n        this.usingExternalRenderer = (this.dropInMode || this.renderer) ? true : false;\r\n\r\n        this.initialized = false;\r\n        this.disposing = false;\r\n        this.disposed = false;\r\n        this.disposePromise = null;\r\n        if (!this.dropInMode) this.init();\r\n    }\r\n\r\n    createSplatMesh() {\r\n        this.splatMesh = new SplatMesh(this.splatRenderMode, this.dynamicScene, this.enableOptionalEffects,\r\n                                       this.halfPrecisionCovariancesOnGPU, this.devicePixelRatio, this.gpuAcceleratedSort,\r\n                                       this.integerBasedSort, this.antialiased, this.maxScreenSpaceSplatSize, this.logLevel,\r\n                                       this.sphericalHarmonicsDegree, this.sceneFadeInRateMultiplier, this.kernel2DSize);\r\n        this.splatMesh.frustumCulled = false;\r\n        if (this.onSplatMeshChangedCallback) this.onSplatMeshChangedCallback();\r\n    }\r\n\r\n    init() {\r\n\r\n        if (this.initialized) return;\r\n\r\n        if (!this.rootElement) {\r\n            if (!this.usingExternalRenderer) {\r\n                this.rootElement = document.createElement('div');\r\n                this.rootElement.style.width = '100%';\r\n                this.rootElement.style.height = '100%';\r\n                this.rootElement.style.position = 'absolute';\r\n                document.body.appendChild(this.rootElement);\r\n            } else {\r\n                this.rootElement = this.renderer.domElement || document.body;\r\n            }\r\n        }\r\n\r\n        this.setupCamera();\r\n        this.setupRenderer();\r\n        this.setupWebXR(this.webXRSessionInit);\r\n        this.setupControls();\r\n        this.setupEventHandlers();\r\n\r\n        this.threeScene = this.threeScene || new THREE.Scene();\r\n        this.sceneHelper = new SceneHelper(this.threeScene);\r\n        this.sceneHelper.setupMeshCursor();\r\n        this.sceneHelper.setupFocusMarker();\r\n        this.sceneHelper.setupControlPlane();\r\n\r\n        this.loadingProgressBar.setContainer(this.rootElement);\r\n        this.loadingSpinner.setContainer(this.rootElement);\r\n        this.infoPanel.setContainer(this.rootElement);\r\n\r\n        this.initialized = true;\r\n    }\r\n\r\n    setupCamera() {\r\n        if (!this.usingExternalCamera) {\r\n            const renderDimensions = new THREE.Vector2();\r\n            this.getRenderDimensions(renderDimensions);\r\n\r\n            this.perspectiveCamera = new THREE.PerspectiveCamera(THREE_CAMERA_FOV, renderDimensions.x / renderDimensions.y, 0.1, 1000);\r\n            this.orthographicCamera = new THREE.OrthographicCamera(renderDimensions.x / -2, renderDimensions.x / 2,\r\n                                                                   renderDimensions.y / 2, renderDimensions.y / -2, 0.1, 1000 );\r\n            this.camera = this.startInOrthographicMode ? this.orthographicCamera : this.perspectiveCamera;\r\n            this.camera.position.copy(this.initialCameraPosition);\r\n            this.camera.up.copy(this.cameraUp).normalize();\r\n            this.camera.lookAt(this.initialCameraLookAt);\r\n        }\r\n    }\r\n\r\n    setupRenderer() {\r\n        if (!this.usingExternalRenderer) {\r\n            const renderDimensions = new THREE.Vector2();\r\n            this.getRenderDimensions(renderDimensions);\r\n\r\n            this.renderer = new THREE.WebGLRenderer({\r\n                antialias: false,\r\n                precision: 'highp'\r\n            });\r\n            this.renderer.setPixelRatio(this.devicePixelRatio);\r\n            this.renderer.autoClear = true;\r\n            this.renderer.setClearColor(new THREE.Color( 0x000000 ), 0.0);\r\n            this.renderer.setSize(renderDimensions.x, renderDimensions.y);\r\n\r\n            this.resizeObserver = new ResizeObserver(() => {\r\n                this.getRenderDimensions(renderDimensions);\r\n                this.renderer.setSize(renderDimensions.x, renderDimensions.y);\r\n                this.forceRenderNextFrame();\r\n            });\r\n            this.resizeObserver.observe(this.rootElement);\r\n            this.rootElement.appendChild(this.renderer.domElement);\r\n        }\r\n\r\n    }\r\n\r\n    setupWebXR(webXRSessionInit) {\r\n        if (this.webXRMode) {\r\n            if (this.webXRMode === WebXRMode.VR) {\r\n                this.rootElement.appendChild(VRButton.createButton(this.renderer, webXRSessionInit));\r\n            } else if (this.webXRMode === WebXRMode.AR) {\r\n                this.rootElement.appendChild(ARButton.createButton(this.renderer, webXRSessionInit));\r\n            }\r\n            this.renderer.xr.addEventListener('sessionstart', (e) => {\r\n                this.webXRActive = true;\r\n            });\r\n            this.renderer.xr.addEventListener('sessionend', (e) => {\r\n                this.webXRActive = false;\r\n            });\r\n            this.renderer.xr.enabled = true;\r\n            this.camera.position.copy(this.initialCameraPosition);\r\n            this.camera.up.copy(this.cameraUp).normalize();\r\n            this.camera.lookAt(this.initialCameraLookAt);\r\n        }\r\n    }\r\n\r\n    setupControls() {\r\n        if (this.useBuiltInControls && this.webXRMode === WebXRMode.None) {\r\n            if (!this.usingExternalCamera) {\r\n                this.perspectiveControls = new OrbitControls(this.perspectiveCamera, this.renderer.domElement);\r\n                this.orthographicControls = new OrbitControls(this.orthographicCamera, this.renderer.domElement);\r\n            } else {\r\n                if (this.camera.isOrthographicCamera) {\r\n                    this.orthographicControls = new OrbitControls(this.camera, this.renderer.domElement);\r\n                } else {\r\n                    this.perspectiveControls = new OrbitControls(this.camera, this.renderer.domElement);\r\n                }\r\n            }\r\n            for (let controls of [this.orthographicControls, this.perspectiveControls,]) {\r\n                if (controls) {\r\n                    controls.listenToKeyEvents(window);\r\n                    controls.rotateSpeed = 0.5;\r\n                    controls.maxPolarAngle = Math.PI * .75;\r\n                    controls.minPolarAngle = 0.1;\r\n                    controls.enableDamping = true;\r\n                    controls.dampingFactor = 0.05;\r\n                    controls.target.copy(this.initialCameraLookAt);\r\n                    controls.update();\r\n                }\r\n            }\r\n            this.controls = this.camera.isOrthographicCamera ? this.orthographicControls : this.perspectiveControls;\r\n            this.controls.update();\r\n        }\r\n    }\r\n\r\n    setupEventHandlers() {\r\n        if (this.useBuiltInControls && this.webXRMode === WebXRMode.None) {\r\n            this.mouseMoveListener = this.onMouseMove.bind(this);\r\n            this.renderer.domElement.addEventListener('pointermove', this.mouseMoveListener, false);\r\n            this.mouseDownListener = this.onMouseDown.bind(this);\r\n            this.renderer.domElement.addEventListener('pointerdown', this.mouseDownListener, false);\r\n            this.mouseUpListener = this.onMouseUp.bind(this);\r\n            this.renderer.domElement.addEventListener('pointerup', this.mouseUpListener, false);\r\n            this.keyDownListener = this.onKeyDown.bind(this);\r\n            window.addEventListener('keydown', this.keyDownListener, false);\r\n        }\r\n    }\r\n\r\n    removeEventHandlers() {\r\n        if (this.useBuiltInControls) {\r\n            this.renderer.domElement.removeEventListener('pointermove', this.mouseMoveListener);\r\n            this.mouseMoveListener = null;\r\n            this.renderer.domElement.removeEventListener('pointerdown', this.mouseDownListener);\r\n            this.mouseDownListener = null;\r\n            this.renderer.domElement.removeEventListener('pointerup', this.mouseUpListener);\r\n            this.mouseUpListener = null;\r\n            window.removeEventListener('keydown', this.keyDownListener);\r\n            this.keyDownListener = null;\r\n        }\r\n    }\r\n\r\n    setRenderMode(renderMode) {\r\n        this.renderMode = renderMode;\r\n    }\r\n\r\n    setActiveSphericalHarmonicsDegrees(activeSphericalHarmonicsDegrees) {\r\n        this.splatMesh.material.uniforms.sphericalHarmonicsDegree.value = activeSphericalHarmonicsDegrees;\r\n        this.splatMesh.material.uniformsNeedUpdate = true;\r\n    }\r\n\r\n    onSplatMeshChanged(callback) {\r\n        this.onSplatMeshChangedCallback = callback;\r\n    }\r\n\r\n    onKeyDown = function() {\r\n\r\n        const forward = new THREE.Vector3();\r\n        const tempMatrixLeft = new THREE.Matrix4();\r\n        const tempMatrixRight = new THREE.Matrix4();\r\n\r\n        return function(e) {\r\n            forward.set(0, 0, -1);\r\n            forward.transformDirection(this.camera.matrixWorld);\r\n            tempMatrixLeft.makeRotationAxis(forward, Math.PI / 128);\r\n            tempMatrixRight.makeRotationAxis(forward, -Math.PI / 128);\r\n            switch (e.code) {\r\n                case 'KeyG':\r\n                    this.focalAdjustment += 0.02;\r\n                    this.forceRenderNextFrame();\r\n                break;\r\n                case 'KeyF':\r\n                    this.focalAdjustment -= 0.02;\r\n                    this.forceRenderNextFrame();\r\n                break;\r\n                case 'ArrowLeft':\r\n                    this.camera.up.transformDirection(tempMatrixLeft);\r\n                break;\r\n                case 'ArrowRight':\r\n                    this.camera.up.transformDirection(tempMatrixRight);\r\n                break;\r\n                case 'KeyC':\r\n                    this.showMeshCursor = !this.showMeshCursor;\r\n                break;\r\n                case 'KeyU':\r\n                    this.showControlPlane = !this.showControlPlane;\r\n                break;\r\n                case 'KeyI':\r\n                    this.showInfo = !this.showInfo;\r\n                    if (this.showInfo) {\r\n                        this.infoPanel.show();\r\n                    } else {\r\n                        this.infoPanel.hide();\r\n                    }\r\n                break;\r\n                case 'KeyO':\r\n                    if (!this.usingExternalCamera) {\r\n                        this.setOrthographicMode(!this.camera.isOrthographicCamera);\r\n                    }\r\n                break;\r\n                case 'KeyP':\r\n                    if (!this.usingExternalCamera) {\r\n                        this.splatMesh.setPointCloudModeEnabled(!this.splatMesh.getPointCloudModeEnabled());\r\n                    }\r\n                break;\r\n                case 'Equal':\r\n                    if (!this.usingExternalCamera) {\r\n                        this.splatMesh.setSplatScale(this.splatMesh.getSplatScale() + 0.05);\r\n                    }\r\n                break;\r\n                case 'Minus':\r\n                    if (!this.usingExternalCamera) {\r\n                        this.splatMesh.setSplatScale(Math.max(this.splatMesh.getSplatScale() - 0.05, 0.0));\r\n                    }\r\n                break;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    onMouseMove(mouse) {\r\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\r\n    }\r\n\r\n    onMouseDown() {\r\n        this.mouseDownPosition.copy(this.mousePosition);\r\n        this.mouseDownTime = getCurrentTime();\r\n    }\r\n\r\n    onMouseUp = function() {\r\n\r\n        const clickOffset = new THREE.Vector2();\r\n\r\n        return function(mouse) {\r\n            clickOffset.copy(this.mousePosition).sub(this.mouseDownPosition);\r\n            const mouseUpTime = getCurrentTime();\r\n            const wasClick = mouseUpTime - this.mouseDownTime < 0.5 && clickOffset.length() < 2;\r\n            if (wasClick) {\r\n                this.onMouseClick(mouse);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    onMouseClick(mouse) {\r\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\r\n        this.checkForFocalPointChange();\r\n    }\r\n\r\n    checkForFocalPointChange = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n        const toNewFocalPoint = new THREE.Vector3();\r\n        const outHits = [];\r\n\r\n        return function() {\r\n            if (!this.transitioningCameraTarget) {\r\n                this.getRenderDimensions(renderDimensions);\r\n                outHits.length = 0;\r\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\r\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\r\n                if (outHits.length > 0) {\r\n                    const hit = outHits[0];\r\n                    const intersectionPoint = hit.origin;\r\n                    toNewFocalPoint.copy(intersectionPoint).sub(this.camera.position);\r\n                    if (toNewFocalPoint.length() > MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT) {\r\n                        this.previousCameraTarget.copy(this.controls.target);\r\n                        this.nextCameraTarget.copy(intersectionPoint);\r\n                        this.transitioningCameraTarget = true;\r\n                        this.transitioningCameraTargetStartTime = getCurrentTime();\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    getRenderDimensions(outDimensions) {\r\n        if (this.rootElement) {\r\n            outDimensions.x = this.rootElement.offsetWidth;\r\n            outDimensions.y = this.rootElement.offsetHeight;\r\n        } else {\r\n            this.renderer.getSize(outDimensions);\r\n        }\r\n    }\r\n\r\n    setOrthographicMode(orthographicMode) {\r\n        if (orthographicMode === this.camera.isOrthographicCamera) return;\r\n        const fromCamera = this.camera;\r\n        const toCamera = orthographicMode ? this.orthographicCamera : this.perspectiveCamera;\r\n        toCamera.position.copy(fromCamera.position);\r\n        toCamera.up.copy(fromCamera.up);\r\n        toCamera.rotation.copy(fromCamera.rotation);\r\n        toCamera.quaternion.copy(fromCamera.quaternion);\r\n        toCamera.matrix.copy(fromCamera.matrix);\r\n        this.camera = toCamera;\r\n\r\n        if (this.controls) {\r\n\r\n            const resetControls = (controls) => {\r\n                controls.saveState();\r\n                controls.reset();\r\n            };\r\n\r\n            const fromControls = this.controls;\r\n            const toControls = orthographicMode ? this.orthographicControls : this.perspectiveControls;\r\n\r\n            resetControls(toControls);\r\n            resetControls(fromControls);\r\n\r\n            toControls.target.copy(fromControls.target);\r\n            if (orthographicMode) {\r\n                Viewer.setCameraZoomFromPosition(toCamera, fromCamera, fromControls);\r\n            } else {\r\n                Viewer.setCameraPositionFromZoom(toCamera, fromCamera, toControls);\r\n            }\r\n            this.controls = toControls;\r\n            this.camera.lookAt(this.controls.target);\r\n        }\r\n    }\r\n\r\n    static setCameraPositionFromZoom = function() {\r\n\r\n        const tempVector = new THREE.Vector3();\r\n\r\n        return function(positionCamera, zoomedCamera, controls) {\r\n            const toLookAtDistance = 1 / (zoomedCamera.zoom * 0.001);\r\n            tempVector.copy(controls.target).sub(positionCamera.position).normalize().multiplyScalar(toLookAtDistance).negate();\r\n            positionCamera.position.copy(controls.target).add(tempVector);\r\n        };\r\n\r\n    }();\r\n\r\n\r\n    static setCameraZoomFromPosition = function() {\r\n\r\n        const tempVector = new THREE.Vector3();\r\n\r\n        return function(zoomCamera, positionZamera, controls) {\r\n            const toLookAtDistance = tempVector.copy(controls.target).sub(positionZamera.position).length();\r\n            zoomCamera.zoom = 1 / (toLookAtDistance * .001);\r\n        };\r\n\r\n    }();\r\n\r\n    updateSplatMesh = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n\r\n        return function() {\r\n            if (!this.splatMesh) return;\r\n            const splatCount = this.splatMesh.getSplatCount();\r\n            if (splatCount > 0) {\r\n                this.splatMesh.updateVisibleRegionFadeDistance(this.sceneRevealMode);\r\n                this.splatMesh.updateTransforms();\r\n                this.getRenderDimensions(renderDimensions);\r\n                const focalLengthX = this.camera.projectionMatrix.elements[0] * 0.5 *\r\n                                     this.devicePixelRatio * renderDimensions.x;\r\n                const focalLengthY = this.camera.projectionMatrix.elements[5] * 0.5 *\r\n                                     this.devicePixelRatio * renderDimensions.y;\r\n\r\n                const focalMultiplier = this.camera.isOrthographicCamera ? (1.0 / this.devicePixelRatio) : 1.0;\r\n                const focalAdjustment = this.focalAdjustment * focalMultiplier;\r\n                const inverseFocalAdjustment = 1.0 / focalAdjustment;\r\n\r\n                this.adjustForWebXRStereo(renderDimensions);\r\n                this.splatMesh.updateUniforms(renderDimensions, focalLengthX * focalAdjustment, focalLengthY * focalAdjustment,\r\n                                              this.camera.isOrthographicCamera, this.camera.zoom || 1.0, inverseFocalAdjustment);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    adjustForWebXRStereo(renderDimensions) {\r\n        // TODO: Figure out a less hacky way to determine if stereo rendering is active\r\n        if (this.camera && this.webXRActive) {\r\n            const xrCamera = this.renderer.xr.getCamera();\r\n            const xrCameraProj00 = xrCamera.projectionMatrix.elements[0];\r\n            const cameraProj00 = this.camera.projectionMatrix.elements[0];\r\n            renderDimensions.x *= (cameraProj00 / xrCameraProj00);\r\n        }\r\n    }\r\n\r\n    isLoadingOrUnloading() {\r\n        return Object.keys(this.splatSceneDownloadPromises).length > 0 || this.splatSceneDownloadAndBuildPromise !== null ||\r\n                           this.splatSceneRemovalPromise !== null;\r\n    }\r\n\r\n    isDisposingOrDisposed() {\r\n        return this.disposing || this.disposed;\r\n    }\r\n\r\n    addSplatSceneDownloadPromise(promise) {\r\n        this.splatSceneDownloadPromises[promise.id] = promise;\r\n    }\r\n\r\n    removeSplatSceneDownloadPromise(promise) {\r\n        delete this.splatSceneDownloadPromises[promise.id];\r\n    }\r\n\r\n    setSplatSceneDownloadAndBuildPromise(promise) {\r\n        this.splatSceneDownloadAndBuildPromise = promise;\r\n    }\r\n\r\n    clearSplatSceneDownloadAndBuildPromise() {\r\n        this.splatSceneDownloadAndBuildPromise = null;\r\n    }\r\n\r\n    /**\r\n     * Add a splat scene to the viewer and display any loading UI if appropriate.\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {object} options {\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         showLoadingUI:         Display a loading spinner while the scene is loading, defaults to true\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     *\r\n     *         onProgress:                 Function to be called as file data are received, or other processing occurs\r\n     *\r\n     *         headers:                    Optional HTTP headers to be sent along with splat requests\r\n     * }\r\n     * @return {AbortablePromise}\r\n     */\r\n    addSplatScene(path, options = {}) {\r\n\r\n        if (this.isLoadingOrUnloading()) {\r\n            throw new Error('Cannot add splat scene while another load or unload is already in progress.');\r\n        }\r\n\r\n        if (this.isDisposingOrDisposed()) {\r\n            throw new Error('Cannot add splat scene after dispose() is called.');\r\n        }\r\n\r\n        if (options.progressiveLoad && this.splatMesh.scenes && this.splatMesh.scenes.length > 0) {\r\n            console.log('addSplatScene(): \"progressiveLoad\" option ignore because there are multiple splat scenes');\r\n            options.progressiveLoad = false;\r\n        }\r\n\r\n        const format = (options.format !== undefined && options.format !== null) ? options.format : sceneFormatFromPath(path);\r\n        const progressiveLoad = Viewer.isProgressivelyLoadable(format) && options.progressiveLoad;\r\n        const showLoadingUI = (options.showLoadingUI !== undefined && options.showLoadingUI !== null) ? options.showLoadingUI : true;\r\n\r\n        let loadingUITaskId = null;\r\n        if (showLoadingUI) {\r\n            this.loadingSpinner.removeAllTasks();\r\n            loadingUITaskId = this.loadingSpinner.addTask('Downloading...');\r\n        }\r\n        const hideLoadingUI = () => {\r\n            this.loadingProgressBar.hide();\r\n            this.loadingSpinner.removeAllTasks();\r\n        };\r\n\r\n        const onProgressUIUpdate = (percentComplete, percentCompleteLabel, loaderStatus) => {\r\n            if (showLoadingUI) {\r\n                if (loaderStatus === LoaderStatus.Downloading) {\r\n                    if (percentComplete == 100) {\r\n                        this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Download complete!');\r\n                    } else {\r\n                        if (progressiveLoad) {\r\n                            this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Downloading splats...');\r\n                        } else {\r\n                            const suffix = percentCompleteLabel ? `: ${percentCompleteLabel}` : `...`;\r\n                            this.loadingSpinner.setMessageForTask(loadingUITaskId, `Downloading${suffix}`);\r\n                        }\r\n                    }\r\n                } else if (loaderStatus === LoaderStatus.Processing) {\r\n                    this.loadingSpinner.setMessageForTask(loadingUITaskId, 'Processing splats...');\r\n                }\r\n            }\r\n        };\r\n\r\n        let downloadDone = false;\r\n        let downloadedPercentage = 0;\r\n        const splatBuffersAddedUIUpdate = (firstBuild, finalBuild) => {\r\n            if (showLoadingUI) {\r\n                if (firstBuild && progressiveLoad || finalBuild && !progressiveLoad) {\r\n                    this.loadingSpinner.removeTask(loadingUITaskId);\r\n                    if (!finalBuild && !downloadDone) this.loadingProgressBar.show();\r\n                }\r\n                if (progressiveLoad) {\r\n                    if (finalBuild) {\r\n                        downloadDone = true;\r\n                        this.loadingProgressBar.hide();\r\n                    } else {\r\n                        this.loadingProgressBar.setProgress(downloadedPercentage);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        const onProgress = (percentComplete, percentCompleteLabel, loaderStatus) => {\r\n            downloadedPercentage = percentComplete;\r\n            onProgressUIUpdate(percentComplete, percentCompleteLabel, loaderStatus);\r\n            if (options.onProgress) options.onProgress(percentComplete, percentCompleteLabel, loaderStatus);\r\n        };\r\n\r\n        const buildSection = (splatBuffer, firstBuild, finalBuild) => {\r\n            if (!progressiveLoad && options.onProgress) options.onProgress(0, '0%', LoaderStatus.Processing);\r\n            const addSplatBufferOptions = {\r\n                'rotation': options.rotation || options.orientation,\r\n                'position': options.position,\r\n                'scale': options.scale,\r\n                'splatAlphaRemovalThreshold': options.splatAlphaRemovalThreshold,\r\n            };\r\n            return this.addSplatBuffers([splatBuffer], [addSplatBufferOptions],\r\n                                         finalBuild, firstBuild && showLoadingUI, showLoadingUI,\r\n                                         progressiveLoad, progressiveLoad).then(() => {\r\n                if (!progressiveLoad && options.onProgress) options.onProgress(100, '100%', LoaderStatus.Processing);\r\n                splatBuffersAddedUIUpdate(firstBuild, finalBuild);\r\n            });\r\n        };\r\n\r\n        const loadFunc = progressiveLoad ? this.downloadAndBuildSingleSplatSceneProgressiveLoad.bind(this) :\r\n                                           this.downloadAndBuildSingleSplatSceneStandardLoad.bind(this);\r\n        return loadFunc(path, format, options.splatAlphaRemovalThreshold, buildSection.bind(this),\r\n                        onProgress, hideLoadingUI.bind(this), options.headers);\r\n    }\r\n\r\n    /**\r\n     * Download a single splat scene, convert to splat buffer and then rebuild the viewer's splat mesh\r\n     * by calling 'buildFunc' -- all before displaying the scene. Also sets/clears relevant instance synchronization objects,\r\n     * and calls appropriate functions on success or failure.\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {SceneFormat} format Format of the splat scene file\r\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified value (valid range: 0 - 255)\r\n     * @param {function} buildFunc Function to build the viewer's splat mesh with the downloaded splat buffer\r\n     * @param {function} onProgress Function to be called as file data are received, or other processing occurs\r\n     * @param {function} onException Function to be called when exception occurs\r\n     * @param {object} headers Optional HTTP headers to pass to use for downloading splat scene\r\n     * @return {AbortablePromise}\r\n     */\r\n    downloadAndBuildSingleSplatSceneStandardLoad(path, format, splatAlphaRemovalThreshold, buildFunc, onProgress, onException, headers) {\r\n\r\n        const downloadPromise = this.downloadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold, onProgress, false,\r\n                                                                     undefined, format, headers);\r\n        const downloadAndBuildPromise = abortablePromiseWithExtractedComponents(downloadPromise.abortHandler);\r\n\r\n        downloadPromise.then((splatBuffer) => {\r\n            this.removeSplatSceneDownloadPromise(downloadPromise);\r\n            return buildFunc(splatBuffer, true, true).then(() => {\r\n                downloadAndBuildPromise.resolve();\r\n                this.clearSplatSceneDownloadAndBuildPromise();\r\n            });\r\n        })\r\n        .catch((e) => {\r\n            if (onException) onException();\r\n            this.clearSplatSceneDownloadAndBuildPromise();\r\n            this.removeSplatSceneDownloadPromise(downloadPromise);\r\n            downloadAndBuildPromise.reject(this.updateError(e, `Viewer::addSplatScene -> Could not load file ${path}`));\r\n        });\r\n\r\n        this.addSplatSceneDownloadPromise(downloadPromise);\r\n        this.setSplatSceneDownloadAndBuildPromise(downloadAndBuildPromise.promise);\r\n\r\n        return downloadAndBuildPromise.promise;\r\n    }\r\n\r\n    /**\r\n     * Download a single splat scene and convert to splat buffer in a progressive manner, allowing rendering as the file downloads.\r\n     * As each section is downloaded, the viewer's splat mesh is rebuilt by calling 'buildFunc'\r\n     * Also sets/clears relevant instance synchronization objects, and calls appropriate functions on success or failure.\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {SceneFormat} format Format of the splat scene file\r\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified value (valid range: 0 - 255)\r\n     * @param {function} buildFunc Function to rebuild the viewer's splat mesh after a new splat buffer section is downloaded\r\n     * @param {function} onDownloadProgress Function to be called as file data are received\r\n     * @param {function} onDownloadException Function to be called when exception occurs at any point during the full download\r\n     * @param {object} headers Optional HTTP headers to pass to use for downloading splat scene\r\n     * @return {AbortablePromise}\r\n     */\r\n    downloadAndBuildSingleSplatSceneProgressiveLoad(path, format, splatAlphaRemovalThreshold, buildFunc,\r\n                                                    onDownloadProgress, onDownloadException, headers) {\r\n        let progressiveLoadedSectionBuildCount = 0;\r\n        let progressiveLoadedSectionBuilding = false;\r\n        const queuedProgressiveLoadSectionBuilds = [];\r\n\r\n        const checkAndBuildProgressiveLoadSections = () => {\r\n            if (queuedProgressiveLoadSectionBuilds.length > 0 &&\r\n                !progressiveLoadedSectionBuilding &&\r\n                !this.isDisposingOrDisposed()) {\r\n                progressiveLoadedSectionBuilding = true;\r\n                const queuedBuild = queuedProgressiveLoadSectionBuilds.shift();\r\n                buildFunc(queuedBuild.splatBuffer, queuedBuild.firstBuild, queuedBuild.finalBuild)\r\n                .then(() => {\r\n                    progressiveLoadedSectionBuilding = false;\r\n                    if (queuedBuild.firstBuild) {\r\n                        progressiveLoadFirstSectionBuildPromise.resolve();\r\n                    } else if (queuedBuild.finalBuild) {\r\n                        splatSceneDownloadAndBuildPromise.resolve();\r\n                        this.clearSplatSceneDownloadAndBuildPromise();\r\n                    }\r\n                    if (queuedProgressiveLoadSectionBuilds.length > 0) {\r\n                        delayedExecute(() => checkAndBuildProgressiveLoadSections());\r\n                    }\r\n                });\r\n            }\r\n        };\r\n\r\n        const onProgressiveLoadSectionProgress = (splatBuffer, finalBuild) => {\r\n            if (!this.isDisposingOrDisposed()) {\r\n                if (finalBuild || queuedProgressiveLoadSectionBuilds.length === 0 ||\r\n                    splatBuffer.getSplatCount() > queuedProgressiveLoadSectionBuilds[0].splatBuffer.getSplatCount()) {\r\n                    queuedProgressiveLoadSectionBuilds.push({\r\n                        splatBuffer,\r\n                        firstBuild: progressiveLoadedSectionBuildCount === 0,\r\n                        finalBuild\r\n                    });\r\n                    progressiveLoadedSectionBuildCount++;\r\n                    checkAndBuildProgressiveLoadSections();\r\n                }\r\n            }\r\n        };\r\n\r\n        const splatSceneDownloadPromise = this.downloadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold, onDownloadProgress, true,\r\n                                                                               onProgressiveLoadSectionProgress, format, headers);\r\n\r\n        const progressiveLoadFirstSectionBuildPromise = abortablePromiseWithExtractedComponents(splatSceneDownloadPromise.abortHandler);\r\n        const splatSceneDownloadAndBuildPromise = abortablePromiseWithExtractedComponents();\r\n\r\n        this.addSplatSceneDownloadPromise(splatSceneDownloadPromise);\r\n        this.setSplatSceneDownloadAndBuildPromise(splatSceneDownloadAndBuildPromise.promise);\r\n\r\n        splatSceneDownloadPromise.then(() => {\r\n            this.removeSplatSceneDownloadPromise(splatSceneDownloadPromise);\r\n        })\r\n        .catch((e) => {\r\n            this.clearSplatSceneDownloadAndBuildPromise();\r\n            this.removeSplatSceneDownloadPromise(splatSceneDownloadPromise);\r\n            const error = this.updateError(e, `Viewer::addSplatScene -> Could not load one or more scenes`);\r\n            progressiveLoadFirstSectionBuildPromise.reject(error);\r\n            if (onDownloadException) onDownloadException(error);\r\n        });\r\n\r\n        return progressiveLoadFirstSectionBuildPromise.promise;\r\n    }\r\n\r\n    /**\r\n     * Add multiple splat scenes to the viewer and display any loading UI if appropriate.\r\n     * @param {Array<object>} sceneOptions Array of per-scene options: {\r\n     *\r\n     *         path: Path to splat scene to be loaded\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     *\r\n     *         headers:                    Optional HTTP headers to be sent along with splat requests\r\n     *\r\n     *         format (SceneFormat)        Optional, the format of the scene data (.ply, .ksplat, .splat). If not present, the\r\n     *                                     file extension in 'path' will be used to determine the format (if it is present)\r\n     * }\r\n     * @param {boolean} showLoadingUI Display a loading spinner while the scene is loading, defaults to true\r\n     * @param {function} onProgress Function to be called as file data are received\r\n     * @return {AbortablePromise}\r\n     */\r\n    addSplatScenes(sceneOptions, showLoadingUI = true, onProgress = undefined) {\r\n\r\n        if (this.isLoadingOrUnloading()) {\r\n            throw new Error('Cannot add splat scene while another load or unload is already in progress.');\r\n        }\r\n\r\n        if (this.isDisposingOrDisposed()) {\r\n            throw new Error('Cannot add splat scene after dispose() is called.');\r\n        }\r\n\r\n        const fileCount = sceneOptions.length;\r\n        const percentComplete = [];\r\n\r\n        let loadingUITaskId;\r\n        if (showLoadingUI) {\r\n            this.loadingSpinner.removeAllTasks();\r\n            loadingUITaskId = this.loadingSpinner.addTask('Downloading...');\r\n        }\r\n\r\n        const onLoadProgress = (fileIndex, percent, percentLabel, loaderStatus) => {\r\n            percentComplete[fileIndex] = percent;\r\n            let totalPercent = 0;\r\n            for (let i = 0; i < fileCount; i++) totalPercent += percentComplete[i] || 0;\r\n            totalPercent = totalPercent / fileCount;\r\n            percentLabel = `${totalPercent.toFixed(2)}%`;\r\n            if (showLoadingUI) {\r\n                if (loaderStatus === LoaderStatus.Downloading) {\r\n                    this.loadingSpinner.setMessageForTask(loadingUITaskId, totalPercent == 100 ?\r\n                                                          `Download complete!` : `Downloading: ${percentLabel}`);\r\n                }\r\n            }\r\n            if (onProgress) onProgress(totalPercent, percentLabel, loaderStatus);\r\n        };\r\n\r\n        const baseDownloadPromises = [];\r\n        const nativeDownloadPromises = [];\r\n        for (let i = 0; i < sceneOptions.length; i++) {\r\n            const options = sceneOptions[i];\r\n            const format = (options.format !== undefined && options.format !== null) ? options.format : sceneFormatFromPath(options.path);\r\n            const baseDownloadPromise = this.downloadSplatSceneToSplatBuffer(options.path, options.splatAlphaRemovalThreshold,\r\n                                                                             onLoadProgress.bind(this, i), false, undefined,\r\n                                                                             format, options.headers);\r\n            baseDownloadPromises.push(baseDownloadPromise);\r\n            nativeDownloadPromises.push(baseDownloadPromise.promise);\r\n        }\r\n\r\n        const downloadAndBuildPromise = new AbortablePromise((resolve, reject) => {\r\n            Promise.all(nativeDownloadPromises)\r\n            .then((splatBuffers) => {\r\n                if (showLoadingUI) this.loadingSpinner.removeTask(loadingUITaskId);\r\n                if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\r\n                this.addSplatBuffers(splatBuffers, sceneOptions, true, showLoadingUI, showLoadingUI, false, false).then(() => {\r\n                    if (onProgress) onProgress(100, '100%', LoaderStatus.Processing);\r\n                    this.clearSplatSceneDownloadAndBuildPromise();\r\n                    resolve();\r\n                });\r\n            })\r\n            .catch((e) => {\r\n                if (showLoadingUI) this.loadingSpinner.removeTask(loadingUITaskId);\r\n                this.clearSplatSceneDownloadAndBuildPromise();\r\n                reject(this.updateError(e, `Viewer::addSplatScenes -> Could not load one or more splat scenes.`));\r\n            })\r\n            .finally(() => {\r\n                this.removeSplatSceneDownloadPromise(downloadAndBuildPromise);\r\n            });\r\n        }, (reason) => {\r\n            for (let baseDownloadPromise of baseDownloadPromises) {\r\n                baseDownloadPromise.abort(reason);\r\n            }\r\n        });\r\n        this.addSplatSceneDownloadPromise(downloadAndBuildPromise);\r\n        this.setSplatSceneDownloadAndBuildPromise(downloadAndBuildPromise);\r\n        return downloadAndBuildPromise;\r\n    }\r\n\r\n    /**\r\n     * Download a splat scene and convert to SplatBuffer instance.\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified\r\n     *                                            value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     * @param {function} onProgress Function to be called as file data are received\r\n     * @param {boolean} progressiveBuild Construct file sections into splat buffers as they are downloaded\r\n     * @param {function} onSectionBuilt Function to be called when new section is added to the file\r\n     * @param {string} format File format of the scene\r\n     * @param {object} headers Optional HTTP headers to pass to use for downloading splat scene\r\n     * @return {AbortablePromise}\r\n     */\r\n    downloadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold = 1, onProgress = undefined,\r\n                                    progressiveBuild = false, onSectionBuilt = undefined, format, headers) {\r\n        try {\r\n            if (format === SceneFormat.Splat || format === SceneFormat.KSplat || format === SceneFormat.Ply) {\r\n                const optimizeSplatData = progressiveBuild ? false : this.optimizeSplatData;\r\n                if (format === SceneFormat.Splat) {\r\n                    return SplatLoader.loadFromURL(path, onProgress, progressiveBuild, onSectionBuilt, splatAlphaRemovalThreshold,\r\n                                                   this.inMemoryCompressionLevel, optimizeSplatData, headers);\r\n                } else if (format === SceneFormat.KSplat) {\r\n                    return KSplatLoader.loadFromURL(path, onProgress, progressiveBuild, onSectionBuilt, headers);\r\n                } else if (format === SceneFormat.Ply) {\r\n                    return PlyLoader.loadFromURL(path, onProgress, progressiveBuild, onSectionBuilt, splatAlphaRemovalThreshold,\r\n                                                 this.inMemoryCompressionLevel, optimizeSplatData, this.sphericalHarmonicsDegree, headers);\r\n                }\r\n            } else if (format === SceneFormat.Spz) {\r\n                return SpzLoader.loadFromURL(path, onProgress, splatAlphaRemovalThreshold, this.inMemoryCompressionLevel,\r\n                                             this.optimizeSplatData, this.sphericalHarmonicsDegree, headers);\r\n            }\r\n        } catch (e) {\r\n            throw this.updateError(e, null);\r\n        }\r\n\r\n        throw new Error(`Viewer::downloadSplatSceneToSplatBuffer -> File format not supported: ${path}`);\r\n    }\r\n\r\n    static isProgressivelyLoadable(format) {\r\n        return format === SceneFormat.Splat || format === SceneFormat.KSplat || format === SceneFormat.Ply;\r\n    }\r\n\r\n    /**\r\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer and set up the sorting web worker.\r\n     * This function will terminate the existing sort worker (if there is one).\r\n     */\r\n    addSplatBuffers = function() {\r\n\r\n        return function(splatBuffers, splatBufferOptions = [], finalBuild = true, showLoadingUI = true,\r\n                        showLoadingUIForSplatTreeBuild = true, replaceExisting = false,\r\n                        enableRenderBeforeFirstSort = false, preserveVisibleRegion = true) {\r\n\r\n            if (this.isDisposingOrDisposed()) return Promise.resolve();\r\n\r\n            let splatProcessingTaskId = null;\r\n            const removeSplatProcessingTask = () => {\r\n                if (splatProcessingTaskId !== null) {\r\n                    this.loadingSpinner.removeTask(splatProcessingTaskId);\r\n                    splatProcessingTaskId = null;\r\n                }\r\n            };\r\n\r\n            this.splatRenderReady = false;\r\n            return new Promise((resolve) => {\r\n                if (showLoadingUI) {\r\n                    splatProcessingTaskId = this.loadingSpinner.addTask('Processing splats...');\r\n                }\r\n                delayedExecute(() => {\r\n                    if (this.isDisposingOrDisposed()) {\r\n                        resolve();\r\n                    } else {\r\n                        const buildResults = this.addSplatBuffersToMesh(splatBuffers, splatBufferOptions, finalBuild,\r\n                                                                        showLoadingUIForSplatTreeBuild, replaceExisting,\r\n                                                                        preserveVisibleRegion);\r\n\r\n                        const maxSplatCount = this.splatMesh.getMaxSplatCount();\r\n                        if (this.sortWorker && this.sortWorker.maxSplatCount !== maxSplatCount) this.disposeSortWorker();\r\n                        // If we aren't calculating the splat distances from the center on the GPU, the sorting worker needs\r\n                        // splat centers and transform indexes so that it can calculate those distance values.\r\n                        if (!this.gpuAcceleratedSort) {\r\n                            this.preSortMessages.push({\r\n                                'centers': buildResults.centers.buffer,\r\n                                'sceneIndexes': buildResults.sceneIndexes.buffer,\r\n                                'range': {\r\n                                    'from': buildResults.from,\r\n                                    'to': buildResults.to,\r\n                                    'count': buildResults.count\r\n                                }\r\n                            });\r\n                        }\r\n                        const sortWorkerSetupPromise = (!this.sortWorker && maxSplatCount > 0) ?\r\n                                                         this.setupSortWorker(this.splatMesh) : Promise.resolve();\r\n                        sortWorkerSetupPromise.then(() => {\r\n                            if (this.isDisposingOrDisposed()) return;\r\n                            this.runSplatSort(true, true).then((sortRunning) => {\r\n                                if (!this.sortWorker || !sortRunning) {\r\n                                    this.splatRenderReady = true;\r\n                                    removeSplatProcessingTask();\r\n                                    resolve();\r\n                                } else {\r\n                                    if (enableRenderBeforeFirstSort) {\r\n                                        this.splatRenderReady = true;\r\n                                    } else {\r\n                                        this.runAfterNextSort.push(() => {\r\n                                            this.splatRenderReady = true;\r\n                                        });\r\n                                    }\r\n                                    this.runAfterNextSort.push(() => {\r\n                                        removeSplatProcessingTask();\r\n                                        resolve();\r\n                                    });\r\n                                }\r\n                            });\r\n                        });\r\n                    }\r\n                }, true);\r\n            });\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer. By default, this function is additive;\r\n     * all splat buffers contained by the viewer's splat mesh before calling this function will be preserved. This behavior can be\r\n     * changed by passing 'true' for 'replaceExisting'.\r\n     * @param {Array<SplatBuffer>} splatBuffers SplatBuffer instances\r\n     * @param {Array<object>} splatBufferOptions Array of options objects: {\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     * }\r\n     * @param {boolean} finalBuild Will the splat mesh be in its final state after this build?\r\n     * @param {boolean} showLoadingUIForSplatTreeBuild Whether or not to show the loading spinner during construction of the splat tree.\r\n     * @return {object} Object containing info about the splats that are updated\r\n     */\r\n    addSplatBuffersToMesh = function() {\r\n\r\n        let splatOptimizingTaskId;\r\n\r\n        return function(splatBuffers, splatBufferOptions, finalBuild = true, showLoadingUIForSplatTreeBuild = false,\r\n                        replaceExisting = false, preserveVisibleRegion = true) {\r\n            if (this.isDisposingOrDisposed()) return;\r\n            let allSplatBuffers = [];\r\n            let allSplatBufferOptions = [];\r\n            if (!replaceExisting) {\r\n                allSplatBuffers = this.splatMesh.scenes.map((scene) => scene.splatBuffer) || [];\r\n                allSplatBufferOptions = this.splatMesh.sceneOptions ? this.splatMesh.sceneOptions.map((sceneOptions) => sceneOptions) : [];\r\n            }\r\n            allSplatBuffers.push(...splatBuffers);\r\n            allSplatBufferOptions.push(...splatBufferOptions);\r\n            if (this.renderer) this.splatMesh.setRenderer(this.renderer);\r\n            const onSplatTreeIndexesUpload = (finished) => {\r\n                if (this.isDisposingOrDisposed()) return;\r\n                const splatCount = this.splatMesh.getSplatCount();\r\n                if (showLoadingUIForSplatTreeBuild && splatCount >= MIN_SPLAT_COUNT_TO_SHOW_SPLAT_TREE_LOADING_SPINNER) {\r\n                    if (!finished && !splatOptimizingTaskId) {\r\n                        this.loadingSpinner.setMinimized(true, true);\r\n                        splatOptimizingTaskId = this.loadingSpinner.addTask('Optimizing data structures...');\r\n                    }\r\n                }\r\n            };\r\n            const onSplatTreeReady = (finished) => {\r\n                if (this.isDisposingOrDisposed()) return;\r\n                if (finished && splatOptimizingTaskId) {\r\n                    this.loadingSpinner.removeTask(splatOptimizingTaskId);\r\n                    splatOptimizingTaskId = null;\r\n                }\r\n            };\r\n            const buildResults = this.splatMesh.build(allSplatBuffers, allSplatBufferOptions, true, finalBuild, onSplatTreeIndexesUpload,\r\n                                                      onSplatTreeReady, preserveVisibleRegion);\r\n            if (finalBuild && this.freeIntermediateSplatData) this.splatMesh.freeIntermediateSplatData();\r\n            return buildResults;\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Set up the splat sorting web worker.\r\n     * @param {SplatMesh} splatMesh SplatMesh instance that contains the splats to be sorted\r\n     * @return {Promise}\r\n     */\r\n    setupSortWorker(splatMesh) {\r\n        if (this.isDisposingOrDisposed()) return;\r\n        return new Promise((resolve) => {\r\n            const DistancesArrayType = this.integerBasedSort ? Int32Array : Float32Array;\r\n            const splatCount = splatMesh.getSplatCount();\r\n            const maxSplatCount = splatMesh.getMaxSplatCount();\r\n            this.sortWorker = createSortWorker(maxSplatCount, this.sharedMemoryForWorkers, this.enableSIMDInSort,\r\n                                               this.integerBasedSort, this.splatMesh.dynamicMode, this.splatSortDistanceMapPrecision);\r\n            this.sortWorker.onmessage = (e) => {\r\n                if (e.data.sortDone) {\r\n                    this.sortRunning = false;\r\n                    if (this.sharedMemoryForWorkers) {\r\n                        this.splatMesh.updateRenderIndexes(this.sortWorkerSortedIndexes, e.data.splatRenderCount);\r\n                    } else {\r\n                        const sortedIndexes = new Uint32Array(e.data.sortedIndexes.buffer, 0, e.data.splatRenderCount);\r\n                        this.splatMesh.updateRenderIndexes(sortedIndexes, e.data.splatRenderCount);\r\n                    }\r\n\r\n                    this.lastSplatSortCount = this.splatSortCount;\r\n\r\n                    this.lastSortTime = e.data.sortTime;\r\n                    this.sortPromiseResolver();\r\n                    this.sortPromiseResolver = null;\r\n                    this.forceRenderNextFrame();\r\n                    if (this.runAfterNextSort.length > 0) {\r\n                        this.runAfterNextSort.forEach((func) => {\r\n                            func();\r\n                        });\r\n                        this.runAfterNextSort.length = 0;\r\n                    }\r\n                } else if (e.data.sortCanceled) {\r\n                    this.sortRunning = false;\r\n                } else if (e.data.sortSetupPhase1Complete) {\r\n                    if (this.logLevel >= LogLevel.Info) console.log('Sorting web worker WASM setup complete.');\r\n                    if (this.sharedMemoryForWorkers) {\r\n                        this.sortWorkerSortedIndexes = new Uint32Array(e.data.sortedIndexesBuffer,\r\n                                                                       e.data.sortedIndexesOffset, maxSplatCount);\r\n                        this.sortWorkerIndexesToSort = new Uint32Array(e.data.indexesToSortBuffer,\r\n                                                                       e.data.indexesToSortOffset, maxSplatCount);\r\n                        this.sortWorkerPrecomputedDistances = new DistancesArrayType(e.data.precomputedDistancesBuffer,\r\n                                                                                     e.data.precomputedDistancesOffset,\r\n                                                                                     maxSplatCount);\r\n                         this.sortWorkerTransforms = new Float32Array(e.data.transformsBuffer,\r\n                                                                      e.data.transformsOffset, Constants.MaxScenes * 16);\r\n                    } else {\r\n                        this.sortWorkerIndexesToSort = new Uint32Array(maxSplatCount);\r\n                        this.sortWorkerPrecomputedDistances = new DistancesArrayType(maxSplatCount);\r\n                        this.sortWorkerTransforms = new Float32Array(Constants.MaxScenes * 16);\r\n                    }\r\n                    for (let i = 0; i < splatCount; i++) this.sortWorkerIndexesToSort[i] = i;\r\n                    this.sortWorker.maxSplatCount = maxSplatCount;\r\n\r\n                    if (this.logLevel >= LogLevel.Info) {\r\n                        console.log('Sorting web worker ready.');\r\n                        const splatDataTextures = this.splatMesh.getSplatDataTextures();\r\n                        const covariancesTextureSize = splatDataTextures.covariances.size;\r\n                        const centersColorsTextureSize = splatDataTextures.centerColors.size;\r\n                        console.log('Covariances texture size: ' + covariancesTextureSize.x + ' x ' + covariancesTextureSize.y);\r\n                        console.log('Centers/colors texture size: ' + centersColorsTextureSize.x + ' x ' + centersColorsTextureSize.y);\r\n                    }\r\n\r\n                    resolve();\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    updateError(error, defaultMessage) {\r\n        if (error instanceof AbortedPromiseError) return error;\r\n        if (error instanceof DirectLoadError) {\r\n            return new Error('File type or server does not support progressive loading.');\r\n        }\r\n        return defaultMessage ? new Error(defaultMessage) : error;\r\n    }\r\n\r\n    disposeSortWorker() {\r\n        if (this.sortWorker) this.sortWorker.terminate();\r\n        this.sortWorker = null;\r\n        this.sortPromise = null;\r\n        if (this.sortPromiseResolver) {\r\n            this.sortPromiseResolver();\r\n            this.sortPromiseResolver = null;\r\n        }\r\n        this.preSortMessages = [];\r\n        this.sortRunning = false;\r\n    }\r\n\r\n    removeSplatScene(indexToRemove, showLoadingUI = true) {\r\n        return this.removeSplatScenes([indexToRemove], showLoadingUI);\r\n    }\r\n\r\n    removeSplatScenes(indexesToRemove, showLoadingUI = true) {\r\n        if (this.isLoadingOrUnloading()) {\r\n            throw new Error('Cannot remove splat scene while another load or unload is already in progress.');\r\n        }\r\n\r\n        if (this.isDisposingOrDisposed()) {\r\n            throw new Error('Cannot remove splat scene after dispose() is called.');\r\n        }\r\n\r\n        let sortPromise;\r\n\r\n        this.splatSceneRemovalPromise = new Promise((resolve, reject) => {\r\n            let revmovalTaskId;\r\n\r\n            if (showLoadingUI) {\r\n                this.loadingSpinner.removeAllTasks();\r\n                this.loadingSpinner.show();\r\n                revmovalTaskId = this.loadingSpinner.addTask('Removing splat scene...');\r\n            }\r\n\r\n            const checkAndHideLoadingUI = () => {\r\n                if (showLoadingUI) {\r\n                    this.loadingSpinner.hide();\r\n                    this.loadingSpinner.removeTask(revmovalTaskId);\r\n                }\r\n            };\r\n\r\n            const onDone = (error) => {\r\n                checkAndHideLoadingUI();\r\n                this.splatSceneRemovalPromise = null;\r\n                if (!error) resolve();\r\n                else reject(error);\r\n            };\r\n\r\n            const checkForEarlyExit = () => {\r\n                if (this.isDisposingOrDisposed()) {\r\n                    onDone();\r\n                    return true;\r\n                }\r\n                return false;\r\n            };\r\n\r\n            sortPromise = this.sortPromise || Promise.resolve();\r\n            sortPromise.then(() => {\r\n                if (checkForEarlyExit()) return;\r\n                const savedSplatBuffers = [];\r\n                const savedSceneOptions = [];\r\n                const savedSceneTransformComponents = [];\r\n                for (let i = 0; i < this.splatMesh.scenes.length; i++) {\r\n                    let shouldRemove = false;\r\n                    for (let indexToRemove of indexesToRemove) {\r\n                        if (indexToRemove === i) {\r\n                            shouldRemove = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!shouldRemove) {\r\n                        const scene = this.splatMesh.scenes[i];\r\n                        savedSplatBuffers.push(scene.splatBuffer);\r\n                        savedSceneOptions.push(this.splatMesh.sceneOptions[i]);\r\n                        savedSceneTransformComponents.push({\r\n                            'position': scene.position.clone(),\r\n                            'quaternion': scene.quaternion.clone(),\r\n                            'scale': scene.scale.clone()\r\n                        });\r\n                    }\r\n                }\r\n                this.disposeSortWorker();\r\n                this.splatMesh.dispose();\r\n                this.sceneRevealMode = SceneRevealMode.Instant;\r\n                this.createSplatMesh();\r\n                this.addSplatBuffers(savedSplatBuffers, savedSceneOptions, true, false, true)\r\n                .then(() => {\r\n                    if (checkForEarlyExit()) return;\r\n                    checkAndHideLoadingUI();\r\n                    this.splatMesh.scenes.forEach((scene, index) => {\r\n                        scene.position.copy(savedSceneTransformComponents[index].position);\r\n                        scene.quaternion.copy(savedSceneTransformComponents[index].quaternion);\r\n                        scene.scale.copy(savedSceneTransformComponents[index].scale);\r\n                    });\r\n                    this.splatMesh.updateTransforms();\r\n                    this.splatRenderReady = false;\r\n\r\n                    this.runSplatSort(true)\r\n                    .then(() => {\r\n                        if (checkForEarlyExit()) {\r\n                            this.splatRenderReady = true;\r\n                            return;\r\n                        }\r\n                        sortPromise = this.sortPromise || Promise.resolve();\r\n                        sortPromise.then(() => {\r\n                            this.splatRenderReady = true;\r\n                            onDone();\r\n                        });\r\n                    });\r\n                })\r\n                .catch((e) => {\r\n                    onDone(e);\r\n                });\r\n            });\r\n        });\r\n\r\n        return this.splatSceneRemovalPromise;\r\n    }\r\n\r\n    /**\r\n     * Start self-driven mode\r\n     */\r\n    start() {\r\n        if (this.selfDrivenMode) {\r\n            if (this.webXRMode) {\r\n                this.renderer.setAnimationLoop(this.selfDrivenUpdateFunc);\r\n            } else {\r\n                this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\r\n            }\r\n            this.selfDrivenModeRunning = true;\r\n        } else {\r\n            throw new Error('Cannot start viewer unless it is in self driven mode.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stop self-driven mode\r\n     */\r\n    stop() {\r\n        if (this.selfDrivenMode && this.selfDrivenModeRunning) {\r\n            if (this.webXRMode) {\r\n                this.renderer.setAnimationLoop(null);\r\n            } else {\r\n                cancelAnimationFrame(this.requestFrameId);\r\n            }\r\n            this.selfDrivenModeRunning = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose of all resources held directly and indirectly by this viewer.\r\n     */\r\n    async dispose() {\r\n        if (this.isDisposingOrDisposed()) return this.disposePromise;\r\n\r\n        let waitPromises = [];\r\n        let promisesToAbort = [];\r\n        for (let promiseKey in this.splatSceneDownloadPromises) {\r\n            if (this.splatSceneDownloadPromises.hasOwnProperty(promiseKey)) {\r\n                const downloadPromiseToAbort = this.splatSceneDownloadPromises[promiseKey];\r\n                promisesToAbort.push(downloadPromiseToAbort);\r\n                waitPromises.push(downloadPromiseToAbort.promise);\r\n            }\r\n        }\r\n        if (this.sortPromise) {\r\n            waitPromises.push(this.sortPromise);\r\n        }\r\n\r\n        this.disposing = true;\r\n        this.disposePromise = Promise.all(waitPromises).finally(() => {\r\n            this.stop();\r\n            if (this.orthographicControls) {\r\n                this.orthographicControls.dispose();\r\n                this.orthographicControls = null;\r\n            }\r\n            if (this.perspectiveControls) {\r\n                this.perspectiveControls.dispose();\r\n                this.perspectiveControls = null;\r\n            }\r\n            this.controls = null;\r\n            if (this.splatMesh) {\r\n                this.splatMesh.dispose();\r\n                this.splatMesh = null;\r\n            }\r\n            if (this.sceneHelper) {\r\n                this.sceneHelper.dispose();\r\n                this.sceneHelper = null;\r\n            }\r\n            if (this.resizeObserver) {\r\n                this.resizeObserver.unobserve(this.rootElement);\r\n                this.resizeObserver = null;\r\n            }\r\n            this.disposeSortWorker();\r\n            this.removeEventHandlers();\r\n\r\n            this.loadingSpinner.removeAllTasks();\r\n            this.loadingSpinner.setContainer(null);\r\n            this.loadingProgressBar.hide();\r\n            this.loadingProgressBar.setContainer(null);\r\n            this.infoPanel.setContainer(null);\r\n\r\n            this.camera = null;\r\n            this.threeScene = null;\r\n            this.splatRenderReady = false;\r\n            this.initialized = false;\r\n            if (this.renderer) {\r\n                if (!this.usingExternalRenderer) {\r\n                    this.rootElement.removeChild(this.renderer.domElement);\r\n                    this.renderer.dispose();\r\n                }\r\n                this.renderer = null;\r\n            }\r\n\r\n            if (!this.usingExternalRenderer) {\r\n                document.body.removeChild(this.rootElement);\r\n            }\r\n\r\n            this.sortWorkerSortedIndexes = null;\r\n            this.sortWorkerIndexesToSort = null;\r\n            this.sortWorkerPrecomputedDistances = null;\r\n            this.sortWorkerTransforms = null;\r\n            this.disposed = true;\r\n            this.disposing = false;\r\n            this.disposePromise = null;\r\n        });\r\n        promisesToAbort.forEach((toAbort) => {\r\n            toAbort.abort('Scene disposed');\r\n        });\r\n        return this.disposePromise;\r\n    }\r\n\r\n    selfDrivenUpdate() {\r\n        if (this.selfDrivenMode && !this.webXRMode) {\r\n            this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\r\n        }\r\n        this.update();\r\n        if (this.shouldRender()) {\r\n            this.render();\r\n            this.consecutiveRenderFrames++;\r\n        } else {\r\n            this.consecutiveRenderFrames = 0;\r\n        }\r\n        this.renderNextFrame = false;\r\n    }\r\n\r\n    forceRenderNextFrame() {\r\n        this.renderNextFrame = true;\r\n    }\r\n\r\n    shouldRender = function() {\r\n\r\n        let renderCount = 0;\r\n        const lastCameraPosition = new THREE.Vector3();\r\n        const lastCameraOrientation = new THREE.Quaternion();\r\n        const changeEpsilon = 0.0001;\r\n\r\n        return function() {\r\n            if (!this.initialized || !this.splatRenderReady || this.isDisposingOrDisposed()) return false;\r\n\r\n            let shouldRender = false;\r\n            let cameraChanged = false;\r\n            if (this.camera) {\r\n                const cp = this.camera.position;\r\n                const co = this.camera.quaternion;\r\n                cameraChanged = Math.abs(cp.x - lastCameraPosition.x) > changeEpsilon ||\r\n                                Math.abs(cp.y - lastCameraPosition.y) > changeEpsilon ||\r\n                                Math.abs(cp.z - lastCameraPosition.z) > changeEpsilon ||\r\n                                Math.abs(co.x - lastCameraOrientation.x) > changeEpsilon ||\r\n                                Math.abs(co.y - lastCameraOrientation.y) > changeEpsilon ||\r\n                                Math.abs(co.z - lastCameraOrientation.z) > changeEpsilon ||\r\n                                Math.abs(co.w - lastCameraOrientation.w) > changeEpsilon;\r\n            }\r\n\r\n            shouldRender = this.renderMode !== RenderMode.Never && (renderCount === 0 || this.splatMesh.visibleRegionChanging ||\r\n                           cameraChanged || this.renderMode === RenderMode.Always || this.dynamicMode === true || this.renderNextFrame);\r\n\r\n            if (this.camera) {\r\n                lastCameraPosition.copy(this.camera.position);\r\n                lastCameraOrientation.copy(this.camera.quaternion);\r\n            }\r\n\r\n            renderCount++;\r\n            return shouldRender;\r\n        };\r\n\r\n    }();\r\n\r\n    render = function() {\r\n\r\n        return function() {\r\n            if (!this.initialized || !this.splatRenderReady || this.isDisposingOrDisposed()) return;\r\n\r\n            const hasRenderables = (threeScene) => {\r\n                for (let child of threeScene.children) {\r\n                    if (child.visible) return true;\r\n                }\r\n                return false;\r\n            };\r\n\r\n            const savedAuoClear = this.renderer.autoClear;\r\n            if (hasRenderables(this.threeScene)) {\r\n                this.renderer.render(this.threeScene, this.camera);\r\n                this.renderer.autoClear = false;\r\n            }\r\n            this.renderer.render(this.splatMesh, this.camera);\r\n            this.renderer.autoClear = false;\r\n            if (this.sceneHelper.getFocusMarkerOpacity() > 0.0) this.renderer.render(this.sceneHelper.focusMarker, this.camera);\r\n            if (this.showControlPlane) this.renderer.render(this.sceneHelper.controlPlane, this.camera);\r\n            this.renderer.autoClear = savedAuoClear;\r\n        };\r\n\r\n    }();\r\n\r\n    update(renderer, camera) {\r\n        if (this.dropInMode) this.updateForDropInMode(renderer, camera);\r\n\r\n        if (!this.initialized || !this.splatRenderReady || this.isDisposingOrDisposed()) return;\r\n\r\n        if (this.controls) {\r\n            this.controls.update();\r\n            if (this.camera.isOrthographicCamera && !this.usingExternalCamera) {\r\n                Viewer.setCameraPositionFromZoom(this.camera, this.camera, this.controls);\r\n            }\r\n        }\r\n        this.runSplatSort();\r\n        this.updateForRendererSizeChanges();\r\n        this.updateSplatMesh();\r\n        this.updateMeshCursor();\r\n        this.updateFPS();\r\n        this.timingSensitiveUpdates();\r\n        this.updateInfoPanel();\r\n        this.updateControlPlane();\r\n    }\r\n\r\n    updateForDropInMode(renderer, camera) {\r\n        this.renderer = renderer;\r\n        if (this.splatMesh) this.splatMesh.setRenderer(this.renderer);\r\n        this.camera = camera;\r\n        if (this.controls) this.controls.object = camera;\r\n        this.init();\r\n    }\r\n\r\n    updateFPS = function() {\r\n\r\n        let lastCalcTime = getCurrentTime();\r\n        let frameCount = 0;\r\n\r\n        return function() {\r\n            if (this.consecutiveRenderFrames > CONSECUTIVE_RENDERED_FRAMES_FOR_FPS_CALCULATION) {\r\n                const currentTime = getCurrentTime();\r\n                const calcDelta = currentTime - lastCalcTime;\r\n                if (calcDelta >= 1.0) {\r\n                    this.currentFPS = frameCount;\r\n                    frameCount = 0;\r\n                    lastCalcTime = currentTime;\r\n                } else {\r\n                    frameCount++;\r\n                }\r\n            } else {\r\n                this.currentFPS = null;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateForRendererSizeChanges = function() {\r\n\r\n        const lastRendererSize = new THREE.Vector2();\r\n        const currentRendererSize = new THREE.Vector2();\r\n        let lastCameraOrthographic;\r\n\r\n        return function() {\r\n            if (!this.usingExternalCamera) {\r\n                this.renderer.getSize(currentRendererSize);\r\n                if (lastCameraOrthographic === undefined || lastCameraOrthographic !== this.camera.isOrthographicCamera ||\r\n                    currentRendererSize.x !== lastRendererSize.x || currentRendererSize.y !== lastRendererSize.y) {\r\n                    if (this.camera.isOrthographicCamera) {\r\n                        this.camera.left = -currentRendererSize.x / 2.0;\r\n                        this.camera.right = currentRendererSize.x / 2.0;\r\n                        this.camera.top = currentRendererSize.y / 2.0;\r\n                        this.camera.bottom = -currentRendererSize.y / 2.0;\r\n                    } else {\r\n                        this.camera.aspect = currentRendererSize.x / currentRendererSize.y;\r\n                    }\r\n                    this.camera.updateProjectionMatrix();\r\n                    lastRendererSize.copy(currentRendererSize);\r\n                    lastCameraOrthographic = this.camera.isOrthographicCamera;\r\n                }\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    timingSensitiveUpdates = function() {\r\n\r\n        let lastUpdateTime;\r\n\r\n        return function() {\r\n            const currentTime = getCurrentTime();\r\n            if (!lastUpdateTime) lastUpdateTime = currentTime;\r\n            const timeDelta = currentTime - lastUpdateTime;\r\n\r\n            this.updateCameraTransition(currentTime);\r\n            this.updateFocusMarker(timeDelta);\r\n\r\n            lastUpdateTime = currentTime;\r\n        };\r\n\r\n    }();\r\n\r\n    updateCameraTransition = function() {\r\n\r\n        let tempCameraTarget = new THREE.Vector3();\r\n        let toPreviousTarget = new THREE.Vector3();\r\n        let toNextTarget = new THREE.Vector3();\r\n\r\n        return function(currentTime) {\r\n            if (this.transitioningCameraTarget) {\r\n                toPreviousTarget.copy(this.previousCameraTarget).sub(this.camera.position).normalize();\r\n                toNextTarget.copy(this.nextCameraTarget).sub(this.camera.position).normalize();\r\n                const rotationAngle = Math.acos(toPreviousTarget.dot(toNextTarget));\r\n                const rotationSpeed = rotationAngle / (Math.PI / 3) * .65 + .3;\r\n                const t = (rotationSpeed / rotationAngle * (currentTime - this.transitioningCameraTargetStartTime));\r\n                tempCameraTarget.copy(this.previousCameraTarget).lerp(this.nextCameraTarget, t);\r\n                this.camera.lookAt(tempCameraTarget);\r\n                this.controls.target.copy(tempCameraTarget);\r\n                if (t >= 1.0) {\r\n                    this.transitioningCameraTarget = false;\r\n                }\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateFocusMarker = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n        let wasTransitioning = false;\r\n\r\n        return function(timeDelta) {\r\n            this.getRenderDimensions(renderDimensions);\r\n            if (this.transitioningCameraTarget) {\r\n                this.sceneHelper.setFocusMarkerVisibility(true);\r\n                const currentFocusMarkerOpacity = Math.max(this.sceneHelper.getFocusMarkerOpacity(), 0.0);\r\n                let newFocusMarkerOpacity = Math.min(currentFocusMarkerOpacity + FOCUS_MARKER_FADE_IN_SPEED * timeDelta, 1.0);\r\n                this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\r\n                this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\r\n                wasTransitioning = true;\r\n                this.forceRenderNextFrame();\r\n            } else {\r\n                let currentFocusMarkerOpacity;\r\n                if (wasTransitioning) currentFocusMarkerOpacity = 1.0;\r\n                else currentFocusMarkerOpacity = Math.min(this.sceneHelper.getFocusMarkerOpacity(), 1.0);\r\n                if (currentFocusMarkerOpacity > 0) {\r\n                    this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\r\n                    let newFocusMarkerOpacity = Math.max(currentFocusMarkerOpacity - FOCUS_MARKER_FADE_OUT_SPEED * timeDelta, 0.0);\r\n                    this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\r\n                    if (newFocusMarkerOpacity === 0.0) this.sceneHelper.setFocusMarkerVisibility(false);\r\n                }\r\n                if (currentFocusMarkerOpacity > 0.0) this.forceRenderNextFrame();\r\n                wasTransitioning = false;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateMeshCursor = function() {\r\n\r\n        const outHits = [];\r\n        const renderDimensions = new THREE.Vector2();\r\n\r\n        return function() {\r\n            if (this.showMeshCursor) {\r\n                this.forceRenderNextFrame();\r\n                this.getRenderDimensions(renderDimensions);\r\n                outHits.length = 0;\r\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\r\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\r\n                if (outHits.length > 0) {\r\n                    this.sceneHelper.setMeshCursorVisibility(true);\r\n                    this.sceneHelper.positionAndOrientMeshCursor(outHits[0].origin, this.camera);\r\n                } else {\r\n                    this.sceneHelper.setMeshCursorVisibility(false);\r\n                }\r\n            } else {\r\n                if (this.sceneHelper.getMeschCursorVisibility()) this.forceRenderNextFrame();\r\n                this.sceneHelper.setMeshCursorVisibility(false);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateInfoPanel = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n\r\n        return function() {\r\n            if (!this.showInfo) return;\r\n            const splatCount = this.splatMesh.getSplatCount();\r\n            this.getRenderDimensions(renderDimensions);\r\n            const cameraLookAtPosition = this.controls ? this.controls.target : null;\r\n            const meshCursorPosition = this.showMeshCursor ? this.sceneHelper.meshCursor.position : null;\r\n            const splatRenderCountPct = splatCount > 0 ? this.splatRenderCount / splatCount * 100 : 0;\r\n            this.infoPanel.update(renderDimensions, this.camera.position, cameraLookAtPosition,\r\n                                  this.camera.up, this.camera.isOrthographicCamera, meshCursorPosition,\r\n                                  this.currentFPS || 'N/A', splatCount, this.splatRenderCount, splatRenderCountPct,\r\n                                  this.lastSortTime, this.focalAdjustment, this.splatMesh.getSplatScale(),\r\n                                  this.splatMesh.getPointCloudModeEnabled());\r\n        };\r\n\r\n    }();\r\n\r\n    updateControlPlane() {\r\n        if (this.showControlPlane) {\r\n            this.sceneHelper.setControlPlaneVisibility(true);\r\n            this.sceneHelper.positionAndOrientControlPlane(this.controls.target, this.camera.up);\r\n        } else {\r\n            this.sceneHelper.setControlPlaneVisibility(false);\r\n        }\r\n    }\r\n\r\n    runSplatSort = function() {\r\n\r\n        const mvpMatrix = new THREE.Matrix4();\r\n        const cameraPositionArray = [];\r\n        const lastSortViewDir = new THREE.Vector3(0, 0, -1);\r\n        const sortViewDir = new THREE.Vector3(0, 0, -1);\r\n        const lastSortViewPos = new THREE.Vector3();\r\n        const sortViewOffset = new THREE.Vector3();\r\n        const queuedSorts = [];\r\n\r\n        const partialSorts = [\r\n            {\r\n                'angleThreshold': 0.55,\r\n                'sortFractions': [0.125, 0.33333, 0.75]\r\n            },\r\n            {\r\n                'angleThreshold': 0.65,\r\n                'sortFractions': [0.33333, 0.66667]\r\n            },\r\n            {\r\n                'angleThreshold': 0.8,\r\n                'sortFractions': [0.5]\r\n            }\r\n        ];\r\n\r\n        return function(force = false, forceSortAll = false) {\r\n            if (!this.initialized) return Promise.resolve(false);\r\n            if (this.sortRunning) return Promise.resolve(true);\r\n            if (this.splatMesh.getSplatCount() <= 0) {\r\n                this.splatRenderCount = 0;\r\n                return Promise.resolve(false);\r\n            }\r\n\r\n            let angleDiff = 0;\r\n            let positionDiff = 0;\r\n            let needsRefreshForRotation = false;\r\n            let needsRefreshForPosition = false;\r\n\r\n            sortViewDir.set(0, 0, -1).applyQuaternion(this.camera.quaternion);\r\n            angleDiff = sortViewDir.dot(lastSortViewDir);\r\n            positionDiff = sortViewOffset.copy(this.camera.position).sub(lastSortViewPos).length();\r\n\r\n            if (!force) {\r\n                if (!this.splatMesh.dynamicMode && queuedSorts.length === 0) {\r\n                    if (angleDiff <= 0.99) needsRefreshForRotation = true;\r\n                    if (positionDiff >= 1.0) needsRefreshForPosition = true;\r\n                    if (!needsRefreshForRotation && !needsRefreshForPosition) return Promise.resolve(false);\r\n                }\r\n            }\r\n\r\n            this.sortRunning = true;\r\n            let { splatRenderCount, shouldSortAll } = this.gatherSceneNodesForSort();\r\n            shouldSortAll = shouldSortAll || forceSortAll;\r\n            this.splatRenderCount = splatRenderCount;\r\n\r\n            mvpMatrix.copy(this.camera.matrixWorld).invert();\r\n            const mvpCamera = this.perspectiveCamera || this.camera;\r\n            mvpMatrix.premultiply(mvpCamera.projectionMatrix);\r\n            if (!this.splatMesh.dynamicMode) mvpMatrix.multiply(this.splatMesh.matrixWorld);\r\n\r\n            let gpuAcceleratedSortPromise = Promise.resolve(true);\r\n            if (this.gpuAcceleratedSort && (queuedSorts.length <= 1 || queuedSorts.length % 2 === 0)) {\r\n                gpuAcceleratedSortPromise = this.splatMesh.computeDistancesOnGPU(mvpMatrix, this.sortWorkerPrecomputedDistances);\r\n            }\r\n\r\n            gpuAcceleratedSortPromise.then(() => {\r\n                if (queuedSorts.length === 0) {\r\n                    if (this.splatMesh.dynamicMode || shouldSortAll) {\r\n                        queuedSorts.push(this.splatRenderCount);\r\n                    } else {\r\n                            for (let partialSort of partialSorts) {\r\n                            if (angleDiff < partialSort.angleThreshold) {\r\n                                for (let sortFraction of partialSort.sortFractions) {\r\n                                    queuedSorts.push(Math.floor(this.splatRenderCount * sortFraction));\r\n                                }\r\n                                break;\r\n                            }\r\n                        }\r\n                        queuedSorts.push(this.splatRenderCount);\r\n                    }\r\n                }\r\n                let sortCount = Math.min(queuedSorts.shift(), this.splatRenderCount);\r\n                this.splatSortCount = sortCount;\r\n\r\n                cameraPositionArray[0] = this.camera.position.x;\r\n                cameraPositionArray[1] = this.camera.position.y;\r\n                cameraPositionArray[2] = this.camera.position.z;\r\n\r\n                const sortMessage = {\r\n                    'modelViewProj': mvpMatrix.elements,\r\n                    'cameraPosition': cameraPositionArray,\r\n                    'splatRenderCount': this.splatRenderCount,\r\n                    'splatSortCount': sortCount,\r\n                    'usePrecomputedDistances': this.gpuAcceleratedSort\r\n                };\r\n                if (this.splatMesh.dynamicMode) {\r\n                    this.splatMesh.fillTransformsArray(this.sortWorkerTransforms);\r\n                }\r\n                if (!this.sharedMemoryForWorkers) {\r\n                    sortMessage.indexesToSort = this.sortWorkerIndexesToSort;\r\n                    sortMessage.transforms = this.sortWorkerTransforms;\r\n                    if (this.gpuAcceleratedSort) {\r\n                        sortMessage.precomputedDistances = this.sortWorkerPrecomputedDistances;\r\n                    }\r\n                }\r\n\r\n                this.sortPromise = new Promise((resolve) => {\r\n                    this.sortPromiseResolver = resolve;\r\n                });\r\n\r\n                if (this.preSortMessages.length > 0) {\r\n                    this.preSortMessages.forEach((message) => {\r\n                        this.sortWorker.postMessage(message);\r\n                    });\r\n                    this.preSortMessages = [];\r\n                }\r\n                this.sortWorker.postMessage({\r\n                    'sort': sortMessage\r\n                });\r\n\r\n                if (queuedSorts.length === 0) {\r\n                    lastSortViewPos.copy(this.camera.position);\r\n                    lastSortViewDir.copy(sortViewDir);\r\n                }\r\n\r\n                return true;\r\n            });\r\n\r\n            return gpuAcceleratedSortPromise;\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Determine which splats to render by checking which are inside or close to the view frustum\r\n     */\r\n    gatherSceneNodesForSort = function() {\r\n\r\n        const nodeRenderList = [];\r\n        let allSplatsSortBuffer = null;\r\n        const tempVectorYZ = new THREE.Vector3();\r\n        const tempVectorXZ = new THREE.Vector3();\r\n        const tempVector = new THREE.Vector3();\r\n        const modelView = new THREE.Matrix4();\r\n        const baseModelView = new THREE.Matrix4();\r\n        const sceneTransform = new THREE.Matrix4();\r\n        const renderDimensions = new THREE.Vector3();\r\n        const forward = new THREE.Vector3(0, 0, -1);\r\n\r\n        const tempMax = new THREE.Vector3();\r\n        const nodeSize = (node) => {\r\n            return tempMax.copy(node.max).sub(node.min).length();\r\n        };\r\n\r\n        return function(gatherAllNodes = false) {\r\n\r\n            this.getRenderDimensions(renderDimensions);\r\n            const cameraFocalLength = (renderDimensions.y / 2.0) / Math.tan(this.camera.fov / 2.0 * THREE.MathUtils.DEG2RAD);\r\n            const fovXOver2 = Math.atan(renderDimensions.x / 2.0 / cameraFocalLength);\r\n            const fovYOver2 = Math.atan(renderDimensions.y / 2.0 / cameraFocalLength);\r\n            const cosFovXOver2 = Math.cos(fovXOver2);\r\n            const cosFovYOver2 = Math.cos(fovYOver2);\r\n\r\n            const splatTree = this.splatMesh.getSplatTree();\r\n\r\n            if (splatTree) {\r\n                baseModelView.copy(this.camera.matrixWorld).invert();\r\n                if (!this.splatMesh.dynamicMode) baseModelView.multiply(this.splatMesh.matrixWorld);\r\n\r\n                let nodeRenderCount = 0;\r\n                let splatRenderCount = 0;\r\n\r\n                for (let s = 0; s < splatTree.subTrees.length; s++) {\r\n                    const subTree = splatTree.subTrees[s];\r\n                    modelView.copy(baseModelView);\r\n                    if (this.splatMesh.dynamicMode) {\r\n                        this.splatMesh.getSceneTransform(s, sceneTransform);\r\n                        modelView.multiply(sceneTransform);\r\n                    }\r\n                    const nodeCount = subTree.nodesWithIndexes.length;\r\n                    for (let i = 0; i < nodeCount; i++) {\r\n                        const node = subTree.nodesWithIndexes[i];\r\n                        if (!node.data || !node.data.indexes || node.data.indexes.length === 0) continue;\r\n                        tempVector.copy(node.center).applyMatrix4(modelView);\r\n\r\n                        const distanceToNode = tempVector.length();\r\n                        tempVector.normalize();\r\n\r\n                        tempVectorYZ.copy(tempVector).setX(0).normalize();\r\n                        tempVectorXZ.copy(tempVector).setY(0).normalize();\r\n\r\n                        const cameraAngleXZDot = forward.dot(tempVectorXZ);\r\n                        const cameraAngleYZDot = forward.dot(tempVectorYZ);\r\n\r\n                        const ns = nodeSize(node);\r\n                        const outOfFovY = cameraAngleYZDot < (cosFovYOver2 - .6);\r\n                        const outOfFovX = cameraAngleXZDot < (cosFovXOver2 - .6);\r\n                        if (!gatherAllNodes && ((outOfFovX || outOfFovY) && distanceToNode > ns)) {\r\n                            continue;\r\n                        }\r\n                        splatRenderCount += node.data.indexes.length;\r\n                        nodeRenderList[nodeRenderCount] = node;\r\n                        node.data.distanceToNode = distanceToNode;\r\n                        nodeRenderCount++;\r\n                    }\r\n                }\r\n\r\n                nodeRenderList.length = nodeRenderCount;\r\n                nodeRenderList.sort((a, b) => {\r\n                    if (a.data.distanceToNode < b.data.distanceToNode) return -1;\r\n                    else return 1;\r\n                });\r\n\r\n                let currentByteOffset = splatRenderCount * Constants.BytesPerInt;\r\n                for (let i = 0; i < nodeRenderCount; i++) {\r\n                    const node = nodeRenderList[i];\r\n                    const windowSizeInts = node.data.indexes.length;\r\n                    const windowSizeBytes = windowSizeInts * Constants.BytesPerInt;\r\n                    let destView = new Uint32Array(this.sortWorkerIndexesToSort.buffer,\r\n                                                   currentByteOffset - windowSizeBytes, windowSizeInts);\r\n                    destView.set(node.data.indexes);\r\n                    currentByteOffset -= windowSizeBytes;\r\n                }\r\n\r\n                return {\r\n                    'splatRenderCount': splatRenderCount,\r\n                    'shouldSortAll': false\r\n                };\r\n            } else {\r\n                const totalSplatCount = this.splatMesh.getSplatCount();\r\n                if (!allSplatsSortBuffer || allSplatsSortBuffer.length !== totalSplatCount) {\r\n                    allSplatsSortBuffer = new Uint32Array(totalSplatCount);\r\n                    for (let i = 0; i < totalSplatCount; i++) {\r\n                        allSplatsSortBuffer[i] = i;\r\n                    }\r\n                }\r\n                this.sortWorkerIndexesToSort.set(allSplatsSortBuffer);\r\n                return {\r\n                    'splatRenderCount': totalSplatCount,\r\n                    'shouldSortAll': true\r\n                };\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    getSplatMesh() {\r\n        return this.splatMesh;\r\n    }\r\n\r\n    /**\r\n     * Get a reference to a splat scene.\r\n     * @param {number} sceneIndex The index of the scene to which the reference will be returned\r\n     * @return {SplatScene}\r\n     */\r\n    getSplatScene(sceneIndex) {\r\n        return this.splatMesh.getScene(sceneIndex);\r\n    }\r\n\r\n    getSceneCount() {\r\n        return this.splatMesh.getSceneCount();\r\n    }\r\n\r\n    isMobile() {\r\n        return navigator.userAgent.includes('Mobi');\r\n    }\r\n}\r\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u0017\u0002`\u0000\u0000`\u0010\u0000\u0002\u000f\u0001\u0003env\u0006memory\u0002\u0000\u0000\u0003\u0003\u0002\u0000\u0001\u0007>\u0003\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\n�\u000f\u0002\u0002\u0000\u000b�\u000f\u0004\u0001|\u0003{\u0007}\u0003 \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00016\u0002\u0000 \u0001 \n \u0001 \nH\u001b!\n \u0001 \r \u0001 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001cj(\u0002\u0000\"\u001dA\u0002tj(\u0002\u0000\"\u001bG\u0004@\u0002 \u0005�\t\u00028 \b \u001bA\u0006tj\"\u000e�\t\u0002\f \u000e*\u0002\u001c� \u0001 \u000e*\u0002,� \u0002 \u000e*\u0002<� \u0003��\u0001 \u0005�\t\u0002( \u000e�\t\u0002\b \u000e*\u0002\u0018� \u0001 \u000e*\u0002(� \u0002 \u000e*\u00028� \u0003��\u0001 \u0005�\t\u0002\b \u000e�\t\u0002\u0000 \u000e*\u0002\u0010� \u0001 \u000e*\u0002 � \u0002 \u000e*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000e�\t\u0002\u0004 \u000e*\u0002\u0014� \u0001 \u000e*\u0002$� \u0002 \u000e*\u00024� \u0003��\u0001��\u0001��\u0001��\u0001\"\u0011�_�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@\"\u0012��\u0001\"\u0013�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0013�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u0011 \u000e�\u001c\u0001\u0002 \u0011 \u0011�\r\b\t\n\u000b\f\r\u000e\u000f\u0000\u0001\u0002\u0003\u0000\u0001\u0002\u0003�_ \u0012��\u0001\"\u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0002\u0002 \u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b�\u001c\u0003!\u0012 \u001b!\u000f\u000b \u0003 \u001cj \u0001 \u001dA\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j \u0011�\u001b\u0003j\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002\b��\u0014 \u0005*\u0002\u0018��\"\u0001�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@��\u0001\"\u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e\u0002 \u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0005A����\u0007!\nA����x!\r \u000b \fM\r\u0002�\u0011 \u000e�\u001c\u0001 \u0005�\u001c\u0002!\u0012 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0002j \u0001 \u0000 \u0002j(\u0002\u0000A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j\"\u00026\u0002\u0000 \u0002 \n \u0002 \nH\u001b!\n \u0002 \r \u0002 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j\u0002 \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0014 \u0005*\u0002\u0018!\u0015 \u0005*\u0002\b!\u0016A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0014 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0016 \u0002*\u0002\u0000� \u0015 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001bj(\u0002\u0000A\u0002t\"\u001cj(\u0002\u0000\"\u000eG\u0004@ \u0005*\u00028\"\u0014 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0015 \u000f*\u00028� \u0005*\u0002\b\"\u0016 \u000f*\u00020� \u0005*\u0002\u0018\"\u0017 \u000f*\u00024����!\u0018 \u0014 \u000f*\u0002,� \u0015 \u000f*\u0002(� \u0016 \u000f*\u0002 � \u0017 \u000f*\u0002$����!\u0019 \u0014 \u000f*\u0002\u001c� \u0015 \u000f*\u0002\u0018� \u0016 \u000f*\u0002\u0010� \u0017 \u000f*\u0002\u0014����!\u001a \u0014 \u000f*\u0002\f� \u0015 \u000f*\u0002\b� \u0016 \u000f*\u0002\u0000� \u0017 \u000f*\u0002\u0004����!\u0014 \u000e!\u000f\u000b \u0003 \u001bj\u0002 \u0018 \u0001 \u001cA\u0002tj\"\u000e*\u0002\f� \u0019 \u000e*\u0002\b� \u0014 \u000e*\u0002\u0000� \u001a \u000e*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0014 \f!\r\u0003@\u0002 \u0014 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0015�C\u0000\u0000\u0000O]\u0004@ \u0015�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K \u0001!\n\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b","\u0000asm\u0001\u0000\u0000\u0000\u0000\u000f\bdylink.0\u0001\u0004\u0000\u0000\u0000\u0000\u0001\u0017\u0002`\u0000\u0000`\u0010\u0000\u0002\u000f\u0001\u0003env\u0006memory\u0002\u0000\u0000\u0003\u0003\u0002\u0000\u0001\u0007>\u0003\u0011__wasm_call_ctors\u0000\u0000\u0018__wasm_apply_data_relocs\u0000\u0000\u000bsortIndexes\u0000\u0001\n�\u000f\u0002\u0002\u0000\u000b�\u000f\u0003\u0001|\u0007}\u0006 \u000b \nk!\f\u0002@\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0003 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00016\u0002\u0000 \u0001 \n \u0001 \nH\u001b!\n \u0001 \r \u0001 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0003\u000b \u000f\u0004@ \u000b \fM\r\u0002A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u001aj(\u0002\u0000A\u0002t\"\u001bj(\u0002\u0000\"\u000eG\u0004@\u0002 \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0018\u0002 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0019\u0002 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001c\u0002 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u001d \u000e!\u000f\u000b \u0003 \u001aj \u0001 \u001bA\u0002tj\"\u000e(\u0002\u0004 \u001cl \u000e(\u0002\u0000 \u001dlj \u000e(\u0002\b \u0019lj \u000e(\u0002\f \u0018lj\"\u000e6\u0002\u0000 \u000e \n \n \u000eJ\u001b!\n \u000e \r \r \u000eH\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0003\u000b\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002\u0018�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0007 \u000b \fM\u0002 \u0005*\u0002\b�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000fA����\u0007!\nA����x!\r\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\bj \u0001 \u0000 \bj(\u0002\u0000A\u0004tj\"\b(\u0002\u0004 \u0007l \b(\u0002\u0000 \u000flj \b(\u0002\b \u0002lj\"\b6\u0002\u0000 \b \n \b \nH\u001b!\n \b \r \b \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \r\u0004@A����\u0007!\nA����x!\r \u000b \fM\r\u0002 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j\u0002 \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000fE\u0004@ \u000b \fM\r\u0001 \u0005*\u0002(!\u0011 \u0005*\u0002\u0018!\u0012 \u0005*\u0002\b!\u0013A����\u0007!\nA����x!\r \f!\u0005\u0003@\u0002 \u0011 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\b� \u0013 \u0002*\u0002\u0000� \u0012 \u0002*\u0002\u0004����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u000e \u0003 \u0007j \u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0002\u000b \u000b \fM\r\u0000A!\u000fA����\u0007!\nA����x!\r \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0018j(\u0002\u0000A\u0002t\"\u0019j(\u0002\u0000\"\u000eG\u0004@ \u0005*\u00028\"\u0011 \b \u000eA\u0006tj\"\u000f*\u0002<� \u0005*\u0002(\"\u0012 \u000f*\u00028� \u0005*\u0002\b\"\u0013 \u000f*\u00020� \u0005*\u0002\u0018\"\u0014 \u000f*\u00024����!\u0015 \u0011 \u000f*\u0002,� \u0012 \u000f*\u0002(� \u0013 \u000f*\u0002 � \u0014 \u000f*\u0002$����!\u0016 \u0011 \u000f*\u0002\u001c� \u0012 \u000f*\u0002\u0018� \u0013 \u000f*\u0002\u0010� \u0014 \u000f*\u0002\u0014����!\u0017 \u0011 \u000f*\u0002\f� \u0012 \u000f*\u0002\b� \u0013 \u000f*\u0002\u0000� \u0014 \u000f*\u0002\u0004����!\u0011 \u000e!\u000f\u000b \u0003 \u0018j\u0002 \u0015 \u0001 \u0019A\u0002tj\"\u000e*\u0002\f� \u0016 \u000e*\u0002\b� \u0011 \u000e*\u0002\u0000� \u0017 \u000e*\u0002\u0004�����D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\u000e6\u0002\u0000 \n \u000e \n \u000eH\u001b!\n \r \u000e \r \u000eJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000bA����x!\rA����\u0007!\n\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \n���!\u0011 \f!\r\u0003@\u0002 \u0011 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \nk��\"\u0012�C\u0000\u0000\u0000O]\u0004@ \u0012�\f\u0001\u000bA����x\u000b!\u000e \u0001 \u000e6\u0002\u0000 \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\n\u0003@ \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \nA\u0001j\"\n \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\n\u0003@ \u0006 \nA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \nA\u0001K \u0001!\n\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\n\u0003@ \u0006 \u000b \u0004 \u0003 \nA\u0001k\"\nA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \fJ\r\u0000\u000b\u000b\u000b","import * as THREE from 'three';\r\nimport { Viewer } from './Viewer.js';\r\n\r\n/**\r\n * DropInViewer: Wrapper for a Viewer instance that enables it to be added to a Three.js scene like\r\n * any other Three.js scene object (Mesh, Object3D, etc.)\r\n */\r\nexport class DropInViewer extends THREE.Group {\r\n\r\n    constructor(options = {}) {\r\n        super();\r\n\r\n        options.selfDrivenMode = false;\r\n        options.useBuiltInControls = false;\r\n        options.rootElement = null;\r\n        options.dropInMode = true;\r\n        options.camera = undefined;\r\n        options.renderer = undefined;\r\n\r\n        this.viewer = new Viewer(options);\r\n        this.splatMesh = null;\r\n        this.updateSplatMesh();\r\n\r\n        this.callbackMesh = DropInViewer.createCallbackMesh();\r\n        this.add(this.callbackMesh);\r\n        this.callbackMesh.onBeforeRender = DropInViewer.onBeforeRender.bind(this, this.viewer);\r\n\r\n        this.viewer.onSplatMeshChanged(() => {\r\n            this.updateSplatMesh();\r\n        });\r\n\r\n    }\r\n\r\n    updateSplatMesh() {\r\n        if (this.splatMesh !== this.viewer.splatMesh) {\r\n            if (this.splatMesh) {\r\n                this.remove(this.splatMesh);\r\n            }\r\n            this.splatMesh = this.viewer.splatMesh;\r\n            this.add(this.viewer.splatMesh);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a single splat scene to the viewer.\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {object} options {\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         showLoadingUI:         Display a loading spinner while the scene is loading, defaults to true\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     *\r\n     *         onProgress:                 Function to be called as file data are received\r\n     *\r\n     * }\r\n     * @return {AbortablePromise}\r\n     */\r\n    addSplatScene(path, options = {}) {\r\n        if (options.showLoadingUI !== false) options.showLoadingUI = true;\r\n        return this.viewer.addSplatScene(path, options);\r\n    }\r\n\r\n    /**\r\n     * Add multiple splat scenes to the viewer.\r\n     * @param {Array<object>} sceneOptions Array of per-scene options: {\r\n     *\r\n     *         path: Path to splat scene to be loaded\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     * }\r\n     * @param {boolean} showLoadingUI Display a loading spinner while the scene is loading, defaults to true\r\n     * @return {AbortablePromise}\r\n     */\r\n    addSplatScenes(sceneOptions, showLoadingUI) {\r\n        if (showLoadingUI !== false) showLoadingUI = true;\r\n        return this.viewer.addSplatScenes(sceneOptions, showLoadingUI);\r\n    }\r\n\r\n    /**\r\n     * Get a reference to a splat scene.\r\n     * @param {number} sceneIndex The index of the scene to which the reference will be returned\r\n     * @return {SplatScene}\r\n     */\r\n    getSplatScene(sceneIndex) {\r\n        return this.viewer.getSplatScene(sceneIndex);\r\n    }\r\n\r\n    removeSplatScene(index, showLoadingUI = true) {\r\n        return this.viewer.removeSplatScene(index, showLoadingUI);\r\n    }\r\n\r\n    removeSplatScenes(indexes, showLoadingUI = true) {\r\n        return this.viewer.removeSplatScenes(indexes, showLoadingUI);\r\n    }\r\n\r\n    getSceneCount() {\r\n        return this.viewer.getSceneCount();\r\n    }\r\n\r\n    setActiveSphericalHarmonicsDegrees(activeSphericalHarmonicsDegrees) {\r\n        this.viewer.setActiveSphericalHarmonicsDegrees(activeSphericalHarmonicsDegrees);\r\n    }\r\n\r\n    async dispose() {\r\n        return await this.viewer.dispose();\r\n    }\r\n\r\n    static onBeforeRender(viewer, renderer, threeScene, camera) {\r\n        viewer.update(renderer, camera);\r\n    }\r\n\r\n    static createCallbackMesh() {\r\n        const geometry = new THREE.SphereGeometry(1, 8, 8);\r\n        const material = new THREE.MeshBasicMaterial();\r\n        material.colorWrite = false;\r\n        material.depthWrite = false;\r\n        const mesh = new THREE.Mesh(geometry, material);\r\n        mesh.frustumCulled = false;\r\n        return mesh;\r\n    }\r\n\r\n}\r\n"],"names":["AbortablePromise","static","constructor","promiseFunc","abortHandler","resolver","rejecter","this","promise","Promise","resolve","reject","promiseResolve","bind","promiseReject","args","error","id","idGen","then","onResolve","onResolveResult","args2","catch","onFail","abort","reason","AbortedPromiseError","Error","msg","super","floatView","Float32Array","int32View","Int32Array","buffer","uintEncodedFloat","f","fetchWithProgress","path","onProgress","saveChunks","headers","abortController","AbortController","signal","aborted","onProgressCalledAtComplete","localOnProgress","percent","percentLabel","chunk","fileSize","fetchOptions","fetch","async","data","ok","errorText","text","status","statusText","reader","body","getReader","bytesDownloaded","_fileSize","get","parseInt","undefined","chunks","value","done","read","Blob","arrayBuffer","length","toFixed","push","clamp","val","min","max","Math","getCurrentTime","performance","now","disposeAllMeshes","object3D","geometry","dispose","material","children","child","delayedExecute","func","fast","window","setTimeout","getSphericalHarmonicsComponentCountForDegree","sphericalHarmonicsDegree","shCoeffPerSplat","nativePromiseWithExtractedComponents","abortablePromiseWithExtractedComponents","Semver","major","minor","patch","toString","isIOS","ua","navigator","userAgent","indexOf","getIOSSemever","extract","match","UncompressedSplatArray","X","Y","Z","SCALE0","SCALE1","SCALE2","ROTATION0","ROTATION1","ROTATION2","ROTATION3","FDC0","FDC1","FDC2","OPACITY","FRC0","FRC1","FRC2","FRC3","FRC4","FRC5","FRC6","FRC7","FRC8","FRC9","FRC10","FRC11","FRC12","FRC13","FRC14","FRC15","FRC16","FRC17","FRC18","FRC19","FRC20","FRC21","FRC22","FRC23","sphericalHarmonicsCount","componentCount","defaultSphericalHarmonics","Array","fill","splats","splatCount","createSplat","baseSplat","shEntries","i","addSplat","splat","getSplat","index","addDefaultSplat","newSplat","addSplatFromComonents","x","y","z","scale0","scale1","scale2","rot0","rot1","rot2","rot3","r","g","b","opacity","rest","addSplatFromArray","src","srcIndex","srcSplat","Constants","DefaultSphericalHarmonics8BitCompressionHalfRange","SphericalHarmonics8BitCompressionRange","toHalfFloat","THREE","DataUtils","fromHalfFloat","toUncompressedFloat","compressionLevel","isSH","range8BitMin","range8BitMax","fromUint8","toUint8","v","rangeMin","rangeMax","range","floor","fromHalfFloatToUint8","fromUint8ToHalfFloat","dataViewFloatForCompressionLevel","dataView","floatIndex","getFloat32","getUint16","getUint8","convertBetweenCompressionLevels","noop","fromLevel","toLevel","outputConversionFunc","copyBetweenBuffers","srcBuffer","srcOffset","destBuffer","destOffset","byteCount","Uint8Array","dest","SplatBuffer","BytesPerCenter","BytesPerScale","BytesPerRotation","BytesPerColor","ScaleOffsetBytes","RotationffsetBytes","ColorOffsetBytes","SphericalHarmonicsOffsetBytes","ScaleRange","BytesPerSphericalHarmonicsComponent","SphericalHarmonicsOffsetFloat","SphericalHarmonicsDegrees","BytesPerSplat","bufferData","secLoadedCountsToMax","constructFromBuffer","getSplatCount","getMaxSplatCount","maxSplatCount","getMinSphericalHarmonicsDegree","minSphericalHarmonicsDegree","sections","section","getBucketIndex","localSplatIndex","bucketIndex","maxSplatIndexInFullBuckets","fullBucketCount","bucketSize","bucketSplatIndex","partiallyFullBucketIndex","currentPartiallyFilledBucketSize","partiallyFilledBucketLengths","getSplatCenter","globalSplatIndex","outCenter","transform","sectionIndex","globalSplatIndexToSectionMap","splatCountOffset","srcSplatCentersBase","bytesPerSplat","DataView","dataBase","bucketBase","BucketStorageSizeFloats","sf","compressionScaleFactor","sr","compressionScaleRange","bucketArray","applyMatrix4","getSplatScaleAndRotation","scaleMatrix","Matrix4","rotationMatrix","tempMatrix","tempPosition","Vector3","scale","rotation","Quaternion","outScale","outRotation","scaleOverride","srcSplatScalesBase","CompressionLevels","set","makeScale","makeRotationFromQuaternion","copy","multiply","decompose","getSplatColor","outColor","srcSplatColorsBase","splatColorsArray","fillSplatCenterArray","outCenterArray","srcFrom","srcTo","destFrom","center","centerDestBase","CenterComponentCount","fillSplatScaleRotationArray","ensurePositiveW","quaternion","flip","w","outScaleArray","outRotationArray","desiredOutputCompressionLevel","outputConversion","srcCompressionLevel","scaleDestBase","ScaleComponentCount","rotationDestBase","RotationComponentCount","srcScaleX","srcScaleY","srcScaleZ","srcRotationW","srcRotationX","srcRotationY","srcRotationZ","normalize","identity","premultiply","tempMatrix4","Matrix3","covarianceMatrix","transformedCovariance","transform3x3","transform3x3Transpose","outCovariance","outOffset","setFromMatrix4","transpose","elements","fillSplatCovarianceArray","covarianceArray","covarianceDestBase","CovarianceComponentCount","computeCovariance","fillSplatColorArray","outColorArray","minimumAlpha","colorDestBase","ColorComponentCount","alpha","fillSphericalHarmonicsArray","sphericalHarmonicVectors","tempMatrix3","tempTranslation","tempScale","tempRotation","sh11","sh12","sh13","sh21","sh22","sh23","sh24","sh25","shIn1","shIn2","shIn3","shIn4","shIn5","shOut1","shOut2","shOut3","shOut4","shOut5","set3","array","val1","val2","val3","set3FromArray","srcDestView","stride","srcBase","copy3","srcArray","destArray","setOutput3","destBase","conversionFunc","toUncompressedFloatArray3","outSphericalHarmonicsArray","outSphericalHarmonicsDegree","localFromHalfFloatToUint8","minSphericalHarmonicsCoeff","maxSphericalHarmonicsCoeff","localToUint8","outSphericalHarmonicsComponentsCount","srcSplatSHBase","shDestBase","compressionLevelForOutputConversion","minShCoeff","maxShCoeff","rotateSphericalHarmonics3","rotateSphericalHarmonics5","v1","v2","v3","transformRow","outArray","t0","t1","t2","addInto3","v4","v5","t3","t4","in1","in2","in3","tsh11","tsh12","tsh13","out1","out2","out3","dot3","in4","in5","tsh21","tsh22","tsh23","tsh24","tsh25","out4","out5","kSqrt0104","sqrt","kSqrt0304","kSqrt0103","kSqrt0403","kSqrt0112","dot5","parseHeader","headerArrayUint8","HeaderSizeBytes","headerArrayUint16","Uint16Array","headerArrayUint32","Uint32Array","headerArrayFloat32","versionMajor","versionMinor","maxSectionCount","sectionCount","sceneCenter","writeHeaderCountsToBuffer","writeHeaderToBuffer","header","parseSectionHeaders","offset","sectionHeaderArrayUint16","SectionHeaderSizeBytes","sectionHeaderArrayUint32","sectionHeaderArrayFloat32","sectionHeaders","sectionHeaderBase","sectionHeaderBaseUint16","sectionHeaderBaseUint32","sectionBase","bucketCount","bucketBlockSize","halfBucketBlockSize","bucketStorageSizeBytes","partiallyFilledBucketCount","bucketsMetaDataSizeBytes","bucketsStorageSizeBytes","calculateComponentStorage","splatDataStorageSizeBytes","storageSizeBytes","sectionHeader","base","bucketsBase","writeSectionHeaderToBuffer","sectionHeadeArrayUint16","sectionHeadeArrayUint32","sectionHeadeArrayFloat32","BucketStorageSizeBytes","writeSectionHeaderSplatCountToBuffer","globalSplatIndexToLocalSplatIndexMap","linkBufferArrays","buildMaps","bytesPerCenter","bytesPerScale","bytesPerRotation","bytesPerColor","sphericalHarmonicsComponentsPerSplat","sphericalHarmonicsBytesPerSplat","cumulativeSplatCount","j","updateLoadedCounts","newSectionCount","newSplatCount","updateSectionLoadedCounts","sectionHeaderOffset","tempCenterBuffer","ArrayBuffer","tempScaleBuffer","tempRotationBuffer","tempColorBuffer","tempSHBuffer","tempRot","bucketCenterDelta","OFFSET_X","OFFSET_Y","OFFSET_Z","OFFSET_SCALE0","OFFSET_SCALE1","OFFSET_SCALE2","OFFSET_ROT0","OFFSET_ROT1","OFFSET_ROT2","OFFSET_ROT3","OFFSET_FDC0","OFFSET_FDC1","OFFSET_FDC2","OFFSET_OPACITY","OFFSET_FRC0","OFFSET_FRC9","OFFSET","compressPositionOffset","doubleCompressionScaleRange","round","targetSplat","sectionBuffer","bufferOffset","bucketCenter","centerBase","scaleBase","rotationBase","colorBase","sphericalHarmonicsBase","rot","shOut","s","sub","bytesPerSHComponent","srcVal","degree1ByteCount","rgba","Uint8ClampedArray","generateFromUncompressedSplatArrays","splatArrays","blockSize","options","shDegree","sa","splatArray","sc","sectionBuffers","sectionHeaderBuffers","totalSplatCount","validSplats","sectionOptions","sectionBlockSize","blockSizeFactor","BucketBlockSize","sectionBucketSize","ceil","bucketSizeFactor","BucketSize","bucketInfo","computeBucketsForUncompressedSplatArray","fullBuckets","partiallyFullBucketLengths","partiallyFullBuckets","map","bucket","buckets","sectionDataSizeBytes","bucketMetaDataSizeBytes","bucketDataBytes","sectionSizeBytes","outSplatCount","fromArray","row","writeSplatDataToSectionBuffer","bucketMetaDataArray","pfb","sectionHeaderBuffer","sectionsCumulativeSizeBytes","byteLength","unifiedBufferSize","unifiedBuffer","currentUnifiedBase","halfBlockSize","dimensions","yBlocks","zBlocks","blockCenter","xBlock","yBlock","zBlock","bucketId","toArray","partiallyFullBucketArray","hasOwnProperty","preallocateUncompressed","sphericalHarmonicsDegrees","shDescriptor","splatBufferDataOffsetBytes","splatBufferSizeBytes","outBuffer","CurrentMajorVersion","CurrentMinorVersion","splatBuffer","HeaderMagicBytes","HeaderEndTokenBytes","HeaderEndToken","DataTypeMap","Map","Int8Array","Int16Array","Float64Array","unpackUnorm","bits","t","unpack111011","result","lerp","a","getElementPropStorage","element","name","properties","find","p","storage","PlayCanvasCompressedPlyParser","decodeHeaderText","headerText","chunkElement","vertexElement","shElement","headerLines","split","filter","line","startsWith","words","count","has","StorageType","storageSizeByes","BYTES_PER_ELEMENT","type","byteSize","sphericalHarmonicsPerSplat","headerSizeBytes","decodeHeader","plyBuffer","endHeaderTokenOffset","buf","search","endIndex","TextDecoder","decode","slice","readElementData","readBuffer","readOffset","fromIndex","toIndex","propertyFilter","e","property","requiredStorageSizeBytes","getInt8","getInt16","getInt32","getUint32","getFloat64","readPly","readIndex","getElementStorageArrays","storageArrays","minR","minG","minB","maxR","maxG","maxB","minX","minY","minZ","maxX","maxY","maxZ","minScaleX","minScaleY","minScaleZ","maxScaleX","maxScaleY","maxScaleZ","position","color","shStorageArrays","fRestKey","fRest","c","Vector4","chunkSplatIndexOffset","positionArray","positionExtremes","scaleArray","scaleExtremes","rotationArray","colorExtremes","colorArray","outSplat","chunkIndex","norm","m","unpackRot","exp","shCoeffMap","shIndexMap","shArray","readSphericalHarmonicsDegree","outSHCoeff","readSHCoeff","k","outIndex","parseToUncompressedSplatBufferSection","vertexDataBuffer","outBytesPerSplat","tempSplat","decompressBaseSplat","outBase","parseToUncompressedSplatArraySection","parseSphericalHarmonicsToUncompressedSplatArraySection","vertexReadOffset","sh","shArrays","Object","values","decompressSphericalHarmonics","parseToUncompressedSplatArray","parseToUncompressedSplatBuffer","PlyFormat","FieldSizeIdDouble","FieldSizeIdInt","FieldSizeIdUInt","FieldSizeIdFloat","FieldSizeIdShort","FieldSizeIdUShort","FieldSizeIdUChar","FieldSizeStringMap","double","int","uint","float","short","ushort","uchar","FieldSize","PlyParserUtils","decodeSectionHeader","fieldNameIdMap","headerStartLine","extractedLines","processingSection","headerEndLine","vertexCount","endOfHeader","sectionName","fieldIds","fieldTypes","allFieldNames","usedFieldNames","fieldTypesByName","trim","lineComponents","validComponents","lineComponent","trimmedComponent","fieldMatch","fieldTypeStr","fieldName","fieldId","fieldType","fieldOffsets","bytesPerVertex","sphericalHarmonics","decodeSphericalHarmonicsFromSectionHeader","dataSizeBytes","degree","sphericalHarmonicsCoefficientsPerChannel","coefficientsPerChannel","sphericalHarmonicsDegree1Fields","degree1Fields","sphericalHarmonicsDegree2Fields","degree2Fields","fieldNames","sphericalHarmonicsFieldCount","rgb","getHeaderSectionNames","sectionNames","headerLine","checkTextForEndHeader","endHeaderTestText","includes","checkBufferForEndHeader","searchOfset","chunkSize","decoder","endHeaderTestChunk","extractHeaderFromBufferToText","headerOffset","readChunkSize","headerChunk","readHeaderFromBuffer","convertHeaderTextToLines","prunedLines","determineHeaderFormatFromHeaderText","headertText","format","determineHeaderFormatFromPlyBuffer","readVertex","vertexData","dataOffset","fieldsToRead","rawVertex","BaseFieldNamesToRead","BaseFieldsToReadIndexes","SCALE_0","SCALE_1","SCALE_2","ROT_0","ROT_1","ROT_2","ROT_3","F_DC_0","F_DC_1","F_DC_2","RED","GREEN","BLUE","F_REST_0","INRIAV1PlyParser","decodeHeaderLines","shLineCount","forEach","shFieldsToReadCount","shRemainingFieldNamesToRead","from","fieldNamesToRead","fieldsToReadIndexes","reduce","acc","decodeHeaderFromBuffer","findSplatData","fromSplat","toSplat","splatData","splatDataOffset","toBuffer","toOffset","parsedSplat","parseToUncompressedSplat","decodeSectionSplatData","sectionSplatData","toSplatArray","rawSplat","OFFSET_ROTATION0","OFFSET_ROTATION1","OFFSET_ROTATION2","OFFSET_ROTATION3","OFFSET_FRC","readSplat","SH_C0","separatePlyHeaderAndData","CodeBookEntryNamesToRead","CodeBookEntriesToReadIndexes","CB_FEATURES_DC","CB_FEATURES_REST_0","CB_FEATURES_REST_3","CB_OPACITY","CB_SCALING","CB_ROTATION_RE","CB_ROTATION_IM","FieldNamesToRead","FieldsToReadIndexes","PLY_SCALE_0","PLY_SCALE_1","PLY_SCALE_2","PLY_ROT_0","PLY_ROT_1","PLY_ROT_2","PLY_ROT_3","PLY_X","PLY_Y","PLY_Z","PLY_F_DC_0","PLY_F_DC_1","PLY_F_DC_2","PLY_OPACITY","PLY_RED","PLY_GREEN","PLY_BLUE","hf","NaN","pow","INRIAV2PlyParser","decodeSectionHeadersFromHeaderLines","codeBookEntriesToReadIdMap","codeBookSectionIndex","currentStartLine","lastSectionFound","decodeSectionHeadersFromHeaderText","getSplatCountFromSectionHeaders","decodeHeaderFromHeaderText","findVertexData","targetSection","byteOffset","decodeCodeBook","codeBookData","codeBook","codeBookElementOffset","codeBookPage","page","baseValue","unified","PlyParser","plyFormat","SplatPartitioner","sectionFilters","groupingParameters","partitionGenerator","partitionUncompressedSplatArray","results","newArrays","sectionSplats","sectionFilter","parameters","getStandardPartitioner","partitionSize","clampDistance","point","centerDist","lengthSq","sort","patitionCount","currentStartSplat","startSplat","splatIndex","blocksSize","SplatBufferGenerator","splatPartitioner","alphaRemovalThreshold","sectionSize","generateFromUncompressedSplatArray","partitionResults","getStandardGenerator","LoaderStatus","DirectLoadError","InternalLoadType","storeChunksInBuffer","inBytes","sizeBytes","finalize","optimizeSplatData","PlyLoader","loadFromURL","fileName","progressiveLoadToSplatBuffer","onProgressiveLoadSectionProgress","internalLoadType","directLoadSectionSizeBytes","ProgressiveLoadSectionSize","directLoadBufferIn","directLoadBufferOut","directLoadSplatBuffer","compressedPlyHeaderChunksBuffer","processedBaseSplatCount","processedSphericalHarmonicsSplatCount","headerLoaded","readyToLoadSplatData","baseSplatDataLoaded","loadPromise","standardLoadUncompressedSplatArray","numBytesStreamed","numBytesParsed","numBytesDownloaded","endOfBaseSplatDataBytes","textDecoder","chunkData","loadComplete","startBytes","endBytes","sizeRequiredForHeaderAndChunks","numBytesToProcess","addedSplatCount","numBytesToParse","numBytesLeftOver","parsedDataViewOffset","dataToParse","shDesc","keepChunks","keepSize","unshift","chunkDatas","plyFileData","loadFromFileData","createStream","ReadableStream","start","controller","enqueue","close","decompressGzipped","stream","decompressedStream","pipeThrough","DecompressionStream","response","Response","decompressGzipStream","console","SPZ_MAGIC","FLAG_ANTIALIASED","halfToFloat","h","exponent","mantissa","signMul","Infinity","dimForDegree","unpackedSplatToUncompressedSplat","unpackedSplat","unpackedSphericalHarmonicsDegree","unpackGaussians","packed","directToSplatBuffer","outTarget","outTargetOffset","numPoints","shDim","usesFloat16","positions","scales","rotations","alphas","colors","checkSizes2","halfData","fullPrecisionPositionScale","fractionalBits","shCoeffPerChannelPerSplat","fixed32","subarray","xyz","squaredNorm","uncompressedSplat","HEADER_SIZE","MAX_POINTS_TO_READ","loadSpzPacked","compressedData","view","magic","version","flags","reserved","antialiased","uint8View","positionsSize","currentOffset","deserializePackedGaussians","SpzLoader","fileData","spzFileData","SplatParser","fromBuffer","fromOffset","outBytesPerCenter","outBytesPerScale","outBytesPerRotation","inBase","RowSizeBytes","inCenter","inScale","CenterSizeBytes","inColor","ScaleSizeBytes","inRotation","RotationSizeBytes","quat","parseStandardSplatToUncompressedSplatArray","inBuffer","ColorSizeBytes","SplatLoader","splatDataOffsetBytes","numBytesLoaded","percentStr","bytesLoadedSinceLastSection","splatFileData","KSplatLoader","checkVersion","minVersionMajor","minVersionMinor","externalOnProgress","onSectionBuilt","directLoadBuffer","headerBuffer","sectionHeadersBuffer","headerLoading","sectionHeadersLoaded","sectionHeadersLoading","numBytesProgressivelyLoaded","totalBytesToDownload","downloadComplete","loadSectionQueued","directLoadPromise","queuedCheckAndLoadSectionsCount","checkAndLoadSectionHeaders","performLoad","totalSectionStorageStorageByes","totalStorageSizeBytes","checkAndLoadSections","baseDataOffset","reachedSections","loadedSplatCount","bytesRequiredToReachSectionSplatData","bytesPastSSectionSplatDataStart","loadedSplatsForSection","percentComplete","ProgressiveLoadSectionDelayDuration","fullBuffer","downLoadLink","blob","document","createElement","appendChild","download","href","URL","createObjectURL","click","SceneFormat","Splat","KSplat","Ply","Spz","sceneFormatFromPath","endsWith","_changeEvent","_startEvent","_endEvent","_ray","Ray","_plane","Plane","TILT_LIMIT","cos","MathUtils","DEG2RAD","OrbitControls","EventDispatcher","object","domElement","style","touchAction","enabled","target","minDistance","maxDistance","minZoom","maxZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","zoomToCursor","autoRotate","autoRotateSpeed","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","MOUSE","ROTATE","MIDDLE","DOLLY","PAN","touches","ONE","TOUCH","TWO","DOLLY_PAN","target0","clone","position0","zoom0","zoom","_domElementKeyEvents","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","getDistance","distanceTo","listenToKeyEvents","addEventListener","onKeyDown","stopListenToKeyEvents","removeEventListener","saveState","scope","reset","clearDampedRotation","clearDampedPan","updateProjectionMatrix","dispatchEvent","update","state","STATE","NONE","sphericalDelta","panOffset","setFromUnitVectors","up","quatInverse","invert","lastPosition","lastQuaternion","lastTargetPosition","twoPI","applyQuaternion","setFromVector3","rotateLeft","isFinite","makeSafe","addScaledVector","add","performCursorZoom","isOrthographicCamera","radius","setFromSpherical","lookAt","multiplyScalar","zoomChanged","newRadius","isPerspectiveCamera","prevRadius","radiusDelta","dollyDirection","updateMatrixWorld","mouseBefore","mouse","unproject","mouseAfter","warn","transformDirection","matrix","origin","direction","abs","dot","setFromNormalAndCoplanarPoint","intersectPlane","distanceToSquared","EPS","onContextMenu","onPointerDown","onPointerUp","onMouseWheel","onPointerMove","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","Spherical","rotateStart","Vector2","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","pointers","pointerPositions","getZoomScale","angle","rotateUp","panLeft","distance","objectMatrix","setFromMatrixColumn","panUp","crossVectors","pan","deltaX","deltaY","targetDistance","tan","fov","clientHeight","right","left","clientWidth","top","bottom","dollyOut","dollyScale","dollyIn","updateMouseParameters","event","rect","getBoundingClientRect","clientX","clientY","width","height","dist","handleMouseDownRotate","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","dx","dy","handleTouchMoveRotate","getSecondPointerPosition","subVectors","handleTouchMovePan","handleTouchMoveDolly","setPointerCapture","pointerId","addPointer","pointerType","trackPointer","DOLLY_ROTATE","onTouchStart","mouseAction","button","handleMouseDownDolly","ctrlKey","metaKey","shiftKey","onMouseDown","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","onTouchMove","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","onMouseMove","splice","removePointer","releasePointerCapture","preventDefault","handleMouseWheel","needsUpdate","code","handleKeyDown","pointer","passive","LoadingSpinner","message","container","taskIDGen","elementID","elementIDGen","tasks","spinnerContainerOuter","className","display","spinnerContainerPrimary","spinnerPrimary","classList","messageContainerPrimary","innerHTML","spinnerContainerMin","spinnerMin","messageContainerMin","setMinimized","fadeTransitions","addTask","newTask","removeTask","task","removeAllTasks","setMessageForTask","show","setMessage","hide","visible","setContainer","parentElement","removeChild","zIndex","minimized","instant","showHideSpinner","displayStyle","fadeTransitionsIndex","out","duration","onComplete","startTime","startOpacity","parseFloat","isNaN","interval","setInterval","elapsed","clearInterval","fadeElement","LoadingProgressBar","progressBarContainerOuter","progressBarBox","progressBarBackground","progressBar","setProgress","progress","InfoPanel","infoCells","layout","infoPanelContainer","append","infoPanel","infoTable","layoutEntry","labelCell","spacerCell","infoCell","renderDimensions","cameraPosition","cameraLookAtPosition","cameraUp","orthographicCamera","meshCursorPosition","currentFPS","splatRenderCount","splatRenderCountPct","lastSortTime","focalAdjustment","splatScale","pointCloudMode","cameraPosString","cla","cameraLookAtString","cameraLookAt","cameraUpString","cursPos","cursorPosString","cursorPosition","fps","renderWindow","renderSplatCount","sortTime","_axis","ArrowHelper","Object3D","dir","headLength","headRadius","lineGeometry","CylinderGeometry","translate","coneGeometry","Mesh","MeshBasicMaterial","toneMapped","matrixAutoUpdate","cone","setDirection","radians","acos","setFromAxisAngle","setColor","source","SceneHelper","threeScene","splatRenderTarget","renderTargetCopyQuad","renderTargetCopyCamera","meshCursor","focusMarker","controlPlane","debugRoot","secondaryDebugRoot","updateSplatRenderTargetForRenderDimensions","destroySplatRendertarget","WebGLRenderTarget","RGBAFormat","stencilBuffer","depthBuffer","depthTexture","DepthTexture","DepthFormat","UnsignedIntType","setupRenderTargetCopyObjects","renderTargetCopyMaterial","ShaderMaterial","vertexShader","fragmentShader","uniforms","sourceColorTexture","sourceDepthTexture","depthWrite","depthTest","transparent","blending","CustomBlending","blendSrc","SrcAlphaFactor","blendSrcAlpha","blendDst","OneMinusSrcAlphaFactor","blendDstAlpha","extensions","fragDepth","PlaneGeometry","OrthographicCamera","destroyRenderTargetCopyObjects","setupMeshCursor","ConeGeometry","coneMaterial","downArrow","upArrow","leftArrow","rightArrow","destroyMeshCursor","remove","setMeshCursorVisibility","getMeschCursorVisibility","setMeshCursorPosition","positionAndOrientMeshCursor","camera","setupFocusMarker","sphereGeometry","SphereGeometry","focusMarkerMaterial","buildFocusMarkerMaterial","destroyFocusMarker","updateFocusMarker","toCamera","viewport","matrixWorld","toCameraDistance","realFocusPosition","uniformsNeedUpdate","setFocusMarkerVisibility","setFocusMarkerOpacity","getFocusMarkerOpacity","setupControlPlane","planeGeometry","rotateX","planeMaterial","side","DoubleSide","planeMesh","arrowDir","arrowOrigin","arrowHelper","destroyControlPlane","setControlPlaneVisibility","positionAndOrientControlPlane","tempQuaternion","defaultUp","addDebugMeshes","createDebugMeshes","createSecondaryDebugMeshes","destroyDebugMeshes","renderOrder","debugMeshRoot","createMesh","sphereMesh","buildDebugMaterial","boxGeometry","BoxGeometry","boxMesh","separation","Color","FrontSide","VectorRight","VectorUp","VectorBackward","setParameters","boxContainsPoint","box","epsilon","intersectBox","planeIntersectionPoint","planeIntersectionPointArray","originArray","directionArray","outHit","normal","hitNormal","extremeVec","multiplier","sign","toSide","idx1","idx2","intersectSphere","toSphereCenterVec","toClosestApproach","toClosestApproachSq","diffSq","radiusSq","thc","Hit","hitClone","SplatRenderMode","ThreeD","TwoD","Raycaster","raycastAgainstTrueSplatEllipsoid","ray","setFromCameraAndScreenPosition","ndcCoords","screenPosition","screenDimensions","setFromMatrixPosition","near","far","intersectSplatMesh","toLocal","fromLocal","sceneTransform","localRay","tempPoint","splatMesh","outHits","splatTree","getSplatTree","subTrees","subTree","dynamicMode","getSceneTransform","outHitsForSubTree","rootNode","castRayAtSplatTreeNode","hit","tempColor","tempCenter","tempHit","scaleEpsilon","uniformScaleMatrix","toSphereSpace","fromSphereSpace","tempRay","node","boundingBox","indexes","splatGlobalIndex","splatSceneIndex","getSceneIndexForSplat","getScene","splatRenderMode","uniformScale","log10","SplatMaterial","buildVertexShaderBase","enableOptionalEffects","maxSphericalHarmonicsDegree","customVars","vertexShaderSource","MaxScenes","getVertexShaderFadeIn","getUniforms","pointCloudModeEnabled","fadeInComplete","orthographicMode","visibleRegionFadeStartRadius","visibleRegionRadius","currentTime","firstRenderTime","centersColorsTexture","sphericalHarmonicsTexture","sphericalHarmonicsTextureR","sphericalHarmonicsTextureG","sphericalHarmonicsTextureB","sphericalHarmonics8BitCompressionRangeMin","sphericalHarmonics8BitCompressionRangeMax","focal","orthoZoom","inverseFocalAdjustment","basisViewport","debugColor","centersColorsTextureSize","sphericalHarmonicsTextureSize","sphericalHarmonics8BitMode","sphericalHarmonicsMultiTextureMode","sceneIndexesTexture","sceneIndexesTextureSize","sceneCount","sceneOpacity","sceneVisibility","transformMatrices","SplatMaterial3D","build","maxScreenSpaceSplatSize","kernel2DSize","buildVertexShaderProjection","fragmentShaderSource","buildFragmentShader","alphaTest","NormalBlending","SplatMaterial2D","referenceQuadGeneration","SplatGeometry","baseGeometry","BufferGeometry","setIndex","positionsArray","BufferAttribute","setAttribute","setXYZ","InstancedBufferGeometry","splatIndexArray","splatIndexes","InstancedBufferAttribute","setUsage","DynamicDrawUsage","instanceCount","SplatScene","copyTransformData","otherScene","updateTransform","matrixWorldAutoUpdate","updateWorldMatrix","updateMatrix","SplatTreeNode","depth","Box3","SplatSubTree","maxDepth","maxCentersPerNode","sceneDimensions","sceneMin","sceneMax","nodesWithIndexes","convertWorkerSubTreeNode","workerSubTreeNode","minVector","maxVector","convertedNode","convertWorkerSubTree","workerSubTree","convertedSubTree","visitLeavesFromNode","visitFunc","createSplatTreeWorker","self","WorkerSplatTreeNodeIDGen","WorkerBox3","containsPoint","WorkerSplatSubTree","addedIndexes","disposed","WorkerSplatTreeNode","processSplatTreeNode","tree","indexToCenter","sceneCenters","newIndexes","nodeDimensions","halfDimensions","nodeCenter","childrenBounds","splatCounts","baseIndexes","childNode","buildSubTree","centerCount","onmessage","process","allCenters","postMessage","createSplatTree","centers","SplatTree","diposeSplatTreeWorker","splatTreeWorker","terminate","processSplatMesh","filterFunc","onIndexesUpload","onSplatTreeConstruction","Worker","addCentersForScene","splatOffset","addedCount","addBase","checkForEarlyExit","scenes","transferBuffers","workerProcessCenters","countLeaves","leafCount","visitLeaves","WebGLExtensions","gl","getExtension","extension","init","capabilities","isWebGL2","WebGLCapabilities","maxAnisotropy","getMaxPrecision","precision","getShaderPrecisionFormat","VERTEX_SHADER","HIGH_FLOAT","FRAGMENT_SHADER","MEDIUM_FLOAT","WebGL2RenderingContext","maxPrecision","drawBuffers","logarithmicDepthBuffer","maxTextures","getParameter","MAX_TEXTURE_IMAGE_UNITS","maxVertexTextures","MAX_VERTEX_TEXTURE_IMAGE_UNITS","maxTextureSize","MAX_TEXTURE_SIZE","maxCubemapSize","MAX_CUBE_MAP_TEXTURE_SIZE","maxAttributes","MAX_VERTEX_ATTRIBS","maxVertexUniforms","MAX_VERTEX_UNIFORM_VECTORS","maxVaryings","MAX_VARYING_VECTORS","maxFragmentUniforms","MAX_FRAGMENT_UNIFORM_VECTORS","vertexTextures","floatFragmentTextures","getMaxAnisotropy","MAX_TEXTURE_MAX_ANISOTROPY_EXT","floatVertexTextures","maxSamples","MAX_SAMPLES","SceneRevealMode","Default","Gradual","Instant","LogLevel","None","Warning","Info","Debug","dummyGeometry","dummyMaterial","MAX_TEXTURE_TEXELS","SplatMesh","halfPrecisionCovariancesOnGPU","devicePixelRatio","enableDistancesComputationOnGPU","integerBasedDistancesComputation","logLevel","sceneFadeInRateMultiplier","renderer","baseSplatTree","splatDataTextures","distancesTransformFeedback","program","centersBuffer","sceneIndexesBuffer","outDistancesBuffer","centersLoc","modelViewProjLoc","sceneIndexesLoc","transformsLocs","globalSplatIndexToSceneIndexMap","lastBuildSplatCount","lastBuildScenes","lastBuildMaxSplatCount","lastBuildSceneCount","finalBuild","webGLUtils","calculatedSceneCenter","maxSplatDistanceFromSceneCenter","visibleRegionBufferRadius","visibleRegionChanging","lastRenderer","buildScenes","parentObject","splatBuffers","sceneOptions","scene","createScene","splatAlphaRemovalThreshold","buildSplatIndexMaps","localSplatIndexMap","sceneIndexMap","buildSplatTree","minAlphas","onSplatTreeIndexesUpload","disposeSplatTree","buildStartTime","splatColor","sceneIndex","minAlpha","buildTime","log","leavesWithVertices","avgSplatCount","nodeCount","nodeSplatCount","keepSceneTransforms","preserveVisibleRegion","getTotalMaxSplatCountForSplatBuffers","newScenes","newScene","existingScene","splatBufferSphericalHarmonicsDegree","splatBuffersChanged","isUpdateBuild","disposeMeshData","indexMaps","splatBufferSplatCount","setupDistancesComputationTransformFeedback","dataUpdateResults","refreshGPUDataFromSplatBuffers","onSplatTreeReadyCallback","freeIntermediateSplatData","deleteTextureData","texture","image","onUpdate","baseData","covariances","centerColors","sceneIndexes","textures","disposeTextures","computeDistancesOnGPUSyncTimeout","clearTimeout","disposeDistancesComputationGPUResources","textureKey","textureContainer","onSplatTreeReady","callback","getDataForDistancesComputation","end","getIntegerCenters","getFloatCenters","getSceneIndexes","sinceLastBuildOnly","refreshDataTexturesFromSplatBuffers","updateStart","refreshGPUBuffersForDistancesComputation","to","updateGPUCentersBufferForDistancesComputation","updateGPUTransformIndexesBufferForDistancesComputation","updateBaseDataFromSplatBuffers","setupDataTextures","updateDataTexturesFromBaseData","updateVisibleRegion","computeDataTextureSize","elementsPerTexel","elementsPerSplat","texSize","getCovariancesInitialTextureSpecs","elementsPerTexelStored","getCovariancesElementsPertexelStored","covarianceCompressionLevel","getTargetCovarianceCompressionLevel","shCompressionLevel","getTargetSphericalHarmonicsCompressionLevel","initialCovTexSpecs","SphericalHarmonicsArrayType","shComponentCount","shData","centersColsTexSize","paddedCentersCols","updateCenterColorsPaddedData","centersColsTex","DataTexture","RGBAIntegerFormat","internalFormat","size","covTexSpecs","covariancesElementsPerTexelStored","covTexSize","covariancesElementsPerTexelAllocated","covariancesTextureData","covTex","updatePaddedCompressedCovariancesTextureData","covariancesTextureHalfFloat","FloatType","covariancesTexture","dummyTex","covariancesAreHalfFloat","covariancesTextureSize","elementsPerTexelAllocated","scaleRotationsTexSize","ScaleRotationsDataType","scaleRotationsTextureType","paddedScaleRotations","updateScaleRotationsPaddedData","scaleRotationsTex","scaleRotationsTexture","scaleRotationsTextureSize","shTextureType","UnsignedByteType","HalfFloatType","paddedSHComponentCount","shElementsPerTexel","texelFormat","RGFormat","shTexSize","paddedSHArray","shTexture","paddedComponentCount","textureCount","shComponentCountPerChannel","paddedSHArraySize","textureUniforms","paddedSHArrays","shTextures","componentCountPerChannel","sceneIndexesTexSize","paddedTransformIndexes","RedIntegerFormat","covarancesTextureDesc","scaleRotationsTextureDesc","scaleRotationCompressionLevel","shITextureDesc","fillSplatDataArrays","shTextureDesc","centerColorsTextureDescriptor","paddedCenterColors","centerColorsTexture","centerColorsTextureProps","__webglTexture","updateDataTexture","covarancesStartElement","covariancesEndElement","covariance","covariancesTextureProps","bytesPerElement","scaleRotationsTextureProps","shBytesPerElement","updateTexture","shTextureSize","shTextureProps","sceneIndexesTexDesc","paddedSceneIndexes","sceneIndexesTextureProps","getMaximumSplatBufferCompressionLevel","maxCompressionLevel","getMinimumSplatBufferCompressionLevel","minCompressionLevel","computeTextureUpdateRegion","endSplat","textureWidth","texelsPerSplat","startSplatTexels","startRow","startRowElement","endSplatTexels","endRow","dataStart","dataEnd","paddedData","textureSize","textureProps","getContext","updateRegion","updateElementCount","updateDataView","updateHeight","glType","convert","glFormat","colorSpace","currentTexture","TEXTURE_BINDING_2D","bindTexture","TEXTURE_2D","texSubImage2D","sourceData","textureData","textureDataStartIndex","fromElement","toElement","textureDataView","textureDataIndex","sequentialCount","setUint16","colorsBase","centersBase","centerColorsBase","arr","scaleRotationsBase","avgCenter","distFromCSceneCenter","updateVisibleRegionFadeDistance","sceneRevealMode","fastFadeRate","gradualFadeRate","defaultFadeInRate","fadeInRate","shaderFadeInComplete","updateRenderIndexes","globalIndexes","attributes","setDrawRange","updateTransforms","updateUniforms","cameraFocalLengthX","cameraFocalLengthY","orthographicZoom","transforms","setSplatScale","getSplatScale","setPointCloudModeEnabled","getPointCloudModeEnabled","getSplatDataTextures","includeSinceLastBuild","getTotalSplatCountForScenes","getTotalSplatCountForSplatBuffers","getTotalMaxSplatCountForScenes","vao","deleteVertexArray","deleteProgram","deleteShader","disposeDistancesComputationGPUBufferResources","deleteTransformFeedback","deleteBuffer","setRenderer","WebGLUtils","currentMaxSplatCount","rebuildGPUObjects","rebuildBuffers","createShader","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","typeName","errors","getShaderInfoLog","vsSource","currentVao","VERTEX_ARRAY_BINDING","currentProgram","CURRENT_PROGRAM","currentProgramDeleted","getProgramParameter","DELETE_STATUS","createVertexArray","bindVertexArray","createProgram","attachShader","transformFeedbackVaryings","SEPARATE_ATTRIBS","linkProgram","LINK_STATUS","getProgramInfoLog","useProgram","getAttribLocation","getUniformLocation","createBuffer","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","vertexAttribIPointer","INT","vertexAttribPointer","FLOAT","UNSIGNED_INT","STATIC_READ","createTransformFeedback","bindTransformFeedback","TRANSFORM_FEEDBACK","bindBufferBase","TRANSFORM_FEEDBACK_BUFFER","isUpdate","offsetSplats","ArrayType","subBufferOffset","bufferSubData","maxArray","STATIC_DRAW","fillTransformsArray","tempArray","sceneTransformElements","computeDistancesOnGPU","modelViewProjMatrix","outComputedDistances","enable","RASTERIZER_DISCARD","iTempMatrix","getIntegerMatrixArray","iTransform","uniform4i","uniformMatrix4fv","iViewProjMatrix","iViewProj","uniform3i","viewProj","uniform3f","beginTransformFeedback","POINTS","drawArrays","endTransformFeedback","disable","sync","fenceSync","SYNC_GPU_COMMANDS_COMPLETE","flush","checkSync","timeout","bitflags","clientWaitSync","TIMEOUT_EXPIRED","WAIT_FAILED","deleteSync","getBufferSubData","getLocalSplatParameters","globalIndex","paramsObj","returnSceneTransform","getSplatBufferForSplat","localIndex","getSplatLocalIndex","getSceneTransformForSplat","applySceneTransform","sphericalHarmonicsCompressionLevel","srcStart","srcEnd","destStart","tempTransform","startSceneIndex","endSceneIndex","padFour","floatCenters","intCenters","paddedFloatCenters","outTransform","getSceneCount","matrixElements","intMatrixArray","computeBoundingBox","applySceneTransforms","SorterWasmNoSIMD","sortWorker","wasmInstance","wasmMemory","useSharedMemory","integerBasedSort","indexesToSortOffset","sortedIndexesOffset","sceneIndexesOffset","transformsOffset","precomputedDistancesOffset","mappedDistancesOffset","frequenciesOffset","centersOffset","modelViewProjOffset","countsZero","sortedIndexesOut","distanceMapRange","uploadedSplatCount","BytesPerInt","BytesPerFloat","renderCount","sortCount","splatSortCount","usePrecomputedDistances","copyIndexesToSort","copyPrecomputedDistances","copyTransforms","indexesToSort","precomputedDistances","modelViewProj","sortStartTime","exports","sortIndexes","sortMessage","sortDone","sortedIndexes","sortEndTime","CENTERS_BYTES_PER_ENTRY","sorterWasmBytes","matrixSize","memoryRequiredForIndexesToSort","memoryRequiredForCenters","memoryRequiredForModelViewProjectionMatrix","memoryRequiredForPrecomputedDistances","memoryRequiredForMappedDistances","memoryRequiredForSortedIndexes","memoryRequiredForIntermediateSortBuffers","memoryRequiredforTransformIndexes","memoryRequiredforTransforms","extraMemory","MemoryPageSize","totalRequiredMemory","totalPagesRequired","sorterWasmImport","module","env","memory","WebAssembly","Memory","initial","maximum","shared","compile","wasmModule","instantiate","instance","sortSetupPhase1Complete","indexesToSortBuffer","sortedIndexesBuffer","precomputedDistancesBuffer","transformsBuffer","WebXRMode","VR","AR","VRButton","createButton","sessionInit","disableButton","cursor","onmouseenter","onmouseleave","onclick","stylizeElement","padding","border","borderRadius","background","font","textAlign","outline","xr","isSessionSupported","supported","currentSession","onSessionStarted","session","onSessionEnded","setSession","textContent","sessionOptions","optionalFeatures","requestSession","offerSession","err","showEnterVR","xrSessionIsGranted","exception","isSecureContext","location","replace","textDecoration","registerSessionGrantedListener","test","ARButton","domOverlay","overlay","svg","createElementNS","root","setReferenceSpaceType","showStartAR","RenderMode","Always","OnChange","Never","Viewer","initialCameraPosition","initialCameraLookAt","dropInMode","selfDrivenMode","selfDrivenUpdateFunc","selfDrivenUpdate","useBuiltInControls","rootElement","ignoreDevicePixelRatio","gpuAcceleratedSort","sharedMemoryForWorkers","dynamicScene","webXRMode","webXRActive","webXRSessionInit","renderMode","enableSIMDInSort","inMemoryCompressionLevel","semver","splatSortDistanceMapPrecision","DefaultSplatSortDistanceMapPrecision","onSplatMeshChangedCallback","createSplatMesh","controls","perspectiveControls","orthographicControls","perspectiveCamera","showMeshCursor","showControlPlane","showInfo","sceneHelper","sortRunning","lastSplatSortCount","sortWorkerIndexesToSort","sortWorkerSortedIndexes","sortWorkerPrecomputedDistances","sortWorkerTransforms","preSortMessages","runAfterNextSort","selfDrivenModeRunning","splatRenderReady","raycaster","startInOrthographicMode","consecutiveRenderFrames","previousCameraTarget","nextCameraTarget","mousePosition","mouseDownPosition","mouseDownTime","resizeObserver","mouseMoveListener","mouseDownListener","mouseUpListener","keyDownListener","sortPromise","sortPromiseResolver","splatSceneDownloadPromises","splatSceneDownloadAndBuildPromise","splatSceneRemovalPromise","loadingSpinner","loadingProgressBar","usingExternalCamera","usingExternalRenderer","initialized","disposing","disposePromise","frustumCulled","setupCamera","setupRenderer","setupWebXR","setupControls","setupEventHandlers","Scene","getRenderDimensions","PerspectiveCamera","WebGLRenderer","antialias","setPixelRatio","autoClear","setClearColor","setSize","ResizeObserver","forceRenderNextFrame","observe","onMouseUp","removeEventHandlers","setRenderMode","setActiveSphericalHarmonicsDegrees","activeSphericalHarmonicsDegrees","onSplatMeshChanged","forward","tempMatrixLeft","tempMatrixRight","makeRotationAxis","setOrthographicMode","offsetX","offsetY","clickOffset","onMouseClick","checkForFocalPointChange","toNewFocalPoint","transitioningCameraTarget","intersectionPoint","transitioningCameraTargetStartTime","outDimensions","offsetWidth","offsetHeight","getSize","fromCamera","resetControls","fromControls","toControls","setCameraZoomFromPosition","setCameraPositionFromZoom","tempVector","positionCamera","zoomedCamera","toLookAtDistance","negate","zoomCamera","positionZamera","updateSplatMesh","focalLengthX","projectionMatrix","focalLengthY","focalMultiplier","adjustForWebXRStereo","xrCameraProj00","getCamera","cameraProj00","isLoadingOrUnloading","isDisposingOrDisposed","addSplatSceneDownloadPromise","removeSplatSceneDownloadPromise","setSplatSceneDownloadAndBuildPromise","clearSplatSceneDownloadAndBuildPromise","addSplatScene","progressiveLoad","isProgressivelyLoadable","showLoadingUI","loadingUITaskId","onProgressUIUpdate","percentCompleteLabel","loaderStatus","suffix","downloadDone","downloadedPercentage","splatBuffersAddedUIUpdate","firstBuild","downloadAndBuildSingleSplatSceneProgressiveLoad","downloadAndBuildSingleSplatSceneStandardLoad","addSplatBufferOptions","orientation","addSplatBuffers","buildFunc","onException","downloadPromise","downloadSplatSceneToSplatBuffer","downloadAndBuildPromise","updateError","onDownloadProgress","onDownloadException","progressiveLoadedSectionBuildCount","progressiveLoadedSectionBuilding","queuedProgressiveLoadSectionBuilds","checkAndBuildProgressiveLoadSections","queuedBuild","shift","progressiveLoadFirstSectionBuildPromise","splatSceneDownloadPromise","addSplatScenes","fileCount","onLoadProgress","fileIndex","totalPercent","baseDownloadPromises","nativeDownloadPromises","baseDownloadPromise","all","finally","progressiveBuild","splatBufferOptions","showLoadingUIForSplatTreeBuild","replaceExisting","enableRenderBeforeFirstSort","splatProcessingTaskId","removeSplatProcessingTask","buildResults","addSplatBuffersToMesh","disposeSortWorker","setupSortWorker","runSplatSort","splatOptimizingTaskId","allSplatBuffers","allSplatBufferOptions","finished","DistancesArrayType","worker","sourceWasm","iOSSemVer","sorterWasmBinaryString","atob","charCodeAt","createSortWorker","sortCanceled","defaultMessage","removeSplatScene","indexToRemove","removeSplatScenes","indexesToRemove","revmovalTaskId","checkAndHideLoadingUI","onDone","savedSplatBuffers","savedSceneOptions","savedSceneTransformComponents","shouldRemove","setAnimationLoop","requestFrameId","requestAnimationFrame","stop","cancelAnimationFrame","waitPromises","promisesToAbort","promiseKey","downloadPromiseToAbort","unobserve","toAbort","shouldRender","render","renderNextFrame","lastCameraPosition","lastCameraOrientation","changeEpsilon","cameraChanged","cp","co","savedAuoClear","hasRenderables","updateForDropInMode","updateForRendererSizeChanges","updateMeshCursor","updateFPS","timingSensitiveUpdates","updateInfoPanel","updateControlPlane","lastCalcTime","frameCount","lastRendererSize","currentRendererSize","lastCameraOrthographic","aspect","lastUpdateTime","timeDelta","updateCameraTransition","tempCameraTarget","toPreviousTarget","toNextTarget","rotationAngle","wasTransitioning","currentFocusMarkerOpacity","newFocusMarkerOpacity","mvpMatrix","cameraPositionArray","lastSortViewDir","sortViewDir","lastSortViewPos","sortViewOffset","queuedSorts","partialSorts","angleThreshold","sortFractions","force","forceSortAll","angleDiff","positionDiff","needsRefreshForRotation","needsRefreshForPosition","shouldSortAll","gatherSceneNodesForSort","mvpCamera","gpuAcceleratedSortPromise","partialSort","sortFraction","nodeRenderList","allSplatsSortBuffer","tempVectorYZ","tempVectorXZ","modelView","baseModelView","tempMax","nodeSize","gatherAllNodes","cameraFocalLength","fovXOver2","atan","fovYOver2","cosFovXOver2","cosFovYOver2","nodeRenderCount","distanceToNode","setX","setY","cameraAngleXZDot","cameraAngleYZDot","ns","currentByteOffset","windowSizeInts","windowSizeBytes","getSplatMesh","getSplatScene","isMobile","DropInViewer","Group","viewer","callbackMesh","createCallbackMesh","onBeforeRender","colorWrite","mesh"],"mappings":"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"}