import*as e from"three";import{Ray as t,Plane as n,MathUtils as s,EventDispatcher as r,Vector3 as i,MOUSE as o,TOUCH as a,Quaternion as l,Spherical as c,Vector2 as d}from"three";class h{static OFFSET={X:0,Y:1,Z:2,SCALE0:3,SCALE1:4,SCALE2:5,ROTATION0:6,ROTATION1:7,ROTATION2:8,ROTATION3:9,FDC0:10,FDC1:11,FDC2:12,OPACITY:13};constructor(){this.splats=[],this.splatCount=0}static createSplat(){return[0,0,0,1,1,1,1,0,0,0,0,0,0,0]}addSplat(e){this.splats.push(e),this.splatCount++}getSplat(e){return this.splats[e]}addDefaultSplat(){const e=h.createSplat();return this.addSplat(e),e}addSplatFromComonents(e,t,n,s,r,i,o,a,l,c,d,h,u,p){const m=[e,t,n,s,r,i,o,a,l,c,d,h,u,p];return this.addSplat(m),m}addSplatFromArray(e,t){const n=e.splats[t];this.addSplatFromComonents(n[0],n[1],n[2],n[3],n[4],n[5],n[6],n[7],n[8],n[9],n[10],n[11],n[12],n[13])}}class u{static idGen=0;constructor(e,t){let n,s;this.promise=new Promise(((e,t)=>{n=e.bind(this),s=t.bind(this)}));e(((...e)=>{n(...e)}).bind(this),(e=>{s(e)}).bind(this)),this.abortHandler=t,this.id=u.idGen++}then(e){return new u(((t,n)=>{this.promise=this.promise.then(((...n)=>{const s=e(...n);s instanceof Promise||s instanceof u?s.then(((...e)=>{t(...e)})):t(s)})).catch((e=>{n(e)}))}),this.abortHandler)}catch(e){return new u((t=>{this.promise=this.promise.then(((...e)=>{t(...e)})).catch(e)}),this.abortHandler)}abort(){this.abortHandler&&this.abortHandler()}}class p extends Error{constructor(e){super(e)}}!function(){const e=new Float32Array(1),t=new Int32Array(e.buffer)}();const m=function(){const e=new Float32Array(1),t=new Int32Array(e.buffer);return function(n){return e[0]=n,t[0]}}(),f=function(e,t,n=!0){const s=new AbortController,r=s.signal;let i=!1,o=null;return new u(((s,a)=>{o=a,fetch(e,{signal:r}).then((async e=>{const r=e.body.getReader();let o=0,l=e.headers.get("Content-Length"),c=l?parseInt(l):void 0;const d=[];for(;!i;)try{const{value:e,done:i}=await r.read();if(i){if(t&&t(100,"100%",e,c),n){const e=new Blob(d).arrayBuffer();s(e)}else s();break}let a,l;if(o+=e.length,void 0!==c&&(a=o/c*100,l=`${a.toFixed(2)}%`),n&&d.push(e),t){t(a,l,e,c)&&(n=!1)}}catch(e){a(e);break}}))}),(()=>{s.abort(),o(new p("Fetch aborted.")),i=!0}))},g=function(e,t,n){return Math.max(Math.min(e,n),t)},S=function(){return performance.now()/1e3},y=e=>{if(e.geometry&&(e.geometry.dispose(),e.geometry=null),e.material&&(e.material.dispose(),e.material=null),e.children)for(let t of e.children)y(t)},A=e=>new Promise((t=>{window.setTimeout((()=>{t(e())}),1)}));class C{static CurrentMajorVersion=0;static CurrentMinorVersion=1;static CenterComponentCount=3;static ScaleComponentCount=3;static RotationComponentCount=4;static ColorComponentCount=4;static CovarianceComponentCount=6;static SplatScaleOffsetFloat=3;static SplatRotationOffsetFloat=6;static CompressionLevels={0:{BytesPerCenter:12,BytesPerColor:4,BytesPerScale:12,BytesPerRotation:16,BytesPerSplat:44,ScaleRange:1},1:{BytesPerCenter:6,BytesPerColor:4,BytesPerScale:6,BytesPerRotation:8,BytesPerSplat:24,ScaleRange:32767}};static CovarianceSizeFloats=6;static HeaderSizeBytes=4096;static SectionHeaderSizeBytes=1024;static BucketStorageSizeBytes=12;static BucketStorageSizeFloats=3;static BucketBlockSize=5;static BucketSize=256;constructor(e,t=!0){this.constructFromBuffer(e,t)}fbf(t){return 0===this.compressionLevel?t:e.DataUtils.fromHalfFloat(t)}getSplatCount(){return this.splatCount}getMaxSplatCount(){return this.maxSplatCount}getBucketIndex(e,t){let n;const s=e.fullBucketCount*e.bucketSize;if(t<s)n=Math.floor(t/e.bucketSize);else{let r=s;n=e.fullBucketCount;let i=0;for(;r<e.splatCount;){let s=e.partiallyFilledBucketLengths[i];if(t>=r&&t<r+s)break;r+=s,n++,i++}}return n}getSplatCenter(e,t,n){const s=this.globalSplatIndexToSectionMap[e],r=this.sections[s],i=e-r.splatCountOffset;if(1===this.compressionLevel){const e=i*this.uint16PerSplat,n=this.getBucketIndex(r,i)*C.BucketStorageSizeFloats,s=r.compressionScaleFactor,o=r.compressionScaleRange;t.x=(r.dataArrayUint16[e]-o)*s+r.bucketArray[n],t.y=(r.dataArrayUint16[e+1]-o)*s+r.bucketArray[n+1],t.z=(r.dataArrayUint16[e+2]-o)*s+r.bucketArray[n+2]}else{const e=i*this.float32PerSplat;t.x=r.dataArrayFloat32[e],t.y=r.dataArrayFloat32[e+1],t.z=r.dataArrayFloat32[e+2]}n&&t.applyMatrix4(n)}getSplatScaleAndRotation=function(){const t=new e.Matrix4,n=new e.Matrix4,s=new e.Matrix4,r=new e.Vector3;return function(e,i,o,a){const l=this.globalSplatIndexToSectionMap[e],c=this.sections[l],d=e-c.splatCountOffset,h=1===this.compressionLevel?this.uint16PerSplat:this.float32PerSplat,u=1===this.compressionLevel?c.dataArrayUint16:c.dataArrayFloat32,p=h*d,m=p+C.SplatScaleOffsetFloat;i.set(this.fbf(u[m]),this.fbf(u[m+1]),this.fbf(u[m+2]));const f=p+C.SplatRotationOffsetFloat;o.set(this.fbf(u[f+1]),this.fbf(u[f+2]),this.fbf(u[f+3]),this.fbf(u[f])),a&&(t.makeScale(i.x,i.y,i.z),n.makeRotationFromQuaternion(o),s.copy(t).multiply(n).multiply(a),s.decompose(r,o,i))}}();getSplatColor(e,t,n){const s=this.globalSplatIndexToSectionMap[e],r=this.sections[s],i=e-r.splatCountOffset,o=this.bytesPerSplat*i+this.bytesPerCenter+this.bytesPerScale+this.bytesPerRotation;t.set(r.dataArrayUint8[o],r.dataArrayUint8[o+1],r.dataArrayUint8[o+2],r.dataArrayUint8[o+3])}fillSplatCenterArray(t,n,s,r,i){const o=this.splatCount;s=s||0,r=r||o-1,void 0===i&&(i=s);const a=new e.Vector3;for(let e=s;e<=r;e++){const r=this.globalSplatIndexToSectionMap[e],o=this.sections[r],l=e-o.splatCountOffset,c=(e-s+i)*C.CenterComponentCount;if(1===this.compressionLevel){const e=l*this.uint16PerSplat,t=this.getBucketIndex(o,l)*C.BucketStorageSizeFloats,n=o.compressionScaleFactor,s=o.compressionScaleRange;a.x=(o.dataArrayUint16[e]-s)*n+o.bucketArray[t],a.y=(o.dataArrayUint16[e+1]-s)*n+o.bucketArray[t+1],a.z=(o.dataArrayUint16[e+2]-s)*n+o.bucketArray[t+2]}else{const e=l*this.float32PerSplat;a.x=o.dataArrayFloat32[e],a.y=o.dataArrayFloat32[e+1],a.z=o.dataArrayFloat32[e+2]}n&&a.applyMatrix4(n),t[c]=a.x,t[c+1]=a.y,t[c+2]=a.z}}static computeCovariance=function(){const t=new e.Matrix4,n=new e.Matrix3,s=new e.Matrix3,r=new e.Matrix3,i=new e.Matrix3,o=new e.Matrix3,a=new e.Matrix3,l=e.DataUtils.toHalfFloat.bind(e.DataUtils);return function(e,c,d,h,u=0,p){t.makeScale(e.x,e.y,e.z),n.setFromMatrix4(t),t.makeRotationFromQuaternion(c),s.setFromMatrix4(t),r.copy(s).multiply(n),i.copy(r).transpose().premultiply(r),d&&(o.setFromMatrix4(d),a.copy(o).transpose(),i.multiply(a),i.premultiply(o)),1===p?(h[u]=l(i.elements[0]),h[u+1]=l(i.elements[3]),h[u+2]=l(i.elements[6]),h[u+3]=l(i.elements[4]),h[u+4]=l(i.elements[7]),h[u+5]=l(i.elements[8])):(h[u]=i.elements[0],h[u+1]=i.elements[3],h[u+2]=i.elements[6],h[u+3]=i.elements[4],h[u+4]=i.elements[7],h[u+5]=i.elements[8])}}();fillSplatCovarianceArray(t,n,s,r,i,o){const a=this.splatCount,l=new e.Vector3,c=new e.Quaternion;s=s||0,r=r||a-1,void 0===i&&(i=s);const d=1===this.compressionLevel?this.uint16PerSplat:this.float32PerSplat;for(let e=s;e<=r;e++){const r=this.globalSplatIndexToSectionMap[e],a=this.sections[r],h=e-a.splatCountOffset,u=1===this.compressionLevel?a.dataArrayUint16:a.dataArrayFloat32,p=d*h,m=(e-s+i)*C.CovarianceComponentCount,f=p+C.SplatScaleOffsetFloat;l.set(this.fbf(u[f]),this.fbf(u[f+1]),this.fbf(u[f+2]));const g=p+C.SplatRotationOffsetFloat;c.set(this.fbf(u[g+1]),this.fbf(u[g+2]),this.fbf(u[g+3]),this.fbf(u[g])),C.computeCovariance(l,c,n,t,m,o)}}fillSplatColorArray(e,t,n,s,r,i){const o=this.splatCount;s=s||0,r=r||o-1,void 0===i&&(i=s);const a=this.bytesPerCenter+this.bytesPerScale+this.bytesPerRotation;for(let n=s;n<=r;n++){const r=this.globalSplatIndexToSectionMap[n],o=this.sections[r],l=n-o.splatCountOffset,c=this.bytesPerSplat*l+a,d=(n-s+i)*C.ColorComponentCount;let h=o.dataArrayUint8[c+3];h=h>=t?h:0,e[d]=o.dataArrayUint8[c],e[d+1]=o.dataArrayUint8[c+1],e[d+2]=o.dataArrayUint8[c+2],e[d+3]=h}}static parseHeader(t){const n=new Uint8Array(t,0,C.HeaderSizeBytes),s=new Uint16Array(t,0,C.HeaderSizeBytes/2),r=new Uint32Array(t,0,C.HeaderSizeBytes/4),i=new Float32Array(t,0,C.HeaderSizeBytes/4);return{versionMajor:n[0],versionMinor:n[1],maxSectionCount:r[1],sectionCount:r[2],maxSplatCount:r[3],splatCount:r[4],compressionLevel:s[10],sceneCenter:new e.Vector3(i[6],i[7],i[8])}}static writeHeaderCountsToBuffer(e,t,n){const s=new Uint32Array(n);s[2]=e,s[4]=t}static writeHeaderToBuffer(e,t){const n=new Uint8Array(t),s=new Uint32Array(t),r=new Float32Array(t),i=new Uint16Array(t);n[0]=e.versionMajor,n[1]=e.versionMinor,n[2]=0,n[3]=0,s[1]=e.maxSectionCount,s[2]=e.sectionCount,s[3]=e.maxSplatCount,s[4]=e.splatCount,i[10]=e.compressionLevel,r[6]=e.sceneCenter.x,r[7]=e.sceneCenter.y,r[8]=e.sceneCenter.z}static parseSectionHeaders(e,t,n=0,s){const r=e.compressionLevel,i=C.CompressionLevels[r].BytesPerCenter,o=C.CompressionLevels[r].BytesPerColor,a=C.CompressionLevels[r].BytesPerScale,l=C.CompressionLevels[r].BytesPerRotation,c=e.maxSectionCount,d=new Uint16Array(t,n,c*C.SectionHeaderSizeBytes/2),h=new Uint32Array(t,n,c*C.SectionHeaderSizeBytes/4),u=new Float32Array(t,n,c*C.SectionHeaderSizeBytes/4),p=[];let m=0,f=m/2,g=m/4,S=C.HeaderSizeBytes+e.maxSectionCount*C.SectionHeaderSizeBytes,y=0;for(let e=0;e<c;e++){const t=h[g+1],n=h[g+2],c=h[g+3],A=u[g+4],x=A/2,b=d[f+10],w=h[g+6]||C.CompressionLevels[r].ScaleRange,T=h[g+8],v=h[g+9],F=4*v,M=b*c+F,B=(i+a+l+o)*t,E=B+M,P={splatCountOffset:y,splatCount:s?t:0,maxSplatCount:t,bucketSize:n,bucketCount:c,bucketBlockSize:A,halfBucketBlockSize:x,bucketStorageSizeBytes:b,bucketsStorageSizeBytes:M,splatDataStorageSizeBytes:B,storageSizeBytes:E,compressionScaleRange:w,compressionScaleFactor:x/w,base:S,bucketsBase:S+F,dataBase:S+M,fullBucketCount:T,partiallyFilledBucketCount:v};p[e]=P,S+=E,m+=C.SectionHeaderSizeBytes,f=m/2,g=m/4,y+=t}return p}static writeSectionHeaderToBuffer(e,t,n,s=0){const r=new Uint16Array(n,s,C.SectionHeaderSizeBytes/2),i=new Uint32Array(n,s,C.SectionHeaderSizeBytes/4),o=new Float32Array(n,s,C.SectionHeaderSizeBytes/4);i[0]=e.splatCount,i[1]=e.maxSplatCount,i[2]=1===t?e.bucketSize:0,i[3]=1===t?e.bucketCount:0,o[4]=1===t?e.bucketBlockSize:0,r[10]=1===t?C.BucketStorageSizeBytes:0,i[6]=1===t?e.compressionScaleRange:0,i[7]=e.storageSizeBytes,i[8]=1===t?e.fullBucketCount:0,i[9]=1===t?e.partiallyFilledBucketCount:0}static writeSectionHeaderSplatCountToBuffer(e,t,n=0){new Uint32Array(t,n,C.SectionHeaderSizeBytes/4)[0]=e}constructFromBuffer(t,n){this.bufferData=t,this.globalSplatIndexToLocalSplatIndexMap=[],this.globalSplatIndexToSectionMap=[];const s=C.parseHeader(this.bufferData);this.versionMajor=s.versionMajor,this.versionMinor=s.versionMinor,this.maxSectionCount=s.maxSectionCount,this.sectionCount=n?s.maxSectionCount:0,this.maxSplatCount=s.maxSplatCount,this.splatCount=n?s.maxSplatCount:0,this.compressionLevel=s.compressionLevel,this.sceneCenter=(new e.Vector3).copy(s.sceneCenter),this.bytesPerCenter=C.CompressionLevels[this.compressionLevel].BytesPerCenter,this.bytesPerScale=C.CompressionLevels[this.compressionLevel].BytesPerScale,this.bytesPerRotation=C.CompressionLevels[this.compressionLevel].BytesPerRotation,this.bytesPerColor=C.CompressionLevels[this.compressionLevel].BytesPerColor,this.bytesPerSplat=this.bytesPerCenter+this.bytesPerScale+this.bytesPerRotation+this.bytesPerColor,this.float32PerSplat=this.bytesPerSplat/4,this.uint32PerSplat=this.bytesPerSplat/4,this.uint16PerSplat=this.bytesPerSplat/2,this.sections=C.parseSectionHeaders(s,this.bufferData,C.HeaderSizeBytes,n),this.linkBufferArrays(),this.buildMaps()}linkBufferArrays(){for(let e=0;e<this.maxSectionCount;e++){const t=this.sections[e];t.dataArrayUint8=new Uint8Array(this.bufferData,t.dataBase,t.maxSplatCount*this.bytesPerSplat),t.dataArrayUint16=new Uint16Array(this.bufferData,t.dataBase,t.maxSplatCount*this.uint16PerSplat),t.dataArrayUint32=new Uint32Array(this.bufferData,t.dataBase,t.maxSplatCount*this.uint32PerSplat),t.dataArrayFloat32=new Float32Array(this.bufferData,t.dataBase,t.maxSplatCount*this.float32PerSplat),t.bucketArray=new Float32Array(this.bufferData,t.bucketsBase,t.bucketCount*C.BucketStorageSizeFloats),t.partiallyFilledBucketCount>0&&(t.partiallyFilledBucketLengths=new Uint32Array(this.bufferData,t.base,t.partiallyFilledBucketCount))}}buildMaps(){let e=0;for(let t=0;t<this.maxSectionCount;t++){const n=this.sections[t];for(let s=0;s<n.maxSplatCount;s++){const n=e+s;this.globalSplatIndexToLocalSplatIndexMap[n]=s,this.globalSplatIndexToSectionMap[n]=t}e+=n.maxSplatCount}}updateLoadedCounts(e,t){C.writeHeaderCountsToBuffer(e,t,this.bufferData),this.sectionCount=e,this.splatCount=t}updateSectionLoadedCounts(e,t){const n=C.HeaderSizeBytes+C.SectionHeaderSizeBytes*e;C.writeSectionHeaderSplatCountToBuffer(t,this.bufferData,n),this.sections[e].splatCount=t}static generateFromUncompressedSplatArrays(t,n,s,r,i,o,a=[]){const l=C.CompressionLevels[s].BytesPerCenter,c=C.CompressionLevels[s].BytesPerScale,d=C.CompressionLevels[s].BytesPerRotation,u=l+c+d+C.CompressionLevels[s].BytesPerColor,p=C.CompressionLevels[s].ScaleRange,m=[],f=[];let S=0;const y=new e.Quaternion,A=e.DataUtils.toHalfFloat.bind(e.DataUtils);for(let r=0;r<t.length;r++){const x=t[r],b=a[r]||{},w=(b.blockSizeFactor||1)*(i||C.BucketBlockSize),T=Math.ceil((b.bucketSizeFactor||1)*(o||C.BucketSize)),v=new h;for(let e=0;e<x.splatCount;e++){const t=x.splats[e];let s;s=t[h.OFFSET.OPACITY]?t[h.OFFSET.OPACITY]:255,s>=n&&v.addSplatFromComonents(t[h.OFFSET.X],t[h.OFFSET.Y],t[h.OFFSET.Z],t[h.OFFSET.SCALE0],t[h.OFFSET.SCALE1],t[h.OFFSET.SCALE2],t[h.OFFSET.ROTATION0],t[h.OFFSET.ROTATION1],t[h.OFFSET.ROTATION2],t[h.OFFSET.ROTATION3],t[h.OFFSET.FDC0],t[h.OFFSET.FDC1],t[h.OFFSET.FDC2],t[h.OFFSET.OPACITY])}const F=C.computeBucketsForUncompressedSplatArray(v,w,T),M=F.fullBuckets.length,B=F.partiallyFullBuckets.map((e=>e.splats.length)),E=B.length,P=[...F.fullBuckets,...F.partiallyFullBuckets],I=v.splats.length*u,R=4*E,D=1===s?P.length*C.BucketStorageSizeBytes+R:0,k=I+D,O=new ArrayBuffer(k),L=p/(w/2),z=2*p+1,_=new e.Vector3,U=new e.Vector3;let V=0;for(let e=0;e<P.length;e++){const t=P[e];_.fromArray(t.center);for(let e=0;e<t.splats.length;e++){let n=t.splats[e];const r=v.splats[n],i=D+V*u,o=i+l,a=o+c,m=a+d;if(0===s){const e=new Float32Array(O,i,C.CenterComponentCount),t=new Float32Array(O,a,C.RotationComponentCount),n=new Float32Array(O,o,C.ScaleComponentCount);void 0!==r[h.OFFSET.SCALE0]?(y.set(r[h.OFFSET.ROTATION0],r[h.OFFSET.ROTATION1],r[h.OFFSET.ROTATION2],r[h.OFFSET.ROTATION3]),y.normalize(),t.set([y.x,y.y,y.z,y.w]),n.set([r[h.OFFSET.SCALE0],r[h.OFFSET.SCALE1],r[h.OFFSET.SCALE2]])):(t.set([1,0,0,0]),n.set([.01,.01,.01])),e.set([r[h.OFFSET.X],r[h.OFFSET.Y],r[h.OFFSET.Z]])}else{const e=new Uint16Array(O,i,C.CenterComponentCount),t=new Uint16Array(O,a,C.RotationComponentCount),n=new Uint16Array(O,o,C.ScaleComponentCount);void 0!==r[h.OFFSET.SCALE0]?(y.set(r[h.OFFSET.ROTATION0],r[h.OFFSET.ROTATION1],r[h.OFFSET.ROTATION2],r[h.OFFSET.ROTATION3]),y.normalize(),t.set([A(y.x),A(y.y),A(y.z),A(y.w)]),n.set([A(r[h.OFFSET.SCALE0]),A(r[h.OFFSET.SCALE1]),A(r[h.OFFSET.SCALE2])])):(t.set([A(1),0,0,0]),n.set([A(.01),A(.01),A(.01)])),U.set(r[h.OFFSET.X],r[h.OFFSET.Y],r[h.OFFSET.Z]).sub(_),U.x=Math.round(U.x*L)+p,U.x=g(U.x,0,z),U.y=Math.round(U.y*L)+p,U.y=g(U.y,0,z),U.z=Math.round(U.z*L)+p,U.z=g(U.z,0,z),e.set([U.x,U.y,U.z])}const f=new Uint8ClampedArray(O,m,4);void 0!==r[h.OFFSET.FDC0]?f.set([r[h.OFFSET.FDC0],r[h.OFFSET.FDC1],r[h.OFFSET.FDC2]]):f.set([255,0,0]),void 0!==r[h.OFFSET.OPACITY]?f[3]=r[h.OFFSET.OPACITY]:f[3]=255,V++}}if(S+=V,1===s){const e=new Uint32Array(O);for(let t=0;t<B.length;t++)e[t]=B[t];const t=new Float32Array(O,R,P.length*C.BucketStorageSizeFloats);for(let e=0;e<P.length;e++){const n=P[e],s=3*e;t[s]=n.center[0],t[s+1]=n.center[1],t[s+2]=n.center[2]}}m.push(O);const N=new ArrayBuffer(C.SectionHeaderSizeBytes);C.writeSectionHeaderToBuffer({maxSplatCount:V,splatCount:V,bucketSize:T,bucketCount:P.length,bucketBlockSize:w,compressionScaleRange:p,storageSizeBytes:k,fullBucketCount:M,partiallyFilledBucketCount:E},s,N,0),f.push(N)}let x=0;for(let e of m)x+=e.byteLength;const b=C.HeaderSizeBytes+C.SectionHeaderSizeBytes*m.length+x,w=new ArrayBuffer(b);C.writeHeaderToBuffer({versionMajor:0,versionMinor:1,maxSectionCount:m.length,sectionCount:m.length,maxSplatCount:S,splatCount:S,compressionLevel:s,sceneCenter:r},w);let T=C.HeaderSizeBytes;for(let e of f)new Uint8Array(w,T,C.SectionHeaderSizeBytes).set(new Uint8Array(e)),T+=C.SectionHeaderSizeBytes;for(let e of m)new Uint8Array(w,T,e.byteLength).set(new Uint8Array(e)),T+=e.byteLength;return new C(w)}static computeBucketsForUncompressedSplatArray(t,n,s){let r=t.splatCount;const i=n/2,o=new e.Vector3,a=new e.Vector3;for(let e=0;e<r;e++){const n=t.splats[e],s=[n[h.OFFSET.X],n[h.OFFSET.Y],n[h.OFFSET.Z]];(0===e||s[0]<o.x)&&(o.x=s[0]),(0===e||s[0]>a.x)&&(a.x=s[0]),(0===e||s[1]<o.y)&&(o.y=s[1]),(0===e||s[1]>a.y)&&(a.y=s[1]),(0===e||s[2]<o.z)&&(o.z=s[2]),(0===e||s[2]>a.z)&&(a.z=s[2])}const l=(new e.Vector3).copy(a).sub(o),c=Math.ceil(l.y/n),d=Math.ceil(l.z/n),u=new e.Vector3,p=[],m={};for(let e=0;e<r;e++){const r=t.splats[e],a=[r[h.OFFSET.X],r[h.OFFSET.Y],r[h.OFFSET.Z]],l=Math.floor((a[0]-o.x)/n),f=Math.floor((a[1]-o.y)/n),g=Math.floor((a[2]-o.z)/n);u.x=l*n+o.x+i,u.y=f*n+o.y+i,u.z=g*n+o.z+i;const S=l*(c*d)+f*d+g;let y=m[S];y||(m[S]=y={splats:[],center:u.toArray()}),y.splats.push(e),y.splats.length>=s&&(p.push(y),m[S]=null)}const f=[];for(let e in m)if(m.hasOwnProperty(e)){const t=m[e];t&&f.push(t)}return{fullBuckets:p,partiallyFullBuckets:f}}}const x=new Uint8Array([112,108,121,10]),b=new Uint8Array([10,101,110,100,95,104,101,97,100,101,114,10]),w="end_header",T=new Map([["char",Int8Array],["uchar",Uint8Array],["short",Int16Array],["ushort",Uint16Array],["int",Int32Array],["uint",Uint32Array],["float",Float32Array],["double",Float64Array]]),v=(e,t)=>{const n=(1<<t)-1;return(e&n)/n},F=(e,t)=>{e.x=v(t>>>21,11),e.y=v(t>>>11,10),e.z=v(t,11)},M=(e,t,n)=>e*(1-n)+t*n,B=(e,t)=>e.properties.find((e=>e.name===t&&e.storage))?.storage;class E{static decodeHeaderText(e){let t,n,s;const r=e.split("\n").filter((e=>!e.startsWith("comment ")));let i=0,o=!1;for(let e=1;e<r.length;++e){const a=r[e].split(" ");switch(a[0]){case"format":if("binary_little_endian"!==a[1])throw new Error("Unsupported ply format");break;case"element":t={name:a[1],count:parseInt(a[2],10),properties:[],storageSizeBytes:0},"chunk"===t.name?n=t:"vertex"===t.name&&(s=t);break;case"property":{if(!T.has(a[1]))throw new Error(`Unrecognized property data type '${a[1]}' in ply header`);const e=T.get(a[1]),n=e.BYTES_PER_ELEMENT*t.count;"vertex"===t.name&&(i+=e.BYTES_PER_ELEMENT),t.properties.push({type:a[1],name:a[2],storage:null,byteSize:e.BYTES_PER_ELEMENT,storageSizeByes:n}),t.storageSizeBytes+=n;break}case w:o=!0;break;default:throw new Error(`Unrecognized header value '${a[0]}' in ply header`)}if(o)break}return{chunkElement:n,vertexElement:s,bytesPerSplat:i,headerSizeBytes:e.indexOf(w)+10+1}}static decodeHeader(e){let t,n=new Uint8Array(e);if(n.length>=x.length&&!((e,t)=>{if(e.length<t.length)return!1;for(let n=0;n<t.length;++n)if(e[n]!==t[n])return!1;return!0})(n,x))throw new Error("Invalid PLY header");if(t=((e,t)=>{const n=e.length-t.length;let s,r;for(s=0;s<=n;++s){for(r=0;r<t.length&&e[s+r]===t[r];++r);if(r===t.length)return s}return-1})(n,b),-1===t)throw new Error("End of PLY header not found");const s=new TextDecoder("ascii").decode(n.slice(0,t)),{chunkElement:r,vertexElement:i,bytesPerSplat:o}=E.decodeHeaderText(s);return{headerSizeBytes:t+b.length,bytesPerSplat:o,chunkElement:r,vertexElement:i}}static readElementData(e,t,n,s,r,i=null){let o=t instanceof DataView?t:new DataView(t);s=s||0,r=r||e.count-1;for(let t=s;t<=r;++t)for(let s=0;s<e.properties.length;++s){const r=e.properties[s],a=T.get(r.type),l=a.BYTES_PER_ELEMENT*e.count;if(r.storage&&!(r.storage.byteLength<l)||i&&!i(r.name)||(r.storage=new a(e.count)),r.storage)switch(r.type){case"char":r.storage[t]=o.getInt8(n);break;case"uchar":r.storage[t]=o.getUint8(n);break;case"short":r.storage[t]=o.getInt16(n,!0);break;case"ushort":r.storage[t]=o.getUint16(n,!0);break;case"int":r.storage[t]=o.getInt32(n,!0);break;case"uint":r.storage[t]=o.getUint32(n,!0);break;case"float":r.storage[t]=o.getFloat32(n,!0);break;case"double":r.storage[t]=o.getFloat64(n,!0)}n+=r.byteSize}return n}static readPly(e,t=null){const n=E.decodeHeader(e);let s=E.readElementData(n.chunkElement,e,n.headerSizeBytes,null,null,t);return E.readElementData(n.vertexElement,e,s,null,null,t),{chunkElement:n.chunkElement,vertexElement:n.vertexElement}}static getElementStorageArrays(e,t){const n=B(e,"min_x"),s=B(e,"min_y"),r=B(e,"min_z"),i=B(e,"max_x"),o=B(e,"max_y"),a=B(e,"max_z"),l=B(e,"min_scale_x"),c=B(e,"min_scale_y"),d=B(e,"min_scale_z");return{positionExtremes:{minX:n,maxX:i,minY:s,maxY:o,minZ:r,maxZ:a},scaleExtremes:{minScaleX:l,maxScaleX:B(e,"max_scale_x"),minScaleY:c,maxScaleY:B(e,"max_scale_y"),minScaleZ:d,maxScaleZ:B(e,"max_scale_z")},position:B(t,"packed_position"),rotation:B(t,"packed_rotation"),scale:B(t,"packed_scale"),color:B(t,"packed_color")}}static decompressSplat=function(){const t=new e.Vector3,n=new e.Quaternion,s=new e.Vector3,r=new e.Vector4,i=h.OFFSET;return function(e,o,a,l,c,d,u,p,m){m=m||h.createSplat();const f=Math.floor((o+e)/256);var S,y;return F(t,a[e]),((e,t)=>{const n=1/(.5*Math.sqrt(2)),s=(v(t>>>20,10)-.5)*n,r=(v(t>>>10,10)-.5)*n,i=(v(t,10)-.5)*n,o=Math.sqrt(1-(s*s+r*r+i*i));switch(t>>>30){case 0:e.set(o,s,r,i);break;case 1:e.set(s,o,r,i);break;case 2:e.set(s,r,o,i);break;case 3:e.set(s,r,i,o)}})(n,u[e]),F(s,c[e]),S=r,y=p[e],S.x=v(y>>>24,8),S.y=v(y>>>16,8),S.z=v(y>>>8,8),S.w=v(y,8),m[i.X]=M(l.minX[f],l.maxX[f],t.x),m[i.Y]=M(l.minY[f],l.maxY[f],t.y),m[i.Z]=M(l.minZ[f],l.maxZ[f],t.z),m[i.ROTATION0]=n.x,m[i.ROTATION1]=n.y,m[i.ROTATION2]=n.z,m[i.ROTATION3]=n.w,m[i.SCALE0]=Math.exp(M(d.minScaleX[f],d.maxScaleX[f],s.x)),m[i.SCALE1]=Math.exp(M(d.minScaleY[f],d.maxScaleY[f],s.y)),m[i.SCALE2]=Math.exp(M(d.minScaleZ[f],d.maxScaleZ[f],s.z)),m[i.FDC0]=g(Math.floor(255*r.x),0,255),m[i.FDC1]=g(Math.floor(255*r.y),0,255),m[i.FDC2]=g(Math.floor(255*r.z),0,255),m[i.OPACITY]=g(Math.floor(255*r.w),0,255),m}}();static parseToUncompressedSplatBufferSection(e,t,n,s,r,i,o,a,l,c=null){E.readElementData(t,i,o,n,s,c);const d=C.CompressionLevels[0].BytesPerCenter,u=C.CompressionLevels[0].BytesPerScale,p=C.CompressionLevels[0].BytesPerRotation,m=C.CompressionLevels[0].BytesPerSplat,{positionExtremes:f,scaleExtremes:g,position:S,rotation:y,scale:A,color:x}=E.getElementStorageArrays(e,t),b=h.OFFSET,w=h.createSplat();for(let e=n;e<=s;++e){E.decompressSplat(e,r,S,f,A,g,y,x,w);const t=e*m+l,n=new Float32Array(a,t,3),s=new Float32Array(a,t+d,3),i=new Float32Array(a,t+d+u,4),o=new Uint8Array(a,t+d+u+p,4);n[0]=w[b.X],n[1]=w[b.Y],n[2]=w[b.Z],s[0]=w[b.SCALE0],s[1]=w[b.SCALE1],s[2]=w[b.SCALE2],i[0]=w[b.ROTATION0],i[1]=w[b.ROTATION1],i[2]=w[b.ROTATION2],i[3]=w[b.ROTATION3],o[0]=w[b.FDC0],o[1]=w[b.FDC1],o[2]=w[b.FDC2],o[3]=w[b.OPACITY]}}static parseToUncompressedSplatArray(t){const{chunkElement:n,vertexElement:s}=E.readPly(t),r=new h,{positionExtremes:i,scaleExtremes:o,position:a,rotation:l,scale:c,color:d}=E.getElementStorageArrays(n,s);for(let e=0;e<s.count;++e){r.addDefaultSplat();const t=r.getSplat(r.splatCount-1);E.decompressSplat(e,0,a,i,c,o,l,d,t)}return(new e.Matrix4).identity(),r}}class P{static HeaderEndToken="end_header";static Fields=["scale_0","scale_1","scale_2","rot_0","rot_1","rot_2","rot_3","x","y","z","f_dc_0","f_dc_1","f_dc_2","red","green","blue","opacity"];static checkTextForEndHeader(e){return!!e.includes(P.HeaderEndToken)}static checkBufferForEndHeader(e,t,n,s){const r=new Uint8Array(e,Math.max(0,t-n),n),i=s.decode(r);return P.checkTextForEndHeader(i)}static decodeHeaderText(e){const t=e.split("\n"),n=[];let s=0,r={},i=!1;for(let e=0;e<t.length;e++){const o=t[e].trim();if(n.push(o),o.startsWith("element chunk")||o.match(/[A-Za-z]*packed_[A-Za-z]*/))i=!0;else if(o.startsWith("element vertex")){const e=o.match(/\d+/);e&&(s=parseInt(e[0]))}else if(o.startsWith("property")){const e=o.match(/(\w+)\s+(\w+)\s+(\w+)/);if(e){const t=e[2];r[e[3]]=t}}else if(o===P.HeaderEndToken)break}let o=0,a={};const l={double:8,int:4,uint:4,float:4,short:2,ushort:2,uchar:1};for(let e in r)if(r.hasOwnProperty(e)){const t=r[e];a[e]=o,o+=l[t]}return{splatCount:s,propertyTypes:r,compressed:i,headerText:e,headerLines:n,headerSizeBytes:e.indexOf(P.HeaderEndToken)+P.HeaderEndToken.length+1,bytesPerSplat:o,fieldOffsets:a}}static decodeHeadeFromBuffer(e){const t=new TextDecoder;let n=0,s="";const r=100;for(;;){if(n+r>=e.byteLength)throw new Error("End of file reached while searching for end of header");const i=new Uint8Array(e,n,r);if(s+=t.decode(i),n+=r,P.checkBufferForEndHeader(e,n,200,t))break}return P.decodeHeaderText(s)}static findVertexData(e,t){return new DataView(e,t.headerSizeBytes)}static readRawVertexFast(e,t,n,s,r,i){let o=i||{};for(let i of s){const s=r[i];"float"===s?o[i]=e.getFloat32(t+n[i],!0):"uchar"===s&&(o[i]=e.getUint8(t+n[i])/255)}}static parseToUncompressedSplatBufferSection(e,t,n,s,r,i,o){const a=C.CompressionLevels[0].BytesPerCenter,l=C.CompressionLevels[0].BytesPerScale,c=C.CompressionLevels[0].BytesPerRotation,d=C.CompressionLevels[0].BytesPerSplat;for(let u=t;u<=n;u++){const t=P.parseToUncompressedSplat(s,u,e,r),n=u*d+o,p=new Float32Array(i,n,3),m=new Float32Array(i,n+a,3),f=new Float32Array(i,n+a+l,4),g=new Uint8Array(i,n+a+l+c,4);p[0]=t[h.OFFSET.X],p[1]=t[h.OFFSET.Y],p[2]=t[h.OFFSET.Z],m[0]=t[h.OFFSET.SCALE0],m[1]=t[h.OFFSET.SCALE1],m[2]=t[h.OFFSET.SCALE2],f[0]=t[h.OFFSET.ROTATION0],f[1]=t[h.OFFSET.ROTATION1],f[2]=t[h.OFFSET.ROTATION2],f[3]=t[h.OFFSET.ROTATION3],g[0]=t[h.OFFSET.FDC0],g[1]=t[h.OFFSET.FDC1],g[2]=t[h.OFFSET.FDC2],g[3]=t[h.OFFSET.OPACITY]}}static parseToUncompressedSplat=function(){let t={};const n=new e.Quaternion;return function(e,s,r,i=0){P.readRawVertexFast(e,s*r.bytesPerSplat+i,r.fieldOffsets,P.Fields,r.propertyTypes,t);const o=h.createSplat();if(void 0!==t.scale_0?(o[h.OFFSET.SCALE0]=Math.exp(t.scale_0),o[h.OFFSET.SCALE1]=Math.exp(t.scale_1),o[h.OFFSET.SCALE2]=Math.exp(t.scale_2)):(o[h.OFFSET.SCALE0]=.01,o[h.OFFSET.SCALE1]=.01,o[h.OFFSET.SCALE2]=.01),void 0!==t.f_dc_0){const e=.28209479177387814;o[h.OFFSET.FDC0]=255*(.5+e*t.f_dc_0),o[h.OFFSET.FDC1]=255*(.5+e*t.f_dc_1),o[h.OFFSET.FDC2]=255*(.5+e*t.f_dc_2)}else void 0!==t.red?(o[h.OFFSET.FDC0]=255*t.red,o[h.OFFSET.FDC1]=255*t.green,o[h.OFFSET.FDC2]=255*t.blue):(o[h.OFFSET.FDC0]=0,o[h.OFFSET.FDC1]=0,o[h.OFFSET.FDC2]=0);return void 0!==t.opacity&&(o[h.OFFSET.OPACITY]=1/(1+Math.exp(-t.opacity))*255),o[h.OFFSET.FDC0]=g(Math.floor(o[h.OFFSET.FDC0]),0,255),o[h.OFFSET.FDC1]=g(Math.floor(o[h.OFFSET.FDC1]),0,255),o[h.OFFSET.FDC2]=g(Math.floor(o[h.OFFSET.FDC2]),0,255),o[h.OFFSET.OPACITY]=g(Math.floor(o[h.OFFSET.OPACITY]),0,255),n.set(t.rot_0,t.rot_1,t.rot_2,t.rot_3),n.normalize(),o[h.OFFSET.ROTATION0]=n.x,o[h.OFFSET.ROTATION1]=n.y,o[h.OFFSET.ROTATION2]=n.z,o[h.OFFSET.ROTATION3]=n.w,o[h.OFFSET.X]=t.x,o[h.OFFSET.Y]=t.y,o[h.OFFSET.Z]=t.z,o}}();static parseToUncompressedSplatArray(e){const t=P.decodeHeadeFromBuffer(e);if(t.compressed)return E.parseToUncompressedSplatArray(e);{const n=t.splatCount,s=P.findVertexData(e,t),r=new h;for(let e=0;e<n;e++){const n=P.parseToUncompressedSplat(s,e,t);r.addSplat(n)}return r}}}class I{constructor(e,t,n,s){this.sectionCount=e,this.sectionFilters=t,this.groupingParameters=n,this.partitionGenerator=s}partitionUncompressedSplatArray(e){let t,n,s;if(this.partitionGenerator){const r=this.partitionGenerator(e);t=r.groupingParameters,n=r.sectionCount,s=r.sectionFilters}else t=this.groupingParameters,n=this.sectionCount,s=this.sectionFilters;const r=[];for(let t=0;t<n;t++){const n=new h,i=s[t];for(let t=0;t<e.splatCount;t++)i(t)&&n.addSplatFromArray(e,t);r.push(n)}return{splatArrays:r,parameters:t}}static getStandardPartitioner(t=0,n=new e.Vector3,s=C.BucketBlockSize,r=C.BucketSize){return new I(void 0,void 0,void 0,(i=>{t<=0&&(t=i.splatCount);const o=new e.Vector3,a=new e.Vector3,l=.5,c=e=>{e.x=Math.floor(e.x/l)*l,e.y=Math.floor(e.y/l)*l,e.z=Math.floor(e.z/l)*l};i.splats.sort(((e,t)=>{o.set(e[h.OFFSET.X],e[h.OFFSET.Y],e[h.OFFSET.Z]).sub(n),c(o);const s=o.lengthSq();a.set(t[h.OFFSET.X],t[h.OFFSET.Y],t[h.OFFSET.Z]).sub(n),c(a);return s>a.lengthSq()?1:-1}));const d=[],u=[];t=Math.min(i.splatCount,t);const p=Math.ceil(i.splatCount/t);let m=0;for(let e=0;e<p;e++){let e=m;d.push((n=>n>=e&&n<e+t)),u.push({blocksSize:s,bucketSize:r}),m+=t}return{sectionCount:d.length,sectionFilters:d,groupingParameters:u}}))}}class R{constructor(t,n,s,r,i,o,a){this.splatPartitioner=t,this.alphaRemovalThreshold=n,this.compressionLevel=s,this.sectionSize=r,this.sceneCenter=i?(new e.Vector3).copy(i):void 0,this.blockSize=o,this.bucketSize=a}generateFromUncompressedSplatArray(e){const t=this.splatPartitioner.partitionUncompressedSplatArray(e);return C.generateFromUncompressedSplatArrays(t.splatArrays,this.alphaRemovalThreshold,this.compressionLevel,this.sceneCenter,this.blockSize,this.bucketSize,t.parameters)}static getStandardGenerator(t=1,n=1,s=0,r=new e.Vector3,i=C.BucketBlockSize,o=C.BucketSize){const a=I.getStandardPartitioner(s,r,i,o);return new R(a,t,n,s,r,i,o)}}const D=0,k=1,O=2;class L{static DepthMapRange=65536;static MemoryPageSize=65536;static BytesPerFloat=4;static BytesPerInt=4;static MaxScenes=32;static StreamingSectionSize=524288}function z(e,t){let n=0;for(let t of e)n+=t.sizeBytes;(!t||t.byteLength<n)&&(t=new ArrayBuffer(n));let s=0;for(let n of e)new Uint8Array(t,s,n.sizeBytes).set(n.data),s+=n.sizeBytes;return t}class _{static loadFromURL(t,n,s,r,i,o,a,l,c,d){const h=L.StreamingSectionSize,u=C.HeaderSizeBytes+C.SectionHeaderSizeBytes;let p,m,g,S,y,A=0,x=0,b=!1,w=!1,T=!1,v=new Promise((e=>{y=e})),F=0,M=0,B=0,I="",R=null,U=[];const V=new TextDecoder;return f(t,((t,i,o)=>{const a=t>=100;if(s){if(o&&(U.push({data:o,sizeBytes:o.byteLength,startBytes:B,endBytes:B+o.byteLength}),B+=o.byteLength),b){if(T&&!w){const e=R.headerSizeBytes+R.chunkElement.storageSizeBytes;S=z(U,S),S.byteLength>=e&&(E.readElementData(R.chunkElement,S,R.headerSizeBytes),F=e,M=e,w=!0)}}else if(I+=V.decode(o),P.checkTextForEndHeader(I)){R=P.decodeHeaderText(I),T=R.compressed,T?(R=E.decodeHeaderText(I),A=R.vertexElement.count):(A=R.splatCount,w=!0);const t=u+C.CompressionLevels[0].BytesPerSplat*A;m=new ArrayBuffer(t),C.writeHeaderToBuffer({versionMajor:C.CurrentMajorVersion,versionMinor:C.CurrentMinorVersion,maxSectionCount:1,sectionCount:1,maxSplatCount:A,splatCount:x,compressionLevel:0,sceneCenter:new e.Vector3},m),F=R.headerSizeBytes,M=R.headerSizeBytes,b=!0}if(b&&w){if(U.length>0){p=z(U,p);if(B-F>h||a){const e=B-M,t=Math.floor(e/R.bytesPerSplat),n=t*R.bytesPerSplat,s=e-n,i=x+t,o=M-U[0].startBytes,l=new DataView(p,o,n),c=x*C.CompressionLevels[0].BytesPerSplat+u;if(T?E.parseToUncompressedSplatBufferSection(R.chunkElement,R.vertexElement,0,t-1,x,l,0,m,c):P.parseToUncompressedSplatBufferSection(R,0,t-1,l,0,m,c),x=i,g||(C.writeSectionHeaderToBuffer({maxSplatCount:A,splatCount:x,bucketSize:0,bucketCount:0,bucketBlockSize:0,compressionScaleRange:0,storageSizeBytes:0,fullBucketCount:0,partiallyFilledBucketCount:0},0,m,C.HeaderSizeBytes),g=new C(m,!1)),g.updateLoadedCounts(1,x),r(g,a),F+=h,M+=n,0===s)U=[];else{let e=[],t=0;for(let n=U.length-1;n>=0;n--){const r=U[n];if(t+=r.sizeBytes,e.unshift(r),t>=s)break}U=e}}}a&&y(g)}}n&&n(t,i,D)}),!s).then((e=>{n&&n(0,"0%",k);return(s?v:_.loadFromFileData(e,i,o,a,l,c,d)).then((e=>(n&&n(100,"100%",O),e)))}))}static loadFromFileData(e,t,n,s,r,i,o){return A((()=>P.parseToUncompressedSplatArray(e))).then((e=>R.getStandardGenerator(t,n,s,r,i,o).generateFromUncompressedSplatArray(e)))}}class U{static RowSizeBytes=32;static CenterSizeBytes=12;static ScaleSizeBytes=12;static RotationSizeBytes=4;static ColorSizeBytes=4;static parseToUncompressedSplatBufferSection(t,n,s,r,i,o){const a=C.CompressionLevels[0].BytesPerCenter,l=C.CompressionLevels[0].BytesPerScale,c=C.CompressionLevels[0].BytesPerRotation,d=C.CompressionLevels[0].BytesPerSplat;for(let h=t;h<=n;h++){const t=h*U.RowSizeBytes+r,n=new Float32Array(s,t,3),u=new Float32Array(s,t+U.CenterSizeBytes,3),p=new Uint8Array(s,t+U.CenterSizeBytes+U.ScaleSizeBytes,4),m=new Uint8Array(s,t+U.CenterSizeBytes+U.ScaleSizeBytes+U.RotationSizeBytes,4),f=new e.Quaternion((m[1]-128)/128,(m[2]-128)/128,(m[3]-128)/128,(m[0]-128)/128);f.normalize();const g=h*d+o,S=new Float32Array(i,g,3),y=new Float32Array(i,g+a,3),A=new Float32Array(i,g+a+l,4),C=new Uint8Array(i,g+a+l+c,4);S[0]=n[0],S[1]=n[1],S[2]=n[2],y[0]=u[0],y[1]=u[1],y[2]=u[2],A[0]=f.w,A[1]=f.x,A[2]=f.y,A[3]=f.z,C[0]=p[0],C[1]=p[1],C[2]=p[2],C[3]=p[3]}}static parseStandardSplatToUncompressedSplatArray(t){const n=t.byteLength/U.RowSizeBytes,s=new h;for(let r=0;r<n;r++){const n=r*U.RowSizeBytes,i=new Float32Array(t,n,3),o=new Float32Array(t,n+U.CenterSizeBytes,3),a=new Uint8Array(t,n+U.CenterSizeBytes+U.ScaleSizeBytes,4),l=new Uint8Array(t,n+U.CenterSizeBytes+U.ScaleSizeBytes+U.ColorSizeBytes,4),c=new e.Quaternion((l[1]-128)/128,(l[2]-128)/128,(l[3]-128)/128,(l[0]-128)/128);c.normalize(),s.addSplatFromComonents(i[0],i[1],i[2],o[0],o[1],o[2],c.w,c.x,c.y,c.z,a[0],a[1],a[2],a[3])}return s}}class V{static loadFromURL(t,n,s,r,i,o,a,l,c,d,h){const u=C.HeaderSizeBytes+C.SectionHeaderSizeBytes,p=L.StreamingSectionSize;let m,g,S,y,A=0,x=0,b=new Promise((e=>{y=e})),w=0,T=0,v=[];return f(t,((t,i,o,a)=>{const l=t>=100;if(a||(s=!1),s){if(!m){A=a/U.RowSizeBytes,m=new ArrayBuffer(a);const t=u+C.CompressionLevels[0].BytesPerSplat*A;g=new ArrayBuffer(t),C.writeHeaderToBuffer({versionMajor:C.CurrentMajorVersion,versionMinor:C.CurrentMinorVersion,maxSectionCount:1,sectionCount:1,maxSplatCount:A,splatCount:x,compressionLevel:0,sceneCenter:new e.Vector3},g)}if(o){v.push(o),new Uint8Array(m,T,o.byteLength).set(new Uint8Array(o)),T+=o.byteLength;const e=T-w;if(e>p||l){const t=(l?e:p)/U.RowSizeBytes,n=x+t;U.parseToUncompressedSplatBufferSection(x,n-1,m,0,g,u),x=n,S||(C.writeSectionHeaderToBuffer({maxSplatCount:A,splatCount:x,bucketSize:0,bucketCount:0,bucketBlockSize:0,compressionScaleRange:0,storageSizeBytes:0,fullBucketCount:0,partiallyFilledBucketCount:0},0,g,C.HeaderSizeBytes),S=new C(g,!1)),S.updateLoadedCounts(1,x),r(S,l),w+=p}}l&&y(S)}return n&&n(t,i,D),s}),!0).then((e=>{n&&n(0,"0%",k);return(s?b:V.loadFromFileData(e,i,o,a,l,c,d,h)).then((e=>(n&&n(100,"100%",O),e)))}))}static loadFromFileData(t,n,s,r,i,o,a,l){return A((()=>{const c=U.parseStandardSplatToUncompressedSplatArray(t);if(r){return R.getStandardGenerator(n,s,i,o,a,l).generateFromUncompressedSplatArray(c)}return C.generateFromUncompressedSplatArrays([c],n,0,new e.Vector3)}))}}class N{static checkVersion(e){const t=C.CurrentMajorVersion,n=C.CurrentMinorVersion,s=C.parseHeader(e);if(s.versionMajor===t&&s.versionMinor>=n||s.versionMajor>t)return!0;throw new Error(`KSplat version not supported: v${s.versionMajor}.${s.versionMinor}. Minimum required: v${t}.${n}`)}static loadFromURL(e,t,n,s){let r,i,o,a,l,c,d=!1,h=!1,u=[],p=!1,m=!1,g=0,S=0,y=L.StreamingSectionSize,A=0,x=!1,b=[],w=new Promise((e=>{c=e}));let T=0;const v=()=>{const e=()=>{m=!0;new Blob(b).arrayBuffer().then((e=>{m=!1,p=!0,l=new ArrayBuffer(a.maxSectionCount*C.SectionHeaderSizeBytes),new Uint8Array(l).set(new Uint8Array(e,C.HeaderSizeBytes,a.maxSectionCount*C.SectionHeaderSizeBytes)),u=C.parseSectionHeaders(a,l,0,!1);let t=0;for(let e=0;e<a.maxSectionCount;e++)t+=u[e].storageSizeBytes;const n=C.HeaderSizeBytes+a.maxSectionCount*C.SectionHeaderSizeBytes+t;if(!r){r=new ArrayBuffer(n);let e=0;for(let t=0;t<b.length;t++){const n=b[t];new Uint8Array(r,e,n.byteLength).set(new Uint8Array(n)),e+=n.byteLength}}A=C.HeaderSizeBytes+C.SectionHeaderSizeBytes*a.maxSectionCount;for(let e=0;e<=u.length&&e<a.maxSectionCount;e++)A+=u[e].storageSizeBytes;0===T&&(T++,window.setTimeout((()=>{T--,F(!0)}),1))}))};!m&&!p&&d&&g>=C.HeaderSizeBytes+C.SectionHeaderSizeBytes*a.maxSectionCount&&e()},F=()=>{if(p){if(x)return;x=g>=A;if(g-S>y||x){S=g,i||(i=new C(r,!1));const e=C.HeaderSizeBytes+C.SectionHeaderSizeBytes*a.maxSectionCount;let t=0,n=0,o=0;for(let s=0;s<a.maxSectionCount;s++){const r=u[s],l=e+(t+4*r.partiallyFilledBucketCount+r.bucketStorageSizeBytes*r.bucketCount);if(!(g>=l))break;{n++;const e=g-l,t=C.CompressionLevels[a.compressionLevel].BytesPerSplat;let c=Math.floor(e/t);c=Math.min(c,r.maxSplatCount),o+=c,i.updateLoadedCounts(n,o),i.updateSectionLoadedCounts(s,c)}t+=r.storageSizeBytes}s(i,x),x&&c(i)}}};return f(e,((e,s,i)=>{i&&(b.push(i),r&&new Uint8Array(r,g,i.byteLength).set(new Uint8Array(i)),g+=i.byteLength),n&&(!d&&!h&&g>=C.HeaderSizeBytes&&(h=!0,new Blob(b).arrayBuffer().then((e=>{o=new ArrayBuffer(C.HeaderSizeBytes),new Uint8Array(o).set(new Uint8Array(e,0,C.HeaderSizeBytes)),N.checkVersion(o),h=!1,d=!0,a=C.parseHeader(o),window.setTimeout((()=>{v()}),1)}))),v(),F()),t&&t(e,s,D)}),!n).then((e=>{t&&t(0,"0%",k);return(n?w:N.loadFromFileData(e)).then((e=>(t&&t(100,"100%",O),e)))}))}static loadFromFileData(e){return A((()=>(N.checkVersion(e),new C(e))))}static downloadFile=function(){let e;return function(t,n){const s=new Blob([t.bufferData],{type:"application/octet-stream"});e||(e=document.createElement("a"),document.body.appendChild(e)),e.download=n,e.href=URL.createObjectURL(s),e.click()}}()}const H={Splat:0,KSplat:1,Ply:2},j=e=>e.endsWith(".ply")?H.Ply:e.endsWith(".splat")?H.Splat:e.endsWith(".ksplat")?H.KSplat:null;var W=Object.freeze({__proto__:null,sceneFormatFromPath:j});const G={type:"change"},Q={type:"start"},Y={type:"end"},X=new t,K=new n,q=Math.cos(70*s.DEG2RAD);class $ extends r{constructor(e,t){super(),this.object=e,this.domElement=t,this.domElement.style.touchAction="none",this.enabled=!0,this.target=new i,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.zoomToCursor=!1,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"KeyA",UP:"KeyW",RIGHT:"KeyD",BOTTOM:"KeyS"},this.mouseButtons={LEFT:o.ROTATE,MIDDLE:o.DOLLY,RIGHT:o.PAN},this.touches={ONE:a.ROTATE,TWO:a.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this.getPolarAngle=function(){return u.phi},this.getAzimuthalAngle=function(){return u.theta},this.getDistance=function(){return this.object.position.distanceTo(this.target)},this.listenToKeyEvents=function(e){e.addEventListener("keydown",re),this._domElementKeyEvents=e},this.stopListenToKeyEvents=function(){this._domElementKeyEvents.removeEventListener("keydown",re),this._domElementKeyEvents=null},this.saveState=function(){n.target0.copy(n.target),n.position0.copy(n.object.position),n.zoom0=n.object.zoom},this.reset=function(){n.target.copy(n.target0),n.object.position.copy(n.position0),n.object.zoom=n.zoom0,n.object.updateProjectionMatrix(),n.dispatchEvent(G),n.update(),r=s.NONE},this.update=function(){const t=new i,o=(new l).setFromUnitVectors(e.up,new i(0,1,0)),a=o.clone().invert(),c=new i,d=new l,g=new i,S=2*Math.PI;return function(){o.setFromUnitVectors(e.up,new i(0,1,0)),a.copy(o).invert();const l=n.object.position;t.copy(l).sub(n.target),t.applyQuaternion(o),u.setFromVector3(t),n.autoRotate&&r===s.NONE&&I(2*Math.PI/60/60*n.autoRotateSpeed),n.enableDamping?(u.theta+=p.theta*n.dampingFactor,u.phi+=p.phi*n.dampingFactor):(u.theta+=p.theta,u.phi+=p.phi);let y=n.minAzimuthAngle,A=n.maxAzimuthAngle;isFinite(y)&&isFinite(A)&&(y<-Math.PI?y+=S:y>Math.PI&&(y-=S),A<-Math.PI?A+=S:A>Math.PI&&(A-=S),u.theta=y<=A?Math.max(y,Math.min(A,u.theta)):u.theta>(y+A)/2?Math.max(y,u.theta):Math.min(A,u.theta)),u.phi=Math.max(n.minPolarAngle,Math.min(n.maxPolarAngle,u.phi)),u.makeSafe(),!0===n.enableDamping?n.target.addScaledVector(f,n.dampingFactor):n.target.add(f),n.zoomToCursor&&M||n.object.isOrthographicCamera?u.radius=U(u.radius):u.radius=U(u.radius*m),t.setFromSpherical(u),t.applyQuaternion(a),l.copy(n.target).add(t),n.object.lookAt(n.target),!0===n.enableDamping?(p.theta*=1-n.dampingFactor,p.phi*=1-n.dampingFactor,f.multiplyScalar(1-n.dampingFactor)):(p.set(0,0,0),f.set(0,0,0));let C=!1;if(n.zoomToCursor&&M){let s=null;if(n.object.isPerspectiveCamera){const e=t.length();s=U(e*m);const r=e-s;n.object.position.addScaledVector(v,r),n.object.updateMatrixWorld()}else if(n.object.isOrthographicCamera){const e=new i(F.x,F.y,0);e.unproject(n.object),n.object.zoom=Math.max(n.minZoom,Math.min(n.maxZoom,n.object.zoom/m)),n.object.updateProjectionMatrix(),C=!0;const r=new i(F.x,F.y,0);r.unproject(n.object),n.object.position.sub(r).add(e),n.object.updateMatrixWorld(),s=t.length()}else console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled."),n.zoomToCursor=!1;null!==s&&(this.screenSpacePanning?n.target.set(0,0,-1).transformDirection(n.object.matrix).multiplyScalar(s).add(n.object.position):(X.origin.copy(n.object.position),X.direction.set(0,0,-1).transformDirection(n.object.matrix),Math.abs(n.object.up.dot(X.direction))<q?e.lookAt(n.target):(K.setFromNormalAndCoplanarPoint(n.object.up,n.target),X.intersectPlane(K,n.target))))}else n.object.isOrthographicCamera&&(n.object.zoom=Math.max(n.minZoom,Math.min(n.maxZoom,n.object.zoom/m)),n.object.updateProjectionMatrix(),C=!0);return m=1,M=!1,!!(C||c.distanceToSquared(n.object.position)>h||8*(1-d.dot(n.object.quaternion))>h||g.distanceToSquared(n.target)>0)&&(n.dispatchEvent(G),c.copy(n.object.position),d.copy(n.object.quaternion),g.copy(n.target),C=!1,!0)}}(),this.dispose=function(){n.domElement.removeEventListener("contextmenu",ie),n.domElement.removeEventListener("pointerdown",ee),n.domElement.removeEventListener("pointercancel",ne),n.domElement.removeEventListener("wheel",se),n.domElement.removeEventListener("pointermove",te),n.domElement.removeEventListener("pointerup",ne),null!==n._domElementKeyEvents&&(n._domElementKeyEvents.removeEventListener("keydown",re),n._domElementKeyEvents=null)};const n=this,s={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6};let r=s.NONE;const h=1e-6,u=new c,p=new c;let m=1;const f=new i,g=new d,S=new d,y=new d,A=new d,C=new d,x=new d,b=new d,w=new d,T=new d,v=new i,F=new d;let M=!1;const B=[],E={};function P(){return Math.pow(.95,n.zoomSpeed)}function I(e){p.theta-=e}function R(e){p.phi-=e}const D=function(){const e=new i;return function(t,n){e.setFromMatrixColumn(n,0),e.multiplyScalar(-t),f.add(e)}}(),k=function(){const e=new i;return function(t,s){!0===n.screenSpacePanning?e.setFromMatrixColumn(s,1):(e.setFromMatrixColumn(s,0),e.crossVectors(n.object.up,e)),e.multiplyScalar(t),f.add(e)}}(),O=function(){const e=new i;return function(t,s){const r=n.domElement;if(n.object.isPerspectiveCamera){const i=n.object.position;e.copy(i).sub(n.target);let o=e.length();o*=Math.tan(n.object.fov/2*Math.PI/180),D(2*t*o/r.clientHeight,n.object.matrix),k(2*s*o/r.clientHeight,n.object.matrix)}else n.object.isOrthographicCamera?(D(t*(n.object.right-n.object.left)/n.object.zoom/r.clientWidth,n.object.matrix),k(s*(n.object.top-n.object.bottom)/n.object.zoom/r.clientHeight,n.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),n.enablePan=!1)}}();function L(e){n.object.isPerspectiveCamera||n.object.isOrthographicCamera?m/=e:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),n.enableZoom=!1)}function z(e){n.object.isPerspectiveCamera||n.object.isOrthographicCamera?m*=e:(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),n.enableZoom=!1)}function _(t){if(!n.zoomToCursor)return;M=!0;const s=n.domElement.getBoundingClientRect(),r=t.clientX-s.left,i=t.clientY-s.top,o=s.width,a=s.height;F.x=r/o*2-1,F.y=-i/a*2+1,v.set(F.x,F.y,1).unproject(e).sub(e.position).normalize()}function U(e){return Math.max(n.minDistance,Math.min(n.maxDistance,e))}function V(e){g.set(e.clientX,e.clientY)}function N(e){A.set(e.clientX,e.clientY)}function H(){if(1===B.length)g.set(B[0].pageX,B[0].pageY);else{const e=.5*(B[0].pageX+B[1].pageX),t=.5*(B[0].pageY+B[1].pageY);g.set(e,t)}}function j(){if(1===B.length)A.set(B[0].pageX,B[0].pageY);else{const e=.5*(B[0].pageX+B[1].pageX),t=.5*(B[0].pageY+B[1].pageY);A.set(e,t)}}function W(){const e=B[0].pageX-B[1].pageX,t=B[0].pageY-B[1].pageY,n=Math.sqrt(e*e+t*t);b.set(0,n)}function $(e){if(1==B.length)S.set(e.pageX,e.pageY);else{const t=ae(e),n=.5*(e.pageX+t.x),s=.5*(e.pageY+t.y);S.set(n,s)}y.subVectors(S,g).multiplyScalar(n.rotateSpeed);const t=n.domElement;I(2*Math.PI*y.x/t.clientHeight),R(2*Math.PI*y.y/t.clientHeight),g.copy(S)}function Z(e){if(1===B.length)C.set(e.pageX,e.pageY);else{const t=ae(e),n=.5*(e.pageX+t.x),s=.5*(e.pageY+t.y);C.set(n,s)}x.subVectors(C,A).multiplyScalar(n.panSpeed),O(x.x,x.y),A.copy(C)}function J(e){const t=ae(e),s=e.pageX-t.x,r=e.pageY-t.y,i=Math.sqrt(s*s+r*r);w.set(0,i),T.set(0,Math.pow(w.y/b.y,n.zoomSpeed)),L(T.y),b.copy(w)}function ee(e){!1!==n.enabled&&(0===B.length&&(n.domElement.setPointerCapture(e.pointerId),n.domElement.addEventListener("pointermove",te),n.domElement.addEventListener("pointerup",ne)),function(e){B.push(e)}(e),"touch"===e.pointerType?function(e){switch(oe(e),B.length){case 1:switch(n.touches.ONE){case a.ROTATE:if(!1===n.enableRotate)return;H(),r=s.TOUCH_ROTATE;break;case a.PAN:if(!1===n.enablePan)return;j(),r=s.TOUCH_PAN;break;default:r=s.NONE}break;case 2:switch(n.touches.TWO){case a.DOLLY_PAN:if(!1===n.enableZoom&&!1===n.enablePan)return;n.enableZoom&&W(),n.enablePan&&j(),r=s.TOUCH_DOLLY_PAN;break;case a.DOLLY_ROTATE:if(!1===n.enableZoom&&!1===n.enableRotate)return;n.enableZoom&&W(),n.enableRotate&&H(),r=s.TOUCH_DOLLY_ROTATE;break;default:r=s.NONE}break;default:r=s.NONE}r!==s.NONE&&n.dispatchEvent(Q)}(e):function(e){let t;switch(e.button){case 0:t=n.mouseButtons.LEFT;break;case 1:t=n.mouseButtons.MIDDLE;break;case 2:t=n.mouseButtons.RIGHT;break;default:t=-1}switch(t){case o.DOLLY:if(!1===n.enableZoom)return;!function(e){_(e),b.set(e.clientX,e.clientY)}(e),r=s.DOLLY;break;case o.ROTATE:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===n.enablePan)return;N(e),r=s.PAN}else{if(!1===n.enableRotate)return;V(e),r=s.ROTATE}break;case o.PAN:if(e.ctrlKey||e.metaKey||e.shiftKey){if(!1===n.enableRotate)return;V(e),r=s.ROTATE}else{if(!1===n.enablePan)return;N(e),r=s.PAN}break;default:r=s.NONE}r!==s.NONE&&n.dispatchEvent(Q)}(e))}function te(e){!1!==n.enabled&&("touch"===e.pointerType?function(e){switch(oe(e),r){case s.TOUCH_ROTATE:if(!1===n.enableRotate)return;$(e),n.update();break;case s.TOUCH_PAN:if(!1===n.enablePan)return;Z(e),n.update();break;case s.TOUCH_DOLLY_PAN:if(!1===n.enableZoom&&!1===n.enablePan)return;!function(e){n.enableZoom&&J(e),n.enablePan&&Z(e)}(e),n.update();break;case s.TOUCH_DOLLY_ROTATE:if(!1===n.enableZoom&&!1===n.enableRotate)return;!function(e){n.enableZoom&&J(e),n.enableRotate&&$(e)}(e),n.update();break;default:r=s.NONE}}(e):function(e){switch(r){case s.ROTATE:if(!1===n.enableRotate)return;!function(e){S.set(e.clientX,e.clientY),y.subVectors(S,g).multiplyScalar(n.rotateSpeed);const t=n.domElement;I(2*Math.PI*y.x/t.clientHeight),R(2*Math.PI*y.y/t.clientHeight),g.copy(S),n.update()}(e);break;case s.DOLLY:if(!1===n.enableZoom)return;!function(e){w.set(e.clientX,e.clientY),T.subVectors(w,b),T.y>0?L(P()):T.y<0&&z(P()),b.copy(w),n.update()}(e);break;case s.PAN:if(!1===n.enablePan)return;!function(e){C.set(e.clientX,e.clientY),x.subVectors(C,A).multiplyScalar(n.panSpeed),O(x.x,x.y),A.copy(C),n.update()}(e)}}(e))}function ne(e){!function(e){delete E[e.pointerId];for(let t=0;t<B.length;t++)if(B[t].pointerId==e.pointerId)return void B.splice(t,1)}(e),0===B.length&&(n.domElement.releasePointerCapture(e.pointerId),n.domElement.removeEventListener("pointermove",te),n.domElement.removeEventListener("pointerup",ne)),n.dispatchEvent(Y),r=s.NONE}function se(e){!1!==n.enabled&&!1!==n.enableZoom&&r===s.NONE&&(e.preventDefault(),n.dispatchEvent(Q),function(e){_(e),e.deltaY<0?z(P()):e.deltaY>0&&L(P()),n.update()}(e),n.dispatchEvent(Y))}function re(e){!1!==n.enabled&&!1!==n.enablePan&&function(e){let t=!1;switch(e.code){case n.keys.UP:e.ctrlKey||e.metaKey||e.shiftKey?R(2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):O(0,n.keyPanSpeed),t=!0;break;case n.keys.BOTTOM:e.ctrlKey||e.metaKey||e.shiftKey?R(-2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):O(0,-n.keyPanSpeed),t=!0;break;case n.keys.LEFT:e.ctrlKey||e.metaKey||e.shiftKey?I(2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):O(n.keyPanSpeed,0),t=!0;break;case n.keys.RIGHT:e.ctrlKey||e.metaKey||e.shiftKey?I(-2*Math.PI*n.rotateSpeed/n.domElement.clientHeight):O(-n.keyPanSpeed,0),t=!0}t&&(e.preventDefault(),n.update())}(e)}function ie(e){!1!==n.enabled&&e.preventDefault()}function oe(e){let t=E[e.pointerId];void 0===t&&(t=new d,E[e.pointerId]=t),t.set(e.pageX,e.pageY)}function ae(e){const t=e.pointerId===B[0].pointerId?B[1]:B[0];return E[t.pointerId]}n.domElement.addEventListener("contextmenu",ie),n.domElement.addEventListener("pointerdown",ee),n.domElement.addEventListener("pointercancel",ne),n.domElement.addEventListener("wheel",se,{passive:!1}),this.update()}}class Z{static elementIDGen=0;constructor(e,t){this.taskIDGen=0,this.elementID=Z.elementIDGen++,this.tasks=[],this.message=e||"Loading...",this.container=t||document.body,this.spinnerContainerOuter=document.createElement("div"),this.spinnerContainerOuter.className=`spinnerOuterContainer${this.elementID}`,this.spinnerContainerOuter.style.display="none",this.spinnerContainerPrimary=document.createElement("div"),this.spinnerContainerPrimary.className=`spinnerContainerPrimary${this.elementID}`,this.spinnerPrimary=document.createElement("div"),this.spinnerPrimary.classList.add(`spinner${this.elementID}`,`spinnerPrimary${this.elementID}`),this.messageContainerPrimary=document.createElement("div"),this.messageContainerPrimary.classList.add(`messageContainer${this.elementID}`,`messageContainerPrimary${this.elementID}`),this.messageContainerPrimary.innerHTML=this.message,this.spinnerContainerMin=document.createElement("div"),this.spinnerContainerMin.className=`spinnerContainerMin${this.elementID}`,this.spinnerMin=document.createElement("div"),this.spinnerMin.classList.add(`spinner${this.elementID}`,`spinnerMin${this.elementID}`),this.messageContainerMin=document.createElement("div"),this.messageContainerMin.classList.add(`messageContainer${this.elementID}`,`messageContainerMin${this.elementID}`),this.messageContainerMin.innerHTML=this.message,this.spinnerContainerPrimary.appendChild(this.spinnerPrimary),this.spinnerContainerPrimary.appendChild(this.messageContainerPrimary),this.spinnerContainerOuter.appendChild(this.spinnerContainerPrimary),this.spinnerContainerMin.appendChild(this.spinnerMin),this.spinnerContainerMin.appendChild(this.messageContainerMin),this.spinnerContainerOuter.appendChild(this.spinnerContainerMin);const n=document.createElement("style");n.innerHTML=`\n\n            .spinnerOuterContainer${this.elementID} {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                top: 0;\n                left: 0;\n                position: absolute;\n                pointer-events: none;\n            }\n\n            .messageContainer${this.elementID} {\n                height: 20px;\n                font-family: arial;\n                font-size: 12pt;\n                color: #ffffff;\n                text-align: center;\n                vertical-align: middle;\n            }\n\n            .spinner${this.elementID} {\n                padding: 15px;\n                background: #07e8d6;\n                z-index:99999;\n            \n                aspect-ratio: 1;\n                border-radius: 50%;\n                --_m: \n                    conic-gradient(#0000,#000),\n                    linear-gradient(#000 0 0) content-box;\n                -webkit-mask: var(--_m);\n                    mask: var(--_m);\n                -webkit-mask-composite: source-out;\n                    mask-composite: subtract;\n                box-sizing: border-box;\n                animation: load 1s linear infinite;\n            }\n\n            .spinnerContainerPrimary${this.elementID} {\n                z-index:99999;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #666666 1px solid;\n                border-radius: 5px;\n                padding-top: 20px;\n                padding-bottom: 10px;\n                margin: 0;\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-80px, -80px);\n                width: 180px;\n                pointer-events: auto;\n            }\n\n            .spinnerPrimary${this.elementID} {\n                width: 120px;\n                margin-left: 30px;\n            }\n\n            .messageContainerPrimary${this.elementID} {\n                padding-top: 15px;\n            }\n\n            .spinnerContainerMin${this.elementID} {\n                z-index:99999;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #666666 1px solid;\n                border-radius: 5px;\n                padding-top: 20px;\n                padding-bottom: 15px;\n                margin: 0;\n                position: absolute;\n                bottom: 50px;\n                left: 50%;\n                transform: translate(-50%, 0);\n                display: flex;\n                flex-direction: left;\n                pointer-events: auto;\n                min-width: 250px;\n            }\n\n            .messageContainerMin${this.elementID} {\n                margin-right: 15px;\n            }\n\n            .spinnerMin${this.elementID} {\n                width: 50px;\n                height: 50px;\n                margin-left: 15px;\n                margin-right: 25px;\n            }\n\n            .messageContainerMin${this.elementID} {\n                padding-top: 15px;\n            }\n            \n            @keyframes load {\n                to{transform: rotate(1turn)}\n            }\n\n        `,this.spinnerContainerOuter.appendChild(n),this.container.appendChild(this.spinnerContainerOuter),this.setMinimized(!1,!0),this.fadeTransitions=[]}addTask(e){const t={message:e,id:this.taskIDGen++};return this.tasks.push(t),this.update(),t.id}removeTask(e){let t=0;for(let n of this.tasks){if(n.id===e){this.tasks.splice(t,1);break}t++}this.update()}removeAllTasks(){this.tasks=[],this.update()}setMessageForTask(e,t){for(let n of this.tasks)if(n.id===e){n.message=t;break}this.update()}update(){this.tasks.length>0?(this.show(),this.setMessage(this.tasks[this.tasks.length-1].message)):this.hide()}show(){this.spinnerContainerOuter.style.display="block",this.visible=!0}hide(){this.spinnerContainerOuter.style.display="none",this.visible=!1}setContainer(e){this.container&&this.container.removeChild(this.spinnerContainerOuter),e&&(this.container=e,this.container.appendChild(this.spinnerContainerOuter),this.spinnerContainerOuter.style.zIndex=this.container.style.zIndex+1)}setMinimized(e,t){const n=(e,t,n,s,r)=>{n?e.style.display=t?s:"none":this.fadeTransitions[r]=((e,t,n,s,r)=>{const i=performance.now();let o="none"===e.style.display?0:parseFloat(e.style.opacity);isNaN(o)&&(o=1);const a=window.setInterval((()=>{const l=performance.now()-i;let c,d=Math.min(l/s,1);d>.999&&(d=1),t?(c=(1-d)*o,c<1e-4&&(c=0)):c=(1-o)*d+o,c>0?(e.style.display=n,e.style.opacity=c):e.style.display="none",d>=1&&(r&&r(),window.clearInterval(a))}),16);return a})(e,!t,s,500,(()=>{this.fadeTransitions[r]=null}))};n(this.spinnerContainerPrimary,!e,t,"block",0),n(this.spinnerContainerMin,e,t,"flex",1),this.minimized=e}setMessage(e){this.messageContainerPrimary.innerHTML=e,this.messageContainerMin.innerHTML=e}}class J{constructor(e){this.idGen=0,this.tasks=[],this.container=e||document.body,this.progressBarContainerOuter=document.createElement("div"),this.progressBarContainerOuter.className="progressBarOuterContainer",this.progressBarContainerOuter.style.display="none",this.progressBarBox=document.createElement("div"),this.progressBarBox.className="progressBarBox",this.progressBarBackground=document.createElement("div"),this.progressBarBackground.className="progressBarBackground",this.progressBar=document.createElement("div"),this.progressBar.className="progressBar",this.progressBarBackground.appendChild(this.progressBar),this.progressBarBox.appendChild(this.progressBarBackground),this.progressBarContainerOuter.appendChild(this.progressBarBox);const t=document.createElement("style");t.innerHTML="\n\n            .progressBarOuterContainer {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                top: 0;\n                left: 0;\n                position: absolute;\n                pointer-events: none;\n            }\n\n            .progressBarBox {\n                z-index:99999;\n                padding: 7px 9px 5px 7px;\n                background-color: rgba(190, 190, 190, 0.75);\n                border: #555555 1px solid;\n                border-radius: 15px;\n                margin: 0;\n                position: absolute;\n                bottom: 50px;\n                left: 50%;\n                transform: translate(-50%, 0);\n                width: 180px;\n                height: 30px;\n                pointer-events: auto;\n            }\n\n            .progressBarBackground {\n                width: 100%;\n                height: 25px;\n                border-radius:10px;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #444444 1px solid;\n                box-shadow: inset 0 0 10px #333333;\n            }\n\n            .progressBar {\n                height: 25px;\n                width: 0px;\n                border-radius:10px;\n                background-color: rgba(0, 200, 0, 0.75);\n                box-shadow: inset 0 0 10px #003300;\n            }\n\n        ",this.progressBarContainerOuter.appendChild(t),this.container.appendChild(this.progressBarContainerOuter)}show(){this.progressBarContainerOuter.style.display="block"}hide(){this.progressBarContainerOuter.style.display="none"}setProgress(e){this.progressBar.style.width=e+"%"}setContainer(e){this.container&&this.container.removeChild(this.progressBarContainerOuter),e&&(this.container=e,this.container.appendChild(this.progressBarContainerOuter),this.progressBarContainerOuter.style.zIndex=this.container.style.zIndex+1)}}class ee{constructor(e){this.container=e||document.body,this.infoCells={};const t=[["Camera position","cameraPosition"],["Camera look-at","cameraLookAt"],["Camera up","cameraUp"],["Cursor position","cursorPosition"],["FPS","fps"],["Rendering:","renderSplatCount"],["Sort time","sortTime"],["Render window","renderWindow"],["Focal adjustment","focalAdjustment"]];this.infoPanelContainer=document.createElement("div");const n=document.createElement("style");n.innerHTML="\n\n            .infoPanel {\n                width: 430px;\n                padding: 10px;\n                background-color: rgba(50, 50, 50, 0.85);\n                border: #555555 2px solid;\n                color: #dddddd;\n                border-radius: 10px;\n                z-index: 9999;\n                font-family: arial;\n                font-size: 11pt;\n                text-align: left;\n                margin: 0;\n                top: 10px;\n                left:10px;\n                position: absolute;\n                pointer-events: auto;\n            }\n\n            .info-panel-cell {\n                margin-bottom: 5px;\n                padding-bottom: 2px;\n            }\n\n            .label-cell {\n                font-weight: bold;\n                font-size: 12pt;\n                width: 140px;\n            }\n\n        ",this.infoPanelContainer.append(n),this.infoPanel=document.createElement("div"),this.infoPanel.className="infoPanel";const s=document.createElement("div");s.style.display="table";for(let e of t){const t=document.createElement("div");t.style.display="table-row",t.className="info-panel-row";const n=document.createElement("div");n.style.display="table-cell",n.innerHTML=`${e[0]}: `,n.classList.add("info-panel-cell","label-cell");const r=document.createElement("div");r.style.display="table-cell",r.style.width="10px",r.innerHTML=" ",r.className="info-panel-cell";const i=document.createElement("div");i.style.display="table-cell",i.innerHTML="",i.className="info-panel-cell",this.infoCells[e[1]]=i,t.appendChild(n),t.appendChild(r),t.appendChild(i),s.appendChild(t)}this.infoPanel.appendChild(s),this.infoPanelContainer.append(this.infoPanel),this.infoPanelContainer.style.display="none",this.container.appendChild(this.infoPanelContainer),this.visible=!1}update=function(e,t,n,s,r,i,o,a,l,c,d){const h=`${t.x.toFixed(5)}, ${t.y.toFixed(5)}, ${t.z.toFixed(5)}`;if(this.infoCells.cameraPosition.innerHTML!==h&&(this.infoCells.cameraPosition.innerHTML=h),n){const e=n,t=`${e.x.toFixed(5)}, ${e.y.toFixed(5)}, ${e.z.toFixed(5)}`;this.infoCells.cameraLookAt.innerHTML!==t&&(this.infoCells.cameraLookAt.innerHTML=t)}const u=`${s.x.toFixed(5)}, ${s.y.toFixed(5)}, ${s.z.toFixed(5)}`;if(this.infoCells.cameraUp.innerHTML!==u&&(this.infoCells.cameraUp.innerHTML=u),r){const e=r,t=`${e.x.toFixed(5)}, ${e.y.toFixed(5)}, ${e.z.toFixed(5)}`;this.infoCells.cursorPosition.innerHTML=t}else this.infoCells.cursorPosition.innerHTML="N/A";this.infoCells.fps.innerHTML=i,this.infoCells.renderWindow.innerHTML=`${e.x} x ${e.y}`,this.infoCells.renderSplatCount.innerHTML=`${a} splats out of ${o} (${l.toFixed(2)}%)`,this.infoCells.sortTime.innerHTML=`${c.toFixed(3)} ms`,this.infoCells.focalAdjustment.innerHTML=`${d.toFixed(3)}`};setContainer(e){this.container&&this.container.removeChild(this.infoPanelContainer),e&&(this.container=e,this.container.appendChild(this.infoPanelContainer),this.infoPanelContainer.style.zIndex=this.container.style.zIndex+1)}show(){this.infoPanelContainer.style.display="block",this.visible=!0}hide(){this.infoPanelContainer.style.display="none",this.visible=!1}}class te extends e.Object3D{constructor(t=new e.Vector3(0,0,1),n=new e.Vector3(0,0,0),s=1,r=.1,i=16776960,o=.2*s,a=.2*o){super(),this.type="ArrowHelper";const l=new e.CylinderGeometry(r,r,s,32);l.translate(0,s/2,0);const c=new e.CylinderGeometry(0,a,o,32);c.translate(0,s,0),this.position.copy(n),this.line=new e.Mesh(l,new e.MeshBasicMaterial({color:i,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new e.Mesh(c,new e.MeshBasicMaterial({color:i,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(t)}setDirection(e){if(e.y>.99999)this.quaternion.set(0,0,0,1);else if(e.y<-.99999)this.quaternion.set(1,0,0,0);else{_axis.set(e.z,0,-e.x).normalize();const t=Math.acos(e.y);this.quaternion.setFromAxisAngle(_axis,t)}}setColor(e){this.line.material.color.set(e),this.cone.material.color.set(e)}copy(e){return super.copy(e,!1),this.line.copy(e.line),this.cone.copy(e.cone),this}dispose(){this.line.geometry.dispose(),this.line.material.dispose(),this.cone.geometry.dispose(),this.cone.material.dispose()}}class ne{constructor(e){this.threeScene=e,this.splatRenderTarget=null,this.renderTargetCopyQuad=null,this.renderTargetCopyCamera=null,this.meshCursor=null,this.focusMarker=null,this.controlPlane=null,this.debugRoot=null,this.secondaryDebugRoot=null}updateSplatRenderTargetForRenderDimensions(t,n){this.destroySplatRendertarget(),this.splatRenderTarget=new e.WebGLRenderTarget(t,n,{format:e.RGBAFormat,stencilBuffer:!1,depthBuffer:!0}),this.splatRenderTarget.depthTexture=new e.DepthTexture(t,n),this.splatRenderTarget.depthTexture.format=e.DepthFormat,this.splatRenderTarget.depthTexture.type=e.UnsignedIntType}destroySplatRendertarget(){this.splatRenderTarget&&(this.splatRenderTarget=null)}setupRenderTargetCopyObjects(){const t=new e.ShaderMaterial({vertexShader:"\n                varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \n                }\n            ",fragmentShader:"\n                #include <common>\n                #include <packing>\n                varying vec2 vUv;\n                uniform sampler2D sourceColorTexture;\n                uniform sampler2D sourceDepthTexture;\n                void main() {\n                    vec4 color = texture2D(sourceColorTexture, vUv);\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\n                    gl_FragDepth = fragDepth;\n                    gl_FragColor = vec4(color.rgb, color.a * 2.0);\n              }\n            ",uniforms:{sourceColorTexture:{type:"t",value:null},sourceDepthTexture:{type:"t",value:null}},depthWrite:!1,depthTest:!1,transparent:!0,blending:e.CustomBlending,blendSrc:e.SrcAlphaFactor,blendSrcAlpha:e.SrcAlphaFactor,blendDst:e.OneMinusSrcAlphaFactor,blendDstAlpha:e.OneMinusSrcAlphaFactor});t.extensions.fragDepth=!0,this.renderTargetCopyQuad=new e.Mesh(new e.PlaneGeometry(2,2),t),this.renderTargetCopyCamera=new e.OrthographicCamera(-1,1,1,-1,0,1)}destroyRenderTargetCopyObjects(){this.renderTargetCopyQuad&&(y(this.renderTargetCopyQuad),this.renderTargetCopyQuad=null)}setupMeshCursor(){if(!this.meshCursor){const t=new e.ConeGeometry(.5,1.5,32),n=new e.MeshBasicMaterial({color:16777215}),s=new e.Mesh(t,n);s.rotation.set(0,0,Math.PI),s.position.set(0,1,0);const r=new e.Mesh(t,n);r.position.set(0,-1,0);const i=new e.Mesh(t,n);i.rotation.set(0,0,Math.PI/2),i.position.set(1,0,0);const o=new e.Mesh(t,n);o.rotation.set(0,0,-Math.PI/2),o.position.set(-1,0,0),this.meshCursor=new e.Object3D,this.meshCursor.add(s),this.meshCursor.add(r),this.meshCursor.add(i),this.meshCursor.add(o),this.meshCursor.scale.set(.1,.1,.1),this.threeScene.add(this.meshCursor),this.meshCursor.visible=!1}}destroyMeshCursor(){this.meshCursor&&(y(this.meshCursor),this.threeScene.remove(this.meshCursor),this.meshCursor=null)}setMeshCursorVisibility(e){this.meshCursor.visible=e}getMeschCursorVisibility(){return this.meshCursor.visible}setMeshCursorPosition(e){this.meshCursor.position.copy(e)}positionAndOrientMeshCursor(e,t){this.meshCursor.position.copy(e),this.meshCursor.up.copy(t.up),this.meshCursor.lookAt(t.position)}setupFocusMarker(){if(!this.focusMarker){const t=new e.SphereGeometry(.5,32,32),n=ne.buildFocusMarkerMaterial();n.depthTest=!1,n.depthWrite=!1,n.transparent=!0,this.focusMarker=new e.Mesh(t,n)}}destroyFocusMarker(){this.focusMarker&&(y(this.focusMarker),this.focusMarker=null)}updateFocusMarker=function(){const t=new e.Vector3,n=new e.Matrix4;return function(e,s,r){n.copy(s.matrixWorld).invert(),t.copy(e).applyMatrix4(n),t.normalize().multiplyScalar(10),t.applyMatrix4(s.matrixWorld),this.focusMarker.position.copy(t),this.focusMarker.material.uniforms.realFocusPosition.value.copy(e),this.focusMarker.material.uniforms.viewport.value.copy(r),this.focusMarker.material.uniformsNeedUpdate=!0}}();setFocusMarkerVisibility(e){this.focusMarker.visible=e}setFocusMarkerOpacity(e){this.focusMarker.material.uniforms.opacity.value=e,this.focusMarker.material.uniformsNeedUpdate=!0}getFocusMarkerOpacity(){return this.focusMarker.material.uniforms.opacity.value}setupControlPlane(){if(!this.controlPlane){const t=new e.PlaneGeometry(1,1);t.rotateX(-Math.PI/2);const n=new e.MeshBasicMaterial({color:16777215});n.transparent=!0,n.opacity=.6,n.depthTest=!1,n.depthWrite=!1,n.side=e.DoubleSide;const s=new e.Mesh(t,n),r=new e.Vector3(0,1,0);r.normalize();const i=new e.Vector3(0,0,0),o=new te(r,i,.5,.01,56576,.1,.03);this.controlPlane=new e.Object3D,this.controlPlane.add(s),this.controlPlane.add(o)}}destroyControlPlane(){this.controlPlane&&(y(this.controlPlane),this.controlPlane=null)}setControlPlaneVisibility(e){this.controlPlane.visible=e}positionAndOrientControlPlane=function(){const t=new e.Quaternion,n=new e.Vector3(0,1,0);return function(e,s){t.setFromUnitVectors(n,s),this.controlPlane.position.copy(e),this.controlPlane.quaternion.copy(t)}}();addDebugMeshes(){this.debugRoot=this.createDebugMeshes(),this.secondaryDebugRoot=this.createSecondaryDebugMeshes(),this.threeScene.add(this.debugRoot),this.threeScene.add(this.secondaryDebugRoot)}destroyDebugMeshes(){for(let e of[this.debugRoot,this.secondaryDebugRoot])e&&(y(e),this.threeScene.remove(e));this.debugRoot=null,this.secondaryDebugRoot=null}createDebugMeshes(t){const n=new e.SphereGeometry(1,32,32),s=new e.Object3D,r=(r,i)=>{let o=new e.Mesh(n,ne.buildDebugMaterial(r));o.renderOrder=t,s.add(o),o.position.fromArray(i)};return r(16711680,[-50,0,0]),r(16711680,[50,0,0]),r(65280,[0,0,-50]),r(65280,[0,0,50]),r(16755200,[5,0,5]),s}createSecondaryDebugMeshes(t){const n=new e.BoxGeometry(3,3,3),s=new e.Object3D;const r=r=>{let i=new e.Mesh(n,ne.buildDebugMaterial(12303291));i.renderOrder=t,s.add(i),i.position.fromArray(r)};let i=10;return r([-10,0,-10]),r([-10,0,i]),r([i,0,-10]),r([i,0,i]),s}static buildDebugMaterial(t){const n={color:{type:"v3",value:new e.Color(t)}},s=new e.ShaderMaterial({uniforms:n,vertexShader:"\n            #include <common>\n            varying float ndcDepth;\n\n            void main() {\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\n                ndcDepth = gl_Position.z / gl_Position.w;\n                gl_Position.x = gl_Position.x / gl_Position.w;\n                gl_Position.y = gl_Position.y / gl_Position.w;\n                gl_Position.z = 0.0;\n                gl_Position.w = 1.0;\n    \n            }\n        ",fragmentShader:"\n            #include <common>\n            uniform vec3 color;\n            varying float ndcDepth;\n            void main() {\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\n                gl_FragColor = vec4(color.rgb, 0.0);\n            }\n        ",transparent:!1,depthTest:!0,depthWrite:!0,side:e.FrontSide});return s.extensions.fragDepth=!0,s}static buildFocusMarkerMaterial(t){const n={color:{type:"v3",value:new e.Color(t)},realFocusPosition:{type:"v3",value:new e.Vector3},viewport:{type:"v2",value:new e.Vector2},opacity:{value:0}};return new e.ShaderMaterial({uniforms:n,vertexShader:"\n            #include <common>\n\n            uniform vec2 viewport;\n            uniform vec3 realFocusPosition;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                float radius = 0.01;\n\n                vec4 viewPosition = modelViewMatrix * vec4(position.xyz, 1.0);\n                vec4 viewCenter = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\n\n                vec4 viewFocusPosition = modelViewMatrix * vec4(realFocusPosition, 1.0);\n\n                ndcPosition = projectionMatrix * viewPosition;\n                ndcPosition = ndcPosition * vec4(1.0 / ndcPosition.w);\n                ndcCenter = projectionMatrix * viewCenter;\n                ndcCenter = ndcCenter * vec4(1.0 / ndcCenter.w);\n\n                ndcFocusPosition = projectionMatrix * viewFocusPosition;\n                ndcFocusPosition = ndcFocusPosition * vec4(1.0 / ndcFocusPosition.w);\n\n                gl_Position = projectionMatrix * viewPosition;\n\n            }\n        ",fragmentShader:"\n            #include <common>\n            uniform vec3 color;\n            uniform vec2 viewport;\n            uniform float opacity;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                vec2 screenPosition = vec2(ndcPosition) * viewport;\n                vec2 screenCenter = vec2(ndcCenter) * viewport;\n\n                vec2 screenVec = screenPosition - screenCenter;\n\n                float projectedRadius = length(screenVec);\n\n                float lineWidth = 0.0005 * viewport.y;\n                float aaRange = 0.0025 * viewport.y;\n                float radius = 0.06 * viewport.y;\n                float radDiff = abs(projectedRadius - radius) - lineWidth;\n                float alpha = 1.0 - clamp(radDiff / 5.0, 0.0, 1.0); \n\n                gl_FragColor = vec4(color.rgb, alpha * opacity);\n            }\n        ",transparent:!0,depthTest:!1,depthWrite:!1,side:e.FrontSide})}dispose(){this.destroyMeshCursor(),this.destroyFocusMarker(),this.destroyDebugMeshes(),this.destroyControlPlane(),this.destroyRenderTargetCopyObjects(),this.destroySplatRendertarget()}}const se=new e.Vector3(1,0,0),re=new e.Vector3(0,1,0),ie=new e.Vector3(0,0,1);class oe{constructor(t=new e.Vector3,n=new e.Vector3){this.origin=new e.Vector3,this.direction=new e.Vector3,this.setParameters(t,n)}setParameters(e,t){this.origin.copy(e),this.direction.copy(t).normalize()}boxContainsPoint(e,t,n){return!(t.x<e.min.x-n||t.x>e.max.x+n||t.y<e.min.y-n||t.y>e.max.y+n||t.z<e.min.z-n||t.z>e.max.z+n)}intersectBox=function(){const t=new e.Vector3,n=[],s=[],r=[];return function(e,i){if(s[0]=this.origin.x,s[1]=this.origin.y,s[2]=this.origin.z,r[0]=this.direction.x,r[1]=this.direction.y,r[2]=this.direction.z,this.boxContainsPoint(e,this.origin,1e-4))return i&&(i.origin.copy(this.origin),i.normal.set(0,0,0),i.distance=-1),!0;for(let o=0;o<3;o++){if(0==r[o])continue;const a=0==o?se:1==o?re:ie,l=r[o]<0?e.max:e.min;let c=-Math.sign(r[o]);n[0]=0==o?l.x:1==o?l.y:l.z;let d=n[0]-s[o];if(d*c<0){const l=(o+1)%3,h=(o+2)%3;if(n[2]=r[l]/r[o]*d+s[l],n[1]=r[h]/r[o]*d+s[h],t.set(n[o],n[h],n[l]),this.boxContainsPoint(e,t,1e-4))return i&&(i.origin.copy(t),i.normal.copy(a).multiplyScalar(c),i.distance=t.sub(this.origin).length()),!0}}return!1}}();intersectSphere=function(){const t=new e.Vector3;return function(e,n,s){t.copy(e).sub(this.origin);const r=t.dot(this.direction),i=r*r,o=t.dot(t)-i,a=n*n;if(o>a)return!1;const l=Math.sqrt(a-o),c=r-l,d=r+l;if(d<0)return!1;let h=c<0?d:c;return s&&(s.origin.copy(this.origin).addScaledVector(this.direction,h),s.normal.copy(s.origin).sub(e).normalize(),s.distance=h),!0}}()}class ae{constructor(){this.origin=new e.Vector3,this.normal=new e.Vector3,this.distance=0,this.splatIndex=0}set(e,t,n,s){this.origin.copy(e),this.normal.copy(t),this.distance=n,this.splatIndex=s}clone(){const e=new ae;return e.origin.copy(this.origin),e.normal.copy(this.normal),e.distance=this.distance,e.splatIndex=this.splatIndex,e}}class le{constructor(e,t,n=!1){this.ray=new oe(e,t),this.raycastAgainstTrueSplatEllipsoid=n}setFromCameraAndScreenPosition=function(){const t=new e.Vector2;return function(e,n,s){if(t.x=n.x/s.x*2-1,t.y=(s.y-n.y)/s.y*2-1,e.isPerspectiveCamera)this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(e).sub(this.ray.origin).normalize(),this.camera=e;else{if(!e.isOrthographicCamera)throw new Error("Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type");this.ray.origin.set(n.x,n.y,(e.near+e.far)/(e.near-e.far)).unproject(e),this.ray.direction.set(0,0,-1).transformDirection(e.matrixWorld),this.camera=e}}}();intersectSplatMesh=function(){const t=new e.Matrix4,n=new e.Matrix4,s=new e.Matrix4,r=new oe,i=new e.Vector3;return function(e,o=[]){const a=e.getSplatTree();if(a){for(let l=0;l<a.subTrees.length;l++){const c=a.subTrees[l];n.copy(e.matrixWorld),e.dynamicMode&&(e.getSceneTransform(l,s),n.multiply(s)),t.copy(n).invert(),r.origin.copy(this.ray.origin).applyMatrix4(t),r.direction.copy(this.ray.origin).add(this.ray.direction),r.direction.applyMatrix4(t).sub(r.origin).normalize();const d=[];c.rootNode&&this.castRayAtSplatTreeNode(r,a,c.rootNode,d),d.forEach((e=>{e.origin.applyMatrix4(n),e.normal.applyMatrix4(n).normalize(),e.distance=i.copy(e.origin).sub(this.ray.origin).length()})),o.push(...d)}return o.sort(((e,t)=>e.distance>t.distance?1:-1)),o}}}();castRayAtSplatTreeNode=function(){const t=new e.Vector4,n=new e.Vector3,s=new e.Vector3,r=new e.Quaternion,i=new ae,o=1e-7,a=new e.Vector3(0,0,0),l=new e.Matrix4,c=new e.Matrix4,d=new e.Matrix4,h=new e.Matrix4,u=new e.Matrix4,p=new oe;return function(e,m,f,g=[]){if(e.intersectBox(f.boundingBox)){if(f.data&&f.data.indexes&&f.data.indexes.length>0)for(let S=0;S<f.data.indexes.length;S++){const y=f.data.indexes[S];if(m.splatMesh.getSplatColor(y,t),m.splatMesh.getSplatCenter(y,n),m.splatMesh.getSplatScaleAndRotation(y,s,r),!(s.x<=o||s.y<=o||s.z<=o))if(this.raycastAgainstTrueSplatEllipsoid){c.makeScale(s.x,s.y,s.z),d.makeRotationFromQuaternion(r);const o=2*Math.log10(t.w);if(l.makeScale(o,o,o),u.copy(l).multiply(d).multiply(c),h.copy(u).invert(),p.origin.copy(e.origin).sub(n).applyMatrix4(h),p.direction.copy(e.origin).add(e.direction).sub(n),p.direction.applyMatrix4(h).sub(p.origin).normalize(),p.intersectSphere(a,1,i)){const e=i.clone();e.splatIndex=y,e.origin.applyMatrix4(u).add(n),g.push(e)}}else{const t=(s.x+s.y+s.z)/3;if(e.intersectSphere(n,t,i)){const e=i.clone();e.splatIndex=y,g.push(e)}}}if(f.children&&f.children.length>0)for(let t of f.children)this.castRayAtSplatTreeNode(e,m,t,g);return g}}}()}class ce{constructor(t,n=new e.Vector3,s=new e.Quaternion,r=new e.Vector3(1,1,1),i=1){this.splatBuffer=t,this.position=n.clone(),this.quaternion=s.clone(),this.scale=r.clone(),this.transform=new e.Matrix4,this.minimumAlpha=i,this.updateTransform()}copyTransformData(e){this.position.copy(e.position),this.quaternion.copy(e.quaternion),this.scale.copy(e.scale),this.transform.copy(e.transform)}updateTransform(){this.transform.compose(this.position,this.quaternion,this.scale)}}class de{static idGen=0;constructor(t,n,s,r){this.min=(new e.Vector3).copy(t),this.max=(new e.Vector3).copy(n),this.boundingBox=new e.Box3(this.min,this.max),this.center=(new e.Vector3).copy(this.max).sub(this.min).multiplyScalar(.5).add(this.min),this.depth=s,this.children=[],this.data=null,this.id=r||de.idGen++}}class he{constructor(t,n){this.maxDepth=t,this.maxCentersPerNode=n,this.sceneDimensions=new e.Vector3,this.sceneMin=new e.Vector3,this.sceneMax=new e.Vector3,this.rootNode=null,this.nodesWithIndexes=[],this.splatMesh=null}static convertWorkerSubTreeNode(t){const n=(new e.Vector3).fromArray(t.min),s=(new e.Vector3).fromArray(t.max),r=new de(n,s,t.depth,t.id);if(t.data.indexes){r.data={indexes:[]};for(let e of t.data.indexes)r.data.indexes.push(e)}if(t.children)for(let e of t.children)r.children.push(he.convertWorkerSubTreeNode(e));return r}static convertWorkerSubTree(t,n){const s=new he(t.maxDepth,t.maxCentersPerNode);s.sceneMin=(new e.Vector3).fromArray(t.sceneMin),s.sceneMax=(new e.Vector3).fromArray(t.sceneMax),s.splatMesh=n,s.rootNode=he.convertWorkerSubTreeNode(t.rootNode);const r=(e,t)=>{0===e.children.length&&t(e);for(let n of e.children)r(n,t)};return s.nodesWithIndexes=[],r(s.rootNode,(e=>{e.data&&e.data.indexes&&e.data.indexes.length>0&&s.nodesWithIndexes.push(e)})),s}}let ue;function pe(e){let t=0;class n{constructor(e,t){this.min=[e[0],e[1],e[2]],this.max=[t[0],t[1],t[2]]}containsPoint(e){return e[0]>=this.min[0]&&e[0]<=this.max[0]&&e[1]>=this.min[1]&&e[1]<=this.max[1]&&e[2]>=this.min[2]&&e[2]<=this.max[2]}}class s{constructor(e,t){this.maxDepth=e,this.maxCentersPerNode=t,this.sceneDimensions=[],this.sceneMin=[],this.sceneMax=[],this.rootNode=null,this.addedIndexes={},this.nodesWithIndexes=[],this.splatMesh=null}}class r{constructor(e,n,s,r){this.min=[e[0],e[1],e[2]],this.max=[n[0],n[1],n[2]],this.center=[.5*(n[0]-e[0])+e[0],.5*(n[1]-e[1])+e[1],.5*(n[2]-e[2])+e[2]],this.depth=s,this.children=[],this.data=null,this.id=r||t++}}processSplatTreeNode=function(e,t,s,i){const o=t.data.indexes.length;if(o<e.maxCentersPerNode||t.depth>e.maxDepth){const n=[];for(let s=0;s<t.data.indexes.length;s++)e.addedIndexes[t.data.indexes[s]]||(n.push(t.data.indexes[s]),e.addedIndexes[t.data.indexes[s]]=!0);return t.data.indexes=n,t.data.indexes.sort(((e,t)=>e>t?1:-1)),void e.nodesWithIndexes.push(t)}const a=[t.max[0]-t.min[0],t.max[1]-t.min[1],t.max[2]-t.min[2]],l=[.5*a[0],.5*a[1],.5*a[2]],c=[t.min[0]+l[0],t.min[1]+l[1],t.min[2]+l[2]],d=[new n([c[0]-l[0],c[1],c[2]-l[2]],[c[0],c[1]+l[1],c[2]]),new n([c[0],c[1],c[2]-l[2]],[c[0]+l[0],c[1]+l[1],c[2]]),new n([c[0],c[1],c[2]],[c[0]+l[0],c[1]+l[1],c[2]+l[2]]),new n([c[0]-l[0],c[1],c[2]],[c[0],c[1]+l[1],c[2]+l[2]]),new n([c[0]-l[0],c[1]-l[1],c[2]-l[2]],[c[0],c[1],c[2]]),new n([c[0],c[1]-l[1],c[2]-l[2]],[c[0]+l[0],c[1],c[2]]),new n([c[0],c[1]-l[1],c[2]],[c[0]+l[0],c[1],c[2]+l[2]]),new n([c[0]-l[0],c[1]-l[1],c[2]],[c[0],c[1],c[2]+l[2]])],h=[],u=[];for(let e=0;e<d.length;e++)h[e]=0,u[e]=[];const p=[0,0,0];for(let e=0;e<o;e++){const n=t.data.indexes[e],r=s[n];p[0]=i[r],p[1]=i[r+1],p[2]=i[r+2];for(let e=0;e<d.length;e++)d[e].containsPoint(p)&&(h[e]++,u[e].push(n))}for(let e=0;e<d.length;e++){const n=new r(d[e].min,d[e].max,t.depth+1);n.data={indexes:u[e]},t.children.push(n)}t.data={};for(let n of t.children)processSplatTreeNode(e,n,s,i)};const i=(e,t,n)=>{const i=[0,0,0],o=[0,0,0],a=[],l=Math.floor(e.length/4);for(let t=0;t<l;t++){const n=4*t,s=e[n],r=e[n+1],l=e[n+2],c=Math.round(e[n+3]);(0===t||s<i[0])&&(i[0]=s),(0===t||s>o[0])&&(o[0]=s),(0===t||r<i[1])&&(i[1]=r),(0===t||r>o[1])&&(o[1]=r),(0===t||l<i[2])&&(i[2]=l),(0===t||l>o[2])&&(o[2]=l),a.push(c)}const c=new s(t,n);return c.sceneMin=i,c.sceneMax=o,c.rootNode=new r(c.sceneMin,c.sceneMax,0),c.rootNode.data={indexes:a},c};e.onmessage=t=>{t.data.process&&function(t,n,s){const r=[];for(let e of t){const t=Math.floor(e.length/4);for(let n=0;n<t;n++){const t=4*n;r[Math.round(e[t+3])]=t}}const o=[];for(let e of t){const t=i(e,n,s);o.push(t),processSplatTreeNode(t,t.rootNode,r,e)}e.postMessage({subTrees:o})}(t.data.process.centers,t.data.process.maxDepth,t.data.process.maxCentersPerNode)}}class me{constructor(e,t){this.maxDepth=e,this.maxCentersPerNode=t,this.subTrees=[],this.splatMesh=null}processSplatMesh=function(t,n=(()=>!0),s,r){ue||(ue=new Worker(URL.createObjectURL(new Blob(["(",pe.toString(),")(self)"],{type:"application/javascript"})))),this.splatMesh=t,this.subTrees=[];const i=new e.Vector3,o=(e,s)=>{const r=new Float32Array(4*s);let o=0;for(let a=0;a<s;a++){const s=a+e;if(n(s)){t.getSplatCenter(s,i);const e=4*o;r[e]=i.x,r[e+1]=i.y,r[e+2]=i.z,r[e+3]=s,o++}}return r},a=()=>{ue.terminate(),ue=null},l=e=>!!t.disposed&&(a(),e(),!0);return new Promise((e=>{s&&s(!1),A((()=>{if(l(e))return;const n=[];if(t.dynamicMode){let e=0;for(let s=0;s<t.scenes.length;s++){const r=t.getScene(s).splatBuffer.getSplatCount(),i=o(e,r);n.push(i),e+=r}}else{const e=o(0,t.getSplatCount());n.push(e)}ue.onmessage=n=>{l(e)||n.data.subTrees&&(r&&r(!1),A((()=>{if(!l(e)){for(let e of n.data.subTrees){const n=he.convertWorkerSubTree(e,t);this.subTrees.push(n)}a(),r&&r(!0),A((()=>{e()}))}})))},A((()=>{if(l(e))return;s&&s(!0);const t=n.map((e=>e.buffer));!function(e,t,n,s){ue.postMessage({process:{centers:e,maxDepth:n,maxCentersPerNode:s}},t)}(n,t,this.maxDepth,this.maxCentersPerNode)}))}))}))};countLeaves(){let e=0;return this.visitLeaves((()=>{e++})),e}visitLeaves(e){const t=(e,n)=>{0===e.children.length&&n(e);for(let s of e.children)t(s,n)};for(let n of this.subTrees)t(n.rootNode,e)}}function fe(e){const t={};function n(n){if(void 0!==t[n])return t[n];let s;switch(n){case"WEBGL_depth_texture":s=e.getExtension("WEBGL_depth_texture")||e.getExtension("MOZ_WEBGL_depth_texture")||e.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":s=e.getExtension("EXT_texture_filter_anisotropic")||e.getExtension("MOZ_EXT_texture_filter_anisotropic")||e.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":s=e.getExtension("WEBGL_compressed_texture_s3tc")||e.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":s=e.getExtension("WEBGL_compressed_texture_pvrtc")||e.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:s=e.getExtension(n)}return t[n]=s,s}return{has:function(e){return null!==n(e)},init:function(e){e.isWebGL2?(n("EXT_color_buffer_float"),n("WEBGL_clip_cull_distance")):(n("WEBGL_depth_texture"),n("OES_texture_float"),n("OES_texture_half_float"),n("OES_texture_half_float_linear"),n("OES_standard_derivatives"),n("OES_element_index_uint"),n("OES_vertex_array_object"),n("ANGLE_instanced_arrays")),n("OES_texture_float_linear"),n("EXT_color_buffer_half_float"),n("WEBGL_multisampled_render_to_texture")},get:function(e){const t=n(e);return null===t&&console.warn("THREE.WebGLRenderer: "+e+" extension not supported."),t}}}function ge(e,t,n){let s;function r(t){if("highp"===t){if(e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.HIGH_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.HIGH_FLOAT).precision>0)return"highp";t="mediump"}return"mediump"===t&&e.getShaderPrecisionFormat(e.VERTEX_SHADER,e.MEDIUM_FLOAT).precision>0&&e.getShaderPrecisionFormat(e.FRAGMENT_SHADER,e.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}const i="undefined"!=typeof WebGL2RenderingContext&&"WebGL2RenderingContext"===e.constructor.name;let o=void 0!==n.precision?n.precision:"highp";const a=r(o);a!==o&&(console.warn("THREE.WebGLRenderer:",o,"not supported, using",a,"instead."),o=a);const l=i||t.has("WEBGL_draw_buffers"),c=!0===n.logarithmicDepthBuffer,d=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS),h=e.getParameter(e.MAX_VERTEX_TEXTURE_IMAGE_UNITS),u=e.getParameter(e.MAX_TEXTURE_SIZE),p=e.getParameter(e.MAX_CUBE_MAP_TEXTURE_SIZE),m=e.getParameter(e.MAX_VERTEX_ATTRIBS),f=e.getParameter(e.MAX_VERTEX_UNIFORM_VECTORS),g=e.getParameter(e.MAX_VARYING_VECTORS),S=e.getParameter(e.MAX_FRAGMENT_UNIFORM_VECTORS),y=h>0,A=i||t.has("OES_texture_float");return{isWebGL2:i,drawBuffers:l,getMaxAnisotropy:function(){if(void 0!==s)return s;if(!0===t.has("EXT_texture_filter_anisotropic")){const n=t.get("EXT_texture_filter_anisotropic");s=e.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else s=0;return s},getMaxPrecision:r,precision:o,logarithmicDepthBuffer:c,maxTextures:d,maxVertexTextures:h,maxTextureSize:u,maxCubemapSize:p,maxAttributes:m,maxVertexUniforms:f,maxVaryings:g,maxFragmentUniforms:S,vertexTextures:y,floatFragmentTextures:A,floatVertexTextures:y&&A,maxSamples:i?e.getParameter(e.MAX_SAMPLES):0}}const Se={Default:0,Gradual:1,Instant:2},ye=new e.BufferGeometry,Ae=new e.MeshBasicMaterial;class Ce extends e.Mesh{constructor(t=!0,n=!1,s=1,r=!0,i=!1,o=!1,a=2048){super(ye,Ae),this.renderer=void 0,this.halfPrecisionCovariancesOnGPU=n,this.dynamicMode=t,this.devicePixelRatio=s,this.enableDistancesComputationOnGPU=r,this.integerBasedDistancesComputation=i,this.antialiased=o,this.maxScreenSpaceSplatSize=a,this.scenes=[],this.splatTree=null,this.splatDataTextures={},this.distancesTransformFeedback={id:null,vertexShader:null,fragmentShader:null,program:null,centersBuffer:null,transformIndexesBuffer:null,outDistancesBuffer:null,centersLoc:-1,modelViewProjLoc:-1,transformIndexesLoc:-1,transformsLocs:[]},this.globalSplatIndexToLocalSplatIndexMap=[],this.globalSplatIndexToSceneIndexMap=[],this.lastBuildSplatCount=0,this.lastBuildScenes=[],this.lastBuildMaxSplatCount=0,this.lastBuildSceneCount=0,this.firstRenderTime=-1,this.finalBuild=!1,this.webGLUtils=null,this.boundingBox=new e.Box3,this.calculatedSceneCenter=new e.Vector3,this.maxSplatDistanceFromSceneCenter=0,this.visibleRegionBufferRadius=0,this.visibleRegionRadius=0,this.visibleRegionFadeStartRadius=0,this.visibleRegionChanging=!1,this.disposed=!1}static buildMaterial(t=!1,n=!1,s=2048){let r="\n            precision highp float;\n            #include <common>\n\n            attribute uint splatIndex;\n\n            uniform highp sampler2D covariancesTexture;\n            uniform highp usampler2D centersColorsTexture;";t&&(r+=`\n                uniform highp usampler2D transformIndexesTexture;\n                uniform highp mat4 transforms[${L.MaxScenes}];\n                uniform vec2 transformIndexesTextureSize;\n            `),r+="\n            uniform vec2 focal;\n            uniform float inverseFocalAdjustment;\n            uniform vec2 viewport;\n            uniform vec2 basisViewport;\n            uniform vec2 covariancesTextureSize;\n            uniform vec2 centersColorsTextureSize;\n            uniform float visibleRegionRadius;\n            uniform float visibleRegionFadeStartRadius;\n            uniform float firstRenderTime;\n            uniform float currentTime;\n            uniform int fadeInComplete;\n            uniform vec3 sceneCenter;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            const float sqrt8 = sqrt(8.0);\n            const float minAlpha = 1.0 / 255.0;\n\n            const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\n            const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));\n            const uvec4 shift4 = uvec4(0, 8, 16, 24);\n            vec4 uintToRGBAVec (uint u) {\n               uvec4 urgba = mask4 & u;\n               urgba = urgba >> shift4;\n               vec4 rgba = vec4(urgba) * encodeNorm4;\n               return rgba;\n            }\n\n            vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\n                vec2 samplerUV = vec2(0.0, 0.0);\n                float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\n                samplerUV.y = float(floor(d)) / dimensions.y;\n                samplerUV.x = fract(d);\n                return samplerUV;\n            }\n\n            void main () {\n\n                uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));\n                vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));",r+=t?"\n                    uint transformIndex = texture(transformIndexesTexture, getDataUV(1, 0, transformIndexesTextureSize)).r;\n                    mat4 transform = transforms[transformIndex];\n                    mat4 transformModelViewMatrix = modelViewMatrix * transform;\n                ":"mat4 transformModelViewMatrix = modelViewMatrix;",r+="\n                vec4 viewCenter = transformModelViewMatrix * vec4(splatCenter, 1.0);\n\n                vec4 clipCenter = projectionMatrix * viewCenter;\n\n                float clip = 1.2 * clipCenter.w;\n                if (clipCenter.z < -clip || clipCenter.x < -clip || clipCenter.x > clip || clipCenter.y < -clip || clipCenter.y > clip) {\n                    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n                    return;\n                }\n\n                vPosition = position.xy;\n                vColor = uintToRGBAVec(sampledCenterColor.r);\n\n                vec2 sampledCovarianceA = texture(covariancesTexture, getDataUV(3, 0, covariancesTextureSize)).rg;\n                vec2 sampledCovarianceB = texture(covariancesTexture, getDataUV(3, 1, covariancesTextureSize)).rg;\n                vec2 sampledCovarianceC = texture(covariancesTexture, getDataUV(3, 2, covariancesTextureSize)).rg;\n\n                vec3 cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rg, sampledCovarianceB.r);\n                vec3 cov3D_M22_M23_M33 = vec3(sampledCovarianceB.g, sampledCovarianceC.rg);\n\n                // Construct the 3D covariance matrix\n                mat3 Vrk = mat3(\n                    cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\n                    cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\n                    cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\n                );\n\n                // Construct the Jacobian of the affine approximation of the projection matrix. It will be used to transform the\n                // 3D covariance matrix instead of using the actual projection matrix because that transformation would\n                // require a non-linear component (perspective division) which would yield a non-gaussian result. (This assumes\n                // the current projection is a perspective projection).\n\n                float s = 1.0 / (viewCenter.z * viewCenter.z);\n                mat3 J = mat3(\n                    focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) * s,\n                    0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) * s,\n                    0., 0., 0.\n                );\n\n                // Concatenate the projection approximation with the model-view transformation\n                mat3 W = transpose(mat3(transformModelViewMatrix));\n                mat3 T = W * J;\n\n                // Transform the 3D covariance matrix (Vrk) to compute the 2D covariance matrix\n                mat3 cov2Dm = transpose(T) * Vrk * T;\n                ",r+=n?"\n                    float detOrig = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\n                    cov2Dm[0][0] += 0.3;\n                    cov2Dm[1][1] += 0.3;\n                    float detBlur = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\n                    float compensation = sqrt(max(detOrig / detBlur, 0.0));\n                ":"\n                    cov2Dm[0][0] += 0.3;\n                    cov2Dm[1][1] += 0.3;\n                    float compensation = 1.0;\n                ",r+=`\n\n                vColor.a *= compensation;\n\n                if (vColor.a < minAlpha) return;\n\n                // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\n                // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\n                // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\n                // need cov2Dm[1][0] because it is a symetric matrix.\n                vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\n\n                vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\n\n                // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\n                // so that we can determine the 2D basis for the splat. This is done using the method described\n                // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n                // After calculating the eigen-values and eigen-vectors, we calculate the basis for rendering the splat\n                // by normalizing the eigen-vectors and then multiplying them by (sqrt(8) * eigen-value), which is\n                // equal to scaling them by sqrt(8) standard deviations.\n                //\n                // This is a different approach than in the original work at INRIA. In that work they compute the\n                // max extents of the projected splat in screen space to form a screen-space aligned bounding rectangle\n                // which forms the geometry that is actually rasterized. The dimensions of that bounding box are 3.0\n                // times the maximum eigen-value, or 3 standard deviations. They then use the inverse 2D covariance\n                // matrix (called 'conic') in the CUDA rendering thread to determine fragment opacity by calculating the\n                // full gaussian: exp(-0.5 * (X - mean) * conic * (X - mean)) * splat opacity\n                float a = cov2Dv.x;\n                float d = cov2Dv.z;\n                float b = cov2Dv.y;\n                float D = a * d - b * b;\n                float trace = a + d;\n                float traceOver2 = 0.5 * trace;\n                float term2 = sqrt(max(0.1f, traceOver2 * traceOver2 - D));\n                float eigenValue1 = traceOver2 + term2;\n                float eigenValue2 = traceOver2 - term2;\n\n                if (eigenValue2 <= 0.0) return;\n\n                vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\n                // since the eigen vectors are orthogonal, we derive the second one from the first\n                vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);\n\n                // We use sqrt(8) standard deviations instead of 3 to eliminate more of the splat with a very low opacity.\n                vec2 basisVector1 = eigenVector1 * min(sqrt8 * sqrt(eigenValue1), ${parseInt(s)}.0);\n                vec2 basisVector2 = eigenVector2 * min(sqrt8 * sqrt(eigenValue2), ${parseInt(s)}.0);\n\n                if (fadeInComplete == 0) {\n                    float opacityAdjust = 1.0;\n                    float centerDist = length(splatCenter - sceneCenter);\n                    float renderTime = max(currentTime - firstRenderTime, 0.0);\n\n                    float fadeDistance = 0.75;\n                    float distanceLoadFadeInFactor = step(visibleRegionFadeStartRadius, centerDist);\n                    distanceLoadFadeInFactor = (1.0 - distanceLoadFadeInFactor) +\n                                               (1.0 - clamp((centerDist - visibleRegionFadeStartRadius) / fadeDistance, 0.0, 1.0)) *\n                                               distanceLoadFadeInFactor;\n                    opacityAdjust *= distanceLoadFadeInFactor;\n                    vColor.a *= opacityAdjust;\n                }\n\n                vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) *\n                                 basisViewport * 2.0 * inverseFocalAdjustment;\n                gl_Position = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n\n                // Scale the position data we send to the fragment shader\n                vPosition *= sqrt8;\n            }`;const i={sceneCenter:{type:"v3",value:new e.Vector3},fadeInComplete:{type:"i",value:0},visibleRegionFadeStartRadius:{type:"f",value:0},visibleRegionRadius:{type:"f",value:0},currentTime:{type:"f",value:0},firstRenderTime:{type:"f",value:0},covariancesTexture:{type:"t",value:null},centersColorsTexture:{type:"t",value:null},focal:{type:"v2",value:new e.Vector2},inverseFocalAdjustment:{type:"f",value:1},viewport:{type:"v2",value:new e.Vector2},basisViewport:{type:"v2",value:new e.Vector2},debugColor:{type:"v3",value:new e.Color},covariancesTextureSize:{type:"v2",value:new e.Vector2(1024,1024)},centersColorsTextureSize:{type:"v2",value:new e.Vector2(1024,1024)}};if(t){i.transformIndexesTexture={type:"t",value:null};const t=[];for(let n=0;n<L.MaxScenes;n++)t.push(new e.Matrix4);i.transforms={type:"mat4",value:t},i.transformIndexesTextureSize={type:"v2",value:new e.Vector2(1024,1024)}}return new e.ShaderMaterial({uniforms:i,vertexShader:r,fragmentShader:"\n            precision highp float;\n            #include <common>\n \n            uniform vec3 debugColor;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            void main () {\n                // Compute the positional squared distance from the center of the splat to the current fragment.\n                float A = dot(vPosition, vPosition);\n                // Since the positional data in vPosition has been scaled by sqrt(8), the squared result will be\n                // scaled by a factor of 8. If the squared result is larger than 8, it means it is outside the ellipse\n                // defined by the rectangle formed by vPosition. It also means it's farther\n                // away than sqrt(8) standard deviations from the mean.\n                if (A > 8.0) discard;\n                vec3 color = vColor.rgb;\n\n                // Since the rendered splat is scaled by sqrt(8), the inverse covariance matrix that is part of\n                // the gaussian formula becomes the identity matrix. We're then left with (X - mean) * (X - mean),\n                // and since 'mean' is zero, we have X * X, which is the same as A:\n                float opacity = exp(-0.5 * A) * vColor.a;\n\n                gl_FragColor = vec4(color.rgb, opacity);\n            }",transparent:!0,alphaTest:1,blending:e.NormalBlending,depthTest:!0,depthWrite:!1,side:e.DoubleSide})}static buildGeomtery(t){const n=new e.BufferGeometry;n.setIndex([0,1,2,0,2,3]);const s=new Float32Array(12),r=new e.BufferAttribute(s,3);n.setAttribute("position",r),r.setXYZ(0,-1,-1,0),r.setXYZ(1,-1,1,0),r.setXYZ(2,1,1,0),r.setXYZ(3,1,-1,0),r.needsUpdate=!0;const i=(new e.InstancedBufferGeometry).copy(n),o=new Uint32Array(t),a=new e.InstancedBufferAttribute(o,1,!1);return a.setUsage(e.DynamicDrawUsage),i.setAttribute("splatIndex",a),i.instanceCount=0,i}static buildScenes(t,n){const s=[];s.length=t.length;for(let r=0;r<t.length;r++){const i=t[r],o=n[r]||{};let a=o.position||[0,0,0],l=o.rotation||[0,0,0,1],c=o.scale||[1,1,1];const d=(new e.Vector3).fromArray(a),h=(new e.Quaternion).fromArray(l),u=(new e.Vector3).fromArray(c);s[r]=Ce.createScene(i,d,h,u,o.splatAlphaRemovalThreshold||1)}return s}static createScene(e,t,n,s,r){return new ce(e,t,n,s,r)}static buildSplatIndexMaps(e){const t=[],n=[];let s=0;for(let r=0;r<e.length;r++){const i=e[r].getMaxSplatCount();for(let e=0;e<i;e++)t[s]=e,n[s]=r,s++}return{localSplatIndexMap:t,sceneIndexMap:n}}static buildSplatTree=function(t,n=[],s,r){return new Promise((i=>{const o=new me(8,1e3);console.time("SplatTree build");const a=new e.Vector4;o.processSplatMesh(t,(e=>{t.getSplatColor(e,a);const s=t.getSceneIndexForSplat(e),r=n[s]||1;return a.w>=r}),s,r).then((()=>{console.timeEnd("SplatTree build");let e=0,n=0,s=0,r=0;o.visitLeaves((t=>{const i=t.data.indexes.length;i>0&&(n+=i,s=Math.max(s,i),r++,e++)})),console.log(`SplatTree leaves: ${o.countLeaves()}`),console.log(`SplatTree leaves with splats:${e}`),n/=r,console.log(`Avg splat count per node: ${n}`),console.log(`Total splat count: ${t.getSplatCount()}`),i(o)}))}))};build(t,n,s=!0,r=!1,i,o){this.finalBuild=r;const a=Ce.getTotalMaxSplatCountForSplatBuffers(t),l=Ce.buildScenes(t,n);if(s)for(let e=0;e<this.scenes.length&&e<l.length;e++){const t=l[e],n=this.getScene(e);t.copyTransformData(n)}this.scenes=l;let c=!0;if((this.scenes.length>1||this.lastBuildSceneCount!==this.scenes.length||this.lastBuildMaxSplatCount!==a||this.scenes[0].splatBuffer!==this.lastBuildScenes[0].splatBuffer)&&(c=!1),!c){c=!1,this.boundingBox=new e.Box3,this.maxSplatDistanceFromSceneCenter=0,this.visibleRegionBufferRadius=0,this.visibleRegionRadius=0,this.visibleRegionFadeStartRadius=0,this.firstRenderTime=-1,this.lastBuildScenes=[],this.lastBuildSplatCount=0,this.lastBuildMaxSplatCount=0,this.disposeMeshData(),this.geometry=Ce.buildGeomtery(a),this.material=Ce.buildMaterial(this.dynamicMode,this.antialiased,this.maxScreenSpaceSplatSize);const n=Ce.buildSplatIndexMaps(t);this.globalSplatIndexToLocalSplatIndexMap=n.localSplatIndexMap,this.globalSplatIndexToSceneIndexMap=n.sceneIndexMap}this.enableDistancesComputationOnGPU&&this.setupDistancesComputationTransformFeedback(),this.resetGPUDataFromSplatBuffers(c);for(let e=0;e<this.scenes.length;e++)this.lastBuildScenes[e]=this.scenes[e];this.lastBuildSplatCount=this.getSplatCount(),this.lastBuildMaxSplatCount=this.getMaxSplatCount(),this.lastBuildSceneCount=this.scenes.length,r&&(this.disposeSplatTree(),Ce.buildSplatTree(this,n.map((e=>e.splatAlphaRemovalThreshold||1)),i,o).then((e=>{this.splatTree=e,this.onSplatTreeReadyCallback&&this.onSplatTreeReadyCallback(this.splatTree)})))}dispose(){this.disposeMeshData(),this.disposeTextures(),this.disposeSplatTree(),this.enableDistancesComputationOnGPU&&this.disposeDistancesComputationGPUResources(),this.disposed=!0}disposeMeshData(){this.geometry&&this.geometry!==ye&&(this.geometry.dispose(),this.geometry=null),this.material&&(this.material.dispose(),this.material=null)}disposeTextures(){for(let e in this.splatDataTextures)if(this.splatDataTextures.hasOwnProperty(e)){const t=this.splatDataTextures[e];t.texture&&(t.texture.dispose(),t.texture=null)}this.splatDataTextures=null}disposeSplatTree(){this.splatTree=null}getSplatTree(){return this.splatTree}onSplatTreeReady(e){this.onSplatTreeReadyCallback=e}resetGPUDataFromSplatBuffers(e){this.uploadSplatDataToTextures(e),this.enableDistancesComputationOnGPU&&(this.updateGPUCentersBufferForDistancesComputation(e),this.updateGPUTransformIndexesBufferForDistancesComputation())}static computeTextureUpdateRegion(e,t,n,s,r,i){const o=i/r,a=e*o,l=Math.floor(a/n),c=l*n*r,d=t*o,h=Math.floor(d/n);return{dataStart:c,dataEnd:h*n*r+n*r,startRow:l,endRow:h}}updateDataTexture(e,t,n,s,r,i){const o=this.getSplatCount(),a=this.renderer.getContext(),l=Ce.computeTextureUpdateRegion(this.lastBuildSplatCount,o-1,t.size.x,t.size.y,s,r),c=l.dataEnd-l.dataStart,d=new e.constructor(e.buffer,l.dataStart*i,c),h=l.endRow-l.startRow+1,u=t.texture,p=this.webGLUtils.convert(u.type),m=this.webGLUtils.convert(u.format,u.colorSpace),f=a.getParameter(a.TEXTURE_BINDING_2D);a.bindTexture(a.TEXTURE_2D,n.__webglTexture),a.texSubImage2D(a.TEXTURE_2D,0,0,l.startRow,t.size.x,h,m,p,d),a.bindTexture(a.TEXTURE_2D,f)}uploadSplatDataToTextures(t){this.checkForMultiSceneUpdateCondition(t,"uploadSplatDataToTextures","isUpdateBuild");const n=this.getMaxSplatCount(),s=this.getSplatCount(),r=(e,t,n,s,r)=>{for(let a=e;a<t;a++){const e=4*a,t=3*a,l=4*a;r[l]=(i=s)[o=e]+(i[o+1]<<8)+(i[o+2]<<16)+(i[o+3]<<24),r[l+1]=m(n[t]),r[l+2]=m(n[t+1]),r[l+3]=m(n[t+2])}var i,o},i=(t,s)=>{const r=new e.Vector2(4096,1024);for(;r.x*r.y*t<n*s;)r.y*=2;return r};if(t){this.fillSplatDataArrays(this.splatDataTextures.baseData.covariances,this.splatDataTextures.baseData.centers,this.splatDataTextures.baseData.colors,void 0,!0);const e=this.splatDataTextures.covariances,t=e.data,n=e.texture,i=6*s;for(let e=6*this.lastBuildSplatCount;e<i;e++){const n=this.splatDataTextures.baseData.covariances[e];t[e]=n}const o=this.renderer?this.renderer.properties.get(n):null;if(o&&o.__webglTexture){const n=this.halfPrecisionCovariancesOnGPU?2:4;this.updateDataTexture(t,e,o,2,6,n)}else n.needsUpdate=!0;const a=this.splatDataTextures.centerColors,l=a.data,c=a.texture;r(this.lastBuildSplatCount,s,this.splatDataTextures.baseData.centers,this.splatDataTextures.baseData.colors,l);const d=this.renderer?this.renderer.properties.get(c):null;if(d&&d.__webglTexture?this.updateDataTexture(l,a,d,4,4,4):c.needsUpdate=!0,this.dynamicMode){const e=this.splatDataTextures.tansformIndexes,t=e.data;for(let e=this.lastBuildSplatCount;e<s;e++)t[e]=this.globalSplatIndexToSceneIndexMap[e];const n=e.texture,r=this.renderer?this.renderer.properties.get(n):null;r&&r.__webglTexture?this.updateDataTexture(t,e,r,1,1,1):n.needsUpdate=!0}}else{this.disposeTextures();const t=new Float32Array(6*n),o=new Float32Array(3*n),a=new Uint8Array(4*n);this.fillSplatDataArrays(t,o,a);const l=i(2,6);let c=this.halfPrecisionCovariancesOnGPU?Uint16Array:Float32Array,d=this.halfPrecisionCovariancesOnGPU?e.HalfFloatType:e.FloatType;const h=new c(l.x*l.y*2);h.set(t);const u=new e.DataTexture(h,l.x,l.y,e.RGFormat,d);u.needsUpdate=!0,this.material.uniforms.covariancesTexture.value=u,this.material.uniforms.covariancesTextureSize.value.copy(l);const p=i(4,4),m=new Uint32Array(p.x*p.y*4);r(0,s,o,a,m);const f=new e.DataTexture(m,p.x,p.y,e.RGBAIntegerFormat,e.UnsignedIntType);if(f.internalFormat="RGBA32UI",f.needsUpdate=!0,this.material.uniforms.centersColorsTexture.value=f,this.material.uniforms.centersColorsTextureSize.value.copy(p),this.material.uniformsNeedUpdate=!0,this.splatDataTextures={baseData:{covariances:t,centers:o,colors:a},covariances:{data:h,texture:u,size:l},centerColors:{data:m,texture:f,size:p}},this.dynamicMode){const t=i(1,4),n=new Uint32Array(t.x*t.y*1);for(let e=0;e<s;e++)n[e]=this.globalSplatIndexToSceneIndexMap[e];const r=new e.DataTexture(n,t.x,t.y,e.RedIntegerFormat,e.UnsignedIntType);r.internalFormat="R32UI",r.needsUpdate=!0,this.material.uniforms.transformIndexesTexture.value=r,this.material.uniforms.transformIndexesTextureSize.value.copy(t),this.material.uniformsNeedUpdate=!0,this.splatDataTextures.tansformIndexes={data:n,texture:r,size:t}}}this.updateVisibleRegion(t)}updateVisibleRegion(t){const n=this.getSplatCount(),s=new e.Vector3;if(!t){const t=new e.Vector3;this.scenes.forEach((e=>{t.add(e.splatBuffer.sceneCenter)})),t.multiplyScalar(1/this.scenes.length),this.calculatedSceneCenter.copy(t),this.material.uniforms.sceneCenter.value.copy(this.calculatedSceneCenter),this.material.uniformsNeedUpdate=!0}for(let e=t?this.lastBuildSplatCount:0;e<n;e++){this.getSplatCenter(e,s,!1);const t=s.sub(this.calculatedSceneCenter).length();t>this.maxSplatDistanceFromSceneCenter&&(this.maxSplatDistanceFromSceneCenter=t)}this.maxSplatDistanceFromSceneCenter-this.visibleRegionBufferRadius>1&&(this.visibleRegionBufferRadius=this.maxSplatDistanceFromSceneCenter,this.visibleRegionRadius=Math.max(this.visibleRegionBufferRadius-1,0)),this.finalBuild&&(this.visibleRegionRadius=this.visibleRegionBufferRadius=this.maxSplatDistanceFromSceneCenter),this.updateVisibleRegionFadeDistance()}updateVisibleRegionFadeDistance(e=Se.Default){const t=this.finalBuild?.012:.003,n=e===Se.Default?t:.003;this.visibleRegionFadeStartRadius=(this.visibleRegionRadius-this.visibleRegionFadeStartRadius)*n+this.visibleRegionFadeStartRadius;const s=(this.visibleRegionBufferRadius>0?this.visibleRegionFadeStartRadius/this.visibleRegionBufferRadius:0)>.99,r=s||e===Se.Instant?1:0;this.material.uniforms.visibleRegionFadeStartRadius.value=this.visibleRegionFadeStartRadius,this.material.uniforms.visibleRegionRadius.value=this.visibleRegionRadius,this.material.uniforms.firstRenderTime.value=this.firstRenderTime,this.material.uniforms.currentTime.value=performance.now(),this.material.uniforms.fadeInComplete.value=r,this.material.uniformsNeedUpdate=!0,this.visibleRegionChanging=!s}updateRenderIndexes(e,t){const n=this.geometry;n.attributes.splatIndex.set(e),n.attributes.splatIndex.needsUpdate=!0,t>0&&-1===this.firstRenderTime&&(this.firstRenderTime=performance.now()),n.instanceCount=t}updateTransforms(){for(let e=0;e<this.scenes.length;e++){this.getScene(e).updateTransform()}}updateUniforms=function(){const t=new e.Vector2;return function(e,n,s,r){if(this.getSplatCount()>0){if(t.set(e.x*this.devicePixelRatio,e.y*this.devicePixelRatio),this.material.uniforms.viewport.value.copy(t),this.material.uniforms.basisViewport.value.set(1/t.x,1/t.y),this.material.uniforms.focal.value.set(n,s),this.material.uniforms.inverseFocalAdjustment.value=r,this.dynamicMode)for(let e=0;e<this.scenes.length;e++)this.material.uniforms.transforms.value[e].copy(this.getScene(e).transform);this.material.uniformsNeedUpdate=!0}}}();getSplatDataTextures(){return this.splatDataTextures}getSplatCount(){return Ce.getTotalSplatCountForScenes(this.scenes)}static getTotalSplatCountForScenes(e){let t=0;for(let n of e)n&&n.splatBuffer&&(t+=n.splatBuffer.getSplatCount());return t}static getTotalSplatCountForSplatBuffers(e){let t=0;for(let n of e)t+=n.getSplatCount();return t}getMaxSplatCount(){return Ce.getTotalMaxSplatCountForScenes(this.scenes)}static getTotalMaxSplatCountForScenes(e){let t=0;for(let n of e)n&&n.splatBuffer&&(t+=n.splatBuffer.getMaxSplatCount());return t}static getTotalMaxSplatCountForSplatBuffers(e){let t=0;for(let n of e)t+=n.getMaxSplatCount();return t}disposeDistancesComputationGPUResources(){if(!this.renderer)return;const e=this.renderer.getContext();this.distancesTransformFeedback.vao&&(e.deleteVertexArray(this.distancesTransformFeedback.vao),this.distancesTransformFeedback.vao=null),this.distancesTransformFeedback.program&&(e.deleteProgram(this.distancesTransformFeedback.program),e.deleteShader(this.distancesTransformFeedback.vertexShader),e.deleteShader(this.distancesTransformFeedback.fragmentShader),this.distancesTransformFeedback.program=null,this.distancesTransformFeedback.vertexShader=null,this.distancesTransformFeedback.fragmentShader=null),this.disposeDistancesComputationGPUBufferResources(),this.distancesTransformFeedback.id&&(e.deleteTransformFeedback(this.distancesTransformFeedback.id),this.distancesTransformFeedback.id=null)}disposeDistancesComputationGPUBufferResources(){if(!this.renderer)return;const e=this.renderer.getContext();this.distancesTransformFeedback.centersBuffer&&(this.distancesTransformFeedback.centersBuffer=null,e.deleteBuffer(this.distancesTransformFeedback.centersBuffer)),this.distancesTransformFeedback.outDistancesBuffer&&(e.deleteBuffer(this.distancesTransformFeedback.outDistancesBuffer),this.distancesTransformFeedback.outDistancesBuffer=null)}setRenderer(t){if(t!==this.renderer){this.renderer=t;const n=this.renderer.getContext(),s=new fe(n),r=new ge(n,s,{});s.init(r),this.webGLUtils=new e.WebGLUtils(n,s,r),this.enableDistancesComputationOnGPU&&this.getSplatCount()>0&&(this.setupDistancesComputationTransformFeedback(),this.updateGPUCentersBufferForDistancesComputation(),this.updateGPUTransformIndexesBufferForDistancesComputation())}}setupDistancesComputationTransformFeedback=function(){let e,t;return function(){const n=this.getMaxSplatCount();if(!this.renderer)return;const s=e!==this.renderer,r=t!==n;if(!s&&!r)return;s?this.disposeDistancesComputationGPUResources():r&&this.disposeDistancesComputationGPUBufferResources();const i=this.renderer.getContext(),o=(e,t,n)=>{const s=e.createShader(t);if(!s)return console.error("Fatal error: gl could not create a shader object."),null;e.shaderSource(s,n),e.compileShader(s);if(!e.getShaderParameter(s,e.COMPILE_STATUS)){let n="unknown";t===e.VERTEX_SHADER?n="vertex shader":t===e.FRAGMENT_SHADER&&(n="fragement shader");const r=e.getShaderInfoLog(s);return console.error("Failed to compile "+n+" with these errors:"+r),e.deleteShader(s),null}return s};let a;this.integerBasedDistancesComputation?(a="#version 300 es\n                in ivec4 center;\n                flat out int distance;",this.dynamicMode?a+=`\n                        in uint transformIndex;\n                        uniform ivec4 transforms[${L.MaxScenes}];\n                        void main(void) {\n                            ivec4 transform = transforms[transformIndex];\n                            distance = center.x * transform.x + center.y * transform.y + center.z * transform.z + transform.w * center.w;\n                        }\n                    `:a+="\n                        uniform ivec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    "):(a="#version 300 es\n                in vec3 center;\n                flat out float distance;",this.dynamicMode?a+=`\n                        in uint transformIndex;\n                        uniform mat4 transforms[${L.MaxScenes}];\n                        void main(void) {\n                            vec4 transformedCenter = transforms[transformIndex] * vec4(center, 1.0);\n                            distance = transformedCenter.z;\n                        }\n                    `:a+="\n                        uniform vec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    ");const l=i.getParameter(i.VERTEX_ARRAY_BINDING),c=i.getParameter(i.CURRENT_PROGRAM);if(s&&(this.distancesTransformFeedback.vao=i.createVertexArray()),i.bindVertexArray(this.distancesTransformFeedback.vao),s){const e=i.createProgram(),t=o(i,i.VERTEX_SHADER,a),n=o(i,i.FRAGMENT_SHADER,"#version 300 es\n                precision lowp float;\n                out vec4 fragColor;\n                void main(){}\n            ");if(!t||!n)throw new Error("Could not compile shaders for distances computation on GPU.");i.attachShader(e,t),i.attachShader(e,n),i.transformFeedbackVaryings(e,["distance"],i.SEPARATE_ATTRIBS),i.linkProgram(e);if(!i.getProgramParameter(e,i.LINK_STATUS)){const s=i.getProgramInfoLog(e);throw console.error("Fatal error: Failed to link program: "+s),i.deleteProgram(e),i.deleteShader(n),i.deleteShader(t),new Error("Could not link shaders for distances computation on GPU.")}this.distancesTransformFeedback.program=e,this.distancesTransformFeedback.vertexShader=t,this.distancesTransformFeedback.vertexShader=n}if(i.useProgram(this.distancesTransformFeedback.program),this.distancesTransformFeedback.centersLoc=i.getAttribLocation(this.distancesTransformFeedback.program,"center"),this.dynamicMode){this.distancesTransformFeedback.transformIndexesLoc=i.getAttribLocation(this.distancesTransformFeedback.program,"transformIndex");for(let e=0;e<this.scenes.length;e++)this.distancesTransformFeedback.transformsLocs[e]=i.getUniformLocation(this.distancesTransformFeedback.program,`transforms[${e}]`)}else this.distancesTransformFeedback.modelViewProjLoc=i.getUniformLocation(this.distancesTransformFeedback.program,"modelViewProj");(s||r)&&(this.distancesTransformFeedback.centersBuffer=i.createBuffer(),i.bindBuffer(i.ARRAY_BUFFER,this.distancesTransformFeedback.centersBuffer),i.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc),this.integerBasedDistancesComputation?i.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc,4,i.INT,0,0):i.vertexAttribPointer(this.distancesTransformFeedback.centersLoc,3,i.FLOAT,!1,0,0),this.dynamicMode&&(this.distancesTransformFeedback.transformIndexesBuffer=i.createBuffer(),i.bindBuffer(i.ARRAY_BUFFER,this.distancesTransformFeedback.transformIndexesBuffer),i.enableVertexAttribArray(this.distancesTransformFeedback.transformIndexesLoc),i.vertexAttribIPointer(this.distancesTransformFeedback.transformIndexesLoc,1,i.UNSIGNED_INT,0,0))),(s||r)&&(this.distancesTransformFeedback.outDistancesBuffer=i.createBuffer()),i.bindBuffer(i.ARRAY_BUFFER,this.distancesTransformFeedback.outDistancesBuffer),i.bufferData(i.ARRAY_BUFFER,4*n,i.STATIC_READ),s&&(this.distancesTransformFeedback.id=i.createTransformFeedback()),i.bindTransformFeedback(i.TRANSFORM_FEEDBACK,this.distancesTransformFeedback.id),i.bindBufferBase(i.TRANSFORM_FEEDBACK_BUFFER,0,this.distancesTransformFeedback.outDistancesBuffer),c&&i.useProgram(c),l&&i.bindVertexArray(l),e=this.renderer,t=n}}();updateGPUCentersBufferForDistancesComputation(e=!1){if(this.checkForMultiSceneUpdateCondition(e,"updateGPUCentersBufferForDistancesComputation","isUpdateBuild"),!this.renderer)return;const t=this.renderer.getContext(),n=t.getParameter(t.VERTEX_ARRAY_BINDING);t.bindVertexArray(this.distancesTransformFeedback.vao);const s=this.integerBasedDistancesComputation?Uint32Array:Float32Array,r=this.integerBasedDistancesComputation?16:12,i=e?this.lastBuildSplatCount*r:0,o=this.integerBasedDistancesComputation?this.getIntegerCenters(!0,e):this.getFloatCenters(!1,e);if(t.bindBuffer(t.ARRAY_BUFFER,this.distancesTransformFeedback.centersBuffer),e)t.bufferSubData(t.ARRAY_BUFFER,i,o);else{const e=new s(16*this.getMaxSplatCount());e.set(o),t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW)}t.bindBuffer(t.ARRAY_BUFFER,null),n&&t.bindVertexArray(n)}updateGPUTransformIndexesBufferForDistancesComputation(){if(!this.renderer||!this.dynamicMode)return;const e=this.renderer.getContext(),t=e.getParameter(e.VERTEX_ARRAY_BINDING);e.bindVertexArray(this.distancesTransformFeedback.vao),e.bindBuffer(e.ARRAY_BUFFER,this.distancesTransformFeedback.transformIndexesBuffer),e.bufferData(e.ARRAY_BUFFER,this.getTransformIndexes(),e.STATIC_DRAW),e.bindBuffer(e.ARRAY_BUFFER,null),t&&e.bindVertexArray(t)}getTransformIndexes(){const e=new Uint32Array(this.globalSplatIndexToSceneIndexMap.length);return e.set(this.globalSplatIndexToSceneIndexMap),e}fillTransformsArray=function(){const e=[];return function(t){e.length!==t.length&&(e.length=t.length);for(let t=0;t<this.scenes.length;t++){const n=this.getScene(t).transform.elements;for(let s=0;s<16;s++)e[16*t+s]=n[s]}t.set(e)}}();computeDistancesOnGPU=function(){const t=new e.Matrix4;return function(e,n){if(!this.renderer)return;const s=this.renderer.getContext(),r=s.getParameter(s.VERTEX_ARRAY_BINDING),i=s.getParameter(s.CURRENT_PROGRAM);if(s.bindVertexArray(this.distancesTransformFeedback.vao),s.useProgram(this.distancesTransformFeedback.program),s.enable(s.RASTERIZER_DISCARD),this.dynamicMode)for(let n=0;n<this.scenes.length;n++)if(t.copy(this.getScene(n).transform),t.premultiply(e),this.integerBasedDistancesComputation){const e=Ce.getIntegerMatrixArray(t),r=[e[2],e[6],e[10],e[14]];s.uniform4i(this.distancesTransformFeedback.transformsLocs[n],r[0],r[1],r[2],r[3])}else s.uniformMatrix4fv(this.distancesTransformFeedback.transformsLocs[n],!1,t.elements);else if(this.integerBasedDistancesComputation){const t=Ce.getIntegerMatrixArray(e),n=[t[2],t[6],t[10]];s.uniform3i(this.distancesTransformFeedback.modelViewProjLoc,n[0],n[1],n[2])}else{const t=[e.elements[2],e.elements[6],e.elements[10]];s.uniform3f(this.distancesTransformFeedback.modelViewProjLoc,t[0],t[1],t[2])}s.bindBuffer(s.ARRAY_BUFFER,this.distancesTransformFeedback.centersBuffer),s.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc),this.integerBasedDistancesComputation?s.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc,4,s.INT,0,0):s.vertexAttribPointer(this.distancesTransformFeedback.centersLoc,3,s.FLOAT,!1,0,0),this.dynamicMode&&(s.bindBuffer(s.ARRAY_BUFFER,this.distancesTransformFeedback.transformIndexesBuffer),s.enableVertexAttribArray(this.distancesTransformFeedback.transformIndexesLoc),s.vertexAttribIPointer(this.distancesTransformFeedback.transformIndexesLoc,1,s.UNSIGNED_INT,0,0)),s.bindTransformFeedback(s.TRANSFORM_FEEDBACK,this.distancesTransformFeedback.id),s.bindBufferBase(s.TRANSFORM_FEEDBACK_BUFFER,0,this.distancesTransformFeedback.outDistancesBuffer),s.beginTransformFeedback(s.POINTS),s.drawArrays(s.POINTS,0,this.getSplatCount()),s.endTransformFeedback(),s.bindBufferBase(s.TRANSFORM_FEEDBACK_BUFFER,0,null),s.bindTransformFeedback(s.TRANSFORM_FEEDBACK,null),s.disable(s.RASTERIZER_DISCARD);const o=s.fenceSync(s.SYNC_GPU_COMMANDS_COMPLETE,0);s.flush();const a=new Promise((e=>{const t=()=>{switch(s.clientWaitSync(o,0,0)){case s.TIMEOUT_EXPIRED:return setTimeout(t);case s.WAIT_FAILED:throw new Error("should never get here");default:s.deleteSync(o);const r=s.getParameter(s.VERTEX_ARRAY_BINDING);s.bindVertexArray(this.distancesTransformFeedback.vao),s.bindBuffer(s.ARRAY_BUFFER,this.distancesTransformFeedback.outDistancesBuffer),s.getBufferSubData(s.ARRAY_BUFFER,0,n),s.bindBuffer(s.ARRAY_BUFFER,null),r&&s.bindVertexArray(r),e()}};setTimeout(t)}));return i&&s.useProgram(i),r&&s.bindVertexArray(r),a}}();getLocalSplatParameters(e,t,n){null==n&&(n=!this.dynamicMode),t.splatBuffer=this.getSplatBufferForSplat(e),t.localIndex=this.getSplatLocalIndex(e),t.sceneTransform=n?this.getSceneTransformForSplat(e):null}fillSplatDataArrays(e,t,n,s=void 0,r,i){this.checkForMultiSceneUpdateCondition(r,"fillSplatDataArrays","isUpdateBuild");let o=0;for(let a=0;a<this.scenes.length;a++){null==s&&(s=!this.dynamicMode);let l,c,d=o;r&&(l=this.lastBuildSplatCount,d=i?0:l);const h=this.getScene(a),u=h.splatBuffer,p=s?h.transform:null;e&&u.fillSplatCovarianceArray(e,p,l,c,d,this.halfPrecisionCovariancesOnGPU?1:0),t&&u.fillSplatCenterArray(t,p,l,c,d),n&&u.fillSplatColorArray(n,h.minimumAlpha,p,l,c,d),o+=u.getSplatCount()}}getIntegerCenters(e=!1,t=!1){this.checkForMultiSceneUpdateCondition(t,"getIntegerCenters","isUpdateBuild");const n=this.getSplatCount(),s=t?n-this.lastBuildSplatCount:n,r=new Float32Array(3*s);let i;this.fillSplatDataArrays(null,r,null,void 0,t,t);let o=e?4:3;i=new Int32Array(s*o);for(let t=0;t<s;t++){for(let e=0;e<3;e++)i[t*o+e]=Math.round(1e3*r[3*t+e]);e&&(i[t*o+3]=1e3)}return i}getFloatCenters(e=!1,t=!1){this.checkForMultiSceneUpdateCondition(t,"getFloatCenters","isUpdateBuild");const n=this.getSplatCount(),s=t?n-this.lastBuildSplatCount:n,r=new Float32Array(3*s);if(this.fillSplatDataArrays(null,r,null,void 0,t,t),!e)return r;let i=new Float32Array(4*s);for(let e=0;e<s;e++){for(let t=0;t<3;t++)i[4*e+t]=r[3*e+t];i[4*e+3]=1}return i}getSplatCenter=function(){const e={};return function(t,n,s){this.getLocalSplatParameters(t,e,s),e.splatBuffer.getSplatCenter(e.localIndex,n,e.sceneTransform)}}();getSplatScaleAndRotation=function(){const e={};return function(t,n,s,r){this.getLocalSplatParameters(t,e,r),e.splatBuffer.getSplatScaleAndRotation(e.localIndex,n,s,e.sceneTransform)}}();getSplatColor=function(){const e={};return function(t,n){this.getLocalSplatParameters(t,e),e.splatBuffer.getSplatColor(e.localIndex,n,e.sceneTransform)}}();getSceneTransform(e,t){const n=this.getScene(e);n.updateTransform(),t.copy(n.transform)}getScene(e){if(e<0||e>=this.scenes.length)throw new Error("SplatMesh::getScene() -> Invalid scene index.");return this.scenes[e]}getSplatBufferForSplat(e){return this.getScene(this.globalSplatIndexToSceneIndexMap[e]).splatBuffer}getSceneIndexForSplat(e){return this.globalSplatIndexToSceneIndexMap[e]}getSceneTransformForSplat(e){return this.getScene(this.globalSplatIndexToSceneIndexMap[e]).transform}getSplatLocalIndex(e){return this.globalSplatIndexToLocalSplatIndexMap[e]}static getIntegerMatrixArray(e){const t=e.elements,n=[];for(let e=0;e<16;e++)n[e]=Math.round(1e3*t[e]);return n}checkForMultiSceneUpdateCondition(e,t,n){if(this.scenes.length>1&&e)throw new Error(`${t}() -> '${n}' cannot be true if splat mesh has more than one scene.`)}}function xe(e){let t,n,s,r,i,o,a,l,c,d,h,u,p,m,f,g,S,y;e.onmessage=A=>{if(A.data.centers)centers=A.data.centers,transformIndexes=A.data.transformIndexes,r?new Int32Array(n,m,4*o).set(new Int32Array(centers)):new Float32Array(n,m,4*o).set(new Float32Array(centers)),i&&new Uint32Array(n,c,o).set(new Uint32Array(transformIndexes)),e.postMessage({sortSetupComplete:!0});else if(A.data.sort){const C=A.data.sort.splatRenderCount||0,x=A.data.sort.splatSortCount||0,b=A.data.sort.usePrecomputedDistances;let w,T,v;s||(w=A.data.sort.indexesToSort,v=A.data.sort.transforms,b&&(T=A.data.sort.precomputedDistances)),function(A,C,x,b,w,T,v){const F=performance.now();if(!s&&(new Uint32Array(n,a,w.byteLength/y.BytesPerInt).set(w),new Float32Array(n,d,v.byteLength/y.BytesPerFloat).set(v),b)){let e;e=r?new Int32Array(n,h,T.byteLength/y.BytesPerInt):new Float32Array(n,h,T.byteLength/y.BytesPerFloat),e.set(T)}g||(g=new Uint32Array(y.DepthMapRange)),new Float32Array(n,f,16).set(x),new Uint32Array(n,p,y.DepthMapRange).set(g),t.exports.sortIndexes(a,m,h,u,p,f,l,c,d,y.DepthMapRange,A,C,o,b,r,i);const M={sortDone:!0,splatSortCount:A,splatRenderCount:C,sortTime:0};if(!s){const e=new Uint32Array(n,l,C);(!S||S.length<C)&&(S=new Uint32Array(C)),S.set(e),M.sortedIndexes=S}const B=performance.now();M.sortTime=B-F,e.postMessage(M)}(x,C,A.data.sort.modelViewProj,b,w,T,v)}else if(A.data.init){y=A.data.init.Constants,o=A.data.init.splatCount,s=A.data.init.useSharedMemory,r=A.data.init.integerBasedSort,i=A.data.init.dynamicMode;const g=r?4*y.BytesPerInt:4*y.BytesPerFloat,S=new Uint8Array(A.data.init.sorterWasmBytes),C=16*y.BytesPerFloat,x=o*y.BytesPerInt,b=o*g,w=C,T=r?o*y.BytesPerInt:o*y.BytesPerFloat,v=o*y.BytesPerInt,F=o*y.BytesPerInt,M=y.DepthMapRange*y.BytesPerInt*2,B=i?o*y.BytesPerInt:0,E=i?y.MaxScenes*C:0,P=32*y.MemoryPageSize,I=x+b+w+T+v+M+F+B+E+P,R=Math.floor(I/y.MemoryPageSize)+1,D={module:{},env:{memory:new WebAssembly.Memory({initial:2*R,maximum:4*R,shared:!0})}};WebAssembly.compile(S).then((e=>WebAssembly.instantiate(e,D))).then((r=>{t=r,a=0,m=a+x,f=m+b,h=f+w,u=h+T,p=u+v,l=p+M,c=l+F,d=c+B,n=D.env.memory.buffer,s?e.postMessage({sortSetupPhase1Complete:!0,indexesToSortBuffer:n,indexesToSortOffset:a,sortedIndexesBuffer:n,sortedIndexesOffset:l,precomputedDistancesBuffer:n,precomputedDistancesOffset:h,transformsBuffer:n,transformsOffset:d}):e.postMessage({sortSetupPhase1Complete:!0})}))}}}const be={None:0,VR:1,AR:2};class we{static createButton(e){const t=document.createElement("button");function n(){t.style.display="",t.style.cursor="auto",t.style.left="calc(50% - 75px)",t.style.width="150px",t.onmouseenter=null,t.onmouseleave=null,t.onclick=null}function s(e){e.style.position="absolute",e.style.bottom="20px",e.style.padding="12px 6px",e.style.border="1px solid #fff",e.style.borderRadius="4px",e.style.background="rgba(0,0,0,0.1)",e.style.color="#fff",e.style.font="normal 13px sans-serif",e.style.textAlign="center",e.style.opacity="0.5",e.style.outline="none",e.style.zIndex="999"}if("xr"in navigator)return t.id="VRButton",t.style.display="none",s(t),navigator.xr.isSessionSupported("immersive-vr").then((function(s){s?function(){let n=null;async function s(s){s.addEventListener("end",r),await e.xr.setSession(s),t.textContent="EXIT VR",n=s}function r(){n.removeEventListener("end",r),t.textContent="ENTER VR",n=null}t.style.display="",t.style.cursor="pointer",t.style.left="calc(50% - 50px)",t.style.width="100px",t.textContent="ENTER VR";const i={optionalFeatures:["local-floor","bounded-floor","hand-tracking","layers"]};t.onmouseenter=function(){t.style.opacity="1.0"},t.onmouseleave=function(){t.style.opacity="0.5"},t.onclick=function(){null===n?navigator.xr.requestSession("immersive-vr",i).then(s):(n.end(),void 0!==navigator.xr.offerSession&&navigator.xr.offerSession("immersive-vr",i).then(s).catch((e=>{console.warn(e)})))},void 0!==navigator.xr.offerSession&&navigator.xr.offerSession("immersive-vr",i).then(s).catch((e=>{console.warn(e)}))}():(n(),t.textContent="VR NOT SUPPORTED"),s&&we.xrSessionIsGranted&&t.click()})).catch((function(e){n(),console.warn("Exception when trying to call xr.isSessionSupported",e),t.textContent="VR NOT ALLOWED"})),t;{const e=document.createElement("a");return!1===window.isSecureContext?(e.href=document.location.href.replace(/^http:/,"https:"),e.innerHTML="WEBXR NEEDS HTTPS"):(e.href="https://immersiveweb.dev/",e.innerHTML="WEBXR NOT AVAILABLE"),e.style.left="calc(50% - 90px)",e.style.width="180px",e.style.textDecoration="none",s(e),e}}static registerSessionGrantedListener(){if("undefined"!=typeof navigator&&"xr"in navigator){if(/WebXRViewer\//i.test(navigator.userAgent))return;navigator.xr.addEventListener("sessiongranted",(()=>{we.xrSessionIsGranted=!0}))}}}we.xrSessionIsGranted=!1,we.registerSessionGrantedListener();class Te{static createButton(e,t={}){const n=document.createElement("button");function s(){n.style.display="",n.style.cursor="auto",n.style.left="calc(50% - 75px)",n.style.width="150px",n.onmouseenter=null,n.onmouseleave=null,n.onclick=null}function r(e){e.style.position="absolute",e.style.bottom="20px",e.style.padding="12px 6px",e.style.border="1px solid #fff",e.style.borderRadius="4px",e.style.background="rgba(0,0,0,0.1)",e.style.color="#fff",e.style.font="normal 13px sans-serif",e.style.textAlign="center",e.style.opacity="0.5",e.style.outline="none",e.style.zIndex="999"}if("xr"in navigator)return n.id="ARButton",n.style.display="none",r(n),navigator.xr.isSessionSupported("immersive-ar").then((function(r){r?function(){if(void 0===t.domOverlay){const e=document.createElement("div");e.style.display="none",document.body.appendChild(e);const n=document.createElementNS("http://www.w3.org/2000/svg","svg");n.setAttribute("width",38),n.setAttribute("height",38),n.style.position="absolute",n.style.right="20px",n.style.top="20px",n.addEventListener("click",(function(){s.end()})),e.appendChild(n);const r=document.createElementNS("http://www.w3.org/2000/svg","path");r.setAttribute("d","M 12,12 L 28,28 M 28,12 12,28"),r.setAttribute("stroke","#fff"),r.setAttribute("stroke-width",2),n.appendChild(r),void 0===t.optionalFeatures&&(t.optionalFeatures=[]),t.optionalFeatures.push("dom-overlay"),t.domOverlay={root:e}}let s=null;async function r(r){r.addEventListener("end",i),e.xr.setReferenceSpaceType("local"),await e.xr.setSession(r),n.textContent="STOP AR",t.domOverlay.root.style.display="",s=r}function i(){s.removeEventListener("end",i),n.textContent="START AR",t.domOverlay.root.style.display="none",s=null}n.style.display="",n.style.cursor="pointer",n.style.left="calc(50% - 50px)",n.style.width="100px",n.textContent="START AR",n.onmouseenter=function(){n.style.opacity="1.0"},n.onmouseleave=function(){n.style.opacity="0.5"},n.onclick=function(){null===s?navigator.xr.requestSession("immersive-ar",t).then(r):(s.end(),void 0!==navigator.xr.offerSession&&navigator.xr.offerSession("immersive-ar",t).then(r).catch((e=>{console.warn(e)})))},void 0!==navigator.xr.offerSession&&navigator.xr.offerSession("immersive-ar",t).then(r).catch((e=>{console.warn(e)}))}():(s(),n.textContent="AR NOT SUPPORTED")})).catch((function(e){s(),console.warn("Exception when trying to call xr.isSessionSupported",e),n.textContent="AR NOT ALLOWED"})),n;{const e=document.createElement("a");return!1===window.isSecureContext?(e.href=document.location.href.replace(/^http:/,"https:"),e.innerHTML="WEBXR NEEDS HTTPS"):(e.href="https://immersiveweb.dev/",e.innerHTML="WEBXR NOT AVAILABLE"),e.style.left="calc(50% - 90px)",e.style.width="180px",e.style.textDecoration="none",r(e),e}}}const ve={Always:0,OnChange:1,Never:2};class Fe{constructor(t={}){t.cameraUp||(t.cameraUp=[0,1,0]),this.cameraUp=(new e.Vector3).fromArray(t.cameraUp),t.initialCameraPosition||(t.initialCameraPosition=[0,10,15]),this.initialCameraPosition=(new e.Vector3).fromArray(t.initialCameraPosition),t.initialCameraLookAt||(t.initialCameraLookAt=[0,0,0]),this.initialCameraLookAt=(new e.Vector3).fromArray(t.initialCameraLookAt),this.dropInMode=t.dropInMode||!1,void 0!==t.selfDrivenMode&&null!==t.selfDrivenMode||(t.selfDrivenMode=!0),this.selfDrivenMode=t.selfDrivenMode&&!this.dropInMode,this.selfDrivenUpdateFunc=this.selfDrivenUpdate.bind(this),void 0===t.useBuiltInControls&&(t.useBuiltInControls=!0),this.useBuiltInControls=t.useBuiltInControls,this.rootElement=t.rootElement,this.ignoreDevicePixelRatio=t.ignoreDevicePixelRatio||!1,this.devicePixelRatio=this.ignoreDevicePixelRatio?1:window.devicePixelRatio,this.halfPrecisionCovariancesOnGPU=t.halfPrecisionCovariancesOnGPU||!1,this.threeScene=t.threeScene,this.renderer=t.renderer,this.camera=t.camera,this.gpuAcceleratedSort=t.gpuAcceleratedSort,!0!==this.gpuAcceleratedSort&&!1!==this.gpuAcceleratedSort&&(this.isMobile()?this.gpuAcceleratedSort=!1:this.gpuAcceleratedSort=!0),void 0!==t.integerBasedSort&&null!==t.integerBasedSort||(t.integerBasedSort=!0),this.integerBasedSort=t.integerBasedSort,void 0!==t.sharedMemoryForWorkers&&null!==t.sharedMemoryForWorkers||(t.sharedMemoryForWorkers=!0),this.sharedMemoryForWorkers=t.sharedMemoryForWorkers;const n=!!t.dynamicScene,s=t.antialiased||!1;this.webXRMode=t.webXRMode||be.None,this.webXRMode!==be.None&&(this.gpuAcceleratedSort=!1),this.renderMode=t.renderMode||ve.Always,this.sceneRevealMode=t.sceneRevealMode||Se.Default,this.focalAdjustment=t.focalAdjustment||1,this.maxScreenSpaceSplatSize=t.maxScreenSpaceSplatSize||2048,this.splatMesh=new Ce(n,this.halfPrecisionCovariancesOnGPU,this.devicePixelRatio,this.gpuAcceleratedSort,this.integerBasedSort,s,this.maxScreenSpaceSplatSize),this.controls=null,this.showMeshCursor=!1,this.showControlPlane=!1,this.showInfo=!1,this.sceneHelper=null,this.sortWorker=null,this.sortRunning=!1,this.splatRenderCount=0,this.sortWorkerIndexesToSort=null,this.sortWorkerSortedIndexes=null,this.sortWorkerPrecomputedDistances=null,this.sortWorkerTransforms=null,this.runAfterFirstSort=[],this.selfDrivenModeRunning=!1,this.splatRenderingInitialized=!1,this.raycaster=new le,this.infoPanel=null,this.currentFPS=0,this.lastSortTime=0,this.consecutiveRenderFrames=0,this.previousCameraTarget=new e.Vector3,this.nextCameraTarget=new e.Vector3,this.mousePosition=new e.Vector2,this.mouseDownPosition=new e.Vector2,this.mouseDownTime=null,this.resizeObserver=null,this.mouseMoveListener=null,this.mouseDownListener=null,this.mouseUpListener=null,this.keyDownListener=null,this.sortPromise=null,this.sortPromiseResolver=null,this.downloadPromisesToAbort={},this.splatSceneLoadPromise=null,this.loadingSpinner=new Z(null,this.rootElement||document.body),this.loadingSpinner.hide(),this.loadingProgressBar=new J(this.rootElement||document.body),this.loadingProgressBar.hide(),this.infoPanel=new ee(this.rootElement||document.body),this.infoPanel.hide(),this.usingExternalCamera=!(!this.dropInMode&&!this.camera),this.usingExternalRenderer=!(!this.dropInMode&&!this.renderer),this.initialized=!1,this.disposing=!1,this.disposed=!1,this.dropInMode||this.init()}init(){if(this.initialized)return;this.rootElement||(this.usingExternalRenderer?this.rootElement=this.renderer.domElement.parentElement||document.body:(this.rootElement=document.createElement("div"),this.rootElement.style.width="100%",this.rootElement.style.height="100%",this.rootElement.style.position="absolute",document.body.appendChild(this.rootElement)));const t=new e.Vector2;this.getRenderDimensions(t),this.usingExternalCamera||(this.camera=new e.PerspectiveCamera(50,t.x/t.y,.1,500),this.camera.position.copy(this.initialCameraPosition),this.camera.up.copy(this.cameraUp).normalize(),this.camera.lookAt(this.initialCameraLookAt)),this.usingExternalRenderer||(this.renderer=new e.WebGLRenderer({antialias:!1,precision:"highp"}),this.renderer.setPixelRatio(this.devicePixelRatio),this.renderer.autoClear=!0,this.renderer.setClearColor(new e.Color(0),0),this.renderer.setSize(t.x,t.y),this.resizeObserver=new ResizeObserver((()=>{this.getRenderDimensions(t),this.renderer.setSize(t.x,t.y),this.forceRenderNextFrame()})),this.resizeObserver.observe(this.rootElement),this.rootElement.appendChild(this.renderer.domElement)),this.webXRMode&&(this.webXRMode===be.VR?this.rootElement.appendChild(we.createButton(this.renderer)):this.webXRMode===be.AR&&this.rootElement.appendChild(Te.createButton(this.renderer)),this.renderer.xr.enabled=!0,this.camera.position.copy(this.initialCameraPosition),this.camera.up.copy(this.cameraUp).normalize(),this.camera.lookAt(this.initialCameraLookAt)),this.threeScene=this.threeScene||new e.Scene,this.sceneHelper=new ne(this.threeScene),this.sceneHelper.setupMeshCursor(),this.sceneHelper.setupFocusMarker(),this.sceneHelper.setupControlPlane(),this.useBuiltInControls&&this.webXRMode===be.None&&(this.controls=new $(this.camera,this.renderer.domElement),this.controls.listenToKeyEvents(window),this.controls.rotateSpeed=.5,this.controls.maxPolarAngle=.75*Math.PI,this.controls.minPolarAngle=.1,this.controls.enableDamping=!0,this.controls.dampingFactor=.05,this.controls.target.copy(this.initialCameraLookAt),this.mouseMoveListener=this.onMouseMove.bind(this),this.renderer.domElement.addEventListener("pointermove",this.mouseMoveListener,!1),this.mouseDownListener=this.onMouseDown.bind(this),this.renderer.domElement.addEventListener("pointerdown",this.mouseDownListener,!1),this.mouseUpListener=this.onMouseUp.bind(this),this.renderer.domElement.addEventListener("pointerup",this.mouseUpListener,!1),this.keyDownListener=this.onKeyDown.bind(this),window.addEventListener("keydown",this.keyDownListener,!1)),this.loadingProgressBar.setContainer(this.rootElement),this.loadingSpinner.setContainer(this.rootElement),this.infoPanel.setContainer(this.rootElement),this.initialized=!0}removeEventHandlers(){this.useBuiltInControls&&(this.renderer.domElement.removeEventListener("pointermove",this.mouseMoveListener),this.mouseMoveListener=null,this.renderer.domElement.removeEventListener("pointerdown",this.mouseDownListener),this.mouseDownListener=null,this.renderer.domElement.removeEventListener("pointerup",this.mouseUpListener),this.mouseUpListener=null,window.removeEventListener("keydown",this.keyDownListener),this.keyDownListener=null)}setRenderMode(e){this.renderMode=e}onKeyDown=function(){const t=new e.Vector3,n=new e.Matrix4,s=new e.Matrix4;return function(e){switch(t.set(0,0,-1),t.transformDirection(this.camera.matrixWorld),n.makeRotationAxis(t,Math.PI/128),s.makeRotationAxis(t,-Math.PI/128),e.code){case"KeyG":this.focalAdjustment+=.02,this.forceRenderNextFrame();break;case"KeyF":this.focalAdjustment-=.02,this.forceRenderNextFrame();break;case"ArrowLeft":this.camera.up.transformDirection(n);break;case"ArrowRight":this.camera.up.transformDirection(s);break;case"KeyC":this.showMeshCursor=!this.showMeshCursor;break;case"KeyP":this.showControlPlane=!this.showControlPlane;break;case"KeyI":this.showInfo=!this.showInfo,this.showInfo?this.infoPanel.show():this.infoPanel.hide()}}}();onMouseMove(e){this.mousePosition.set(e.offsetX,e.offsetY)}onMouseDown(){this.mouseDownPosition.copy(this.mousePosition),this.mouseDownTime=S()}onMouseUp=function(){const t=new e.Vector2;return function(e){t.copy(this.mousePosition).sub(this.mouseDownPosition);S()-this.mouseDownTime<.5&&t.length()<2&&this.onMouseClick(e)}}();onMouseClick(e){this.mousePosition.set(e.offsetX,e.offsetY),this.checkForFocalPointChange()}checkForFocalPointChange=function(){const t=new e.Vector2,n=new e.Vector3,s=[];return function(){if(!this.transitioningCameraTarget&&(this.getRenderDimensions(t),s.length=0,this.raycaster.setFromCameraAndScreenPosition(this.camera,this.mousePosition,t),this.raycaster.intersectSplatMesh(this.splatMesh,s),s.length>0)){const e=s[0].origin;n.copy(e).sub(this.camera.position),n.length()>.75&&(this.previousCameraTarget.copy(this.controls.target),this.nextCameraTarget.copy(e),this.transitioningCameraTarget=!0,this.transitioningCameraTargetStartTime=S())}}}();getRenderDimensions(e){this.rootElement?(e.x=this.rootElement.offsetWidth,e.y=this.rootElement.offsetHeight):this.renderer.getSize(e)}updateSplatMesh=function(){const t=new e.Vector2;return function(){if(!this.splatMesh)return;if(this.splatMesh.getSplatCount()>0){this.splatMesh.updateTransforms(),this.getRenderDimensions(t);const e=.5*this.camera.projectionMatrix.elements[0]*this.devicePixelRatio*t.x,n=.5*this.camera.projectionMatrix.elements[5]*this.devicePixelRatio*t.y,s=this.focalAdjustment,r=1/s;this.splatMesh.updateUniforms(t,e*s,n*s,r)}}}();isLoading(){return Object.keys(this.downloadPromisesToAbort)>0||null!==this.splatSceneLoadPromise}isDisposingOrDisposed(){return this.disposing||this.disposed}clearSplatSceneLoadPromise(){this.splatSceneLoadPromise=null}setSplatSceneLoadPromise(e){this.splatSceneLoadPromise=e}addSplatScene(e,t={}){if(this.isLoading())throw new Error("Cannot add splat scene while another load is already in progress.");if(this.isDisposingOrDisposed())throw new Error("Cannot add splat scene after dispose() is called.");let n=t.format;null==n&&(n=j(e));const s=Fe.isStreamable(n)&&t.streamView,r={rotation:t.rotation||t.orientation,position:t.position,scale:t.scale,splatAlphaRemovalThreshold:t.splatAlphaRemovalThreshold};let i=t.showLoadingUI;!1!==i&&(i=!0);let o=null;i&&(o=this.loadingSpinner.addTask("Downloading..."));let a=!1,l=0;return(s?this.loadSplatSceneToSplatBufferStreaming.bind(this):this.loadSplatSceneToSplatBufferNonStreaming.bind(this))(e,n,t.splatAlphaRemovalThreshold,((e,n,c)=>(!s&&t.onProgress&&t.onProgress(0,"0%",k),this.addSplatBuffers([e],[r],c,n&&i,i).then((()=>{!s&&t.onProgress&&t.onProgress(100,"100%",k),i&&((n&&s||c&&!s)&&this.runAfterFirstSort.push((()=>{this.loadingSpinner.removeTask(o),c||a||this.loadingProgressBar.show()})),s&&(c?(a=!0,this.loadingProgressBar.hide()):this.loadingProgressBar.setProgress(l)))})))).bind(this),((e,n,r)=>{if(i)if(r===D)if(l=e,100==e)this.loadingSpinner.setMessageForTask(o,"Download complete!");else if(s)this.loadingSpinner.setMessageForTask(o,"Downloading splats...");else{const e=n?`: ${n}`:"...";this.loadingSpinner.setMessageForTask(o,`Downloading${e}`)}else r===k?this.loadingSpinner.setMessageForTask(o,"Processing splats..."):this.loadingSpinner.setMessageForTask(o,"Ready!");t.onProgress&&t.onProgress(e,n,r)}),(()=>{this.loadingProgressBar.hide(),this.loadingSpinner.removeAllTasks()}).bind(this))}addSplatScenes(e,t=!0,n=void 0){if(this.isLoading())throw new Error("Cannot add splat scene while another load is already in progress.");if(this.isDisposingOrDisposed())throw new Error("Cannot add splat scene after dispose() is called.");const s=e.length,r=[];t&&this.loadingSpinner.show();const i=(e,i,o)=>{r[e]=i;let a=0;for(let e=0;e<s;e++)a+=r[e]||0;a/=s,o=`${a.toFixed(2)}%`,t&&(100==a?this.loadingSpinner.setMessage("Download complete!"):this.loadingSpinner.setMessage(`Downloading: ${o}`)),n&&n(a,o,D)},o=[],a=[],l=[];for(let t=0;t<e.length;t++){let n=e[t].format;null==n&&(n=j(e[t].path));const s=this.loadSplatSceneToSplatBuffer(e[t].path,e[t].splatAlphaRemovalThreshold,i.bind(this,t),!1,void 0,n);l.push(s.abortHandler),o.push(s),a.push(s.promise),this.downloadPromisesToAbort[s.id]=s}const c=new u(((s,r)=>{Promise.all(a).then((r=>{t&&this.loadingSpinner.hide(),n&&options.onProgress(0,"0%",k),this.addSplatBuffers(r,e,!0,t,t).then((()=>{n&&n(100,"100%",k),s(),this.clearSplatSceneLoadPromise()}))})).catch((e=>{t&&this.loadingSpinner.hide(),e instanceof p?s():r(new Error("Viewer::addSplatScenes -> Could not load one or more splat scenes.")),this.clearSplatSceneLoadPromise()})).finally((()=>{for(let e of o)delete this.downloadPromisesToAbort[e.id]}))}),(()=>{for(let e of l)e()}));return this.setSplatSceneLoadPromise(c),c}loadSplatSceneToSplatBufferNonStreaming(e,t,n,s,r,i){const o=()=>{delete this.downloadPromisesToAbort[a.id]},a=this.loadSplatSceneToSplatBuffer(e,n,r,!1,void 0,t).then((e=>(o(),s(e,!0,!0).then((()=>{this.clearSplatSceneLoadPromise()}))))).catch((t=>{if(i&&i(),this.clearSplatSceneLoadPromise(),o(),!(t instanceof p))throw new Error(`Viewer::addSplatScene -> Could not load file ${e}`)}));return this.downloadPromisesToAbort[a.id]=a,this.setSplatSceneLoadPromise(a),a}loadSplatSceneToSplatBufferStreaming(e,t,n,s,r,i){let o,a,l,c,d=0,h=!1;const m=[],f=()=>{if(m.length>0&&!h&&!this.isDisposingOrDisposed()){h=!0;const e=m.shift();s(e.splatBuffer,e.firstBuild,e.finalBuild).then((()=>{h=!1,e.firstBuild?o():e.finalBuild&&(l(),this.clearSplatSceneLoadPromise()),window.setTimeout((()=>{f()}),1)}))}};let g=this.loadSplatSceneToSplatBuffer(e,n,r,!0,((e,t)=>{this.isDisposingOrDisposed()||(m.push({splatBuffer:e,firstBuild:0===d,finalBuild:t}),d++,f())}),t);const S=new u(((e,t)=>{o=e,a=t;const n=()=>{delete this.downloadPromisesToAbort[g.id]};g.then((()=>{n()})).catch((e=>{e instanceof p||(c(e),a(e)),i&&i(),this.clearSplatSceneLoadPromise(),n()}))}),g.abortHandler);return this.downloadPromisesToAbort[g.id]=g,this.setSplatSceneLoadPromise(new u(((e,t)=>{l=e,c=t}))),S}loadSplatSceneToSplatBuffer(e,t=1,n=void 0,s=!1,r=void 0,i){return i===H.Splat?V.loadFromURL(e,n,s,r,t,0,!1):i===H.KSplat?N.loadFromURL(e,n,s,r):i===H.Ply?_.loadFromURL(e,n,s,r,t,0):u.reject(new Error(`Viewer::loadSplatSceneToSplatBuffer -> File format not supported: ${e}`))}static isStreamable(e){return e===H.Splat||e===H.KSplat||e===H.Ply}addSplatBuffers=function(){let e=0,t=null;return function(n,s=[],r=!0,i=!0,o=!0){if(this.isDisposingOrDisposed())return Promise.resolve();this.splatRenderingInitialized=!1,e++;const a=n=>{if(!this.isDisposingOrDisposed()){if(e--,0===e&&(null!==t&&(this.loadingSpinner.removeTask(t),t=null),this.splatRenderingInitialized=!0),!this.gpuAcceleratedSort){const e=this.integerBasedSort?this.splatMesh.getIntegerCenters(!0):this.splatMesh.getFloatCenters(!0),t=this.splatMesh.getTransformIndexes();this.sortWorker.postMessage({centers:e.buffer,transformIndexes:t.buffer})}this.forceSort=!0,n()}};return(()=>new Promise((e=>{i&&(t=this.loadingSpinner.addTask("Processing splats...")),A((()=>{if(this.isDisposingOrDisposed())e();else{this.addSplatBuffersToMesh(n,s,r,o);const t=this.splatMesh.getMaxSplatCount();this.sortWorker&&this.sortWorker.maxSplatCount!==t&&this.disposeSortWorker(),this.sortWorker?a(e):this.setupSortWorker(this.splatMesh).then((()=>{a(e)}))}}))})))()}}();disposeSortWorker(){this.sortWorker&&this.sortWorker.terminate(),this.sortWorker=null,this.sortRunning=!1}addSplatBuffersToMesh(e,t,n=!0,s=!1){if(this.isDisposingOrDisposed())return;const r=this.splatMesh.splatBuffers||[],i=this.splatMesh.splatBufferOptions||[];let o;r.push(...e),i.push(...t),this.renderer&&this.splatMesh.setRenderer(this.renderer);this.splatMesh.build(r,i,!0,n,(e=>{if(this.isDisposingOrDisposed())return;const t=this.splatMesh.getSplatCount();s&&t>=15e5&&(e||o||(this.loadingSpinner.setMinimized(!0,!0),o=this.loadingSpinner.addTask("Optimizing splats...")))}),(e=>{this.isDisposingOrDisposed()||e&&o&&this.loadingSpinner.removeTask(o)})),this.splatMesh.frustumCulled=!1}setupSortWorker(e){if(!this.isDisposingOrDisposed())return new Promise((t=>{const n=this.integerBasedSort?Int32Array:Float32Array,s=e.getSplatCount(),r=e.getMaxSplatCount();this.sortWorker=function(e,t,n,s){const r=new Worker(URL.createObjectURL(new Blob(["(",xe.toString(),")(self)"],{type:"application/javascript"}))),i=atob("AGFzbQEAAAAADAZkeWxpbmsAAAAAAAEbA2AAAGAQf39/f39/f39/f39/f39/fwBgAAF/AhIBA2VudgZtZW1vcnkCAwCAgAQDBAMAAQIHOQMRX193YXNtX2NhbGxfY3RvcnMAAAtzb3J0SW5kZXhlcwABE2Vtc2NyaXB0ZW5fdGxzX2luaXQAAgrHEAMDAAELuxAFAXwDewJ/A30CfiALIAprIQwCQCAOBEAgDQRAQfj///8HIQ5BiICAgHghDSALIAxNDQIgDCEBA0AgAyABQQJ0IgVqIAIgACAFaigCAEECdGooAgAiBTYCACAFIA4gBSAOSBshDiAFIA0gBSANShshDSABQQFqIgEgC0cNAAsMAgsgDwRAQfj///8HIQ5BiICAgHghDSALIAxNDQJBfyEPIAwhAgNAIA8gByAAIAJBAnQiFGooAgAiFUECdGooAgAiCkcEQAJ+IAX9CQIIIAggCkEGdGoiD/0JAgAgDyoCEP0gASAPKgIg/SACIA8qAjD9IAP95gEgBf0JAhggD/0JAgQgDyoCFP0gASAPKgIk/SACIA8qAjT9IAP95gH95AEgBf0JAiggD/0JAgggDyoCGP0gASAPKgIo/SACIA8qAjj9IAP95gH95AEgBf0JAjggD/0JAgwgDyoCHP0gASAPKgIs/SACIA8qAjz9IAP95gH95AEiEf0fArv9FCAR/R8Du/0iAf0MAAAAAABAj0AAAAAAAECPQCIS/fIBIhP9IQEiEJlEAAAAAAAA4ENjBEAgELAMAQtCgICAgICAgICAfwshGQJ+IBP9IQAiEJlEAAAAAAAA4ENjBEAgELAMAQtCgICAgICAgICAfwv9EiETAn4gEf0fALv9FCAR/R8Bu/0iASAS/fIBIhH9IQEiEJlEAAAAAAAA4ENjBEAgELAMAQtCgICAgICAgICAfwshGiATIBn9HgEhEgJ+IBH9IQAiEJlEAAAAAAAA4ENjBEAgELAMAQtCgICAgICAgICAfwv9EiAa/R4BIBL9DQABAgMICQoLEBESExgZGhshEiAKIQ8LIAMgFGogASAVQQR0av0AAAAgEv21ASIR/RsAIBH9GwFqIBH9GwJqIBH9GwNqIgo2AgAgCiAOIAogDkgbIQ4gCiANIAogDUobIQ0gAkEBaiICIAtHDQALDAILAn8gBSoCGLtEAAAAAABAj0CiIhCZRAAAAAAAAOBBYwRAIBCqDAELQYCAgIB4CyEKAn8gBSoCCLtEAAAAAABAj0CiIhCZRAAAAAAAAOBBYwRAIBCqDAELQYCAgIB4CyECAn8gBSoCKLtEAAAAAABAj0CiIhCZRAAAAAAAAOBBYwRAIBCqDAELQYCAgIB4CyEFQfj///8HIQ5BiICAgHghDSALIAxNDQEgAv0RIAr9HAEgBf0cAiESIAwhBQNAIAMgBUECdCICaiABIAAgAmooAgBBBHRq/QAAACAS/bUBIhH9GwAgEf0bAWogEf0bAmoiAjYCACACIA4gAiAOSBshDiACIA0gAiANShshDSAFQQFqIgUgC0cNAAsMAQsgDQRAQfj///8HIQ5BiICAgHghDSALIAxNDQEgDCEBA0AgAyABQQJ0IgVqAn8gAiAAIAVqKAIAQQJ0aioCALtEAAAAAAAAsECiIhCZRAAAAAAAAOBBYwRAIBCqDAELQYCAgIB4CyIKNgIAIAogDiAKIA5IGyEOIAogDSAKIA1KGyENIAFBAWoiASALRw0ACwwBCwJAIA9FBEAgCyAMSw0BQYiAgIB4IQ1B+P///wchDgwCC0H4////ByEOQYiAgIB4IQ0gCyAMTQ0BQX8hDyAMIQIDQCAPIAcgACACQQJ0IhRqKAIAQQJ0IhVqKAIAIgpHBEAgBf0JAgggCCAKQQZ0aiIP/QkCACAPKgIQ/SABIA8qAiD9IAIgDyoCMP0gA/3mASAF/QkCGCAP/QkCBCAPKgIU/SABIA8qAiT9IAIgDyoCNP0gA/3mAf3kASAF/QkCKCAP/QkCCCAPKgIY/SABIA8qAij9IAIgDyoCOP0gA/3mAf3kASAF/QkCOCAP/QkCDCAPKgIc/SABIA8qAiz9IAIgDyoCPP0gA/3mAf3kASERIAohDwsgAyAUagJ/IBEgASAVQQJ0IgpqKQIA/RL95gEiEv0fACAS/R8BkiARIBH9DQgJCgsMDQ4PAAAAAAAAAAAgASAKQQhyaikCAP0S/eYBIhL9HwCSIBL9HwGSu0QAAAAAAACwQKIiEJlEAAAAAAAA4EFjBEAgEKoMAQtBgICAgHgLIgo2AgAgCiAOIAogDkgbIQ4gCiANIAogDUobIQ0gAkEBaiICIAtHDQALDAELIAUqAighFiAFKgIYIRcgBSoCCCEYQfj///8HIQ5BiICAgHghDSAMIQUDQAJ/IBggASAAIAVBAnQiB2ooAgBBBHRqIgIqAgCUIBcgAioCBJSSIBYgAioCCJSSu0QAAAAAAACwQKIiEJlEAAAAAAAA4EFjBEAgEKoMAQtBgICAgHgLIQogAyAHaiAKNgIAIAogDiAKIA5IGyEOIAogDSAKIA1KGyENIAVBAWoiBSALRw0ACwsgCyAMSwRAIAlBAWuzIA2yIA6yk5UhFiAMIQ0DQAJ/IBYgAyANQQJ0aiIBKAIAIA5rspQiF4tDAAAAT10EQCAXqAwBC0GAgICAeAshCiABIAo2AgAgBCAKQQJ0aiIBIAEoAgBBAWo2AgAgDUEBaiINIAtHDQALCyAJQQJPBEAgBCgCACENQQEhDgNAIAQgDkECdGoiASABKAIAIA1qIg02AgAgDkEBaiIOIAlHDQALCyAMQQBKBEAgDCEOA0AgBiAOQQFrIgFBAnQiAmogACACaigCADYCACAOQQFKIQIgASEOIAINAAsLIAsgDEoEQCALIQ4DQCAGIAsgBCADIA5BAWsiDkECdCIBaigCAEECdGoiAigCACIFa0ECdGogACABaigCADYCACACIAVBAWs2AgAgDCAOSA0ACwsLBABBAAs="),o=new Uint8Array(i.length);for(let e=0;e<i.length;e++)o[e]=i.charCodeAt(e);return r.postMessage({init:{sorterWasmBytes:o.buffer,splatCount:e,useSharedMemory:t,integerBasedSort:n,dynamicMode:s,Constants:{BytesPerFloat:L.BytesPerFloat,BytesPerInt:L.BytesPerInt,DepthMapRange:L.DepthMapRange,MemoryPageSize:L.MemoryPageSize,MaxScenes:L.MaxScenes}}}),r}(r,this.sharedMemoryForWorkers,this.integerBasedSort,this.splatMesh.dynamicMode);let i=0;this.sortWorker.onmessage=e=>{if(e.data.sortDone){if(this.sortRunning=!1,this.sharedMemoryForWorkers)this.splatMesh.updateRenderIndexes(this.sortWorkerSortedIndexes,e.data.splatRenderCount);else{const t=new Uint32Array(e.data.sortedIndexes.buffer,0,e.data.splatRenderCount);this.splatMesh.updateRenderIndexes(t,e.data.splatRenderCount)}this.lastSortTime=e.data.sortTime,this.sortPromiseResolver(),this.sortPromise=null,this.sortPromiseResolver=null,this.forceRenderNextFrame(),0===i&&(this.runAfterFirstSort.forEach((e=>{e()})),this.runAfterFirstSort.length=0),i++}else if(e.data.sortCanceled)this.sortRunning=!1;else if(e.data.sortSetupPhase1Complete){console.log("Sorting web worker WASM setup complete."),this.sharedMemoryForWorkers?(this.sortWorkerSortedIndexes=new Uint32Array(e.data.sortedIndexesBuffer,e.data.sortedIndexesOffset,r),this.sortWorkerIndexesToSort=new Uint32Array(e.data.indexesToSortBuffer,e.data.indexesToSortOffset,r),this.sortWorkerPrecomputedDistances=new n(e.data.precomputedDistancesBuffer,e.data.precomputedDistancesOffset,r),this.sortWorkerTransforms=new Float32Array(e.data.transformsBuffer,e.data.transformsOffset,16*L.MaxScenes)):(this.sortWorkerIndexesToSort=new Uint32Array(r),this.sortWorkerPrecomputedDistances=new n(r),this.sortWorkerTransforms=new Float32Array(16*L.MaxScenes));for(let e=0;e<s;e++)this.sortWorkerIndexesToSort[e]=e;this.sortWorker.maxSplatCount=r,t()}else if(e.data.sortSetupComplete){console.log("Sorting web worker ready.");const e=this.splatMesh.getSplatDataTextures(),t=e.covariances.size,n=e.centerColors.size;console.log("Covariances texture size: "+t.x+" x "+t.y),console.log("Centers/colors texture size: "+n.x+" x "+n.y)}}}))}start(){if(!this.selfDrivenMode)throw new Error("Cannot start viewer unless it is in self driven mode.");this.webXRMode?this.renderer.setAnimationLoop(this.selfDrivenUpdateFunc):this.requestFrameId=requestAnimationFrame(this.selfDrivenUpdateFunc),this.selfDrivenModeRunning=!0}stop(){this.selfDrivenMode&&this.selfDrivenModeRunning&&(this.webXRMode||cancelAnimationFrame(this.requestFrameId),this.selfDrivenModeRunning=!1)}async dispose(){this.disposing=!0;let e=[],t=[];for(let n in this.downloadPromisesToAbort)if(this.downloadPromisesToAbort.hasOwnProperty(n)){const s=this.downloadPromisesToAbort[n];t.push(s),e.push(s.promise)}this.sortPromise&&e.push(this.sortPromise);const n=Promise.all(e).finally((()=>{this.stop(),this.controls&&(this.controls.dispose(),this.controls=null),this.splatMesh&&(this.splatMesh.dispose(),this.splatMesh=null),this.sceneHelper&&(this.sceneHelper.dispose(),this.sceneHelper=null),this.resizeObserver&&(this.resizeObserver.unobserve(this.rootElement),this.resizeObserver=null),this.disposeSortWorker(),this.removeEventHandlers(),this.loadingSpinner.removeAllTasks(),this.loadingSpinner.setContainer(null),this.loadingProgressBar.hide(),this.loadingProgressBar.setContainer(null),this.infoPanel.setContainer(null),this.camera=null,this.threeScene=null,this.splatRenderingInitialized=!1,this.initialized=!1,this.renderer&&(this.usingExternalRenderer||(this.rootElement.removeChild(this.renderer.domElement),this.renderer.dispose()),this.renderer=null),this.usingExternalRenderer||document.body.removeChild(this.rootElement),this.sortWorkerSortedIndexes=null,this.sortWorkerIndexesToSort=null,this.sortWorkerPrecomputedDistances=null,this.sortWorkerTransforms=null,this.disposed=!0,this.disposing=!1}));return t.forEach((e=>{e.abort()})),n}selfDrivenUpdate(){this.selfDrivenMode&&!this.webXRMode&&(this.requestFrameId=requestAnimationFrame(this.selfDrivenUpdateFunc)),this.update(),this.shouldRender()?(this.render(),this.consecutiveRenderFrames++):this.consecutiveRenderFrames=0,this.renderNextFrame=!1}forceRenderNextFrame(){this.renderNextFrame=!0}shouldRender=function(){let t=0;const n=new e.Vector3,s=new e.Quaternion,r=1e-4;return function(){let e=!1,i=!1;if(this.camera){const e=this.camera.position,t=this.camera.quaternion;i=Math.abs(e.x-n.x)>r||Math.abs(e.y-n.y)>r||Math.abs(e.z-n.z)>r||Math.abs(t.x-s.x)>r||Math.abs(t.y-s.y)>r||Math.abs(t.z-s.z)>r||Math.abs(t.w-s.w)>r}return e=this.renderMode!==ve.Never&&(0===t||this.splatMesh.visibleRegionChanging||i||this.renderMode===ve.Always||!0===this.dynamicMode||this.renderNextFrame),this.camera&&(n.copy(this.camera.position),s.copy(this.camera.quaternion)),t++,e}}();render=function(){if(!this.initialized||!this.splatRenderingInitialized)return;const e=this.renderer.autoClear;this.renderer.autoClear=!1,(e=>{for(let t of e.children)if(t.visible)return!0;return!1})(this.threeScene)&&this.renderer.render(this.threeScene,this.camera),this.renderer.render(this.splatMesh,this.camera),this.sceneHelper.getFocusMarkerOpacity()>0&&this.renderer.render(this.sceneHelper.focusMarker,this.camera),this.showControlPlane&&this.renderer.render(this.sceneHelper.controlPlane,this.camera),this.renderer.autoClear=e};update(e,t){this.dropInMode&&this.updateForDropInMode(e,t),this.initialized&&this.splatRenderingInitialized&&(this.controls&&this.controls.update(),this.splatMesh.updateVisibleRegionFadeDistance(this.sceneRevealMode),this.updateSplatSort(),this.updateForRendererSizeChanges(),this.updateSplatMesh(),this.updateMeshCursor(),this.updateFPS(),this.timingSensitiveUpdates(),this.updateInfoPanel(),this.updateControlPlane())}updateForDropInMode(e,t){this.renderer=e,this.splatMesh&&this.splatMesh.setRenderer(this.renderer),this.camera=t,this.controls&&(this.controls.object=t),this.init()}updateFPS=function(){let e=S(),t=0;return function(){if(this.consecutiveRenderFrames>60){const n=S();n-e>=1?(this.currentFPS=t,t=0,e=n):t++}else this.currentFPS=null}}();updateForRendererSizeChanges=function(){const t=new e.Vector2,n=new e.Vector2;return function(){this.renderer.getSize(n),n.x===t.x&&n.y===t.y||(this.usingExternalCamera||(this.camera.aspect=n.x/n.y,this.camera.updateProjectionMatrix()),t.copy(n))}}();timingSensitiveUpdates=function(){let e;return function(){const t=S();e||(e=t);const n=t-e;this.updateCameraTransition(t),this.updateFocusMarker(n),e=t}}();updateCameraTransition=function(){let t=new e.Vector3,n=new e.Vector3,s=new e.Vector3;return function(e){if(this.transitioningCameraTarget){n.copy(this.previousCameraTarget).sub(this.camera.position).normalize(),s.copy(this.nextCameraTarget).sub(this.camera.position).normalize();const r=Math.acos(n.dot(s)),i=(r/(Math.PI/3)*.65+.3)/r*(e-this.transitioningCameraTargetStartTime);t.copy(this.previousCameraTarget).lerp(this.nextCameraTarget,i),this.camera.lookAt(t),this.controls.target.copy(t),i>=1&&(this.transitioningCameraTarget=!1)}}}();updateFocusMarker=function(){const t=new e.Vector2;let n=!1;return function(e){if(this.getRenderDimensions(t),this.transitioningCameraTarget){this.sceneHelper.setFocusMarkerVisibility(!0);const s=Math.max(this.sceneHelper.getFocusMarkerOpacity(),0);let r=Math.min(s+10*e,1);this.sceneHelper.setFocusMarkerOpacity(r),this.sceneHelper.updateFocusMarker(this.nextCameraTarget,this.camera,t),n=!0,this.forceRenderNextFrame()}else{let s;if(s=n?1:Math.min(this.sceneHelper.getFocusMarkerOpacity(),1),s>0){this.sceneHelper.updateFocusMarker(this.nextCameraTarget,this.camera,t);let n=Math.max(s-2.5*e,0);this.sceneHelper.setFocusMarkerOpacity(n),0===n&&this.sceneHelper.setFocusMarkerVisibility(!1)}s>0&&this.forceRenderNextFrame(),n=!1}}}();updateMeshCursor=function(){const t=[],n=new e.Vector2;return function(){this.showMeshCursor?(this.forceRenderNextFrame(),this.getRenderDimensions(n),t.length=0,this.raycaster.setFromCameraAndScreenPosition(this.camera,this.mousePosition,n),this.raycaster.intersectSplatMesh(this.splatMesh,t),t.length>0?(this.sceneHelper.setMeshCursorVisibility(!0),this.sceneHelper.positionAndOrientMeshCursor(t[0].origin,this.camera)):this.sceneHelper.setMeshCursorVisibility(!1)):(this.sceneHelper.getMeschCursorVisibility()&&this.forceRenderNextFrame(),this.sceneHelper.setMeshCursorVisibility(!1))}}();updateInfoPanel=function(){const t=new e.Vector2;return function(){if(!this.showInfo)return;const e=this.splatMesh.getSplatCount();this.getRenderDimensions(t);const n=this.controls?this.controls.target:null,s=this.showMeshCursor?this.sceneHelper.meshCursor.position:null,r=this.splatRenderCount/e*100;this.infoPanel.update(t,this.camera.position,n,this.camera.up,s,this.currentFPS||"N/A",e,this.splatRenderCount,r,this.lastSortTime,this.focalAdjustment)}}();updateControlPlane(){this.showControlPlane?(this.sceneHelper.setControlPlaneVisibility(!0),this.sceneHelper.positionAndOrientControlPlane(this.controls.target,this.camera.up)):this.sceneHelper.setControlPlaneVisibility(!1)}updateSplatSort=function(){const t=new e.Matrix4,n=[],s=new e.Vector3(0,0,-1),r=new e.Vector3(0,0,-1),i=new e.Vector3,o=new e.Vector3,a=[],l=[{angleThreshold:.55,sortFractions:[.125,.33333,.75]},{angleThreshold:.65,sortFractions:[.33333,.66667]},{angleThreshold:.8,sortFractions:[.5]}];return async function(){if(this.sortRunning)return;if(!this.initialized||!this.splatRenderingInitialized)return;let e=0,c=0,d=!1,h=!1;if(r.set(0,0,-1).applyQuaternion(this.camera.quaternion),e=r.dot(s),c=o.copy(this.camera.position).sub(i).length(),!(this.forceSort||this.splatMesh.dynamicMode||0!==a.length||(e<=.99&&(d=!0),c>=1&&(h=!0),d||h)))return;this.sortRunning=!0;const{splatRenderCount:u,shouldSortAll:p}=this.gatherSceneNodesForSort();if(this.splatRenderCount=u,this.sortPromise=new Promise((e=>{this.sortPromiseResolver=e})),t.copy(this.camera.matrixWorld).invert(),t.premultiply(this.camera.projectionMatrix),t.multiply(this.splatMesh.matrixWorld),this.gpuAcceleratedSort&&(a.length<=1||a.length%2==0)&&await this.splatMesh.computeDistancesOnGPU(t,this.sortWorkerPrecomputedDistances),this.splatMesh.dynamicMode||p)a.push(this.splatRenderCount);else if(0===a.length){for(let t of l)if(e<t.angleThreshold){for(let e of t.sortFractions)a.push(Math.floor(this.splatRenderCount*e));break}a.push(this.splatRenderCount)}let m=Math.min(a.shift(),this.splatRenderCount);n[0]=this.camera.position.x,n[1]=this.camera.position.y,n[2]=this.camera.position.z;const f={modelViewProj:t.elements,cameraPosition:n,splatRenderCount:this.splatRenderCount,splatSortCount:m,usePrecomputedDistances:this.gpuAcceleratedSort};this.splatMesh.dynamicMode&&this.splatMesh.fillTransformsArray(this.sortWorkerTransforms),this.sharedMemoryForWorkers||(f.indexesToSort=this.sortWorkerIndexesToSort,f.transforms=this.sortWorkerTransforms,this.gpuAcceleratedSort&&(f.precomputedDistances=this.sortWorkerPrecomputedDistances)),this.sortWorker.postMessage({sort:f}),0===a.length&&(i.copy(this.camera.position),s.copy(r)),this.forceSort=!1}}();gatherSceneNodesForSort=function(){const t=[];let n=null;const s=new e.Vector3,r=new e.Vector3,i=new e.Vector3,o=new e.Matrix4,a=new e.Matrix4,l=new e.Matrix4,c=new e.Vector3,d=new e.Vector3(0,0,-1),h=new e.Vector3,u=e=>h.copy(e.max).sub(e.min).length();return function(h=!1){this.getRenderDimensions(c);const p=c.y/2/Math.tan(this.camera.fov/2*e.MathUtils.DEG2RAD),m=Math.atan(c.x/2/p),f=Math.atan(c.y/2/p),g=Math.cos(m),S=Math.cos(f),y=this.splatMesh.getSplatTree();if(y){a.copy(this.camera.matrixWorld).invert(),a.multiply(this.splatMesh.matrixWorld);let e=0,n=0;for(let c=0;c<y.subTrees.length;c++){const p=y.subTrees[c];o.copy(a),this.splatMesh.dynamicMode&&(this.splatMesh.getSceneTransform(c,l),o.multiply(l));const m=p.nodesWithIndexes.length;for(let a=0;a<m;a++){const l=p.nodesWithIndexes[a];if(!l.data||!l.data.indexes||0===l.data.indexes.length)continue;i.copy(l.center).applyMatrix4(o);const c=i.length();i.normalize(),s.copy(i).setX(0).normalize(),r.copy(i).setY(0).normalize();const m=d.dot(r),f=d.dot(s),y=u(l);!h&&(m<g-.6||f<S-.6)&&c>y||(n+=l.data.indexes.length,t[e]=l,l.data.distanceToNode=c,e++)}}t.length=e,t.sort(((e,t)=>e.data.distanceToNode<t.data.distanceToNode?-1:1));let c=n*L.BytesPerInt;for(let n=0;n<e;n++){const e=t[n],s=e.data.indexes.length,r=s*L.BytesPerInt;new Uint32Array(this.sortWorkerIndexesToSort.buffer,c-r,s).set(e.data.indexes),c-=r}return{splatRenderCount:n,shouldSortAll:!1}}{const e=this.splatMesh.getSplatCount();if(!n||n.length!==e){n=new Uint32Array(e);for(let t=0;t<e;t++)n[t]=t}return this.sortWorkerIndexesToSort.set(n),{splatRenderCount:e,shouldSortAll:!0}}}}();getSplatMesh(){return this.splatMesh}getSplatScene(e){return this.splatMesh.getScene(e)}isMobile(){return navigator.userAgent.includes("Mobi")}}class Me extends e.Group{constructor(e={}){super(),e.selfDrivenMode=!1,e.useBuiltInControls=!1,e.rootElement=null,e.ignoreDevicePixelRatio=!1,e.dropInMode=!0,e.camera=void 0,e.renderer=void 0,this.viewer=new Fe(e),this.callbackMesh=Me.createCallbackMesh(),this.add(this.callbackMesh),this.callbackMesh.onBeforeRender=Me.onBeforeRender.bind(this,this.viewer)}addSplatScene(e,t={}){!1!==t.showLoadingUI&&(t.showLoadingUI=!0);const n=this.viewer.addSplatScene(e,t);return n.then((()=>{this.add(this.viewer.splatMesh)})),n}addSplatScenes(e,t){!1!==t&&(t=!0);const n=this.viewer.addSplatScenes(e,t);return n.then((()=>{this.add(this.viewer.splatMesh)})),n}getSplatScene(e){return this.viewer.getSplatScene(e)}dispose(){return this.viewer.dispose()}static onBeforeRender(e,t,n,s){e.update(t,s)}static createCallbackMesh(){const t=new e.SphereGeometry(1,8,8),n=new e.MeshBasicMaterial;n.colorWrite=!1,n.depthWrite=!1;const s=new e.Mesh(t,n);return s.frustumCulled=!1,s}}export{u as AbortablePromise,E as CompressedPlyParser,Me as DropInViewer,N as KSplatLoader,W as LoaderUtils,$ as OrbitControls,_ as PlyLoader,P as PlyParser,ve as RenderMode,H as SceneFormat,Se as SceneRevealMode,C as SplatBuffer,R as SplatBufferGenerator,V as SplatLoader,U as SplatParser,I as SplatPartitioner,Fe as Viewer,be as WebXRMode};
//# sourceMappingURL=gaussian-splats-3d.module.min.js.map
