{"version":3,"file":"gaussian-splats-3d.module.js","sources":["../src/SplatBuffer.js","../src/AbortablePromise.js","../src/Util.js","../src/SplatCompressor.js","../src/PlyParser.js","../src/PlyLoader.js","../src/SceneFormat.js","../src/SplatLoader.js","../src/OrbitControls.js","../src/LoadingSpinner.js","../src/ArrowHelper.js","../src/SceneHelper.js","../src/raycaster/Ray.js","../src/raycaster/Hit.js","../src/raycaster/Raycaster.js","../src/SplatScene.js","../src/splattree/SplatTreeNode.js","../src/splattree/SplatTree.js","../src/Constants.js","../src/SplatMesh.js","../src/worker/sorter.wasm","../src/worker/SortWorker.js","../src/webxr/WebXRMode.js","../src/webxr/VRButton.js","../src/webxr/ARButton.js","../src/Viewer.js","../src/DropInViewer.js"],"sourcesContent":["import * as THREE from 'three';\r\n\r\n/**\r\n * SplatBuffer: Container for splat data from a single scene/file and capable of (mediocre) compression.\r\n */\r\nexport class SplatBuffer {\r\n\r\n    static CenterComponentCount = 3;\r\n    static ScaleComponentCount = 3;\r\n    static RotationComponentCount = 4;\r\n    static ColorComponentCount = 4;\r\n\r\n    static CompressionLevels = {\r\n        0: {\r\n            BytesPerCenter: 12,\r\n            BytesPerScale: 12,\r\n            BytesPerColor: 4,\r\n            BytesPerRotation: 16,\r\n            ScaleRange: 1\r\n        },\r\n        1: {\r\n            BytesPerCenter: 6,\r\n            BytesPerScale: 6,\r\n            BytesPerColor: 4,\r\n            BytesPerRotation: 8,\r\n            ScaleRange: 32767\r\n        }\r\n    };\r\n\r\n    static CovarianceSizeFloats = 6;\r\n    static CovarianceSizeBytes = 24;\r\n\r\n    static HeaderSizeBytes = 1024;\r\n\r\n    constructor(bufferData) {\r\n        this.headerBufferData = new ArrayBuffer(SplatBuffer.HeaderSizeBytes);\r\n        this.headerArrayUint8 = new Uint8Array(this.headerBufferData);\r\n        this.headerArrayUint32 = new Uint32Array(this.headerBufferData);\r\n        this.headerArrayFloat32 = new Float32Array(this.headerBufferData);\r\n        this.headerArrayUint8.set(new Uint8Array(bufferData, 0, SplatBuffer.HeaderSizeBytes));\r\n        this.versionMajor = this.headerArrayUint8[0];\r\n        this.versionMinor = this.headerArrayUint8[1];\r\n        this.headerExtraK = this.headerArrayUint8[2];\r\n        this.compressionLevel = this.headerArrayUint8[3];\r\n        this.splatCount = this.headerArrayUint32[1];\r\n        this.bucketSize = this.headerArrayUint32[2];\r\n        this.bucketCount = this.headerArrayUint32[3];\r\n        this.bucketBlockSize = this.headerArrayFloat32[4];\r\n        this.halfBucketBlockSize = this.bucketBlockSize / 2.0;\r\n        this.bytesPerBucket = this.headerArrayUint32[5];\r\n        this.compressionScaleRange = this.headerArrayUint32[6] || SplatBuffer.CompressionLevels[this.compressionLevel].ScaleRange;\r\n        this.compressionScaleFactor = this.halfBucketBlockSize / this.compressionScaleRange;\r\n\r\n        const dataBufferSizeBytes = bufferData.byteLength - SplatBuffer.HeaderSizeBytes;\r\n        this.splatBufferData = new ArrayBuffer(dataBufferSizeBytes);\r\n        new Uint8Array(this.splatBufferData).set(new Uint8Array(bufferData, SplatBuffer.HeaderSizeBytes, dataBufferSizeBytes));\r\n\r\n        this.bytesPerCenter = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerCenter;\r\n        this.bytesPerScale = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerScale;\r\n        this.bytesPerColor = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerColor;\r\n        this.bytesPerRotation = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerRotation;\r\n\r\n        this.bytesPerSplat = this.bytesPerCenter + this.bytesPerScale + this.bytesPerColor + this.bytesPerRotation;\r\n\r\n        this.linkBufferArrays();\r\n    }\r\n\r\n    linkBufferArrays() {\r\n        let FloatArray = (this.compressionLevel === 0) ? Float32Array : Uint16Array;\r\n        this.centerArray = new FloatArray(this.splatBufferData, 0, this.splatCount * SplatBuffer.CenterComponentCount);\r\n        this.scaleArray = new FloatArray(this.splatBufferData, this.bytesPerCenter * this.splatCount,\r\n                                         this.splatCount * SplatBuffer.ScaleComponentCount);\r\n        this.colorArray = new Uint8Array(this.splatBufferData, (this.bytesPerCenter + this.bytesPerScale) * this.splatCount,\r\n                                         this.splatCount * SplatBuffer.ColorComponentCount);\r\n        this.rotationArray = new FloatArray(this.splatBufferData,\r\n                                             (this.bytesPerCenter + this.bytesPerScale + this.bytesPerColor) * this.splatCount,\r\n                                              this.splatCount * SplatBuffer.RotationComponentCount);\r\n        this.bucketsBase = this.splatCount * this.bytesPerSplat;\r\n    }\r\n\r\n    fbf(f) {\r\n        if (this.compressionLevel === 0) {\r\n            return f;\r\n        } else {\r\n            return THREE.DataUtils.fromHalfFloat(f);\r\n        }\r\n    };\r\n\r\n    getHeaderBufferData() {\r\n        return this.headerBufferData;\r\n    }\r\n\r\n    getSplatBufferData() {\r\n        return this.splatBufferData;\r\n    }\r\n\r\n    getSplatCount() {\r\n        return this.splatCount;\r\n    }\r\n\r\n    getSplatCenter(index, outCenter, transform) {\r\n        let bucket = [0, 0, 0];\r\n        const centerBase = index * SplatBuffer.CenterComponentCount;\r\n        if (this.compressionLevel > 0) {\r\n            const sf = this.compressionScaleFactor;\r\n            const sr = this.compressionScaleRange;\r\n            const bucketIndex = Math.floor(index / this.bucketSize);\r\n            bucket = new Float32Array(this.splatBufferData, this.bucketsBase + bucketIndex * this.bytesPerBucket, 3);\r\n            outCenter.x = (this.centerArray[centerBase] - sr) * sf + bucket[0];\r\n            outCenter.y = (this.centerArray[centerBase + 1] - sr) * sf + bucket[1];\r\n            outCenter.z = (this.centerArray[centerBase + 2] - sr) * sf + bucket[2];\r\n        } else {\r\n            outCenter.x = this.centerArray[centerBase];\r\n            outCenter.y = this.centerArray[centerBase + 1];\r\n            outCenter.z = this.centerArray[centerBase + 2];\r\n        }\r\n        if (transform) outCenter.applyMatrix4(transform);\r\n    }\r\n\r\n    getSplatScaleAndRotation = function() {\r\n\r\n        const scaleMatrix = new THREE.Matrix4();\r\n        const rotationMatrix = new THREE.Matrix4();\r\n        const tempMatrix = new THREE.Matrix4();\r\n        const tempPosition = new THREE.Vector3();\r\n\r\n        return function(index, outScale, outRotation, transform) {\r\n            const scaleBase = index * SplatBuffer.ScaleComponentCount;\r\n            outScale.set(this.fbf(this.scaleArray[scaleBase]),\r\n                         this.fbf(this.scaleArray[scaleBase + 1]),\r\n                         this.fbf(this.scaleArray[scaleBase + 2]));\r\n            const rotationBase = index * SplatBuffer.RotationComponentCount;\r\n            outRotation.set(this.fbf(this.rotationArray[rotationBase + 1]), this.fbf(this.rotationArray[rotationBase + 2]),\r\n                            this.fbf(this.rotationArray[rotationBase + 3]), this.fbf(this.rotationArray[rotationBase]));\r\n            if (transform) {\r\n                scaleMatrix.makeScale(outScale.x, outScale.y, outScale.z);\r\n                rotationMatrix.makeRotationFromQuaternion(outRotation);\r\n                tempMatrix.copy(scaleMatrix).multiply(rotationMatrix).multiply(transform);\r\n                tempMatrix.decompose(tempPosition, outRotation, outScale);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    getSplatColor(index, outColor, transform) {\r\n        const colorBase = index * SplatBuffer.ColorComponentCount;\r\n        outColor.set(this.colorArray[colorBase], this.colorArray[colorBase + 1],\r\n                     this.colorArray[colorBase + 2], this.colorArray[colorBase + 3]);\r\n        // TODO: apply transform for spherical harmonics\r\n    }\r\n\r\n    fillSplatCenterArray(outCenterArray, destOffset, transform) {\r\n        const splatCount = this.splatCount;\r\n        let bucket = [0, 0, 0];\r\n        const center = new THREE.Vector3();\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const centerSrcBase = i * SplatBuffer.CenterComponentCount;\r\n            const centerDestBase = (i + destOffset) * SplatBuffer.CenterComponentCount;\r\n            if (this.compressionLevel > 0) {\r\n                const bucketIndex = Math.floor(i / this.bucketSize);\r\n                bucket = new Float32Array(this.splatBufferData, this.bucketsBase + bucketIndex * this.bytesPerBucket, 3);\r\n                const sf = this.compressionScaleFactor;\r\n                const sr = this.compressionScaleRange;\r\n                center.x = (this.centerArray[centerSrcBase] - sr) * sf + bucket[0];\r\n                center.y = (this.centerArray[centerSrcBase + 1] - sr) * sf + bucket[1];\r\n                center.z = (this.centerArray[centerSrcBase + 2] - sr) * sf + bucket[2];\r\n            } else {\r\n                center.x = this.centerArray[centerSrcBase];\r\n                center.y = this.centerArray[centerSrcBase + 1];\r\n                center.z = this.centerArray[centerSrcBase + 2];\r\n            }\r\n            if (transform) {\r\n                center.applyMatrix4(transform);\r\n            }\r\n            outCenterArray[centerDestBase] = center.x;\r\n            outCenterArray[centerDestBase + 1] = center.y;\r\n            outCenterArray[centerDestBase + 2] = center.z;\r\n        }\r\n    }\r\n\r\n    fillSplatCovarianceArray(covarianceArray, destOffset, transform) {\r\n        const splatCount = this.splatCount;\r\n\r\n        const scale = new THREE.Vector3();\r\n        const rotation = new THREE.Quaternion();\r\n        const rotationMatrix = new THREE.Matrix3();\r\n        const scaleMatrix = new THREE.Matrix3();\r\n        const covarianceMatrix = new THREE.Matrix3();\r\n        const transformedCovariance = new THREE.Matrix3();\r\n        const transform3x3 = new THREE.Matrix3();\r\n        const transform3x3Transpose = new THREE.Matrix3();\r\n        const tempMatrix4 = new THREE.Matrix4();\r\n\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const scaleBase = i * SplatBuffer.ScaleComponentCount;\r\n            scale.set(this.fbf(this.scaleArray[scaleBase]),\r\n                      this.fbf(this.scaleArray[scaleBase + 1]),\r\n                      this.fbf(this.scaleArray[scaleBase + 2]));\r\n            tempMatrix4.makeScale(scale.x, scale.y, scale.z);\r\n            scaleMatrix.setFromMatrix4(tempMatrix4);\r\n\r\n            const rotationBase = i * SplatBuffer.RotationComponentCount;\r\n            rotation.set(this.fbf(this.rotationArray[rotationBase + 1]),\r\n                         this.fbf(this.rotationArray[rotationBase + 2]),\r\n                         this.fbf(this.rotationArray[rotationBase + 3]),\r\n                         this.fbf(this.rotationArray[rotationBase]));\r\n            tempMatrix4.makeRotationFromQuaternion(rotation);\r\n            rotationMatrix.setFromMatrix4(tempMatrix4);\r\n\r\n            covarianceMatrix.copy(rotationMatrix).multiply(scaleMatrix);\r\n            transformedCovariance.copy(covarianceMatrix).transpose().premultiply(covarianceMatrix);\r\n            const covBase = SplatBuffer.CovarianceSizeFloats * (i + destOffset);\r\n\r\n            if (transform) {\r\n                transform3x3.setFromMatrix4(transform);\r\n                transform3x3Transpose.copy(transform3x3).transpose();\r\n                transformedCovariance.multiply(transform3x3Transpose);\r\n                transformedCovariance.premultiply(transform3x3);\r\n            }\r\n\r\n            covarianceArray[covBase] = transformedCovariance.elements[0];\r\n            covarianceArray[covBase + 1] = transformedCovariance.elements[3];\r\n            covarianceArray[covBase + 2] = transformedCovariance.elements[6];\r\n            covarianceArray[covBase + 3] = transformedCovariance.elements[4];\r\n            covarianceArray[covBase + 4] = transformedCovariance.elements[7];\r\n            covarianceArray[covBase + 5] = transformedCovariance.elements[8];\r\n        }\r\n    }\r\n\r\n    fillSplatColorArray(outColorArray, destOffset, transform) {\r\n        const splatCount = this.splatCount;\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const colorSrcBase = i * SplatBuffer.ColorComponentCount;\r\n            const colorDestBase = (i + destOffset) * SplatBuffer.ColorComponentCount;\r\n            outColorArray[colorDestBase] = this.colorArray[colorSrcBase];\r\n            outColorArray[colorDestBase + 1] = this.colorArray[colorSrcBase + 1];\r\n            outColorArray[colorDestBase + 2] = this.colorArray[colorSrcBase + 2];\r\n            outColorArray[colorDestBase + 3] = this.colorArray[colorSrcBase + 3];\r\n            // TODO: implement application of transform for spherical harmonics\r\n        }\r\n    }\r\n}\r\n","/**\r\n * AbortablePromise: A quick & dirty wrapper for JavaScript's Promise class that allows the underlying\r\n * asynchronous operation to be cancelled. It is only meant for simple situations where no complex promise\r\n * chaining or merging occurs. It needs a significant amount of work to truly replicate the full\r\n * functionality of JavaScript's Promise class. Look at Util.fetchWithProgress() for example usage.\r\n *\r\n * This class was primarily added to allow splat scene downloads to be cancelled. It has not been tested\r\n * very thoroughly and the implementation is kinda janky. If you can at all help it, please avoid using it :)\r\n */\r\nexport class AbortablePromise {\r\n\r\n    constructor(promiseFunc, abortHandler) {\r\n\r\n        let promiseResolve;\r\n        let promiseReject;\r\n        this.promise = new Promise((resolve, reject) => {\r\n            promiseResolve = resolve.bind(this);\r\n            promiseReject = reject.bind(this);\r\n        });\r\n\r\n        const resolve = (...args) => {\r\n            promiseResolve(...args);\r\n        };\r\n\r\n        const reject = (error) => {\r\n            promiseReject(error);\r\n        };\r\n\r\n        promiseFunc(resolve.bind(this), reject.bind(this));\r\n        this.abortHandler = abortHandler;\r\n    }\r\n\r\n    then(onResolve) {\r\n        return new AbortablePromise((resolve, reject) => {\r\n            this.promise = this.promise\r\n            .then((...args) => {\r\n                const onResolveResult = onResolve(...args);\r\n                if (onResolveResult instanceof Promise || onResolveResult instanceof AbortablePromise) {\r\n                    onResolveResult.then((...args2) => {\r\n                        resolve(...args2);\r\n                    });\r\n                } else {\r\n                    resolve(onResolveResult);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                reject(error);\r\n            });\r\n        }, this.abortHandler);\r\n    }\r\n\r\n    catch(onFail) {\r\n        return new AbortablePromise((resolve) => {\r\n            this.promise = this.promise.then((...args) => {\r\n                resolve(...args);\r\n            })\r\n            .catch(onFail);\r\n        }, this.abortHandler);\r\n    }\r\n\r\n    abort() {\r\n        if (this.abortHandler) this.abortHandler();\r\n    }\r\n\r\n    static resolve(data) {\r\n        return new AbortablePromise((resolve) => {\r\n            resolve(data);\r\n        });\r\n    }\r\n\r\n    static reject(error) {\r\n        return new AbortablePromise((resolve, reject) => {\r\n            reject(error);\r\n        });\r\n    }\r\n}\r\n","import { AbortablePromise } from './AbortablePromise.js';\r\n\r\nexport const floatToHalf = function() {\r\n\r\n    const floatView = new Float32Array(1);\r\n    const int32View = new Int32Array(floatView.buffer);\r\n\r\n    return function(val) {\r\n        floatView[0] = val;\r\n        const x = int32View[0];\r\n\r\n        let bits = (x >> 16) & 0x8000;\r\n        let m = (x >> 12) & 0x07ff;\r\n        const e = (x >> 23) & 0xff;\r\n\r\n        if (e < 103) return bits;\r\n\r\n        if (e > 142) {\r\n            bits |= 0x7c00;\r\n            bits |= ((e == 255) ? 0 : 1) && (x & 0x007fffff);\r\n            return bits;\r\n        }\r\n\r\n        if (e < 113) {\r\n            m |= 0x0800;\r\n            bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\r\n            return bits;\r\n        }\r\n\r\n        bits |= (( e - 112) << 10) | (m >> 1);\r\n        bits += m & 1;\r\n        return bits;\r\n    };\r\n\r\n}();\r\n\r\nexport const uintEncodedFloat = function() {\r\n\r\n    const floatView = new Float32Array(1);\r\n    const int32View = new Int32Array(floatView.buffer);\r\n\r\n    return function(f) {\r\n        floatView[0] = f;\r\n        return int32View[0];\r\n    };\r\n\r\n}();\r\n\r\nexport const rgbaToInteger = function(r, g, b, a) {\r\n    return r + (g << 8) + (b << 16) + (a << 24);\r\n};\r\n\r\nexport const fetchWithProgress = function(path, onProgress) {\r\n\r\n    const abortController = new AbortController();\r\n    const signal = abortController.signal;\r\n    let aborted = false;\r\n    let rejectFunc = null;\r\n    const abortHandler = () => {\r\n        abortController.abort();\r\n        rejectFunc('Fetch aborted');\r\n        aborted = true;\r\n    };\r\n\r\n    return new AbortablePromise((resolve, reject) => {\r\n        rejectFunc = reject;\r\n        fetch(path, { signal })\r\n        .then(async (data) => {\r\n            const reader = data.body.getReader();\r\n            let bytesDownloaded = 0;\r\n            let _fileSize = data.headers.get('Content-Length');\r\n            let fileSize = _fileSize ? parseInt(_fileSize) : undefined;\r\n\r\n            const chunks = [];\r\n\r\n            while (!aborted) {\r\n                try {\r\n                    const { value: chunk, done } = await reader.read();\r\n                    if (done) {\r\n                        if (onProgress) {\r\n                            onProgress(100, '100%', chunk);\r\n                        }\r\n                        const buffer = new Blob(chunks).arrayBuffer();\r\n                        resolve(buffer);\r\n                        break;\r\n                    }\r\n                    bytesDownloaded += chunk.length;\r\n                    let percent;\r\n                    let percentLabel;\r\n                    if (fileSize !== undefined) {\r\n                        percent = bytesDownloaded / fileSize * 100;\r\n                        percentLabel = `${percent.toFixed(2)}%`;\r\n                    }\r\n                    chunks.push(chunk);\r\n                    if (onProgress) {\r\n                        onProgress(percent, percentLabel, chunk);\r\n                    }\r\n                } catch (error) {\r\n                    reject(error);\r\n                    break;\r\n                }\r\n            }\r\n        });\r\n    }, abortHandler);\r\n\r\n};\r\n\r\nexport const clamp = function(val, min, max) {\r\n    return Math.max(Math.min(val, max), min);\r\n};\r\n\r\nexport const getCurrentTime = function() {\r\n    return performance.now() / 1000;\r\n};\r\n\r\nexport const disposeAllMeshes = (object3D) => {\r\n    if (object3D.geometry) {\r\n        object3D.geometry.dispose();\r\n        object3D.geometry = null;\r\n    }\r\n    if (object3D.material) {\r\n        object3D.material.dispose();\r\n        object3D.material = null;\r\n    }\r\n    if (object3D.children) {\r\n        for (let child of object3D.children) {\r\n            disposeAllMeshes(child);\r\n        }\r\n    }\r\n};\r\n","import * as THREE from 'three';\r\nimport { SplatBuffer } from './SplatBuffer.js';\r\nimport { clamp } from './Util.js';\r\n\r\nconst SplatBufferBucketSize = 256;\r\nconst SplatBufferBucketBlockSize = 5.0;\r\n\r\nclass UncompressedSplatArray {\r\n\r\n    constructor() {\r\n        this.splatCount = 0;\r\n        this.scale_0 = [];\r\n        this.scale_1 = [];\r\n        this.scale_2 = [];\r\n        this.rot_0 = [];\r\n        this.rot_1 = [];\r\n        this.rot_2 = [];\r\n        this.rot_3 = [];\r\n        this.x = [];\r\n        this.y = [];\r\n        this.z = [];\r\n        this.f_dc_0 = [];\r\n        this.f_dc_1 = [];\r\n        this.f_dc_2 = [];\r\n        this.opacity = [];\r\n    }\r\n\r\n    addSplat(x, y, z, scale0, scale1, scale2, rot0, rot1, rot2, rot3, r, g, b, opacity) {\r\n        this.x.push(x);\r\n        this.y.push(y);\r\n        this.z.push(z);\r\n        this.scale_0.push(scale0);\r\n        this.scale_1.push(scale1);\r\n        this.scale_2.push(scale2);\r\n        this.rot_0.push(rot0);\r\n        this.rot_1.push(rot1);\r\n        this.rot_2.push(rot2);\r\n        this.rot_3.push(rot3);\r\n        this.f_dc_0.push(r);\r\n        this.f_dc_1.push(g);\r\n        this.f_dc_2.push(b);\r\n        this.opacity.push(opacity);\r\n        this.splatCount++;\r\n    }\r\n}\r\n\r\nexport class SplatCompressor {\r\n\r\n    constructor(compressionLevel = 0, minimumAlpha = 1, blockSize = SplatBufferBucketBlockSize, bucketSize = SplatBufferBucketSize) {\r\n        this.compressionLevel = compressionLevel;\r\n        this.minimumAlpha = minimumAlpha;\r\n        this.bucketSize = bucketSize;\r\n        this.blockSize = blockSize;\r\n    }\r\n\r\n    static createEmptyUncompressedSplatArray() {\r\n        return new UncompressedSplatArray();\r\n    }\r\n\r\n    uncompressedSplatArrayToSplatBuffer(splatArray) {\r\n\r\n        const validSplats = SplatCompressor.createEmptyUncompressedSplatArray();\r\n        validSplats.addSplat(0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0);\r\n\r\n        for (let i = 0; i < splatArray.splatCount; i++) {\r\n            let alpha;\r\n            if (splatArray['opacity'][i]) {\r\n                alpha = splatArray['opacity'][i];\r\n            } else {\r\n                alpha = 255;\r\n            }\r\n            if (alpha >= this.minimumAlpha) {\r\n                validSplats.addSplat(splatArray['x'][i], splatArray['y'][i], splatArray['z'][i],\r\n                                     splatArray['scale_0'][i], splatArray['scale_1'][i], splatArray['scale_2'][i],\r\n                                     splatArray['rot_0'][i], splatArray['rot_1'][i], splatArray['rot_2'][i], splatArray['rot_3'][i],\r\n                                     splatArray['f_dc_0'][i], splatArray['f_dc_1'][i], splatArray['f_dc_2'][i], splatArray['opacity'][i]);\r\n            }\r\n        }\r\n\r\n        const buckets = this.computeBucketsForUncompressedSplatArray(validSplats);\r\n\r\n        const paddedSplatCount = buckets.length * this.bucketSize;\r\n        const headerSize = SplatBuffer.HeaderSizeBytes;\r\n        const header = new Uint8Array(new ArrayBuffer(headerSize));\r\n        header[3] = this.compressionLevel;\r\n        (new Uint32Array(header.buffer, 4, 1))[0] = paddedSplatCount;\r\n\r\n        let bytesPerCenter = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerCenter;\r\n        let bytesPerScale = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerScale;\r\n        let bytesPerColor = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerColor;\r\n        let bytesPerRotation = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerRotation;\r\n        const centerBuffer = new ArrayBuffer(bytesPerCenter * paddedSplatCount);\r\n        const scaleBuffer = new ArrayBuffer(bytesPerScale * paddedSplatCount);\r\n        const colorBuffer = new ArrayBuffer(bytesPerColor * paddedSplatCount);\r\n        const rotationBuffer = new ArrayBuffer(bytesPerRotation * paddedSplatCount);\r\n\r\n        const blockHalfSize = this.blockSize / 2.0;\r\n        const compressionScaleRange = SplatBuffer.CompressionLevels[this.compressionLevel].ScaleRange;\r\n        const compressionScaleFactor = compressionScaleRange / blockHalfSize;\r\n        const doubleCompressionScaleRange = compressionScaleRange * 2 + 1;\r\n\r\n        const bucketCenter = new THREE.Vector3();\r\n        const bucketCenterDelta = new THREE.Vector3();\r\n        let outSplatIndex = 0;\r\n        for (let b = 0; b < buckets.length; b++) {\r\n            const bucket = buckets[b];\r\n            bucketCenter.fromArray(bucket.center);\r\n            for (let i = 0; i < bucket.splats.length; i++) {\r\n                let row = bucket.splats[i];\r\n                let invalidSplat = false;\r\n                if (row === 0) {\r\n                    invalidSplat = true;\r\n                }\r\n\r\n                if (this.compressionLevel === 0) {\r\n                    const center = new Float32Array(centerBuffer, outSplatIndex * bytesPerCenter, 3);\r\n                    const scale = new Float32Array(scaleBuffer, outSplatIndex * bytesPerScale, 3);\r\n                    const rot = new Float32Array(rotationBuffer, outSplatIndex * bytesPerRotation, 4);\r\n                    if (validSplats['scale_0'][row] !== undefined) {\r\n                        const quat = new THREE.Quaternion(validSplats['rot_1'][row], validSplats['rot_2'][row],\r\n                                                          validSplats['rot_3'][row], validSplats['rot_0'][row]);\r\n                        quat.normalize();\r\n                        rot.set([quat.w, quat.x, quat.y, quat.z]);\r\n                        scale.set([validSplats['scale_0'][row], validSplats['scale_1'][row], validSplats['scale_2'][row]]);\r\n                    } else {\r\n                        scale.set([0.01, 0.01, 0.01]);\r\n                        rot.set([1.0, 0.0, 0.0, 0.0]);\r\n                    }\r\n                    center.set([validSplats['x'][row], validSplats['y'][row], validSplats['z'][row]]);\r\n                } else {\r\n                    const center = new Uint16Array(centerBuffer, outSplatIndex * bytesPerCenter, 3);\r\n                    const scale = new Uint16Array(scaleBuffer, outSplatIndex * bytesPerScale, 3);\r\n                    const rot = new Uint16Array(rotationBuffer, outSplatIndex * bytesPerRotation, 4);\r\n                    const thf = THREE.DataUtils.toHalfFloat.bind(THREE.DataUtils);\r\n                    if (validSplats['scale_0'][row] !== undefined) {\r\n                        const quat = new THREE.Quaternion(validSplats['rot_1'][row], validSplats['rot_2'][row],\r\n                                                          validSplats['rot_3'][row], validSplats['rot_0'][row]);\r\n                        quat.normalize();\r\n                        rot.set([thf(quat.w), thf(quat.x), thf(quat.y), thf(quat.z)]);\r\n                        scale.set([thf(validSplats['scale_0'][row]), thf(validSplats['scale_1'][row]), thf(validSplats['scale_2'][row])]);\r\n                    } else {\r\n                        scale.set([thf(0.01), thf(0.01), thf(0.01)]);\r\n                        rot.set([thf(1.), 0, 0, 0]);\r\n                    }\r\n                    bucketCenterDelta.set(validSplats['x'][row], validSplats['y'][row], validSplats['z'][row]).sub(bucketCenter);\r\n                    bucketCenterDelta.x = Math.round(bucketCenterDelta.x * compressionScaleFactor) + compressionScaleRange;\r\n                    bucketCenterDelta.x = clamp(bucketCenterDelta.x, 0, doubleCompressionScaleRange);\r\n                    bucketCenterDelta.y = Math.round(bucketCenterDelta.y * compressionScaleFactor) + compressionScaleRange;\r\n                    bucketCenterDelta.y = clamp(bucketCenterDelta.y, 0, doubleCompressionScaleRange);\r\n                    bucketCenterDelta.z = Math.round(bucketCenterDelta.z * compressionScaleFactor) + compressionScaleRange;\r\n                    bucketCenterDelta.z = clamp(bucketCenterDelta.z, 0, doubleCompressionScaleRange);\r\n                    center.set([bucketCenterDelta.x, bucketCenterDelta.y, bucketCenterDelta.z]);\r\n                }\r\n\r\n                const rgba = new Uint8ClampedArray(colorBuffer, outSplatIndex * bytesPerColor, 4);\r\n                if (invalidSplat) {\r\n                    rgba[0] = 255;\r\n                    rgba[1] = 0;\r\n                    rgba[2] = 0;\r\n                    rgba[3] = 0;\r\n                } else {\r\n                    if (validSplats['f_dc_0'][row] !== undefined) {\r\n                        rgba.set([validSplats['f_dc_0'][row], validSplats['f_dc_1'][row], validSplats['f_dc_2'][row]]);\r\n                    } else {\r\n                        rgba.set([255, 0, 0]);\r\n                    }\r\n                    if (validSplats['opacity'][row] !== undefined) {\r\n                        rgba[3] = validSplats['opacity'][row];\r\n                    } else {\r\n                        rgba[3] = 255;\r\n                    }\r\n                }\r\n\r\n                outSplatIndex++;\r\n            }\r\n        }\r\n\r\n        const bytesPerBucket = 12;\r\n        const bucketsSize = bytesPerBucket * buckets.length;\r\n        const splatDataBufferSize = centerBuffer.byteLength + scaleBuffer.byteLength +\r\n                                    colorBuffer.byteLength + rotationBuffer.byteLength;\r\n\r\n        const headerArrayUint32 = new Uint32Array(header.buffer);\r\n        const headerArrayFloat32 = new Float32Array(header.buffer);\r\n        let unifiedBufferSize = headerSize + splatDataBufferSize;\r\n        if (this.compressionLevel > 0) {\r\n            unifiedBufferSize += bucketsSize;\r\n            headerArrayUint32[2] = this.bucketSize;\r\n            headerArrayUint32[3] = buckets.length;\r\n            headerArrayFloat32[4] = this.blockSize;\r\n            headerArrayUint32[5] = bytesPerBucket;\r\n            headerArrayUint32[6] = SplatBuffer.CompressionLevels[this.compressionLevel].ScaleRange;\r\n        }\r\n\r\n        const unifiedBuffer = new ArrayBuffer(unifiedBufferSize);\r\n        new Uint8Array(unifiedBuffer, 0, headerSize).set(header);\r\n        new Uint8Array(unifiedBuffer, headerSize, centerBuffer.byteLength).set(new Uint8Array(centerBuffer));\r\n        new Uint8Array(unifiedBuffer, headerSize + centerBuffer.byteLength, scaleBuffer.byteLength).set(new Uint8Array(scaleBuffer));\r\n        new Uint8Array(unifiedBuffer, headerSize + centerBuffer.byteLength + scaleBuffer.byteLength,\r\n                    colorBuffer.byteLength).set(new Uint8Array(colorBuffer));\r\n        new Uint8Array(unifiedBuffer, headerSize + centerBuffer.byteLength + scaleBuffer.byteLength + colorBuffer.byteLength,\r\n                    rotationBuffer.byteLength).set(new Uint8Array(rotationBuffer));\r\n\r\n        if (this.compressionLevel > 0) {\r\n            const bucketArray = new Float32Array(unifiedBuffer, headerSize + splatDataBufferSize, buckets.length * 3);\r\n            for (let i = 0; i < buckets.length; i++) {\r\n                const bucket = buckets[i];\r\n                const base = i * 3;\r\n                bucketArray[base] = bucket.center[0];\r\n                bucketArray[base + 1] = bucket.center[1];\r\n                bucketArray[base + 2] = bucket.center[2];\r\n            }\r\n        }\r\n\r\n        const splatBuffer = new SplatBuffer(unifiedBuffer);\r\n        return splatBuffer;\r\n    }\r\n\r\n    computeBucketsForUncompressedSplatArray(splatArray) {\r\n        let splatCount = splatArray.splatCount;\r\n        const blockSize = this.blockSize;\r\n        const halfBlockSize = blockSize / 2.0;\r\n\r\n        const min = new THREE.Vector3();\r\n        const max = new THREE.Vector3();\r\n\r\n        // ignore the first splat since it's the invalid designator\r\n        for (let i = 1; i < splatCount; i++) {\r\n            const center = [splatArray['x'][i], splatArray['y'][i], splatArray['z'][i]];\r\n            if (i === 0 || center[0] < min.x) min.x = center[0];\r\n            if (i === 0 || center[0] > max.x) max.x = center[0];\r\n            if (i === 0 || center[1] < min.y) min.y = center[1];\r\n            if (i === 0 || center[1] > max.y) max.y = center[1];\r\n            if (i === 0 || center[2] < min.z) min.z = center[2];\r\n            if (i === 0 || center[2] > max.z) max.z = center[2];\r\n        }\r\n\r\n        const dimensions = new THREE.Vector3().copy(max).sub(min);\r\n        const yBlocks = Math.ceil(dimensions.y / blockSize);\r\n        const zBlocks = Math.ceil(dimensions.z / blockSize);\r\n\r\n        const blockCenter = new THREE.Vector3();\r\n        const fullBuckets = [];\r\n        const partiallyFullBuckets = {};\r\n\r\n        // ignore the first splat since it's the invalid designator\r\n        for (let i = 1; i < splatCount; i++) {\r\n            const center = [splatArray['x'][i], splatArray['y'][i], splatArray['z'][i]];\r\n            const xBlock = Math.floor((center[0] - min.x) / blockSize);\r\n            const yBlock = Math.floor((center[1] - min.y) / blockSize);\r\n            const zBlock = Math.floor((center[2] - min.z) / blockSize);\r\n\r\n            blockCenter.x = xBlock * blockSize + min.x + halfBlockSize;\r\n            blockCenter.y = yBlock * blockSize + min.y + halfBlockSize;\r\n            blockCenter.z = zBlock * blockSize + min.z + halfBlockSize;\r\n\r\n            const bucketId = xBlock * (yBlocks * zBlocks) + yBlock * zBlocks + zBlock;\r\n            let bucket = partiallyFullBuckets[bucketId];\r\n            if (!bucket) {\r\n                partiallyFullBuckets[bucketId] = bucket = {\r\n                    'splats': [],\r\n                    'center': blockCenter.toArray()\r\n                };\r\n            }\r\n\r\n            bucket.splats.push(i);\r\n            if (bucket.splats.length >= this.bucketSize) {\r\n                fullBuckets.push(bucket);\r\n                partiallyFullBuckets[bucketId] = null;\r\n            }\r\n        }\r\n\r\n        // fill partially full buckets with invalid splats (splat 0)\r\n        // to get them up to this.bucketSize\r\n        for (let bucketId in partiallyFullBuckets) {\r\n            if (partiallyFullBuckets.hasOwnProperty(bucketId)) {\r\n                const bucket = partiallyFullBuckets[bucketId];\r\n                if (bucket) {\r\n                    while (bucket.splats.length < this.bucketSize) {\r\n                        bucket.splats.push(0);\r\n                    }\r\n                    fullBuckets.push(bucket);\r\n                }\r\n            }\r\n        }\r\n\r\n        return fullBuckets;\r\n    }\r\n}\r\n","import { SplatCompressor } from './SplatCompressor.js';\r\n\r\nexport class PlyParser {\r\n\r\n    constructor(plyBuffer) {\r\n        this.plyBuffer = plyBuffer;\r\n    }\r\n\r\n    decodeHeader(plyBuffer) {\r\n        const decoder = new TextDecoder();\r\n        let headerOffset = 0;\r\n        let headerText = '';\r\n\r\n        console.log('.PLY size: ' + plyBuffer.byteLength + ' bytes');\r\n\r\n        const readChunkSize = 100;\r\n\r\n        while (true) {\r\n            if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\r\n                throw new Error('End of file reached while searching for end of header');\r\n            }\r\n            const headerChunk = new Uint8Array(plyBuffer, headerOffset, readChunkSize);\r\n            headerText += decoder.decode(headerChunk);\r\n            headerOffset += readChunkSize;\r\n\r\n            const endHeaderTestChunk = new Uint8Array(plyBuffer, Math.max(0, headerOffset - readChunkSize * 2), readChunkSize * 2);\r\n            const endHeaderTestText = decoder.decode(endHeaderTestChunk);\r\n            if (endHeaderTestText.includes('end_header')) {\r\n                break;\r\n            }\r\n        }\r\n\r\n        const headerLines = headerText.split('\\n');\r\n\r\n        let splatCount = 0;\r\n        let propertyTypes = {};\r\n\r\n        for (let i = 0; i < headerLines.length; i++) {\r\n            const line = headerLines[i].trim();\r\n            if (line.startsWith('element vertex')) {\r\n                const splatCountMatch = line.match(/\\d+/);\r\n                if (splatCountMatch) {\r\n                    splatCount = parseInt(splatCountMatch[0]);\r\n                }\r\n            } else if (line.startsWith('property')) {\r\n                const propertyMatch = line.match(/(\\w+)\\s+(\\w+)\\s+(\\w+)/);\r\n                if (propertyMatch) {\r\n                    const propertyType = propertyMatch[2];\r\n                    const propertyName = propertyMatch[3];\r\n                    propertyTypes[propertyName] = propertyType;\r\n                }\r\n            } else if (line === 'end_header') {\r\n                break;\r\n            }\r\n        }\r\n\r\n        const vertexByteOffset = headerText.indexOf('end_header') + 'end_header'.length + 1;\r\n        const vertexData = new DataView(plyBuffer, vertexByteOffset);\r\n\r\n        return {\r\n            'splatCount': splatCount,\r\n            'propertyTypes': propertyTypes,\r\n            'vertexData': vertexData,\r\n            'headerOffset': headerOffset\r\n        };\r\n    }\r\n\r\n    readRawVertexFast(vertexData, offset, fieldOffsets, propertiesToRead, propertyTypes, outVertex) {\r\n        let rawVertex = outVertex || {};\r\n        for (let property of propertiesToRead) {\r\n            const propertyType = propertyTypes[property];\r\n            if (propertyType === 'float') {\r\n                rawVertex[property] = vertexData.getFloat32(offset + fieldOffsets[property], true);\r\n            } else if (propertyType === 'uchar') {\r\n                rawVertex[property] = vertexData.getUint8(offset + fieldOffsets[property]) / 255.0;\r\n            }\r\n        }\r\n    }\r\n\r\n    parseToSplatBuffer(compressionLevel, minimumAlpha, blockSize, bucketSize) {\r\n\r\n        const startTime = performance.now();\r\n\r\n        console.log('Parsing PLY to SPLAT...');\r\n\r\n        const {splatCount, propertyTypes, vertexData} = this.decodeHeader(this.plyBuffer);\r\n\r\n        // figure out the SH degree from the number of coefficients\r\n        let nRestCoeffs = 0;\r\n        for (const propertyName in propertyTypes) {\r\n            if (propertyName.startsWith('f_rest_')) {\r\n                nRestCoeffs += 1;\r\n            }\r\n        }\r\n        const nCoeffsPerColor = nRestCoeffs / 3;\r\n\r\n        // TODO: Eventually properly support multiple degree spherical harmonics\r\n        // const sphericalHarmonicsDegree = Math.sqrt(nCoeffsPerColor + 1) - 1;\r\n        const sphericalHarmonicsDegree = 0;\r\n\r\n        console.log('Detected degree', sphericalHarmonicsDegree, 'with ', nCoeffsPerColor, 'coefficients per color');\r\n\r\n        // figure out the order in which spherical harmonics should be read\r\n        const shFeatureOrder = [];\r\n        for (let rgb = 0; rgb < 3; ++rgb) {\r\n            shFeatureOrder.push(`f_dc_${rgb}`);\r\n        }\r\n        for (let i = 0; i < nCoeffsPerColor; ++i) {\r\n            for (let rgb = 0; rgb < 3; ++rgb) {\r\n                shFeatureOrder.push(`f_rest_${rgb * nCoeffsPerColor + i}`);\r\n            }\r\n        }\r\n\r\n        let plyRowSize = 0;\r\n        let fieldOffsets = {};\r\n        const fieldSize = {\r\n            'double': 8,\r\n            'int': 4,\r\n            'uint': 4,\r\n            'float': 4,\r\n            'short': 2,\r\n            'ushort': 2,\r\n            'uchar': 1,\r\n        };\r\n        for (let fieldName in propertyTypes) {\r\n            if (propertyTypes.hasOwnProperty(fieldName)) {\r\n                const type = propertyTypes[fieldName];\r\n                fieldOffsets[fieldName] = plyRowSize;\r\n                plyRowSize += fieldSize[type];\r\n            }\r\n        }\r\n\r\n        let rawVertex = {};\r\n\r\n        const propertiesToRead = ['scale_0', 'scale_1', 'scale_2', 'rot_0', 'rot_1', 'rot_2', 'rot_3',\r\n                                  'x', 'y', 'z', 'f_dc_0', 'f_dc_1', 'f_dc_2', 'opacity'];\r\n\r\n        const splatArray = SplatCompressor.createEmptyUncompressedSplatArray();\r\n\r\n        for (let row = 0; row < splatCount; row++) {\r\n            this.readRawVertexFast(vertexData, row * plyRowSize, fieldOffsets, propertiesToRead, propertyTypes, rawVertex);\r\n            if (rawVertex['scale_0'] !== undefined) {\r\n                splatArray['scale_0'][row] = Math.exp(rawVertex['scale_0']);\r\n                splatArray['scale_1'][row] = Math.exp(rawVertex['scale_1']);\r\n                splatArray['scale_2'][row] = Math.exp(rawVertex['scale_2']);\r\n            } else {\r\n                splatArray['scale_0'][row] = 0.01;\r\n                splatArray['scale_1'][row] = 0.01;\r\n                splatArray['scale_2'][row] = 0.01;\r\n            }\r\n\r\n            if (rawVertex['f_dc_0'] !== undefined) {\r\n                const SH_C0 = 0.28209479177387814;\r\n                splatArray['f_dc_0'][row] = (0.5 + SH_C0 * rawVertex['f_dc_0']) * 255;\r\n                splatArray['f_dc_1'][row] = (0.5 + SH_C0 * rawVertex['f_dc_1']) * 255;\r\n                splatArray['f_dc_2'][row] = (0.5 + SH_C0 * rawVertex['f_dc_2']) * 255;\r\n            } else {\r\n                splatArray['f_dc_0'][row] = 0;\r\n                splatArray['f_dc_1'][row] = 0;\r\n                splatArray['f_dc_2'][row] = 0;\r\n            }\r\n            if (rawVertex['opacity'] !== undefined) {\r\n                splatArray['opacity'][row] = (1 / (1 + Math.exp(-rawVertex['opacity']))) * 255;\r\n            }\r\n\r\n            splatArray['rot_0'][row] = rawVertex['rot_0'];\r\n            splatArray['rot_1'][row] = rawVertex['rot_1'];\r\n            splatArray['rot_2'][row] = rawVertex['rot_2'];\r\n            splatArray['rot_3'][row] = rawVertex['rot_3'];\r\n\r\n            splatArray['x'][row] = rawVertex['x'];\r\n            splatArray['y'][row] = rawVertex['y'];\r\n            splatArray['z'][row] = rawVertex['z'];\r\n            splatArray.splatCount++;\r\n        }\r\n\r\n        const splatCompressor = new SplatCompressor(compressionLevel, minimumAlpha, blockSize, bucketSize);\r\n        const splatBuffer = splatCompressor.uncompressedSplatArrayToSplatBuffer(splatArray);\r\n\r\n        console.log('Total valid splats: ', splatBuffer.getSplatCount(), 'out of', splatCount);\r\n\r\n        const endTime = performance.now();\r\n\r\n        console.log('Parsing PLY to SPLAT complete!');\r\n        console.log('Total time: ', (endTime - startTime).toFixed(2) + ' ms');\r\n\r\n        return splatBuffer;\r\n    }\r\n\r\n}\r\n","import { PlyParser } from './PlyParser.js';\r\nimport { fetchWithProgress } from './Util.js';\r\n\r\nexport class PlyLoader {\r\n\r\n    constructor() {\r\n        this.splatBuffer = null;\r\n    }\r\n\r\n    loadFromURL(fileName, onProgress, compressionLevel, minimumAlpha, blockSize, bucketSize) {\r\n        return fetchWithProgress(fileName, onProgress).then((plyFileData) => {\r\n            const plyParser = new PlyParser(plyFileData);\r\n            const splatBuffer = plyParser.parseToSplatBuffer(compressionLevel, minimumAlpha, blockSize, bucketSize);\r\n            this.splatBuffer = splatBuffer;\r\n            return splatBuffer;\r\n        });\r\n    }\r\n\r\n}\r\n","export const SceneFormat = {\r\n    'Splat': 0,\r\n    'KSplat': 1,\r\n    'Ply': 2\r\n};\r\n","import * as THREE from 'three';\r\nimport { SplatBuffer } from './SplatBuffer.js';\r\nimport { SplatCompressor } from './SplatCompressor.js';\r\nimport { fetchWithProgress } from './Util.js';\r\nimport { SceneFormat } from './SceneFormat.js';\r\n\r\nexport class SplatLoader {\r\n\r\n    constructor(splatBuffer = null) {\r\n        this.splatBuffer = splatBuffer;\r\n        this.downLoadLink = null;\r\n    }\r\n\r\n    static isFileSplatFormat(fileName) {\r\n        return SplatLoader.isCustomSplatFormat(fileName) || SplatLoader.isStandardSplatFormat(fileName);\r\n    }\r\n\r\n    static isCustomSplatFormat(fileName) {\r\n        return fileName.endsWith('.ksplat');\r\n    }\r\n\r\n    static isStandardSplatFormat(fileName) {\r\n        return fileName.endsWith('.splat');\r\n    }\r\n\r\n    loadFromURL(fileName, onProgress, compressionLevel, minimumAlpha, blockSize, bucketSize, format) {\r\n        return fetchWithProgress(fileName, onProgress).then((bufferData) => {\r\n            const isCustomSplatFormat = format === SceneFormat.KSplat || SplatLoader.isCustomSplatFormat(fileName);\r\n            let splatBuffer;\r\n            if (isCustomSplatFormat) {\r\n                splatBuffer = new SplatBuffer(bufferData);\r\n            } else {\r\n                const splatCompressor = new SplatCompressor(compressionLevel, minimumAlpha, blockSize, bucketSize);\r\n                const splatArray = SplatLoader.parseStandardSplatToUncompressedSplatArray(bufferData);\r\n                splatBuffer = splatCompressor.uncompressedSplatArrayToSplatBuffer(splatArray);\r\n            }\r\n            return splatBuffer;\r\n        });\r\n    }\r\n\r\n    static parseStandardSplatToUncompressedSplatArray(inBuffer) {\r\n        // Standard .splat row layout:\r\n        // XYZ - Position (Float32)\r\n        // XYZ - Scale (Float32)\r\n        // RGBA - colors (uint8)\r\n        // IJKL - quaternion/rot (uint8)\r\n\r\n        const InBufferRowSizeBytes = 32;\r\n        const splatCount = inBuffer.byteLength / InBufferRowSizeBytes;\r\n\r\n        const splatArray = SplatCompressor.createEmptyUncompressedSplatArray();\r\n\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const inCenterSizeBytes = 3 * 4;\r\n            const inScaleSizeBytes = 3 * 4;\r\n            const inColorSizeBytes = 4;\r\n            const inBase = i * InBufferRowSizeBytes;\r\n            const inCenter = new Float32Array(inBuffer, inBase, 3);\r\n            const inScale = new Float32Array(inBuffer, inBase + inCenterSizeBytes, 3);\r\n            const inColor = new Uint8Array(inBuffer, inBase + inCenterSizeBytes + inScaleSizeBytes, 4);\r\n            const inRotation = new Uint8Array(inBuffer, inBase + inCenterSizeBytes + inScaleSizeBytes + inColorSizeBytes, 4);\r\n\r\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\r\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\r\n            quat.normalize();\r\n\r\n            splatArray.addSplat(inCenter[0], inCenter[1], inCenter[2], inScale[0], inScale[1], inScale[2],\r\n                                quat.w, quat.x, quat.y, quat.z, inColor[0], inColor[1], inColor[2], inColor[3]);\r\n        }\r\n\r\n        return splatArray;\r\n    }\r\n\r\n    setFromBuffer(splatBuffer) {\r\n        this.splatBuffer = splatBuffer;\r\n    }\r\n\r\n    downloadFile(fileName) {\r\n        const headerData = new Uint8Array(this.splatBuffer.getHeaderBufferData());\r\n        const splatData = new Uint8Array(this.splatBuffer.getSplatBufferData());\r\n        const blob = new Blob([headerData.buffer, splatData.buffer], {\r\n            type: 'application/octet-stream',\r\n        });\r\n\r\n        if (!this.downLoadLink) {\r\n            this.downLoadLink = document.createElement('a');\r\n            document.body.appendChild(this.downLoadLink);\r\n        }\r\n        this.downLoadLink.download = fileName;\r\n        this.downLoadLink.href = URL.createObjectURL(blob);\r\n        this.downLoadLink.click();\r\n    }\r\n\r\n}\r\n","/*\r\nCopyright © 2010-2024 three.js authors & Mark Kellogg\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n*/\r\n\r\nimport {\r\n    EventDispatcher,\r\n    MOUSE,\r\n    Quaternion,\r\n    Spherical,\r\n    TOUCH,\r\n    Vector2,\r\n    Vector3,\r\n    Plane,\r\n    Ray,\r\n    MathUtils\r\n} from 'three';\r\n\r\n// OrbitControls performs orbiting, dollying (zooming), and panning.\r\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\r\n//\r\n//    Orbit - left mouse / touch: one-finger move\r\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\r\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\r\n\r\nconst _changeEvent = { type: 'change' };\r\nconst _startEvent = { type: 'start' };\r\nconst _endEvent = { type: 'end' };\r\nconst _ray = new Ray();\r\nconst _plane = new Plane();\r\nconst TILT_LIMIT = Math.cos( 70 * MathUtils.DEG2RAD );\r\n\r\nclass OrbitControls extends EventDispatcher {\r\n\r\n    constructor( object, domElement ) {\r\n\r\n        super();\r\n\r\n        this.object = object;\r\n        this.domElement = domElement;\r\n        this.domElement.style.touchAction = 'none'; // disable touch scroll\r\n\r\n        // Set to false to disable this control\r\n        this.enabled = true;\r\n\r\n        // \"target\" sets the location of focus, where the object orbits around\r\n        this.target = new Vector3();\r\n\r\n        // How far you can dolly in and out ( PerspectiveCamera only )\r\n        this.minDistance = 0;\r\n        this.maxDistance = Infinity;\r\n\r\n        // How far you can zoom in and out ( OrthographicCamera only )\r\n        this.minZoom = 0;\r\n        this.maxZoom = Infinity;\r\n\r\n        // How far you can orbit vertically, upper and lower limits.\r\n        // Range is 0 to Math.PI radians.\r\n        this.minPolarAngle = 0; // radians\r\n        this.maxPolarAngle = Math.PI; // radians\r\n\r\n        // How far you can orbit horizontally, upper and lower limits.\r\n        // If set, the interval [min, max] must be a sub-interval of [- 2 PI, 2 PI], with ( max - min < 2 PI )\r\n        this.minAzimuthAngle = - Infinity; // radians\r\n        this.maxAzimuthAngle = Infinity; // radians\r\n\r\n        // Set to true to enable damping (inertia)\r\n        // If damping is enabled, you must call controls.update() in your animation loop\r\n        this.enableDamping = false;\r\n        this.dampingFactor = 0.05;\r\n\r\n        // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\r\n        // Set to false to disable zooming\r\n        this.enableZoom = true;\r\n        this.zoomSpeed = 1.0;\r\n\r\n        // Set to false to disable rotating\r\n        this.enableRotate = true;\r\n        this.rotateSpeed = 1.0;\r\n\r\n        // Set to false to disable panning\r\n        this.enablePan = true;\r\n        this.panSpeed = 1.0;\r\n        this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\r\n        this.keyPanSpeed = 7.0; // pixels moved per arrow key push\r\n        this.zoomToCursor = false;\r\n\r\n        // Set to true to automatically rotate around the target\r\n        // If auto-rotate is enabled, you must call controls.update() in your animation loop\r\n        this.autoRotate = false;\r\n        this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\r\n\r\n        // The four arrow keys\r\n        this.keys = { LEFT: 'KeyA', UP: 'KeyW', RIGHT: 'KeyD', BOTTOM: 'KeyS' };\r\n\r\n        // Mouse buttons\r\n        this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\r\n\r\n        // Touch fingers\r\n        this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\r\n\r\n        // for reset\r\n        this.target0 = this.target.clone();\r\n        this.position0 = this.object.position.clone();\r\n        this.zoom0 = this.object.zoom;\r\n\r\n        // the target DOM element for key events\r\n        this._domElementKeyEvents = null;\r\n\r\n        //\r\n        // public methods\r\n        //\r\n\r\n        this.getPolarAngle = function() {\r\n\r\n            return spherical.phi;\r\n\r\n        };\r\n\r\n        this.getAzimuthalAngle = function() {\r\n\r\n            return spherical.theta;\r\n\r\n        };\r\n\r\n        this.getDistance = function() {\r\n\r\n            return this.object.position.distanceTo( this.target );\r\n\r\n        };\r\n\r\n        this.listenToKeyEvents = function( domElement ) {\r\n\r\n            domElement.addEventListener( 'keydown', onKeyDown );\r\n            this._domElementKeyEvents = domElement;\r\n\r\n        };\r\n\r\n        this.stopListenToKeyEvents = function() {\r\n\r\n            this._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\r\n            this._domElementKeyEvents = null;\r\n\r\n        };\r\n\r\n        this.saveState = function() {\r\n\r\n            scope.target0.copy( scope.target );\r\n            scope.position0.copy( scope.object.position );\r\n            scope.zoom0 = scope.object.zoom;\r\n\r\n        };\r\n\r\n        this.reset = function() {\r\n\r\n            scope.target.copy( scope.target0 );\r\n            scope.object.position.copy( scope.position0 );\r\n            scope.object.zoom = scope.zoom0;\r\n\r\n            scope.object.updateProjectionMatrix();\r\n            scope.dispatchEvent( _changeEvent );\r\n\r\n            scope.update();\r\n\r\n            state = STATE.NONE;\r\n\r\n        };\r\n\r\n        // this method is exposed, but perhaps it would be better if we can make it private...\r\n        this.update = function() {\r\n\r\n            const offset = new Vector3();\r\n\r\n            // so camera.up is the orbit axis\r\n            const quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\r\n            const quatInverse = quat.clone().invert();\r\n\r\n            const lastPosition = new Vector3();\r\n            const lastQuaternion = new Quaternion();\r\n            const lastTargetPosition = new Vector3();\r\n\r\n            const twoPI = 2 * Math.PI;\r\n\r\n            return function update() {\r\n\r\n                quat.setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\r\n                quatInverse.copy(quat).invert();\r\n\r\n                const position = scope.object.position;\r\n\r\n                offset.copy( position ).sub( scope.target );\r\n\r\n                // rotate offset to \"y-axis-is-up\" space\r\n                offset.applyQuaternion( quat );\r\n\r\n                // angle from z-axis around y-axis\r\n                spherical.setFromVector3( offset );\r\n\r\n                if ( scope.autoRotate && state === STATE.NONE ) {\r\n\r\n                    rotateLeft( getAutoRotationAngle() );\r\n\r\n                }\r\n\r\n                if ( scope.enableDamping ) {\r\n\r\n                    spherical.theta += sphericalDelta.theta * scope.dampingFactor;\r\n                    spherical.phi += sphericalDelta.phi * scope.dampingFactor;\r\n\r\n                } else {\r\n\r\n                    spherical.theta += sphericalDelta.theta;\r\n                    spherical.phi += sphericalDelta.phi;\r\n\r\n                }\r\n\r\n                // restrict theta to be between desired limits\r\n\r\n                let min = scope.minAzimuthAngle;\r\n                let max = scope.maxAzimuthAngle;\r\n\r\n                if ( isFinite( min ) && isFinite( max ) ) {\r\n\r\n                    if ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\r\n\r\n                    if ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\r\n\r\n                    if ( min <= max ) {\r\n\r\n                        spherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\r\n\r\n                    } else {\r\n\r\n                        spherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\r\n                            Math.max( min, spherical.theta ) :\r\n                            Math.min( max, spherical.theta );\r\n\r\n                    }\r\n\r\n                }\r\n\r\n                // restrict phi to be between desired limits\r\n                spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\r\n\r\n                spherical.makeSafe();\r\n\r\n\r\n                // move target to panned location\r\n\r\n                if ( scope.enableDamping === true ) {\r\n\r\n                    scope.target.addScaledVector( panOffset, scope.dampingFactor );\r\n\r\n                } else {\r\n\r\n                    scope.target.add( panOffset );\r\n\r\n                }\r\n\r\n                // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\r\n                // we adjust zoom later in these cases\r\n                if ( scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera ) {\r\n\r\n                    spherical.radius = clampDistance( spherical.radius );\r\n\r\n                } else {\r\n\r\n                    spherical.radius = clampDistance( spherical.radius * scale );\r\n\r\n                }\r\n\r\n\r\n                offset.setFromSpherical( spherical );\r\n\r\n                // rotate offset back to \"camera-up-vector-is-up\" space\r\n                offset.applyQuaternion( quatInverse );\r\n\r\n                position.copy( scope.target ).add( offset );\r\n\r\n                scope.object.lookAt( scope.target );\r\n\r\n                if ( scope.enableDamping === true ) {\r\n\r\n                    sphericalDelta.theta *= ( 1 - scope.dampingFactor );\r\n                    sphericalDelta.phi *= ( 1 - scope.dampingFactor );\r\n\r\n                    panOffset.multiplyScalar( 1 - scope.dampingFactor );\r\n\r\n                } else {\r\n\r\n                    sphericalDelta.set( 0, 0, 0 );\r\n\r\n                    panOffset.set( 0, 0, 0 );\r\n\r\n                }\r\n\r\n                // adjust camera position\r\n                let zoomChanged = false;\r\n                if ( scope.zoomToCursor && performCursorZoom ) {\r\n\r\n                    let newRadius = null;\r\n                    if ( scope.object.isPerspectiveCamera ) {\r\n\r\n                        // move the camera down the pointer ray\r\n                        // this method avoids floating point error\r\n                        const prevRadius = offset.length();\r\n                        newRadius = clampDistance( prevRadius * scale );\r\n\r\n                        const radiusDelta = prevRadius - newRadius;\r\n                        scope.object.position.addScaledVector( dollyDirection, radiusDelta );\r\n                        scope.object.updateMatrixWorld();\r\n\r\n                    } else if ( scope.object.isOrthographicCamera ) {\r\n\r\n                        // adjust the ortho camera position based on zoom changes\r\n                        const mouseBefore = new Vector3( mouse.x, mouse.y, 0 );\r\n                        mouseBefore.unproject( scope.object );\r\n\r\n                        scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\r\n                        scope.object.updateProjectionMatrix();\r\n                        zoomChanged = true;\r\n\r\n                        const mouseAfter = new Vector3( mouse.x, mouse.y, 0 );\r\n                        mouseAfter.unproject( scope.object );\r\n\r\n                        scope.object.position.sub( mouseAfter ).add( mouseBefore );\r\n                        scope.object.updateMatrixWorld();\r\n\r\n                        newRadius = offset.length();\r\n\r\n                    } else {\r\n\r\n                        console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.' );\r\n                        scope.zoomToCursor = false;\r\n\r\n                    }\r\n\r\n                    // handle the placement of the target\r\n                    if ( newRadius !== null ) {\r\n\r\n                        if ( this.screenSpacePanning ) {\r\n\r\n                            // position the orbit target in front of the new camera position\r\n                            scope.target.set( 0, 0, - 1 )\r\n                                .transformDirection( scope.object.matrix )\r\n                                .multiplyScalar( newRadius )\r\n                                .add( scope.object.position );\r\n\r\n                        } else {\r\n\r\n                            // get the ray and translation plane to compute target\r\n                            _ray.origin.copy( scope.object.position );\r\n                            _ray.direction.set( 0, 0, - 1 ).transformDirection( scope.object.matrix );\r\n\r\n                            // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\r\n                            // extremely large values\r\n                            if ( Math.abs( scope.object.up.dot( _ray.direction ) ) < TILT_LIMIT ) {\r\n\r\n                                object.lookAt( scope.target );\r\n\r\n                            } else {\r\n\r\n                                _plane.setFromNormalAndCoplanarPoint( scope.object.up, scope.target );\r\n                                _ray.intersectPlane( _plane, scope.target );\r\n\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                } else if ( scope.object.isOrthographicCamera ) {\r\n\r\n                    scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\r\n                    scope.object.updateProjectionMatrix();\r\n                    zoomChanged = true;\r\n\r\n                }\r\n\r\n                scale = 1;\r\n                performCursorZoom = false;\r\n\r\n                // update condition is:\r\n                // min(camera displacement, camera rotation in radians)^2 > EPS\r\n                // using small-angle approximation cos(x/2) = 1 - x^2 / 8\r\n\r\n                if ( zoomChanged ||\r\n                    lastPosition.distanceToSquared( scope.object.position ) > EPS ||\r\n                    8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ||\r\n                    lastTargetPosition.distanceToSquared( scope.target ) > 0 ) {\r\n\r\n                    scope.dispatchEvent( _changeEvent );\r\n\r\n                    lastPosition.copy( scope.object.position );\r\n                    lastQuaternion.copy( scope.object.quaternion );\r\n                    lastTargetPosition.copy( scope.target );\r\n\r\n                    zoomChanged = false;\r\n\r\n                    return true;\r\n\r\n                }\r\n\r\n                return false;\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        this.dispose = function() {\r\n\r\n            scope.domElement.removeEventListener( 'contextmenu', onContextMenu );\r\n\r\n            scope.domElement.removeEventListener( 'pointerdown', onPointerDown );\r\n            scope.domElement.removeEventListener( 'pointercancel', onPointerUp );\r\n            scope.domElement.removeEventListener( 'wheel', onMouseWheel );\r\n\r\n            scope.domElement.removeEventListener( 'pointermove', onPointerMove );\r\n            scope.domElement.removeEventListener( 'pointerup', onPointerUp );\r\n\r\n\r\n            if ( scope._domElementKeyEvents !== null ) {\r\n\r\n                scope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\r\n                scope._domElementKeyEvents = null;\r\n\r\n            }\r\n\r\n        };\r\n\r\n        //\r\n        // internals\r\n        //\r\n\r\n        const scope = this;\r\n\r\n        const STATE = {\r\n            NONE: - 1,\r\n            ROTATE: 0,\r\n            DOLLY: 1,\r\n            PAN: 2,\r\n            TOUCH_ROTATE: 3,\r\n            TOUCH_PAN: 4,\r\n            TOUCH_DOLLY_PAN: 5,\r\n            TOUCH_DOLLY_ROTATE: 6\r\n        };\r\n\r\n        let state = STATE.NONE;\r\n\r\n        const EPS = 0.000001;\r\n\r\n        // current position in spherical coordinates\r\n        const spherical = new Spherical();\r\n        const sphericalDelta = new Spherical();\r\n\r\n        let scale = 1;\r\n        const panOffset = new Vector3();\r\n\r\n        const rotateStart = new Vector2();\r\n        const rotateEnd = new Vector2();\r\n        const rotateDelta = new Vector2();\r\n\r\n        const panStart = new Vector2();\r\n        const panEnd = new Vector2();\r\n        const panDelta = new Vector2();\r\n\r\n        const dollyStart = new Vector2();\r\n        const dollyEnd = new Vector2();\r\n        const dollyDelta = new Vector2();\r\n\r\n        const dollyDirection = new Vector3();\r\n        const mouse = new Vector2();\r\n        let performCursorZoom = false;\r\n\r\n        const pointers = [];\r\n        const pointerPositions = {};\r\n\r\n        function getAutoRotationAngle() {\r\n\r\n            return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\r\n\r\n        }\r\n\r\n        function getZoomScale() {\r\n\r\n            return Math.pow( 0.95, scope.zoomSpeed );\r\n\r\n        }\r\n\r\n        function rotateLeft( angle ) {\r\n\r\n            sphericalDelta.theta -= angle;\r\n\r\n        }\r\n\r\n        function rotateUp( angle ) {\r\n\r\n            sphericalDelta.phi -= angle;\r\n\r\n        }\r\n\r\n        const panLeft = function() {\r\n\r\n            const v = new Vector3();\r\n\r\n            return function panLeft( distance, objectMatrix ) {\r\n\r\n                v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\r\n                v.multiplyScalar( - distance );\r\n\r\n                panOffset.add( v );\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        const panUp = function() {\r\n\r\n            const v = new Vector3();\r\n\r\n            return function panUp( distance, objectMatrix ) {\r\n\r\n                if ( scope.screenSpacePanning === true ) {\r\n\r\n                    v.setFromMatrixColumn( objectMatrix, 1 );\r\n\r\n                } else {\r\n\r\n                    v.setFromMatrixColumn( objectMatrix, 0 );\r\n                    v.crossVectors( scope.object.up, v );\r\n\r\n                }\r\n\r\n                v.multiplyScalar( distance );\r\n\r\n                panOffset.add( v );\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        // deltaX and deltaY are in pixels; right and down are positive\r\n        const pan = function() {\r\n\r\n            const offset = new Vector3();\r\n\r\n            return function pan( deltaX, deltaY ) {\r\n\r\n                const element = scope.domElement;\r\n\r\n                if ( scope.object.isPerspectiveCamera ) {\r\n\r\n                    // perspective\r\n                    const position = scope.object.position;\r\n                    offset.copy( position ).sub( scope.target );\r\n                    let targetDistance = offset.length();\r\n\r\n                    // half of the fov is center to top of screen\r\n                    targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\r\n\r\n                    // we use only clientHeight here so aspect ratio does not distort speed\r\n                    panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\r\n                    panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\r\n\r\n                } else if ( scope.object.isOrthographicCamera ) {\r\n\r\n                    // orthographic\r\n                    panLeft( deltaX * ( scope.object.right - scope.object.left ) /\r\n                                        scope.object.zoom / element.clientWidth, scope.object.matrix );\r\n                    panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom /\r\n                                      element.clientHeight, scope.object.matrix );\r\n\r\n                } else {\r\n\r\n                    // camera neither orthographic nor perspective\r\n                    console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\r\n                    scope.enablePan = false;\r\n\r\n                }\r\n\r\n            };\r\n\r\n        }();\r\n\r\n        function dollyOut( dollyScale ) {\r\n\r\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\r\n\r\n                scale /= dollyScale;\r\n\r\n            } else {\r\n\r\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\r\n                scope.enableZoom = false;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function dollyIn( dollyScale ) {\r\n\r\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\r\n\r\n                scale *= dollyScale;\r\n\r\n            } else {\r\n\r\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\r\n                scope.enableZoom = false;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function updateMouseParameters( event ) {\r\n\r\n            if ( ! scope.zoomToCursor ) {\r\n\r\n                return;\r\n\r\n            }\r\n\r\n            performCursorZoom = true;\r\n\r\n            const rect = scope.domElement.getBoundingClientRect();\r\n            const x = event.clientX - rect.left;\r\n            const y = event.clientY - rect.top;\r\n            const w = rect.width;\r\n            const h = rect.height;\r\n\r\n            mouse.x = ( x / w ) * 2 - 1;\r\n            mouse.y = - ( y / h ) * 2 + 1;\r\n\r\n            dollyDirection.set( mouse.x, mouse.y, 1 ).unproject( object ).sub( object.position ).normalize();\r\n\r\n        }\r\n\r\n        function clampDistance( dist ) {\r\n\r\n            return Math.max( scope.minDistance, Math.min( scope.maxDistance, dist ) );\r\n\r\n        }\r\n\r\n        //\r\n        // event callbacks - update the object state\r\n        //\r\n\r\n        function handleMouseDownRotate( event ) {\r\n\r\n            rotateStart.set( event.clientX, event.clientY );\r\n\r\n        }\r\n\r\n        function handleMouseDownDolly( event ) {\r\n\r\n            updateMouseParameters( event );\r\n            dollyStart.set( event.clientX, event.clientY );\r\n\r\n        }\r\n\r\n        function handleMouseDownPan( event ) {\r\n\r\n            panStart.set( event.clientX, event.clientY );\r\n\r\n        }\r\n\r\n        function handleMouseMoveRotate( event ) {\r\n\r\n            rotateEnd.set( event.clientX, event.clientY );\r\n\r\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\r\n\r\n            const element = scope.domElement;\r\n\r\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\r\n\r\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\r\n\r\n            rotateStart.copy( rotateEnd );\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleMouseMoveDolly( event ) {\r\n\r\n            dollyEnd.set( event.clientX, event.clientY );\r\n\r\n            dollyDelta.subVectors( dollyEnd, dollyStart );\r\n\r\n            if ( dollyDelta.y > 0 ) {\r\n\r\n                dollyOut( getZoomScale() );\r\n\r\n            } else if ( dollyDelta.y < 0 ) {\r\n\r\n                dollyIn( getZoomScale() );\r\n\r\n            }\r\n\r\n            dollyStart.copy( dollyEnd );\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleMouseMovePan( event ) {\r\n\r\n            panEnd.set( event.clientX, event.clientY );\r\n\r\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\r\n\r\n            pan( panDelta.x, panDelta.y );\r\n\r\n            panStart.copy( panEnd );\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleMouseWheel( event ) {\r\n\r\n            updateMouseParameters( event );\r\n\r\n            if ( event.deltaY < 0 ) {\r\n\r\n                dollyIn( getZoomScale() );\r\n\r\n            } else if ( event.deltaY > 0 ) {\r\n\r\n                dollyOut( getZoomScale() );\r\n\r\n            }\r\n\r\n            scope.update();\r\n\r\n        }\r\n\r\n        function handleKeyDown( event ) {\r\n\r\n            let needsUpdate = false;\r\n\r\n            switch ( event.code ) {\r\n\r\n                case scope.keys.UP:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateUp( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( 0, scope.keyPanSpeed );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n                case scope.keys.BOTTOM:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateUp( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( 0, - scope.keyPanSpeed );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n                case scope.keys.LEFT:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateLeft( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( scope.keyPanSpeed, 0 );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n                case scope.keys.RIGHT:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        rotateLeft( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\r\n\r\n                    } else {\r\n\r\n                        pan( - scope.keyPanSpeed, 0 );\r\n\r\n                    }\r\n\r\n                    needsUpdate = true;\r\n                    break;\r\n\r\n            }\r\n\r\n            if ( needsUpdate ) {\r\n\r\n                // prevent the browser from scrolling on cursor keys\r\n                event.preventDefault();\r\n\r\n                scope.update();\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n        function handleTouchStartRotate() {\r\n\r\n            if ( pointers.length === 1 ) {\r\n\r\n                rotateStart.set( pointers[0].pageX, pointers[0].pageY );\r\n\r\n            } else {\r\n\r\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\r\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\r\n\r\n                rotateStart.set( x, y );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function handleTouchStartPan() {\r\n\r\n            if ( pointers.length === 1 ) {\r\n\r\n                panStart.set( pointers[0].pageX, pointers[0].pageY );\r\n\r\n            } else {\r\n\r\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\r\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\r\n\r\n                panStart.set( x, y );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function handleTouchStartDolly() {\r\n\r\n            const dx = pointers[0].pageX - pointers[1].pageX;\r\n            const dy = pointers[0].pageY - pointers[1].pageY;\r\n\r\n            const distance = Math.sqrt( dx * dx + dy * dy );\r\n\r\n            dollyStart.set( 0, distance );\r\n\r\n        }\r\n\r\n        function handleTouchStartDollyPan() {\r\n\r\n            if ( scope.enableZoom ) handleTouchStartDolly();\r\n\r\n            if ( scope.enablePan ) handleTouchStartPan();\r\n\r\n        }\r\n\r\n        function handleTouchStartDollyRotate() {\r\n\r\n            if ( scope.enableZoom ) handleTouchStartDolly();\r\n\r\n            if ( scope.enableRotate ) handleTouchStartRotate();\r\n\r\n        }\r\n\r\n        function handleTouchMoveRotate( event ) {\r\n\r\n            if ( pointers.length == 1 ) {\r\n\r\n                rotateEnd.set( event.pageX, event.pageY );\r\n\r\n            } else {\r\n\r\n                const position = getSecondPointerPosition( event );\r\n\r\n                const x = 0.5 * ( event.pageX + position.x );\r\n                const y = 0.5 * ( event.pageY + position.y );\r\n\r\n                rotateEnd.set( x, y );\r\n\r\n            }\r\n\r\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\r\n\r\n            const element = scope.domElement;\r\n\r\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\r\n\r\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\r\n\r\n            rotateStart.copy( rotateEnd );\r\n\r\n        }\r\n\r\n        function handleTouchMovePan( event ) {\r\n\r\n            if ( pointers.length === 1 ) {\r\n\r\n                panEnd.set( event.pageX, event.pageY );\r\n\r\n            } else {\r\n\r\n                const position = getSecondPointerPosition( event );\r\n\r\n                const x = 0.5 * ( event.pageX + position.x );\r\n                const y = 0.5 * ( event.pageY + position.y );\r\n\r\n                panEnd.set( x, y );\r\n\r\n            }\r\n\r\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\r\n\r\n            pan( panDelta.x, panDelta.y );\r\n\r\n            panStart.copy( panEnd );\r\n\r\n        }\r\n\r\n        function handleTouchMoveDolly( event ) {\r\n\r\n            const position = getSecondPointerPosition( event );\r\n\r\n            const dx = event.pageX - position.x;\r\n            const dy = event.pageY - position.y;\r\n\r\n            const distance = Math.sqrt( dx * dx + dy * dy );\r\n\r\n            dollyEnd.set( 0, distance );\r\n\r\n            dollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\r\n\r\n            dollyOut( dollyDelta.y );\r\n\r\n            dollyStart.copy( dollyEnd );\r\n\r\n        }\r\n\r\n        function handleTouchMoveDollyPan( event ) {\r\n\r\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\r\n\r\n            if ( scope.enablePan ) handleTouchMovePan( event );\r\n\r\n        }\r\n\r\n        function handleTouchMoveDollyRotate( event ) {\r\n\r\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\r\n\r\n            if ( scope.enableRotate ) handleTouchMoveRotate( event );\r\n\r\n        }\r\n\r\n        //\r\n        // event handlers - FSM: listen for events and reset state\r\n        //\r\n\r\n        function onPointerDown( event ) {\r\n\r\n            if ( scope.enabled === false ) return;\r\n\r\n            if ( pointers.length === 0 ) {\r\n\r\n                scope.domElement.setPointerCapture( event.pointerId );\r\n\r\n                scope.domElement.addEventListener( 'pointermove', onPointerMove );\r\n                scope.domElement.addEventListener( 'pointerup', onPointerUp );\r\n\r\n            }\r\n\r\n            //\r\n\r\n            addPointer( event );\r\n\r\n            if ( event.pointerType === 'touch' ) {\r\n\r\n                onTouchStart( event );\r\n\r\n            } else {\r\n\r\n                onMouseDown( event );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onPointerMove( event ) {\r\n\r\n            if ( scope.enabled === false ) return;\r\n\r\n            if ( event.pointerType === 'touch' ) {\r\n\r\n                onTouchMove( event );\r\n\r\n            } else {\r\n\r\n                onMouseMove( event );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onPointerUp( event ) {\r\n\r\n            removePointer( event );\r\n\r\n            if ( pointers.length === 0 ) {\r\n\r\n                scope.domElement.releasePointerCapture( event.pointerId );\r\n\r\n                scope.domElement.removeEventListener( 'pointermove', onPointerMove );\r\n                scope.domElement.removeEventListener( 'pointerup', onPointerUp );\r\n\r\n            }\r\n\r\n            scope.dispatchEvent( _endEvent );\r\n\r\n            state = STATE.NONE;\r\n\r\n        }\r\n\r\n        function onMouseDown( event ) {\r\n\r\n            let mouseAction;\r\n\r\n            switch ( event.button ) {\r\n\r\n                case 0:\r\n\r\n                    mouseAction = scope.mouseButtons.LEFT;\r\n                    break;\r\n\r\n                case 1:\r\n\r\n                    mouseAction = scope.mouseButtons.MIDDLE;\r\n                    break;\r\n\r\n                case 2:\r\n\r\n                    mouseAction = scope.mouseButtons.RIGHT;\r\n                    break;\r\n\r\n                default:\r\n\r\n                    mouseAction = - 1;\r\n\r\n            }\r\n\r\n            switch ( mouseAction ) {\r\n\r\n                case MOUSE.DOLLY:\r\n\r\n                    if ( scope.enableZoom === false ) return;\r\n\r\n                    handleMouseDownDolly( event );\r\n\r\n                    state = STATE.DOLLY;\r\n\r\n                    break;\r\n\r\n                case MOUSE.ROTATE:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        if ( scope.enablePan === false ) return;\r\n\r\n                        handleMouseDownPan( event );\r\n\r\n                        state = STATE.PAN;\r\n\r\n                    } else {\r\n\r\n                        if ( scope.enableRotate === false ) return;\r\n\r\n                        handleMouseDownRotate( event );\r\n\r\n                        state = STATE.ROTATE;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                case MOUSE.PAN:\r\n\r\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\r\n\r\n                        if ( scope.enableRotate === false ) return;\r\n\r\n                        handleMouseDownRotate( event );\r\n\r\n                        state = STATE.ROTATE;\r\n\r\n                    } else {\r\n\r\n                        if ( scope.enablePan === false ) return;\r\n\r\n                        handleMouseDownPan( event );\r\n\r\n                        state = STATE.PAN;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                default:\r\n\r\n                    state = STATE.NONE;\r\n\r\n            }\r\n\r\n            if ( state !== STATE.NONE ) {\r\n\r\n                scope.dispatchEvent( _startEvent );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onMouseMove( event ) {\r\n\r\n            switch ( state ) {\r\n\r\n                case STATE.ROTATE:\r\n\r\n                    if ( scope.enableRotate === false ) return;\r\n\r\n                    handleMouseMoveRotate( event );\r\n\r\n                    break;\r\n\r\n                case STATE.DOLLY:\r\n\r\n                    if ( scope.enableZoom === false ) return;\r\n\r\n                    handleMouseMoveDolly( event );\r\n\r\n                    break;\r\n\r\n                case STATE.PAN:\r\n\r\n                    if ( scope.enablePan === false ) return;\r\n\r\n                    handleMouseMovePan( event );\r\n\r\n                    break;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onMouseWheel( event ) {\r\n\r\n            if ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;\r\n\r\n            event.preventDefault();\r\n\r\n            scope.dispatchEvent( _startEvent );\r\n\r\n            handleMouseWheel( event );\r\n\r\n            scope.dispatchEvent( _endEvent );\r\n\r\n        }\r\n\r\n        function onKeyDown( event ) {\r\n\r\n            if ( scope.enabled === false || scope.enablePan === false ) return;\r\n\r\n            handleKeyDown( event );\r\n\r\n        }\r\n\r\n        function onTouchStart( event ) {\r\n\r\n            trackPointer( event );\r\n\r\n            switch ( pointers.length ) {\r\n\r\n                case 1:\r\n\r\n                    switch ( scope.touches.ONE ) {\r\n\r\n                        case TOUCH.ROTATE:\r\n\r\n                            if ( scope.enableRotate === false ) return;\r\n\r\n                            handleTouchStartRotate();\r\n\r\n                            state = STATE.TOUCH_ROTATE;\r\n\r\n                            break;\r\n\r\n                        case TOUCH.PAN:\r\n\r\n                            if ( scope.enablePan === false ) return;\r\n\r\n                            handleTouchStartPan();\r\n\r\n                            state = STATE.TOUCH_PAN;\r\n\r\n                            break;\r\n\r\n                        default:\r\n\r\n                            state = STATE.NONE;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                case 2:\r\n\r\n                    switch ( scope.touches.TWO ) {\r\n\r\n                        case TOUCH.DOLLY_PAN:\r\n\r\n                            if ( scope.enableZoom === false && scope.enablePan === false ) return;\r\n\r\n                            handleTouchStartDollyPan();\r\n\r\n                            state = STATE.TOUCH_DOLLY_PAN;\r\n\r\n                            break;\r\n\r\n                        case TOUCH.DOLLY_ROTATE:\r\n\r\n                            if ( scope.enableZoom === false && scope.enableRotate === false ) return;\r\n\r\n                            handleTouchStartDollyRotate();\r\n\r\n                            state = STATE.TOUCH_DOLLY_ROTATE;\r\n\r\n                            break;\r\n\r\n                        default:\r\n\r\n                            state = STATE.NONE;\r\n\r\n                    }\r\n\r\n                    break;\r\n\r\n                default:\r\n\r\n                    state = STATE.NONE;\r\n\r\n            }\r\n\r\n            if ( state !== STATE.NONE ) {\r\n\r\n                scope.dispatchEvent( _startEvent );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onTouchMove( event ) {\r\n\r\n            trackPointer( event );\r\n\r\n            switch ( state ) {\r\n\r\n                case STATE.TOUCH_ROTATE:\r\n\r\n                    if ( scope.enableRotate === false ) return;\r\n\r\n                    handleTouchMoveRotate( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                case STATE.TOUCH_PAN:\r\n\r\n                    if ( scope.enablePan === false ) return;\r\n\r\n                    handleTouchMovePan( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                case STATE.TOUCH_DOLLY_PAN:\r\n\r\n                    if ( scope.enableZoom === false && scope.enablePan === false ) return;\r\n\r\n                    handleTouchMoveDollyPan( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                case STATE.TOUCH_DOLLY_ROTATE:\r\n\r\n                    if ( scope.enableZoom === false && scope.enableRotate === false ) return;\r\n\r\n                    handleTouchMoveDollyRotate( event );\r\n\r\n                    scope.update();\r\n\r\n                    break;\r\n\r\n                default:\r\n\r\n                    state = STATE.NONE;\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function onContextMenu( event ) {\r\n\r\n            if ( scope.enabled === false ) return;\r\n\r\n            event.preventDefault();\r\n\r\n        }\r\n\r\n        function addPointer( event ) {\r\n\r\n            pointers.push( event );\r\n\r\n        }\r\n\r\n        function removePointer( event ) {\r\n\r\n            delete pointerPositions[event.pointerId];\r\n\r\n            for ( let i = 0; i < pointers.length; i ++ ) {\r\n\r\n                if ( pointers[i].pointerId == event.pointerId ) {\r\n\r\n                    pointers.splice( i, 1 );\r\n                    return;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function trackPointer( event ) {\r\n\r\n            let position = pointerPositions[event.pointerId];\r\n\r\n            if ( position === undefined ) {\r\n\r\n                position = new Vector2();\r\n                pointerPositions[event.pointerId] = position;\r\n\r\n            }\r\n\r\n            position.set( event.pageX, event.pageY );\r\n\r\n        }\r\n\r\n        function getSecondPointerPosition( event ) {\r\n\r\n            const pointer = ( event.pointerId === pointers[0].pointerId ) ? pointers[1] : pointers[0];\r\n\r\n            return pointerPositions[pointer.pointerId];\r\n\r\n        }\r\n\r\n        //\r\n\r\n        scope.domElement.addEventListener( 'contextmenu', onContextMenu );\r\n\r\n        scope.domElement.addEventListener( 'pointerdown', onPointerDown );\r\n        scope.domElement.addEventListener( 'pointercancel', onPointerUp );\r\n        scope.domElement.addEventListener( 'wheel', onMouseWheel, { passive: false } );\r\n\r\n        // force an update at start\r\n\r\n        this.update();\r\n\r\n    }\r\n\r\n}\r\n\r\nexport { OrbitControls };\r\n","export class LoadingSpinner {\r\n\r\n    constructor(message, container) {\r\n        this.message = message || 'Loading...';\r\n        this.container = container || document.body;\r\n\r\n        this.spinnerDivContainerOuter = document.createElement('div');\r\n        this.spinnerDivContainerOuter.className = 'outerContainer';\r\n        this.spinnerDivContainerOuter.style.display = 'none';\r\n\r\n        this.spinnerDivContainer = document.createElement('div');\r\n        this.spinnerDivContainer.className = 'container';\r\n\r\n        this.spinnerDiv = document.createElement('div');\r\n        this.spinnerDiv.className = 'loader';\r\n\r\n        this.messageDiv = document.createElement('div');\r\n        this.messageDiv.className = 'message';\r\n        this.messageDiv.innerHTML = this.message;\r\n\r\n        this.spinnerDivContainer.appendChild(this.spinnerDiv);\r\n        this.spinnerDivContainer.appendChild(this.messageDiv);\r\n        this.spinnerDivContainerOuter.appendChild(this.spinnerDivContainer);\r\n        this.container.appendChild(this.spinnerDivContainerOuter);\r\n\r\n        const style = document.createElement('style');\r\n        style.innerHTML = `\r\n\r\n            .message {\r\n                font-family: arial;\r\n                font-size: 12pt;\r\n                color: #ffffff;\r\n                text-align: center;\r\n                padding-top:15px;\r\n                width: 180px;\r\n            }\r\n\r\n            .outerContainer {\r\n                width: 100%;\r\n                height: 100%;\r\n            }\r\n\r\n            .container {\r\n                position: absolute;\r\n                top: 50%;\r\n                left: 50%;\r\n                transform: translate(-80px, -80px);\r\n                width: 180px;\r\n            }\r\n\r\n            .loader {\r\n                width: 120px;        /* the size */\r\n                padding: 15px;       /* the border thickness */\r\n                background: #07e8d6; /* the color */\r\n                z-index:99999;\r\n            \r\n                aspect-ratio: 1;\r\n                border-radius: 50%;\r\n                --_m: \r\n                    conic-gradient(#0000,#000),\r\n                    linear-gradient(#000 0 0) content-box;\r\n                -webkit-mask: var(--_m);\r\n                    mask: var(--_m);\r\n                -webkit-mask-composite: source-out;\r\n                    mask-composite: subtract;\r\n                box-sizing: border-box;\r\n                animation: load 1s linear infinite;\r\n                margin-left: 30px;\r\n            }\r\n            \r\n            @keyframes load {\r\n                to{transform: rotate(1turn)}\r\n            }\r\n\r\n        `;\r\n        this.spinnerDivContainerOuter.appendChild(style);\r\n    }\r\n\r\n    show() {\r\n        this.spinnerDivContainerOuter.style.display = 'block';\r\n    }\r\n\r\n    hide() {\r\n        this.spinnerDivContainerOuter.style.display = 'none';\r\n    }\r\n\r\n    setContainer(container) {\r\n        if (this.container) {\r\n            this.container.removeChild(this.spinnerDivContainerOuter);\r\n        }\r\n        this.container = container;\r\n        this.container.appendChild(this.spinnerDivContainerOuter);\r\n        this.spinnerDivContainerOuter.style.zIndex = this.container.style.zIndex + 1;\r\n    }\r\n\r\n    setMessage(msg) {\r\n        this.messageDiv.innerHTML = msg;\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\n\r\nexport class ArrowHelper extends THREE.Object3D {\r\n\r\n    constructor(dir = new THREE.Vector3(0, 0, 1), origin = new THREE.Vector3(0, 0, 0), length = 1,\r\n                radius = 0.1, color = 0xffff00, headLength = length * 0.2, headRadius = headLength * 0.2) {\r\n        super();\r\n\r\n        this.type = 'ArrowHelper';\r\n\r\n        const lineGeometry = new THREE.CylinderGeometry(radius, radius, length, 32);\r\n        lineGeometry.translate(0, length / 2.0, 0);\r\n        const coneGeometry = new THREE.CylinderGeometry( 0, headRadius, headLength, 32);\r\n        coneGeometry.translate(0, length, 0);\r\n\r\n        this.position.copy( origin );\r\n\r\n        this.line = new THREE.Mesh(lineGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\r\n        this.line.matrixAutoUpdate = false;\r\n        this.add(this.line);\r\n\r\n        this.cone = new THREE.Mesh(coneGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\r\n        this.cone.matrixAutoUpdate = false;\r\n        this.add(this.cone);\r\n\r\n        this.setDirection(dir);\r\n    }\r\n\r\n    setDirection( dir ) {\r\n        if (dir.y > 0.99999) {\r\n            this.quaternion.set(0, 0, 0, 1);\r\n        } else if (dir.y < - 0.99999) {\r\n            this.quaternion.set(1, 0, 0, 0);\r\n        } else {\r\n            _axis.set(dir.z, 0, -dir.x).normalize();\r\n            const radians = Math.acos(dir.y);\r\n            this.quaternion.setFromAxisAngle(_axis, radians);\r\n        }\r\n    }\r\n\r\n    setColor( color ) {\r\n        this.line.material.color.set(color);\r\n        this.cone.material.color.set(color);\r\n    }\r\n\r\n    copy(source) {\r\n        super.copy(source, false);\r\n        this.line.copy(source.line);\r\n        this.cone.copy(source.cone);\r\n        return this;\r\n    }\r\n\r\n    dispose() {\r\n        this.line.geometry.dispose();\r\n        this.line.material.dispose();\r\n        this.cone.geometry.dispose();\r\n        this.cone.material.dispose();\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { ArrowHelper } from './ArrowHelper.js';\r\nimport { disposeAllMeshes } from './Util.js';\r\n\r\nexport class SceneHelper {\r\n\r\n    constructor(threeScene) {\r\n        this.threeScene = threeScene;\r\n        this.splatRenderTarget = null;\r\n        this.renderTargetCopyQuad = null;\r\n        this.renderTargetCopyCamera = null;\r\n        this.meshCursor = null;\r\n        this.focusMarker = null;\r\n        this.controlPlane = null;\r\n        this.debugRoot = null;\r\n        this.secondaryDebugRoot = null;\r\n    }\r\n\r\n    updateSplatRenderTargetForRenderDimensions(width, height) {\r\n        this.destroySplatRendertarget();\r\n        this.splatRenderTarget = new THREE.WebGLRenderTarget(width, height, {\r\n            format: THREE.RGBAFormat,\r\n            stencilBuffer: false,\r\n            depthBuffer: true,\r\n\r\n        });\r\n        this.splatRenderTarget.depthTexture = new THREE.DepthTexture(width, height);\r\n        this.splatRenderTarget.depthTexture.format = THREE.DepthFormat;\r\n        this.splatRenderTarget.depthTexture.type = THREE.UnsignedIntType;\r\n    }\r\n\r\n    destroySplatRendertarget() {\r\n        if (this.splatRenderTarget) {\r\n            this.splatRenderTarget = null;\r\n        }\r\n    }\r\n\r\n    setupRenderTargetCopyObjects() {\r\n        const uniforms = {\r\n            'sourceColorTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'sourceDepthTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n        };\r\n        const renderTargetCopyMaterial = new THREE.ShaderMaterial({\r\n            vertexShader: `\r\n                varying vec2 vUv;\r\n                void main() {\r\n                    vUv = uv;\r\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \r\n                }\r\n            `,\r\n            fragmentShader: `\r\n                #include <common>\r\n                #include <packing>\r\n                varying vec2 vUv;\r\n                uniform sampler2D sourceColorTexture;\r\n                uniform sampler2D sourceDepthTexture;\r\n                void main() {\r\n                    vec4 color = texture2D(sourceColorTexture, vUv);\r\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\r\n                    gl_FragDepth = fragDepth;\r\n                    gl_FragColor = vec4(color.rgb, color.a * 2.0);\r\n              }\r\n            `,\r\n            uniforms: uniforms,\r\n            depthWrite: false,\r\n            depthTest: false,\r\n            transparent: true,\r\n            blending: THREE.CustomBlending,\r\n            blendSrc: THREE.SrcAlphaFactor,\r\n            blendSrcAlpha: THREE.SrcAlphaFactor,\r\n            blendDst: THREE.OneMinusSrcAlphaFactor,\r\n            blendDstAlpha: THREE.OneMinusSrcAlphaFactor\r\n        });\r\n        renderTargetCopyMaterial.extensions.fragDepth = true;\r\n        this.renderTargetCopyQuad = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), renderTargetCopyMaterial);\r\n        this.renderTargetCopyCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\r\n    }\r\n\r\n    destroyRenderTargetCopyObjects() {\r\n        if (this.renderTargetCopyQuad) {\r\n            disposeAllMeshes(this.renderTargetCopyQuad);\r\n            this.renderTargetCopyQuad = null;\r\n        }\r\n    }\r\n\r\n    setupMeshCursor() {\r\n        if (!this.meshCursor) {\r\n            const coneGeometry = new THREE.ConeGeometry(0.5, 1.5, 32);\r\n            const coneMaterial = new THREE.MeshBasicMaterial({color: 0xFFFFFF});\r\n\r\n            const downArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            downArrow.rotation.set(0, 0, Math.PI);\r\n            downArrow.position.set(0, 1, 0);\r\n            const upArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            upArrow.position.set(0, -1, 0);\r\n            const leftArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            leftArrow.rotation.set(0, 0, Math.PI / 2.0);\r\n            leftArrow.position.set(1, 0, 0);\r\n            const rightArrow = new THREE.Mesh(coneGeometry, coneMaterial);\r\n            rightArrow.rotation.set(0, 0, -Math.PI / 2.0);\r\n            rightArrow.position.set(-1, 0, 0);\r\n\r\n            this.meshCursor = new THREE.Object3D();\r\n            this.meshCursor.add(downArrow);\r\n            this.meshCursor.add(upArrow);\r\n            this.meshCursor.add(leftArrow);\r\n            this.meshCursor.add(rightArrow);\r\n            this.meshCursor.scale.set(0.1, 0.1, 0.1);\r\n            this.threeScene.add(this.meshCursor);\r\n            this.meshCursor.visible = false;\r\n        }\r\n    }\r\n\r\n    destroyMeshCursor() {\r\n        if (this.meshCursor) {\r\n            disposeAllMeshes(this.meshCursor);\r\n            this.threeScene.remove(this.meshCursor);\r\n            this.meshCursor = null;\r\n        }\r\n    }\r\n\r\n    setMeshCursorVisibility(visible) {\r\n        this.meshCursor.visible = visible;\r\n    }\r\n\r\n    setMeshCursorPosition(position) {\r\n        this.meshCursor.position.copy(position);\r\n    }\r\n\r\n    positionAndOrientMeshCursor(position, camera) {\r\n        this.meshCursor.position.copy(position);\r\n        this.meshCursor.up.copy(camera.up);\r\n        this.meshCursor.lookAt(camera.position);\r\n    }\r\n\r\n    setupFocusMarker() {\r\n        if (!this.focusMarker) {\r\n            const sphereGeometry = new THREE.SphereGeometry(.5, 32, 32);\r\n            const focusMarkerMaterial = SceneHelper.buildFocusMarkerMaterial();\r\n            focusMarkerMaterial.depthTest = false;\r\n            focusMarkerMaterial.depthWrite = false;\r\n            focusMarkerMaterial.transparent = true;\r\n            this.focusMarker = new THREE.Mesh(sphereGeometry, focusMarkerMaterial);\r\n        }\r\n    }\r\n\r\n    destroyFocusMarker() {\r\n        if (this.focusMarker) {\r\n            disposeAllMeshes(this.focusMarker);\r\n            this.focusMarker = null;\r\n        }\r\n    }\r\n\r\n    updateFocusMarker = function() {\r\n\r\n        const tempPosition = new THREE.Vector3();\r\n        const tempMatrix = new THREE.Matrix4();\r\n\r\n        return function(position, camera, viewport) {\r\n            tempMatrix.copy(camera.matrixWorld).invert();\r\n            tempPosition.copy(position).applyMatrix4(tempMatrix);\r\n            tempPosition.normalize().multiplyScalar(10);\r\n            tempPosition.applyMatrix4(camera.matrixWorld);\r\n            this.focusMarker.position.copy(tempPosition);\r\n            this.focusMarker.material.uniforms.realFocusPosition.value.copy(position);\r\n            this.focusMarker.material.uniforms.viewport.value.copy(viewport);\r\n            this.focusMarker.material.uniformsNeedUpdate = true;\r\n        };\r\n\r\n    }();\r\n\r\n    setFocusMarkerVisibility(visible) {\r\n        this.focusMarker.visible = visible;\r\n    }\r\n\r\n    setFocusMarkerOpacity(opacity) {\r\n        this.focusMarker.material.uniforms.opacity.value = opacity;\r\n        this.focusMarker.material.uniformsNeedUpdate = true;\r\n    }\r\n\r\n    getFocusMarkerOpacity() {\r\n        return this.focusMarker.material.uniforms.opacity.value;\r\n    }\r\n\r\n    setupControlPlane() {\r\n        if (!this.controlPlane) {\r\n            const planeGeometry = new THREE.PlaneGeometry(1, 1);\r\n            planeGeometry.rotateX(-Math.PI / 2);\r\n            const planeMaterial = new THREE.MeshBasicMaterial({color: 0xffffff});\r\n            planeMaterial.transparent = true;\r\n            planeMaterial.opacity = 0.6;\r\n            planeMaterial.depthTest = false;\r\n            planeMaterial.depthWrite = false;\r\n            planeMaterial.side = THREE.DoubleSide;\r\n            const planeMesh = new THREE.Mesh(planeGeometry, planeMaterial);\r\n\r\n            const arrowDir = new THREE.Vector3(0, 1, 0);\r\n            arrowDir.normalize();\r\n            const arrowOrigin = new THREE.Vector3(0, 0, 0);\r\n            const arrowLength = 0.5;\r\n            const arrowRadius = 0.01;\r\n            const arrowColor = 0x00dd00;\r\n            const arrowHelper = new ArrowHelper(arrowDir, arrowOrigin, arrowLength, arrowRadius, arrowColor, 0.1, 0.03);\r\n\r\n            this.controlPlane = new THREE.Object3D();\r\n            this.controlPlane.add(planeMesh);\r\n            this.controlPlane.add(arrowHelper);\r\n        }\r\n    }\r\n\r\n    destroyControlPlane() {\r\n        if (this.controlPlane) {\r\n            disposeAllMeshes(this.controlPlane);\r\n            this.controlPlane = null;\r\n        }\r\n    }\r\n\r\n    setControlPlaneVisibility(visible) {\r\n        this.controlPlane.visible = visible;\r\n    }\r\n\r\n    positionAndOrientControlPlane = function() {\r\n\r\n        const tempQuaternion = new THREE.Quaternion();\r\n        const defaultUp = new THREE.Vector3(0, 1, 0);\r\n\r\n        return function(position, up) {\r\n            tempQuaternion.setFromUnitVectors(defaultUp, up);\r\n            this.controlPlane.position.copy(position);\r\n            this.controlPlane.quaternion.copy(tempQuaternion);\r\n        };\r\n\r\n    }();\r\n\r\n    addDebugMeshes() {\r\n        this.debugRoot = this.createDebugMeshes();\r\n        this.secondaryDebugRoot = this.createSecondaryDebugMeshes();\r\n        this.threeScene.add(this.debugRoot);\r\n        this.threeScene.add(this.secondaryDebugRoot);\r\n    }\r\n\r\n    destroyDebugMeshes() {\r\n        for (let debugRoot of [this.debugRoot, this.secondaryDebugRoot]) {\r\n            if (debugRoot) {\r\n                disposeAllMeshes(debugRoot);\r\n                this.threeScene.remove(debugRoot);\r\n            }\r\n        }\r\n        this.debugRoot = null;\r\n        this.secondaryDebugRoot = null;\r\n    }\r\n\r\n    createDebugMeshes(renderOrder) {\r\n        const sphereGeometry = new THREE.SphereGeometry(1, 32, 32);\r\n        const debugMeshRoot = new THREE.Object3D();\r\n\r\n        const createMesh = (color, position) => {\r\n            let sphereMesh = new THREE.Mesh(sphereGeometry, SceneHelper.buildDebugMaterial(color));\r\n            sphereMesh.renderOrder = renderOrder;\r\n            debugMeshRoot.add(sphereMesh);\r\n            sphereMesh.position.fromArray(position);\r\n        };\r\n\r\n        createMesh(0xff0000, [-50, 0, 0]);\r\n        createMesh(0xff0000, [50, 0, 0]);\r\n        createMesh(0x00ff00, [0, 0, -50]);\r\n        createMesh(0x00ff00, [0, 0, 50]);\r\n        createMesh(0xffaa00, [5, 0, 5]);\r\n\r\n        return debugMeshRoot;\r\n    }\r\n\r\n    createSecondaryDebugMeshes(renderOrder) {\r\n        const boxGeometry = new THREE.BoxGeometry(3, 3, 3);\r\n        const debugMeshRoot = new THREE.Object3D();\r\n\r\n        let boxColor = 0xBBBBBB;\r\n        const createMesh = (position) => {\r\n            let boxMesh = new THREE.Mesh(boxGeometry, SceneHelper.buildDebugMaterial(boxColor));\r\n            boxMesh.renderOrder = renderOrder;\r\n            debugMeshRoot.add(boxMesh);\r\n            boxMesh.position.fromArray(position);\r\n        };\r\n\r\n        let separation = 10;\r\n        createMesh([-separation, 0, -separation]);\r\n        createMesh([-separation, 0, separation]);\r\n        createMesh([separation, 0, -separation]);\r\n        createMesh([separation, 0, separation]);\r\n\r\n        return debugMeshRoot;\r\n    }\r\n\r\n    static buildDebugMaterial(color) {\r\n        const vertexShaderSource = `\r\n            #include <common>\r\n            varying float ndcDepth;\r\n\r\n            void main() {\r\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\r\n                ndcDepth = gl_Position.z / gl_Position.w;\r\n                gl_Position.x = gl_Position.x / gl_Position.w;\r\n                gl_Position.y = gl_Position.y / gl_Position.w;\r\n                gl_Position.z = 0.0;\r\n                gl_Position.w = 1.0;\r\n    \r\n            }\r\n        `;\r\n\r\n        const fragmentShaderSource = `\r\n            #include <common>\r\n            uniform vec3 color;\r\n            varying float ndcDepth;\r\n            void main() {\r\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\r\n                gl_FragColor = vec4(color.rgb, 0.0);\r\n            }\r\n        `;\r\n\r\n        const uniforms = {\r\n            'color': {\r\n                'type': 'v3',\r\n                'value': new THREE.Color(color)\r\n            },\r\n        };\r\n\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: vertexShaderSource,\r\n            fragmentShader: fragmentShaderSource,\r\n            transparent: false,\r\n            depthTest: true,\r\n            depthWrite: true,\r\n            side: THREE.FrontSide\r\n        });\r\n        material.extensions.fragDepth = true;\r\n\r\n        return material;\r\n    }\r\n\r\n    static buildFocusMarkerMaterial(color) {\r\n        const vertexShaderSource = `\r\n            #include <common>\r\n\r\n            uniform vec2 viewport;\r\n            uniform vec3 realFocusPosition;\r\n\r\n            varying vec4 ndcPosition;\r\n            varying vec4 ndcCenter;\r\n            varying vec4 ndcFocusPosition;\r\n\r\n            void main() {\r\n                float radius = 0.01;\r\n\r\n                vec4 viewPosition = modelViewMatrix * vec4(position.xyz, 1.0);\r\n                vec4 viewCenter = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\r\n\r\n                vec4 viewFocusPosition = modelViewMatrix * vec4(realFocusPosition, 1.0);\r\n\r\n                ndcPosition = projectionMatrix * viewPosition;\r\n                ndcPosition = ndcPosition * vec4(1.0 / ndcPosition.w);\r\n                ndcCenter = projectionMatrix * viewCenter;\r\n                ndcCenter = ndcCenter * vec4(1.0 / ndcCenter.w);\r\n\r\n                ndcFocusPosition = projectionMatrix * viewFocusPosition;\r\n                ndcFocusPosition = ndcFocusPosition * vec4(1.0 / ndcFocusPosition.w);\r\n\r\n                gl_Position = projectionMatrix * viewPosition;\r\n\r\n            }\r\n        `;\r\n\r\n        const fragmentShaderSource = `\r\n            #include <common>\r\n            uniform vec3 color;\r\n            uniform vec2 viewport;\r\n            uniform float opacity;\r\n\r\n            varying vec4 ndcPosition;\r\n            varying vec4 ndcCenter;\r\n            varying vec4 ndcFocusPosition;\r\n\r\n            void main() {\r\n                vec2 screenPosition = vec2(ndcPosition) * viewport;\r\n                vec2 screenCenter = vec2(ndcCenter) * viewport;\r\n\r\n                vec2 screenVec = screenPosition - screenCenter;\r\n\r\n                float projectedRadius = length(screenVec);\r\n\r\n                float lineWidth = 0.0005 * viewport.y;\r\n                float aaRange = 0.0025 * viewport.y;\r\n                float radius = 0.06 * viewport.y;\r\n                float radDiff = abs(projectedRadius - radius) - lineWidth;\r\n                float alpha = 1.0 - clamp(radDiff / 5.0, 0.0, 1.0); \r\n\r\n                gl_FragColor = vec4(color.rgb, alpha * opacity);\r\n            }\r\n        `;\r\n\r\n        const uniforms = {\r\n            'color': {\r\n                'type': 'v3',\r\n                'value': new THREE.Color(color)\r\n            },\r\n            'realFocusPosition': {\r\n                'type': 'v3',\r\n                'value': new THREE.Vector3()\r\n            },\r\n            'viewport': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'opacity': {\r\n                'value': 0.0\r\n            }\r\n        };\r\n\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: vertexShaderSource,\r\n            fragmentShader: fragmentShaderSource,\r\n            transparent: true,\r\n            depthTest: false,\r\n            depthWrite: false,\r\n            side: THREE.FrontSide\r\n        });\r\n\r\n        return material;\r\n    }\r\n\r\n    dispose() {\r\n        this.destroyMeshCursor();\r\n        this.destroyFocusMarker();\r\n        this.destroyDebugMeshes();\r\n        this.destroyControlPlane();\r\n        this.destroyRenderTargetCopyObjects();\r\n        this.destroySplatRendertarget();\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\n\r\nconst VectorRight = new THREE.Vector3(1, 0, 0);\r\nconst VectorUp = new THREE.Vector3(0, 1, 0);\r\nconst VectorBackward = new THREE.Vector3(0, 0, 1);\r\n\r\nexport class Ray {\r\n\r\n    constructor(origin = new THREE.Vector3(), direction = new THREE.Vector3()) {\r\n        this.origin = new THREE.Vector3();\r\n        this.direction = new THREE.Vector3();\r\n        this.setParameters(origin, direction);\r\n    }\r\n\r\n    setParameters(origin, direction) {\r\n        this.origin.copy(origin);\r\n        this.direction.copy(direction).normalize();\r\n    }\r\n\r\n    boxContainsPoint(box, point, epsilon) {\r\n        return point.x < box.min.x - epsilon || point.x > box.max.x + epsilon ||\r\n               point.y < box.min.y - epsilon || point.y > box.max.y + epsilon ||\r\n               point.z < box.min.z - epsilon || point.z > box.max.z + epsilon ? false : true;\r\n    }\r\n\r\n    intersectBox = function() {\r\n\r\n        const planeIntersectionPoint = new THREE.Vector3();\r\n        const planeIntersectionPointArray = [];\r\n        const originArray = [];\r\n        const directionArray = [];\r\n\r\n        return function(box, outHit) {\r\n\r\n            originArray[0] = this.origin.x;\r\n            originArray[1] = this.origin.y;\r\n            originArray[2] = this.origin.z;\r\n            directionArray[0] = this.direction.x;\r\n            directionArray[1] = this.direction.y;\r\n            directionArray[2] = this.direction.z;\r\n\r\n            if (this.boxContainsPoint(box, this.origin, 0.0001)) {\r\n                if (outHit) {\r\n                    outHit.origin.copy(this.origin);\r\n                    outHit.normal.set(0, 0, 0);\r\n                    outHit.distance = -1;\r\n                }\r\n                return true;\r\n            }\r\n\r\n            for (let i = 0; i < 3; i++) {\r\n                if (directionArray[i] == 0.0) continue;\r\n\r\n                const hitNormal = i == 0 ? VectorRight : i == 1 ? VectorUp : VectorBackward;\r\n                const extremeVec = directionArray[i] < 0 ? box.max : box.min;\r\n                let multiplier = -Math.sign(directionArray[i]);\r\n                planeIntersectionPointArray[0] = i == 0 ? extremeVec.x : i == 1 ? extremeVec.y : extremeVec.z;\r\n                let toSide = planeIntersectionPointArray[0] - originArray[i];\r\n\r\n                if (toSide * multiplier < 0) {\r\n                    const idx1 = (i + 1) % 3;\r\n                    const idx2 = (i + 2) % 3;\r\n                    planeIntersectionPointArray[2] = directionArray[idx1] / directionArray[i] * toSide + originArray[idx1];\r\n                    planeIntersectionPointArray[1] = directionArray[idx2] / directionArray[i] * toSide + originArray[idx2];\r\n                    planeIntersectionPoint.set(planeIntersectionPointArray[i],\r\n                                               planeIntersectionPointArray[idx2],\r\n                                               planeIntersectionPointArray[idx1]);\r\n                    if (this.boxContainsPoint(box, planeIntersectionPoint, 0.0001)) {\r\n                        if (outHit) {\r\n                            outHit.origin.copy(planeIntersectionPoint);\r\n                            outHit.normal.copy(hitNormal).multiplyScalar(multiplier);\r\n                            outHit.distance = planeIntersectionPoint.sub(this.origin).length();\r\n                        }\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false;\r\n        };\r\n\r\n    }();\r\n\r\n    intersectSphere = function() {\r\n\r\n        const toSphereCenterVec = new THREE.Vector3();\r\n\r\n        return function(center, radius, outHit) {\r\n            toSphereCenterVec.copy(center).sub(this.origin);\r\n            const toClosestApproach = toSphereCenterVec.dot(this.direction);\r\n            const toClosestApproachSq = toClosestApproach * toClosestApproach;\r\n            const toSphereCenterSq = toSphereCenterVec.dot(toSphereCenterVec);\r\n            const diffSq = toSphereCenterSq - toClosestApproachSq;\r\n            const radiusSq = radius * radius;\r\n\r\n            if (diffSq > radiusSq) return false;\r\n\r\n            const thc = Math.sqrt(radiusSq - diffSq);\r\n            const t0 = toClosestApproach - thc;\r\n            const t1 = toClosestApproach + thc;\r\n\r\n            if (t1 < 0) return false;\r\n            let t = t0 < 0 ? t1 : t0;\r\n\r\n            if (outHit) {\r\n                outHit.origin.copy(this.origin).addScaledVector(this.direction, t);\r\n                outHit.normal.copy(outHit.origin).sub(center).normalize();\r\n                outHit.distance = t;\r\n            }\r\n            return true;\r\n        };\r\n\r\n    }();\r\n}\r\n","import * as THREE from 'three';\r\n\r\nexport class Hit {\r\n\r\n    constructor() {\r\n        this.origin = new THREE.Vector3();\r\n        this.normal = new THREE.Vector3();\r\n        this.distance = 0;\r\n        this.splatIndex = 0;\r\n    }\r\n\r\n    set(origin, normal, distance, splatIndex) {\r\n        this.origin.copy(origin);\r\n        this.normal.copy(normal);\r\n        this.distance = distance;\r\n        this.splatIndex = splatIndex;\r\n    }\r\n\r\n    clone() {\r\n        const hitClone = new Hit();\r\n        hitClone.origin.copy(this.origin);\r\n        hitClone.normal.copy(this.normal);\r\n        hitClone.distance = this.distance;\r\n        hitClone.splatIndex = this.splatIndex;\r\n        return hitClone;\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { Ray } from './Ray.js';\r\nimport { Hit } from './Hit.js';\r\n\r\nexport class Raycaster {\r\n\r\n    constructor(origin, direction, raycastAgainstTrueSplatEllipsoid = false) {\r\n        this.ray = new Ray(origin, direction);\r\n        this.raycastAgainstTrueSplatEllipsoid = raycastAgainstTrueSplatEllipsoid;\r\n    }\r\n\r\n    setFromCameraAndScreenPosition = function() {\r\n\r\n        const ndcCoords = new THREE.Vector2();\r\n\r\n        return function(camera, screenPosition, screenDimensions) {\r\n            ndcCoords.x = screenPosition.x / screenDimensions.x * 2.0 - 1.0;\r\n            ndcCoords.y = (screenDimensions.y - screenPosition.y) / screenDimensions.y * 2.0 - 1.0;\r\n            if (camera.isPerspectiveCamera) {\r\n                this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\r\n                this.ray.direction.set(ndcCoords.x, ndcCoords.y, 0.5 ).unproject(camera).sub(this.ray.origin).normalize();\r\n                this.camera = camera;\r\n            } else if (camera.isOrthographicCamera) {\r\n                this.ray.origin.set(screenPosition.x, screenPosition.y,\r\n                                   (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera);\r\n                this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\r\n                this.camera = camera;\r\n            } else {\r\n                throw new Error('Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type');\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    intersectSplatMesh = function() {\r\n\r\n        const toLocal = new THREE.Matrix4();\r\n        const fromLocal = new THREE.Matrix4();\r\n        const sceneTransform = new THREE.Matrix4();\r\n        const localRay = new Ray();\r\n        const tempPoint = new THREE.Vector3();\r\n\r\n        return function(splatMesh, outHits = []) {\r\n            const splatTree = splatMesh.getSplatTree();\r\n\r\n            for (let s = 0; s < splatTree.subTrees.length; s++) {\r\n                const subTree = splatTree.subTrees[s];\r\n\r\n                fromLocal.copy(splatMesh.matrixWorld);\r\n                splatMesh.getSceneTransform(s, sceneTransform);\r\n                fromLocal.multiply(sceneTransform);\r\n                toLocal.copy(fromLocal).invert();\r\n\r\n                localRay.origin.copy(this.ray.origin).applyMatrix4(toLocal);\r\n                localRay.direction.copy(this.ray.origin).add(this.ray.direction);\r\n                localRay.direction.applyMatrix4(toLocal).sub(localRay.origin).normalize();\r\n\r\n                const outHitsForSubTree = [];\r\n                if (subTree.rootNode) {\r\n                    this.castRayAtSplatTreeNode(localRay, splatTree, subTree.rootNode, outHitsForSubTree);\r\n                }\r\n\r\n                outHitsForSubTree.forEach((hit) => {\r\n                    hit.origin.applyMatrix4(fromLocal);\r\n                    hit.normal.applyMatrix4(fromLocal).normalize();\r\n                    hit.distance = tempPoint.copy(hit.origin).sub(this.ray.origin).length();\r\n                });\r\n\r\n                outHits.push(...outHitsForSubTree);\r\n            }\r\n\r\n            outHits.sort((a, b) => {\r\n                if (a.distance > b.distance) return 1;\r\n                else return -1;\r\n            });\r\n\r\n            return outHits;\r\n        };\r\n\r\n    }();\r\n\r\n    castRayAtSplatTreeNode = function() {\r\n\r\n        const tempColor = new THREE.Vector4();\r\n        const tempCenter = new THREE.Vector3();\r\n        const tempScale = new THREE.Vector3();\r\n        const tempRotation = new THREE.Quaternion();\r\n        const tempHit = new Hit();\r\n        const scaleEpsilon = 0.0000001;\r\n\r\n        const origin = new THREE.Vector3(0, 0, 0);\r\n        const uniformScaleMatrix = new THREE.Matrix4();\r\n        const scaleMatrix = new THREE.Matrix4();\r\n        const rotationMatrix = new THREE.Matrix4();\r\n        const toSphereSpace = new THREE.Matrix4();\r\n        const fromSphereSpace = new THREE.Matrix4();\r\n        const tempRay = new Ray();\r\n\r\n        return function(ray, splatTree, node, outHits = []) {\r\n            if (!ray.intersectBox(node.boundingBox)) {\r\n                return;\r\n            }\r\n            if (node.data.indexes && node.data.indexes.length > 0) {\r\n                for (let i = 0; i < node.data.indexes.length; i++) {\r\n                    const splatGlobalIndex = node.data.indexes[i];\r\n                    splatTree.splatMesh.getSplatColor(splatGlobalIndex, tempColor, false);\r\n                    splatTree.splatMesh.getSplatCenter(splatGlobalIndex, tempCenter, false);\r\n                    splatTree.splatMesh.getSplatScaleAndRotation(splatGlobalIndex, tempScale, tempRotation, false);\r\n\r\n                    if (tempScale.x <= scaleEpsilon || tempScale.y <= scaleEpsilon || tempScale.z <= scaleEpsilon) {\r\n                        continue;\r\n                    }\r\n\r\n                    if (!this.raycastAgainstTrueSplatEllipsoid) {\r\n                        const radius = (tempScale.x + tempScale.y + tempScale.z) / 3;\r\n                        if (ray.intersectSphere(tempCenter, radius, tempHit)) {\r\n                            const hitClone = tempHit.clone();\r\n                            hitClone.splatIndex = splatGlobalIndex;\r\n                            outHits.push(hitClone);\r\n                        }\r\n                    } else {\r\n                        scaleMatrix.makeScale(tempScale.x, tempScale.y, tempScale.z);\r\n                        rotationMatrix.makeRotationFromQuaternion(tempRotation);\r\n                        const uniformScale = Math.log10(tempColor.w) * 2.0;\r\n                        uniformScaleMatrix.makeScale(uniformScale, uniformScale, uniformScale);\r\n                        fromSphereSpace.copy(uniformScaleMatrix).multiply(rotationMatrix).multiply(scaleMatrix);\r\n                        toSphereSpace.copy(fromSphereSpace).invert();\r\n                        tempRay.origin.copy(ray.origin).sub(tempCenter).applyMatrix4(toSphereSpace);\r\n                        tempRay.direction.copy(ray.origin).add(ray.direction).sub(tempCenter);\r\n                        tempRay.direction.applyMatrix4(toSphereSpace).sub(tempRay.origin).normalize();\r\n                        if (tempRay.intersectSphere(origin, 1.0, tempHit)) {\r\n                            const hitClone = tempHit.clone();\r\n                            hitClone.splatIndex = splatGlobalIndex;\r\n                            hitClone.origin.applyMatrix4(fromSphereSpace).add(tempCenter);\r\n                            outHits.push(hitClone);\r\n                        }\r\n                    }\r\n                }\r\n             }\r\n            if (node.children && node.children.length > 0) {\r\n                for (let child of node.children) {\r\n                    this.castRayAtSplatTreeNode(ray, splatTree, child, outHits);\r\n                }\r\n            }\r\n            return outHits;\r\n        };\r\n\r\n    }();\r\n}\r\n","import * as THREE from 'three';\r\n\r\n/**\r\n * SplatScene: Descriptor for a single splat scene managed by an instance of SplatMesh.\r\n */\r\nexport class SplatScene {\r\n\r\n    constructor(splatBuffer, position = new THREE.Vector3(), quaternion = new THREE.Quaternion(), scale = new THREE.Vector3(1, 1, 1)) {\r\n        this.splatBuffer = splatBuffer;\r\n        this.position = position.clone();\r\n        this.quaternion = quaternion.clone();\r\n        this.scale = scale.clone();\r\n        this.transform = new THREE.Matrix4();\r\n        this.updateTransform();\r\n    }\r\n\r\n    copyTransformData(otherScene) {\r\n        this.position.copy(otherScene.position);\r\n        this.quaternion.copy(otherScene.quaternion);\r\n        this.scale.copy(otherScene.scale);\r\n        this.transform.copy(otherScene.transform);\r\n    }\r\n\r\n    updateTransform() {\r\n        this.transform.compose(this.position, this.quaternion, this.scale);\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\n\r\nlet idGen = 0;\r\n\r\nexport class SplatTreeNode {\r\n\r\n    constructor(min, max, depth, id) {\r\n        this.min = new THREE.Vector3().copy(min);\r\n        this.max = new THREE.Vector3().copy(max);\r\n        this.boundingBox = new THREE.Box3(this.min, this.max);\r\n        this.center = new THREE.Vector3().copy(this.max).sub(this.min).multiplyScalar(0.5).add(this.min);\r\n        this.depth = depth;\r\n        this.children = [];\r\n        this.data = null;\r\n        this.id = id || idGen++;\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { SplatTreeNode } from './SplatTreeNode.js';\r\n\r\nclass SplatSubTree {\r\n\r\n    constructor(maxDepth, maxCentersPerNode) {\r\n        this.maxDepth = maxDepth;\r\n        this.maxCentersPerNode = maxCentersPerNode;\r\n        this.sceneDimensions = new THREE.Vector3();\r\n        this.sceneMin = new THREE.Vector3();\r\n        this.sceneMax = new THREE.Vector3();\r\n        this.splatMesh = null;\r\n        this.rootNode = null;\r\n        this.addedIndexes = {};\r\n        this.nodesWithIndexes = [];\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * SplatTree: Octree tailored to splat data from a SplatMesh instance\r\n */\r\nexport class SplatTree {\r\n\r\n    constructor(maxDepth, maxCentersPerNode) {\r\n        this.maxDepth = maxDepth;\r\n        this.maxCentersPerNode = maxCentersPerNode;\r\n        this.splatMesh = null;\r\n        this.subTrees = [];\r\n    }\r\n\r\n    processSplatMesh(splatMesh, filterFunc = () => true) {\r\n        this.splatMesh = splatMesh;\r\n        this.subTrees = [];\r\n        const center = new THREE.Vector3();\r\n\r\n        const buildSubTree = function(splatOffset, splatCount, maxDepth, maxCentersPerNode) {\r\n            const subTree = new SplatSubTree(maxDepth, maxCentersPerNode);\r\n            let validSplatCount = 0;\r\n            const indexes = [];\r\n            for (let i = 0; i < splatCount; i++) {\r\n                const globalSplatIndex = i + splatOffset;\r\n                if (filterFunc(globalSplatIndex)) {\r\n                    splatMesh.getSplatCenter(globalSplatIndex, center);\r\n                    if (validSplatCount === 0 || center.x < subTree.sceneMin.x) subTree.sceneMin.x = center.x;\r\n                    if (validSplatCount === 0 || center.x > subTree.sceneMax.x) subTree.sceneMax.x = center.x;\r\n                    if (validSplatCount === 0 || center.y < subTree.sceneMin.y) subTree.sceneMin.y = center.y;\r\n                    if (validSplatCount === 0 || center.y > subTree.sceneMax.y) subTree.sceneMax.y = center.y;\r\n                    if (validSplatCount === 0 || center.z < subTree.sceneMin.z) subTree.sceneMin.z = center.z;\r\n                    if (validSplatCount === 0 || center.z > subTree.sceneMax.z) subTree.sceneMax.z = center.z;\r\n                    validSplatCount++;\r\n                    indexes.push(globalSplatIndex);\r\n                }\r\n            }\r\n\r\n            subTree.sceneDimensions.copy(subTree.sceneMax).sub(subTree.sceneMin);\r\n\r\n            subTree.rootNode = new SplatTreeNode(subTree.sceneMin, subTree.sceneMax, 0);\r\n            subTree.rootNode.data = {\r\n                'indexes': indexes\r\n            };\r\n\r\n            return subTree;\r\n        };\r\n\r\n        if (splatMesh.dynamicMode) {\r\n            let splatOffset = 0;\r\n            for (let s = 0; s < splatMesh.scenes.length; s++) {\r\n                const scene = splatMesh.getScene(s);\r\n                const splatCount = scene.splatBuffer.getSplatCount();\r\n                const subTree = buildSubTree(splatOffset, splatCount, this.maxDepth, this.maxCentersPerNode);\r\n                this.subTrees[s] = subTree;\r\n                SplatTree.processNode(subTree, subTree.rootNode, splatMesh);\r\n                splatOffset += splatCount;\r\n            }\r\n        } else {\r\n            const subTree = buildSubTree(0, splatMesh.getSplatCount(), this.maxDepth, this.maxCentersPerNode);\r\n            this.subTrees[0] = subTree;\r\n            SplatTree.processNode(subTree, subTree.rootNode, splatMesh);\r\n        }\r\n    }\r\n\r\n    static processNode(tree, node, splatMesh) {\r\n        const splatCount = node.data.indexes.length;\r\n\r\n        if (splatCount < tree.maxCentersPerNode || node.depth > tree.maxDepth) {\r\n            const newIndexes = [];\r\n            for (let i = 0; i < node.data.indexes.length; i++) {\r\n                if (!tree.addedIndexes[node.data.indexes[i]]) {\r\n                    newIndexes.push(node.data.indexes[i]);\r\n                    tree.addedIndexes[node.data.indexes[i]] = true;\r\n                }\r\n            }\r\n            node.data.indexes = newIndexes;\r\n            tree.nodesWithIndexes.push(node);\r\n            return;\r\n        }\r\n\r\n        const nodeDimensions = new THREE.Vector3().copy(node.max).sub(node.min);\r\n        const halfDimensions = new THREE.Vector3().copy(nodeDimensions).multiplyScalar(0.5);\r\n\r\n        const nodeCenter = new THREE.Vector3().copy(node.min).add(halfDimensions);\r\n\r\n        const childrenBounds = [\r\n            // top section, clockwise from upper-left (looking from above, +Y)\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y, nodeCenter.z - halfDimensions.z),\r\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y + halfDimensions.y, nodeCenter.z)),\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z - halfDimensions.z),\r\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y + halfDimensions.y, nodeCenter.z)),\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z),\r\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x,\r\n                                             nodeCenter.y + halfDimensions.y, nodeCenter.z + halfDimensions.z)),\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y, nodeCenter.z ),\r\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y + halfDimensions.y, nodeCenter.z + halfDimensions.z)),\r\n\r\n            // bottom section, clockwise from lower-left (looking from above, +Y)\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x,\r\n                                             nodeCenter.y - halfDimensions.y, nodeCenter.z - halfDimensions.z),\r\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z)),\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y - halfDimensions.y, nodeCenter.z - halfDimensions.z),\r\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y, nodeCenter.z)),\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y - halfDimensions.y, nodeCenter.z),\r\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y, nodeCenter.z + halfDimensions.z)),\r\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y - halfDimensions.y, nodeCenter.z),\r\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z + halfDimensions.z)),\r\n        ];\r\n\r\n        const splatCounts = [];\r\n        const baseIndexes = [];\r\n        for (let i = 0; i < childrenBounds.length; i++) {\r\n            splatCounts[i] = 0;\r\n            baseIndexes[i] = [];\r\n        }\r\n\r\n        const center = new THREE.Vector3();\r\n        for (let i = 0; i < splatCount; i++) {\r\n            const splatGlobalIndex = node.data.indexes[i];\r\n            splatMesh.getSplatCenter(splatGlobalIndex, center);\r\n            for (let j = 0; j < childrenBounds.length; j++) {\r\n                if (childrenBounds[j].containsPoint(center)) {\r\n                    splatCounts[j]++;\r\n                    baseIndexes[j].push(splatGlobalIndex);\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < childrenBounds.length; i++) {\r\n            const childNode = new SplatTreeNode(childrenBounds[i].min, childrenBounds[i].max, node.depth + 1);\r\n            childNode.data = {\r\n                'indexes': baseIndexes[i]\r\n            };\r\n            node.children.push(childNode);\r\n        }\r\n\r\n        node.data = {};\r\n        for (let child of node.children) {\r\n            SplatTree.processNode(tree, child, splatMesh);\r\n        }\r\n    }\r\n\r\n    countLeaves() {\r\n\r\n        let leafCount = 0;\r\n        this.visitLeaves(() => {\r\n            leafCount++;\r\n        });\r\n\r\n        return leafCount;\r\n    }\r\n\r\n    visitLeaves(visitFunc) {\r\n\r\n        const visitLeavesFromNode = (node, visitFunc) => {\r\n            if (node.children.length === 0) visitFunc(node);\r\n            for (let child of node.children) {\r\n                visitLeavesFromNode(child, visitFunc);\r\n            }\r\n        };\r\n\r\n        for (let subTree of this.subTrees) {\r\n            visitLeavesFromNode(subTree.rootNode, visitFunc);\r\n        }\r\n    }\r\n\r\n}\r\n","export class Constants {\r\n\r\n    static DepthMapRange = 1 << 16;\r\n    static MemoryPageSize = 65536;\r\n    static BytesPerFloat = 4;\r\n    static BytesPerInt = 4;\r\n    static MaxScenes = 32;\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { SplatScene } from './SplatScene.js';\r\nimport { SplatTree } from './splattree/SplatTree.js';\r\nimport { uintEncodedFloat, rgbaToInteger } from './Util.js';\r\nimport { Constants } from './Constants.js';\r\n\r\nconst dummyGeometry = new THREE.BufferGeometry();\r\nconst dummyMaterial = new THREE.MeshBasicMaterial();\r\n\r\n/**\r\n * SplatMesh: Container for one or more splat scenes, abstracting them into a single unified container for\r\n * splat data. Additionally contains data structures and code to make the splat data renderable as a Three.js mesh.\r\n */\r\nexport class SplatMesh extends THREE.Mesh {\r\n\r\n    constructor(dynamicMode = true, halfPrecisionCovariancesOnGPU = false, devicePixelRatio = 1,\r\n                enableDistancesComputationOnGPU = true, integerBasedDistancesComputation = false) {\r\n        super(dummyGeometry, dummyMaterial);\r\n        // Reference to a Three.js renderer\r\n        this.renderer = undefined;\r\n        // Use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\r\n        this.halfPrecisionCovariancesOnGPU = halfPrecisionCovariancesOnGPU;\r\n        // When 'dynamicMode' is true, scenes are assumed to be non-static. Dynamic scenes are handled differently\r\n        // and certain optimizations cannot be made for them. Additionally, by default, all splat data retrieved from\r\n        // this splat mesh will not have their scene transform applied to them if the splat mesh is dynamic. That\r\n        // can be overriden via parameters to the individual functions that are used to retrieve splat data.\r\n        this.dynamicMode = dynamicMode;\r\n        // Ratio of the resolution in physical pixels to the resolution in CSS pixels for the current display device\r\n        this.devicePixelRatio = devicePixelRatio;\r\n        // Use a transform feedback to calculate splat distances from the camera\r\n        this.enableDistancesComputationOnGPU = enableDistancesComputationOnGPU;\r\n        // Use a faster integer-based approach for calculating splat distances from the camera\r\n        this.integerBasedDistancesComputation = integerBasedDistancesComputation;\r\n        // The individual splat scenes stored in this splat mesh, each containing their own transform\r\n        this.scenes = [];\r\n        // Special octree tailored to SplatMesh instances\r\n        this.splatTree = null;\r\n        // Textures in which splat data will be stored for rendering\r\n        this.splatDataTextures = null;\r\n        this.distancesTransformFeedback = {\r\n            'id': null,\r\n            'vertexShader': null,\r\n            'fragmentShader': null,\r\n            'program': null,\r\n            'centersBuffer': null,\r\n            'transformIndexesBuffer': null,\r\n            'outDistancesBuffer': null,\r\n            'centersLoc': -1,\r\n            'modelViewProjLoc': -1,\r\n            'transformIndexesLoc': -1,\r\n            'transformsLocs': []\r\n        };\r\n        this.globalSplatIndexToLocalSplatIndexMap = [];\r\n        this.globalSplatIndexToSceneIndexMap = [];\r\n    }\r\n\r\n    /**\r\n     * Build the Three.js material that is used to render the splats.\r\n     * @param {number} dynamicMode If true, it means the scene geometry represented by this splat mesh is not stationary or\r\n     *                             that the splat count might change\r\n     * @return {THREE.ShaderMaterial}\r\n     */\r\n    static buildMaterial(dynamicMode = false) {\r\n\r\n        // Contains the code to project 3D covariance to 2D and from there calculate the quad (using the eigen vectors of the\r\n        // 2D covariance) that is ultimately rasterized\r\n        let vertexShaderSource = `\r\n            precision highp float;\r\n            #include <common>\r\n\r\n            attribute uint splatIndex;\r\n\r\n            uniform highp sampler2D covariancesTexture;\r\n            uniform highp usampler2D centersColorsTexture;`;\r\n\r\n        if (dynamicMode) {\r\n            vertexShaderSource += `\r\n                uniform highp usampler2D transformIndexesTexture;\r\n                uniform highp mat4 transforms[${Constants.MaxScenes}];\r\n                uniform vec2 transformIndexesTextureSize;\r\n            `;\r\n        }\r\n\r\n        vertexShaderSource += `\r\n            uniform vec2 focal;\r\n            uniform vec2 viewport;\r\n            uniform vec2 basisViewport;\r\n            uniform vec2 covariancesTextureSize;\r\n            uniform vec2 centersColorsTextureSize;\r\n\r\n            varying vec4 vColor;\r\n            varying vec2 vUv;\r\n\r\n            varying vec2 vPosition;\r\n\r\n            const float sqrt8 = sqrt(8.0);\r\n\r\n            const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\r\n            const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));\r\n            const uvec4 shift4 = uvec4(0, 8, 16, 24);\r\n            vec4 uintToRGBAVec (uint u) {\r\n               uvec4 urgba = mask4 & u;\r\n               urgba = urgba >> shift4;\r\n               vec4 rgba = vec4(urgba) * encodeNorm4;\r\n               return rgba;\r\n            }\r\n\r\n            vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\r\n                vec2 samplerUV = vec2(0.0, 0.0);\r\n                float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\r\n                samplerUV.y = float(floor(d)) / dimensions.y;\r\n                samplerUV.x = fract(d);\r\n                return samplerUV;\r\n            }\r\n\r\n            void main () {\r\n\r\n                uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));\r\n                vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));`;\r\n\r\n            if (dynamicMode) {\r\n                vertexShaderSource += `\r\n                    uint transformIndex = texture(transformIndexesTexture, getDataUV(1, 0, transformIndexesTextureSize)).r;\r\n                    mat4 transform = transforms[transformIndex];\r\n                    mat4 transformModelViewMatrix = modelViewMatrix * transform;\r\n                `;\r\n            } else {\r\n                vertexShaderSource += `mat4 transformModelViewMatrix = modelViewMatrix;`;\r\n            }\r\n\r\n            vertexShaderSource += `\r\n                vec4 viewCenter = transformModelViewMatrix * vec4(splatCenter, 1.0);\r\n\r\n                vec4 clipCenter = projectionMatrix * viewCenter;\r\n\r\n                float clip = 1.2 * clipCenter.w;\r\n                if (clipCenter.z < -clip || clipCenter.x < -clip || clipCenter.x > clip || clipCenter.y < -clip || clipCenter.y > clip) {\r\n                    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\r\n                    return;\r\n                }\r\n\r\n                vPosition = position.xy;\r\n                vColor = uintToRGBAVec(sampledCenterColor.r);\r\n\r\n                vec2 sampledCovarianceA = texture(covariancesTexture, getDataUV(3, 0, covariancesTextureSize)).rg;\r\n                vec2 sampledCovarianceB = texture(covariancesTexture, getDataUV(3, 1, covariancesTextureSize)).rg;\r\n                vec2 sampledCovarianceC = texture(covariancesTexture, getDataUV(3, 2, covariancesTextureSize)).rg;\r\n\r\n                vec3 cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rg, sampledCovarianceB.r);\r\n                vec3 cov3D_M22_M23_M33 = vec3(sampledCovarianceB.g, sampledCovarianceC.rg);\r\n\r\n                // Construct the 3D covariance matrix\r\n                mat3 Vrk = mat3(\r\n                    cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\r\n                    cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\r\n                    cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\r\n                );\r\n\r\n                // Construct the Jacobian of the affine approximation of the projection matrix. It will be used to transform the\r\n                // 3D covariance matrix instead of using the actual projection matrix because that transformation would\r\n                // require a non-linear component (perspective division) which would yield a non-gaussian result. (This assumes\r\n                // the current projection is a perspective projection).\r\n                float s = 1.0 / (viewCenter.z * viewCenter.z);\r\n                mat3 J = mat3(\r\n                    focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) * s,\r\n                    0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) * s,\r\n                    0., 0., 0.\r\n                );\r\n\r\n                // Concatenate the projection approximation with the model-view transformation\r\n                mat3 W = transpose(mat3(transformModelViewMatrix));\r\n                mat3 T = W * J;\r\n\r\n                // Transform the 3D covariance matrix (Vrk) to compute the 2D covariance matrix\r\n                mat3 cov2Dm = transpose(T) * Vrk * T;\r\n\r\n                cov2Dm[0][0] += 0.3;\r\n                cov2Dm[1][1] += 0.3;\r\n\r\n                // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\r\n                // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\r\n                // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\r\n                // need cov2Dm[1][0] because it is a symetric matrix.\r\n                vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\r\n\r\n                vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\r\n\r\n                // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\r\n                // so that we can determine the 2D basis for the splat. This is done using the method described\r\n                // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\r\n                // After calculating the eigen-values and eigen-vectors, we calculate the basis for rendering the splat\r\n                // by normalizing the eigen-vectors and then multiplying them by (sqrt(8) * eigen-value), which is\r\n                // equal to scaling them by sqrt(8) standard deviations.\r\n                //\r\n                // This is a different approach than in the original work at INRIA. In that work they compute the\r\n                // max extents of the projected splat in screen space to form a screen-space aligned bounding rectangle\r\n                // which forms the geometry that is actually rasterized. The dimensions of that bounding box are 3.0\r\n                // times the maximum eigen-value, or 3 standard deviations. They then use the inverse 2D covariance\r\n                // matrix (called 'conic') in the CUDA rendering thread to determine fragment opacity by calculating the\r\n                // full gaussian: exp(-0.5 * (X - mean) * conic * (X - mean)) * splat opacity\r\n                float a = cov2Dv.x;\r\n                float d = cov2Dv.z;\r\n                float b = cov2Dv.y;\r\n                float D = a * d - b * b;\r\n                float trace = a + d;\r\n                float traceOver2 = 0.5 * trace;\r\n                float term2 = sqrt(max(0.1f, traceOver2 * traceOver2 - D));\r\n                float eigenValue1 = traceOver2 + term2;\r\n                float eigenValue2 = traceOver2 - term2;\r\n\r\n                float transparentAdjust = step(1.0 / 255.0, vColor.a);\r\n                eigenValue2 = eigenValue2 * transparentAdjust; // hide splat if alpha is zero\r\n\r\n                vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\r\n                // since the eigen vectors are orthogonal, we derive the second one from the first\r\n                vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);\r\n\r\n                // We use sqrt(8) standard deviations instead of 3 to eliminate more of the splat with a very low opacity.\r\n                vec2 basisVector1 = eigenVector1 * sqrt8 * sqrt(eigenValue1);\r\n                vec2 basisVector2 = eigenVector2 * sqrt8 * sqrt(eigenValue2);\r\n\r\n                vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) * basisViewport * 2.0;\r\n\r\n                // Similarly scale the position data we send to the fragment shader\r\n                vPosition *= sqrt8;\r\n\r\n                gl_Position = vec4(ndcCenter.xy  + ndcOffset, ndcCenter.z, 1.0);\r\n\r\n            }`;\r\n\r\n        const fragmentShaderSource = `\r\n            precision highp float;\r\n            #include <common>\r\n \r\n            uniform vec3 debugColor;\r\n\r\n            varying vec4 vColor;\r\n            varying vec2 vUv;\r\n\r\n            varying vec2 vPosition;\r\n\r\n            void main () {\r\n                // Compute the positional squared distance from the center of the splat to the current fragment.\r\n                float A = dot(vPosition, vPosition);\r\n                // Since the positional data in vPosition has been scaled by sqrt(8), the squared result will be\r\n                // scaled by a factor of 8. If the squared result is larger than 8, it means it is outside the ellipse\r\n                // defined by the rectangle formed by vPosition. It also means it's farther\r\n                // away than sqrt(8) standard deviations from the mean.\r\n                if (A > 8.0) discard;\r\n                vec3 color = vColor.rgb;\r\n\r\n                // Since the rendered splat is scaled by sqrt(8), the inverse covariance matrix that is part of\r\n                // the gaussian formula becomes the identity matrix. We're then left with (X - mean) * (X - mean),\r\n                // and since 'mean' is zero, we have X * X, which is the same as A:\r\n                float opacity = exp(-0.5 * A) * vColor.a;\r\n\r\n                gl_FragColor = vec4(color.rgb, opacity);\r\n            }`;\r\n\r\n        const uniforms = {\r\n            'covariancesTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'centersColorsTexture': {\r\n                'type': 't',\r\n                'value': null\r\n            },\r\n            'focal': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'viewport': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'basisViewport': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2()\r\n            },\r\n            'debugColor': {\r\n                'type': 'v3',\r\n                'value': new THREE.Color()\r\n            },\r\n            'covariancesTextureSize': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2(1024, 1024)\r\n            },\r\n            'centersColorsTextureSize': {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2(1024, 1024)\r\n            }\r\n        };\r\n\r\n        if (dynamicMode) {\r\n            uniforms['transformIndexesTexture'] = {\r\n                'type': 't',\r\n                'value': null\r\n            };\r\n            const transformMatrices = [];\r\n            for (let i = 0; i < Constants.MaxScenes; i++) {\r\n                transformMatrices.push(new THREE.Matrix4());\r\n            }\r\n            uniforms['transforms'] = {\r\n                'type': 'mat4',\r\n                'value': transformMatrices\r\n            };\r\n            uniforms['transformIndexesTextureSize'] = {\r\n                'type': 'v2',\r\n                'value': new THREE.Vector2(1024, 1024)\r\n            };\r\n        }\r\n\r\n        const material = new THREE.ShaderMaterial({\r\n            uniforms: uniforms,\r\n            vertexShader: vertexShaderSource,\r\n            fragmentShader: fragmentShaderSource,\r\n            transparent: true,\r\n            alphaTest: 1.0,\r\n            blending: THREE.NormalBlending,\r\n            depthTest: true,\r\n            depthWrite: false,\r\n            side: THREE.DoubleSide\r\n        });\r\n\r\n        return material;\r\n    }\r\n\r\n    /**\r\n     * Build the Three.js geometry that will be used to render the splats. The geometry is instanced and is made up of\r\n     * vertices for a single quad as well as an attribute buffer for the splat indexes.\r\n     * @param {number} maxSplatCount The maximum number of splats that the geometry will need to accomodate\r\n     * @return {THREE.InstancedBufferGeometry}\r\n     */\r\n    static buildGeomtery(maxSplatCount) {\r\n\r\n        const baseGeometry = new THREE.BufferGeometry();\r\n        baseGeometry.setIndex([0, 1, 2, 0, 2, 3]);\r\n\r\n        // Vertices for the instanced quad\r\n        const positionsArray = new Float32Array(4 * 3);\r\n        const positions = new THREE.BufferAttribute(positionsArray, 3);\r\n        baseGeometry.setAttribute('position', positions);\r\n        positions.setXYZ(0, -1.0, -1.0, 0.0);\r\n        positions.setXYZ(1, -1.0, 1.0, 0.0);\r\n        positions.setXYZ(2, 1.0, 1.0, 0.0);\r\n        positions.setXYZ(3, 1.0, -1.0, 0.0);\r\n        positions.needsUpdate = true;\r\n\r\n        const geometry = new THREE.InstancedBufferGeometry().copy(baseGeometry);\r\n\r\n        // Splat index buffer\r\n        const splatIndexArray = new Uint32Array(maxSplatCount);\r\n        const splatIndexes = new THREE.InstancedBufferAttribute(splatIndexArray, 1, false);\r\n        splatIndexes.setUsage(THREE.DynamicDrawUsage);\r\n        geometry.setAttribute('splatIndex', splatIndexes);\r\n\r\n        geometry.instanceCount = maxSplatCount;\r\n\r\n        return geometry;\r\n    }\r\n\r\n    /**\r\n     * Build a container for each scene managed by this splat mesh based on an instance of SplatBuffer, along with optional\r\n     * transform data (position, scale, rotation) passed to the splat mesh during the build process.\r\n     * @param {Array<THREE.Matrix4>} splatBuffers SplatBuffer instances containing splats for each scene\r\n     * @param {Array<object>} sceneOptions Array of options objects: {\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     * }\r\n     * @return {Array<THREE.Matrix4>}\r\n     */\r\n    static buildScenes(splatBuffers, sceneOptions) {\r\n        const scenes = [];\r\n        scenes.length = splatBuffers.length;\r\n        for (let i = 0; i < splatBuffers.length; i++) {\r\n            const splatBuffer = splatBuffers[i];\r\n            const options = sceneOptions[i] || {};\r\n            let positionArray = options['position'] || [0, 0, 0];\r\n            let rotationArray = options['rotation'] || [0, 0, 0, 1];\r\n            let scaleArray = options['scale'] || [1, 1, 1];\r\n            const position = new THREE.Vector3().fromArray(positionArray);\r\n            const rotation = new THREE.Quaternion().fromArray(rotationArray);\r\n            const scale = new THREE.Vector3().fromArray(scaleArray);\r\n            scenes[i] = SplatMesh.createScene(splatBuffer, position, rotation, scale);\r\n        }\r\n        return scenes;\r\n    }\r\n\r\n    static createScene(splatBuffer, position, rotation, scale) {\r\n        return new SplatScene(splatBuffer, position, rotation, scale);\r\n    }\r\n\r\n    /**\r\n     * Build data structures that map global splat indexes (based on a unified index across all splat buffers) to\r\n     * local data within a single scene.\r\n     * @param {Array<SplatBuffer>} splatBuffers Instances of SplatBuffer off which to build the maps\r\n     * @return {object}\r\n     */\r\n    static buildSplatIndexMaps(splatBuffers) {\r\n        const localSplatIndexMap = [];\r\n        const sceneIndexMap = [];\r\n        let totalSplatCount = 0;\r\n        for (let s = 0; s < splatBuffers.length; s++) {\r\n            const splatBuffer = splatBuffers[s];\r\n            const splatCount = splatBuffer.getSplatCount();\r\n            for (let i = 0; i < splatCount; i++) {\r\n                localSplatIndexMap[totalSplatCount] = i;\r\n                sceneIndexMap[totalSplatCount] = s;\r\n                totalSplatCount++;\r\n            }\r\n        }\r\n        return {\r\n            localSplatIndexMap,\r\n            sceneIndexMap\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Build an instance of SplatTree (a specialized octree) for the given splat mesh.\r\n     * @param {SplatMesh} splatMesh SplatMesh instance for which the splat tree will be built\r\n     * @param {Array<number>} minAlphas Array of minimum splat slphas for each scene\r\n     * @return {SplatTree}\r\n     */\r\n    static buildSplatTree(splatMesh, minAlphas = []) {\r\n        // TODO: expose SplatTree constructor parameters (maximumDepth and maxCentersPerNode) so that they can\r\n        // be configured on a per-scene basis\r\n        const splatTree = new SplatTree(8, 1000);\r\n        console.time('SplatTree build');\r\n        const splatColor = new THREE.Vector4();\r\n        splatTree.processSplatMesh(splatMesh, (splatIndex) => {\r\n            splatMesh.getSplatColor(splatIndex, splatColor);\r\n            const sceneIndex = splatMesh.getSceneIndexForSplat(splatIndex);\r\n            const minAlpha = minAlphas[sceneIndex] || 1;\r\n            return splatColor.w >= minAlpha;\r\n        });\r\n        console.timeEnd('SplatTree build');\r\n\r\n        let leavesWithVertices = 0;\r\n        let avgSplatCount = 0;\r\n        let maxSplatCount = 0;\r\n        let nodeCount = 0;\r\n\r\n        splatTree.visitLeaves((node) => {\r\n            const nodeSplatCount = node.data.indexes.length;\r\n            if (nodeSplatCount > 0) {\r\n                avgSplatCount += nodeSplatCount;\r\n                maxSplatCount = Math.max(maxSplatCount, nodeSplatCount);\r\n                nodeCount++;\r\n                leavesWithVertices++;\r\n            }\r\n        });\r\n        console.log(`SplatTree leaves: ${splatTree.countLeaves()}`);\r\n        console.log(`SplatTree leaves with splats:${leavesWithVertices}`);\r\n        avgSplatCount = avgSplatCount / nodeCount;\r\n        console.log(`Avg splat count per node: ${avgSplatCount}`);\r\n        console.log(`Total splat count: ${splatMesh.getSplatCount()}`);\r\n        return splatTree;\r\n    }\r\n\r\n    /**\r\n     * Construct this instance of SplatMesh.\r\n     * @param {Array<SplatBuffer>} splatBuffers The base splat data, instances of SplatBuffer\r\n     * @param {Array<object>} sceneOptions Dynamic options for each scene {\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     *\r\n     * }\r\n     * @param {Boolean} keepSceneTransforms For a scene that already exists and is being overwritten, this flag\r\n     *                                      says to keep the transform from the existing scene.\r\n     */\r\n    build(splatBuffers, sceneOptions, keepSceneTransforms = true) {\r\n        this.disposeMeshData();\r\n        const totalSplatCount = SplatMesh.getTotalSplatCountForSplatBuffers(splatBuffers);\r\n\r\n        const newScenes = SplatMesh.buildScenes(splatBuffers, sceneOptions);\r\n        if (keepSceneTransforms) {\r\n            for (let i = 0; i < this.scenes.length && i < newScenes.length; i++) {\r\n                const newScene = newScenes[i];\r\n                const existingScene = this.getScene(i);\r\n                newScene.copyTransformData(existingScene);\r\n            }\r\n        }\r\n        this.scenes = newScenes;\r\n\r\n        this.geometry = SplatMesh.buildGeomtery(totalSplatCount);\r\n        this.material = SplatMesh.buildMaterial(this.dynamicMode);\r\n        const indexMaps = SplatMesh.buildSplatIndexMaps(splatBuffers);\r\n        this.globalSplatIndexToLocalSplatIndexMap = indexMaps.localSplatIndexMap;\r\n        this.globalSplatIndexToSceneIndexMap = indexMaps.sceneIndexMap;\r\n        this.splatTree = SplatMesh.buildSplatTree(this, sceneOptions.map(options => options.splatAlphaRemovalThreshold || 1));\r\n\r\n        if (this.enableDistancesComputationOnGPU) this.setupDistancesComputationTransformFeedback();\r\n        this.resetDataFromSplatBuffers();\r\n    }\r\n\r\n    /**\r\n     * Dispose all resources held by the splat mesh\r\n     */\r\n    dispose() {\r\n        this.disposeMeshData();\r\n        if (this.enableDistancesComputationOnGPU) {\r\n            this.disposeDistancesComputationGPUResources();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose of only the Three.js mesh resources (geometry, material, and texture)\r\n     */\r\n    disposeMeshData() {\r\n        if (this.geometry && this.geometry !== dummyGeometry) {\r\n            this.geometry.dispose();\r\n            this.geometry = null;\r\n        }\r\n        for (let textureKey in this.splatDataTextures) {\r\n            if (this.splatDataTextures.hasOwnProperty(textureKey)) {\r\n                const textureContainer = this.splatDataTextures[textureKey];\r\n                if (textureContainer.texture) {\r\n                    textureContainer.texture.dispose();\r\n                    textureContainer.texture = null;\r\n                }\r\n            }\r\n        }\r\n        this.splatDataTextures = null;\r\n        if (this.material) {\r\n            this.material.dispose();\r\n            this.material = null;\r\n        }\r\n        this.splatTree = null;\r\n    }\r\n\r\n    getSplatTree() {\r\n        return this.splatTree;\r\n    }\r\n\r\n    /**\r\n     * Refresh data textures and GPU buffers for splat distance pre-computation with data from the splat buffers for this mesh.\r\n     */\r\n    resetDataFromSplatBuffers() {\r\n        this.uploadSplatDataToTextures();\r\n        if (this.enableDistancesComputationOnGPU) {\r\n            this.updateGPUCentersBufferForDistancesComputation();\r\n            this.updateGPUTransformIndexesBufferForDistancesComputation();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Refresh data textures with data from the splat buffers for this mesh.\r\n     */\r\n    uploadSplatDataToTextures() {\r\n\r\n        const splatCount = this.getSplatCount();\r\n\r\n        const covariances = new Float32Array(splatCount * 6);\r\n        const centers = new Float32Array(splatCount * 3);\r\n        const colors = new Uint8Array(splatCount * 4);\r\n        this.fillSplatDataArrays(covariances, centers, colors);\r\n\r\n        const COVARIANCES_ELEMENTS_PER_TEXEL = 2;\r\n        const CENTER_COLORS_ELEMENTS_PER_TEXEL = 4;\r\n        const TRANSFORM_INDEXES_ELEMENTS_PER_TEXEL = 1;\r\n\r\n        const covariancesTextureSize = new THREE.Vector2(4096, 1024);\r\n        while (covariancesTextureSize.x * covariancesTextureSize.y * COVARIANCES_ELEMENTS_PER_TEXEL < splatCount * 6) {\r\n            covariancesTextureSize.y *= 2;\r\n        }\r\n\r\n        const centersColorsTextureSize = new THREE.Vector2(4096, 1024);\r\n        while (centersColorsTextureSize.x * centersColorsTextureSize.y * CENTER_COLORS_ELEMENTS_PER_TEXEL < splatCount * 4) {\r\n            centersColorsTextureSize.y *= 2;\r\n        }\r\n\r\n        let covariancesTexture;\r\n        let paddedCovariances;\r\n        if (this.halfPrecisionCovariancesOnGPU) {\r\n            paddedCovariances = new Uint16Array(covariancesTextureSize.x * covariancesTextureSize.y * COVARIANCES_ELEMENTS_PER_TEXEL);\r\n            for (let i = 0; i < covariances.length; i++) {\r\n                paddedCovariances[i] = THREE.DataUtils.toHalfFloat(covariances[i]);\r\n            }\r\n            covariancesTexture = new THREE.DataTexture(paddedCovariances, covariancesTextureSize.x,\r\n                                                       covariancesTextureSize.y, THREE.RGFormat, THREE.HalfFloatType);\r\n        } else {\r\n            paddedCovariances = new Float32Array(covariancesTextureSize.x * covariancesTextureSize.y * COVARIANCES_ELEMENTS_PER_TEXEL);\r\n            paddedCovariances.set(covariances);\r\n            covariancesTexture = new THREE.DataTexture(paddedCovariances, covariancesTextureSize.x,\r\n                                                       covariancesTextureSize.y, THREE.RGFormat, THREE.FloatType);\r\n        }\r\n        covariancesTexture.needsUpdate = true;\r\n        this.material.uniforms.covariancesTexture.value = covariancesTexture;\r\n        this.material.uniforms.covariancesTextureSize.value.copy(covariancesTextureSize);\r\n\r\n        const paddedCenterColors = new Uint32Array(centersColorsTextureSize.x *\r\n                                                   centersColorsTextureSize.y * CENTER_COLORS_ELEMENTS_PER_TEXEL);\r\n        for (let c = 0; c < splatCount; c++) {\r\n            const colorsBase = c * 4;\r\n            const centersBase = c * 3;\r\n            const centerColorsBase = c * 4;\r\n            paddedCenterColors[centerColorsBase] = rgbaToInteger(colors[colorsBase], colors[colorsBase + 1],\r\n                                                                 colors[colorsBase + 2], colors[colorsBase + 3]);\r\n            paddedCenterColors[centerColorsBase + 1] = uintEncodedFloat(centers[centersBase]);\r\n            paddedCenterColors[centerColorsBase + 2] = uintEncodedFloat(centers[centersBase + 1]);\r\n            paddedCenterColors[centerColorsBase + 3] = uintEncodedFloat(centers[centersBase + 2]);\r\n        }\r\n        const centersColorsTexture = new THREE.DataTexture(paddedCenterColors, centersColorsTextureSize.x,\r\n                                                           centersColorsTextureSize.y, THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\r\n        centersColorsTexture.internalFormat = 'RGBA32UI';\r\n        centersColorsTexture.needsUpdate = true;\r\n        this.material.uniforms.centersColorsTexture.value = centersColorsTexture;\r\n        this.material.uniforms.centersColorsTextureSize.value.copy(centersColorsTextureSize);\r\n        this.material.uniformsNeedUpdate = true;\r\n\r\n        this.splatDataTextures = {\r\n            'covariances': {\r\n                'data': paddedCovariances,\r\n                'texture': covariancesTexture,\r\n                'size': covariancesTextureSize\r\n            },\r\n            'centerColors': {\r\n                'data': paddedCenterColors,\r\n                'texture': centersColorsTexture,\r\n                'size': centersColorsTextureSize\r\n            }\r\n        };\r\n\r\n        if (this.dynamicMode) {\r\n            const transformIndexesTextureSize = new THREE.Vector2(4096, 1024);\r\n            while (transformIndexesTextureSize.x * transformIndexesTextureSize.y * TRANSFORM_INDEXES_ELEMENTS_PER_TEXEL < splatCount) {\r\n                transformIndexesTextureSize.y *= 2;\r\n            }\r\n\r\n            const paddedTransformIndexes = new Uint32Array(transformIndexesTextureSize.x *\r\n                                                           transformIndexesTextureSize.y * TRANSFORM_INDEXES_ELEMENTS_PER_TEXEL);\r\n            for (let c = 0; c < splatCount; c++) {\r\n                paddedTransformIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\r\n            }\r\n            const transformIndexesTexture = new THREE.DataTexture(paddedTransformIndexes, transformIndexesTextureSize.x,\r\n                                                                  transformIndexesTextureSize.y, THREE.RedIntegerFormat,\r\n                                                                  THREE.UnsignedIntType);\r\n            transformIndexesTexture.internalFormat = 'R32UI';\r\n            transformIndexesTexture.needsUpdate = true;\r\n            this.material.uniforms.transformIndexesTexture.value = transformIndexesTexture;\r\n            this.material.uniforms.transformIndexesTextureSize.value.copy(transformIndexesTextureSize);\r\n            this.material.uniformsNeedUpdate = true;\r\n            this.splatDataTextures['tansformIndexes'] = {\r\n                'data': paddedTransformIndexes,\r\n                'texture': transformIndexesTexture,\r\n                'size': transformIndexesTextureSize\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the indexes of splats that should be rendered; should be sorted in desired render order.\r\n     * @param {Uint32Array} globalIndexes Sorted index list of splats to be rendered\r\n     * @param {number} renderSplatCount Total number of splats to be rendered. Necessary because we may not want to render\r\n     *                                  every splat.\r\n     */\r\n    updateRenderIndexes(globalIndexes, renderSplatCount) {\r\n        const geometry = this.geometry;\r\n        geometry.attributes.splatIndex.set(globalIndexes);\r\n        geometry.attributes.splatIndex.needsUpdate = true;\r\n        geometry.instanceCount = renderSplatCount;\r\n    }\r\n\r\n    /**\r\n     * Update the transforms for each scene in this splat mesh from their individual components (position,\r\n     * quaternion, and scale)\r\n     */\r\n    updateTransforms() {\r\n        for (let i = 0; i < this.scenes.length; i++) {\r\n            const scene = this.getScene(i);\r\n            scene.updateTransform();\r\n        }\r\n    }\r\n\r\n    updateUniforms = function() {\r\n\r\n        const viewport = new THREE.Vector2();\r\n\r\n        return function(renderDimensions, cameraFocalLengthX, cameraFocalLengthY) {\r\n            const splatCount = this.getSplatCount();\r\n            if (splatCount > 0) {\r\n                viewport.set(renderDimensions.x * this.devicePixelRatio,\r\n                             renderDimensions.y * this.devicePixelRatio);\r\n                this.material.uniforms.viewport.value.copy(viewport);\r\n                this.material.uniforms.basisViewport.value.set(1.0 / viewport.x, 1.0 / viewport.y);\r\n                this.material.uniforms.focal.value.set(cameraFocalLengthX, cameraFocalLengthY);\r\n                if (this.dynamicMode) {\r\n                    for (let i = 0; i < this.scenes.length; i++) {\r\n                        this.material.uniforms.transforms.value[i].copy(this.getScene(i).transform);\r\n                    }\r\n                }\r\n                this.material.uniformsNeedUpdate = true;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    getSplatDataTextures() {\r\n        return this.splatDataTextures;\r\n    }\r\n\r\n    getSplatCount() {\r\n        return SplatMesh.getTotalSplatCountForScenes(this.scenes);\r\n    }\r\n\r\n    static getTotalSplatCountForScenes(scenes) {\r\n        let totalSplatCount = 0;\r\n        for (let scene of scenes) {\r\n            if (scene && scene.splatBuffer) totalSplatCount += scene.splatBuffer.getSplatCount();\r\n        }\r\n        return totalSplatCount;\r\n    }\r\n\r\n    static getTotalSplatCountForSplatBuffers(splatBuffers) {\r\n        let totalSplatCount = 0;\r\n        for (let splatBuffer of splatBuffers) totalSplatCount += splatBuffer.getSplatCount();\r\n        return totalSplatCount;\r\n    }\r\n\r\n    disposeDistancesComputationGPUResources() {\r\n\r\n        if (!this.renderer) return;\r\n\r\n        const gl = this.renderer.getContext();\r\n\r\n        if (this.distancesTransformFeedback.vao) {\r\n            gl.deleteVertexArray(this.distancesTransformFeedback.vao);\r\n            this.distancesTransformFeedback.vao = null;\r\n        }\r\n        if (this.distancesTransformFeedback.program) {\r\n            gl.deleteProgram(this.distancesTransformFeedback.program);\r\n            gl.deleteShader(this.distancesTransformFeedback.vertexShader);\r\n            gl.deleteShader(this.distancesTransformFeedback.fragmentShader);\r\n            this.distancesTransformFeedback.program = null;\r\n            this.distancesTransformFeedback.vertexShader = null;\r\n            this.distancesTransformFeedback.fragmentShader = null;\r\n        }\r\n        this.disposeDistancesComputationGPUBufferResources();\r\n        if (this.distancesTransformFeedback.id) {\r\n            gl.deleteTransformFeedback(this.distancesTransformFeedback.id);\r\n            this.distancesTransformFeedback.id = null;\r\n        }\r\n    }\r\n\r\n    disposeDistancesComputationGPUBufferResources() {\r\n\r\n        if (!this.renderer) return;\r\n\r\n        const gl = this.renderer.getContext();\r\n\r\n        if (this.distancesTransformFeedback.centersBuffer) {\r\n            this.distancesTransformFeedback.centersBuffer = null;\r\n            gl.deleteBuffer(this.distancesTransformFeedback.centersBuffer);\r\n        }\r\n        if (this.distancesTransformFeedback.outDistancesBuffer) {\r\n            gl.deleteBuffer(this.distancesTransformFeedback.outDistancesBuffer);\r\n            this.distancesTransformFeedback.outDistancesBuffer = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the Three.js renderer used by this splat mesh\r\n     * @param {THREE.WebGLRenderer} renderer Instance of THREE.WebGLRenderer\r\n     */\r\n    setRenderer(renderer) {\r\n        if (renderer !== this.renderer) {\r\n            this.renderer = renderer;\r\n            if (this.enableDistancesComputationOnGPU && this.getSplatCount() > 0) {\r\n                this.setupDistancesComputationTransformFeedback();\r\n                this.updateGPUCentersBufferForDistancesComputation();\r\n                this.updateGPUTransformIndexesBufferForDistancesComputation();\r\n            }\r\n        }\r\n    }\r\n\r\n    setupDistancesComputationTransformFeedback = function() {\r\n\r\n        let currentRenderer;\r\n        let currentSplatCount;\r\n\r\n        return function() {\r\n            const splatCount = this.getSplatCount();\r\n\r\n            if (!this.renderer || (currentRenderer === this.renderer && currentSplatCount === splatCount)) return;\r\n            const rebuildGPUObjects = (currentRenderer !== this.renderer);\r\n            const rebuildBuffers = currentSplatCount !== splatCount;\r\n            if (rebuildGPUObjects) {\r\n                this.disposeDistancesComputationGPUResources();\r\n            } else if (rebuildBuffers) {\r\n                this.disposeDistancesComputationGPUBufferResources();\r\n            }\r\n\r\n            const gl = this.renderer.getContext();\r\n\r\n            const createShader = (gl, type, source) => {\r\n                const shader = gl.createShader(type);\r\n                if (!shader) {\r\n                    console.error('Fatal error: gl could not create a shader object.');\r\n                    return null;\r\n                }\r\n\r\n                gl.shaderSource(shader, source);\r\n                gl.compileShader(shader);\r\n\r\n                const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n                if (!compiled) {\r\n                    let typeName = 'unknown';\r\n                    if (type === gl.VERTEX_SHADER) typeName = 'vertex shader';\r\n                    else if (type === gl.FRAGMENT_SHADER) typeName = 'fragement shader';\r\n                    const errors = gl.getShaderInfoLog(shader);\r\n                    console.error('Failed to compile ' + typeName + ' with these errors:' + errors);\r\n                    gl.deleteShader(shader);\r\n                    return null;\r\n                }\r\n\r\n                return shader;\r\n            };\r\n\r\n            let vsSource;\r\n            if (this.integerBasedDistancesComputation) {\r\n                vsSource =\r\n                `#version 300 es\r\n                in ivec4 center;\r\n                flat out int distance;`;\r\n                if (this.dynamicMode) {\r\n                    vsSource += `\r\n                        in uint transformIndex;\r\n                        uniform ivec4 transforms[${Constants.MaxScenes}];\r\n                        void main(void) {\r\n                            ivec4 transform = transforms[transformIndex];\r\n                            distance = center.x * transform.x + center.y * transform.y + center.z * transform.z + transform.w * center.w;\r\n                        }\r\n                    `;\r\n                } else {\r\n                    vsSource += `\r\n                        uniform ivec3 modelViewProj;\r\n                        void main(void) {\r\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\r\n                        }\r\n                    `;\r\n                }\r\n            } else {\r\n                vsSource =\r\n                `#version 300 es\r\n                in vec3 center;\r\n                flat out float distance;`;\r\n                if (this.dynamicMode) {\r\n                    vsSource += `\r\n                        in uint transformIndex;\r\n                        uniform mat4 transforms[${Constants.MaxScenes}];\r\n                        void main(void) {\r\n                            vec4 transformedCenter = transforms[transformIndex] * vec4(center, 1.0);\r\n                            distance = transformedCenter.z;\r\n                        }\r\n                    `;\r\n                } else {\r\n                    vsSource += `\r\n                        uniform vec3 modelViewProj;\r\n                        void main(void) {\r\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\r\n                        }\r\n                    `;\r\n                }\r\n            }\r\n\r\n            const fsSource =\r\n            `#version 300 es\r\n                precision lowp float;\r\n                out vec4 fragColor;\r\n                void main(){}\r\n            `;\r\n\r\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\r\n\r\n            if (rebuildGPUObjects) {\r\n                this.distancesTransformFeedback.vao = gl.createVertexArray();\r\n            }\r\n\r\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n\r\n            if (rebuildGPUObjects) {\r\n                const program = gl.createProgram();\r\n                const vertexShader = createShader(gl, gl.VERTEX_SHADER, vsSource);\r\n                const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fsSource);\r\n                if (!vertexShader || !fragmentShader) {\r\n                    throw new Error('Could not compile shaders for distances computation on GPU.');\r\n                }\r\n                gl.attachShader(program, vertexShader);\r\n                gl.attachShader(program, fragmentShader);\r\n                gl.transformFeedbackVaryings(program, ['distance'], gl.SEPARATE_ATTRIBS);\r\n                gl.linkProgram(program);\r\n\r\n                const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\r\n                if (!linked) {\r\n                    const error = gl.getProgramInfoLog(program);\r\n                    console.error('Fatal error: Failed to link program: ' + error);\r\n                    gl.deleteProgram(program);\r\n                    gl.deleteShader(fragmentShader);\r\n                    gl.deleteShader(vertexShader);\r\n                    throw new Error('Could not link shaders for distances computation on GPU.');\r\n                }\r\n\r\n                this.distancesTransformFeedback.program = program;\r\n                this.distancesTransformFeedback.vertexShader = vertexShader;\r\n                this.distancesTransformFeedback.vertexShader = fragmentShader;\r\n            }\r\n\r\n            gl.useProgram(this.distancesTransformFeedback.program);\r\n\r\n            this.distancesTransformFeedback.centersLoc =\r\n                gl.getAttribLocation(this.distancesTransformFeedback.program, 'center');\r\n            if (this.dynamicMode) {\r\n                this.distancesTransformFeedback.transformIndexesLoc =\r\n                    gl.getAttribLocation(this.distancesTransformFeedback.program, 'transformIndex');\r\n                for (let i = 0; i < this.scenes.length; i++) {\r\n                    this.distancesTransformFeedback.transformsLocs[i] =\r\n                        gl.getUniformLocation(this.distancesTransformFeedback.program, `transforms[${i}]`);\r\n                }\r\n            } else {\r\n                this.distancesTransformFeedback.modelViewProjLoc =\r\n                    gl.getUniformLocation(this.distancesTransformFeedback.program, 'modelViewProj');\r\n            }\r\n\r\n            if (rebuildGPUObjects || rebuildBuffers) {\r\n                this.distancesTransformFeedback.centersBuffer = gl.createBuffer();\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\r\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\r\n                if (this.integerBasedDistancesComputation) {\r\n                    gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 4, gl.INT, 0, 0);\r\n                } else {\r\n                    gl.vertexAttribPointer(this.distancesTransformFeedback.centersLoc, 3, gl.FLOAT, false, 0, 0);\r\n                }\r\n\r\n                if (this.dynamicMode) {\r\n                    this.distancesTransformFeedback.transformIndexesBuffer = gl.createBuffer();\r\n                    gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.transformIndexesBuffer);\r\n                    gl.enableVertexAttribArray(this.distancesTransformFeedback.transformIndexesLoc);\r\n                    gl.vertexAttribIPointer(this.distancesTransformFeedback.transformIndexesLoc, 1, gl.UNSIGNED_INT, 0, 0);\r\n                }\r\n            }\r\n\r\n            if (rebuildGPUObjects || rebuildBuffers) {\r\n                this.distancesTransformFeedback.outDistancesBuffer = gl.createBuffer();\r\n            }\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\r\n            gl.bufferData(gl.ARRAY_BUFFER, splatCount * 4, gl.STATIC_READ);\r\n\r\n            if (rebuildGPUObjects) {\r\n                this.distancesTransformFeedback.id = gl.createTransformFeedback();\r\n            }\r\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\r\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\r\n\r\n            if (currentProgram) gl.useProgram(currentProgram);\r\n            if (currentVao) gl.bindVertexArray(currentVao);\r\n\r\n            currentRenderer = this.renderer;\r\n            currentSplatCount = splatCount;\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Refresh GPU buffers used for computing splat distances with centers data from the scenes for this mesh.\r\n     */\r\n    updateGPUCentersBufferForDistancesComputation() {\r\n\r\n        if (!this.renderer) return;\r\n\r\n        const gl = this.renderer.getContext();\r\n\r\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\r\n        if (this.integerBasedDistancesComputation) {\r\n            const intCenters = this.getIntegerCenters(true);\r\n            gl.bufferData(gl.ARRAY_BUFFER, intCenters, gl.STATIC_DRAW);\r\n        } else {\r\n            const floatCenters = this.getFloatCenters(false);\r\n            gl.bufferData(gl.ARRAY_BUFFER, floatCenters, gl.STATIC_DRAW);\r\n        }\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        if (currentVao) gl.bindVertexArray(currentVao);\r\n    }\r\n\r\n    /**\r\n     * Refresh GPU buffers used for pre-computing splat distances with centers data from the scenes for this mesh.\r\n     */\r\n    updateGPUTransformIndexesBufferForDistancesComputation() {\r\n\r\n        if (!this.renderer || !this.dynamicMode) return;\r\n\r\n        const gl = this.renderer.getContext();\r\n\r\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.transformIndexesBuffer);\r\n        gl.bufferData(gl.ARRAY_BUFFER, this.getTransformIndexes(), gl.STATIC_DRAW);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        if (currentVao) gl.bindVertexArray(currentVao);\r\n    }\r\n\r\n    /**\r\n     * Get a typed array containing a mapping from global splat indexes to their scene index.\r\n     * @return {Uint32Array}\r\n     */\r\n    getTransformIndexes() {\r\n        const transformIndexes = new Uint32Array(this.globalSplatIndexToSceneIndexMap.length);\r\n        transformIndexes.set(this.globalSplatIndexToSceneIndexMap);\r\n        return transformIndexes;\r\n    }\r\n\r\n    /**\r\n     * Fill 'array' with the transforms for each scene in this splat mesh.\r\n     * @param {Array} array Empty array to be filled with scene transforms. If not empty, contents will be overwritten.\r\n     */\r\n    fillTransformsArray = function() {\r\n\r\n        const tempArray = [];\r\n\r\n        return function(array) {\r\n            if (tempArray.length !== array.length) tempArray.length = array.length;\r\n            for (let i = 0; i < this.scenes.length; i++) {\r\n                const sceneTransform = this.getScene(i).transform;\r\n                const sceneTransformElements = sceneTransform.elements;\r\n                for (let j = 0; j < 16; j++) {\r\n                    tempArray[i * 16 + j] = sceneTransformElements[j];\r\n                }\r\n            }\r\n            array.set(tempArray);\r\n        };\r\n\r\n    }();\r\n\r\n    computeDistancesOnGPU = function() {\r\n\r\n        const tempMatrix = new THREE.Matrix4();\r\n\r\n        return function(modelViewProjMatrix, outComputedDistances) {\r\n            if (!this.renderer) return;\r\n\r\n            // console.time(\"gpu_compute_distances\");\r\n            const gl = this.renderer.getContext();\r\n\r\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\r\n\r\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n            gl.useProgram(this.distancesTransformFeedback.program);\r\n\r\n            gl.enable(gl.RASTERIZER_DISCARD);\r\n\r\n            if (this.dynamicMode) {\r\n                for (let i = 0; i < this.scenes.length; i++) {\r\n                    tempMatrix.copy(this.getScene(i).transform);\r\n                    tempMatrix.premultiply(modelViewProjMatrix);\r\n\r\n                    if (this.integerBasedDistancesComputation) {\r\n                        const iTempMatrix = SplatMesh.getIntegerMatrixArray(tempMatrix);\r\n                        const iTransform = [iTempMatrix[2], iTempMatrix[6], iTempMatrix[10], iTempMatrix[14]];\r\n                        gl.uniform4i(this.distancesTransformFeedback.transformsLocs[i], iTransform[0], iTransform[1],\r\n                                                                                        iTransform[2], iTransform[3]);\r\n                    } else {\r\n                        gl.uniformMatrix4fv(this.distancesTransformFeedback.transformsLocs[i], false, tempMatrix.elements);\r\n                    }\r\n                }\r\n            } else {\r\n                if (this.integerBasedDistancesComputation) {\r\n                    const iViewProjMatrix = SplatMesh.getIntegerMatrixArray(modelViewProjMatrix);\r\n                    const iViewProj = [iViewProjMatrix[2], iViewProjMatrix[6], iViewProjMatrix[10]];\r\n                    gl.uniform3i(this.distancesTransformFeedback.modelViewProjLoc, iViewProj[0], iViewProj[1], iViewProj[2]);\r\n                } else {\r\n                    const viewProj = [modelViewProjMatrix.elements[2], modelViewProjMatrix.elements[6], modelViewProjMatrix.elements[10]];\r\n                    gl.uniform3f(this.distancesTransformFeedback.modelViewProjLoc, viewProj[0], viewProj[1], viewProj[2]);\r\n                }\r\n            }\r\n\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\r\n            gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\r\n            if (this.integerBasedDistancesComputation) {\r\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 4, gl.INT, 0, 0);\r\n            } else {\r\n                gl.vertexAttribPointer(this.distancesTransformFeedback.centersLoc, 3, gl.FLOAT, false, 0, 0);\r\n            }\r\n\r\n            if (this.dynamicMode) {\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.transformIndexesBuffer);\r\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.transformIndexesLoc);\r\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.transformIndexesLoc, 1, gl.UNSIGNED_INT, 0, 0);\r\n            }\r\n\r\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\r\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\r\n\r\n            gl.beginTransformFeedback(gl.POINTS);\r\n            gl.drawArrays(gl.POINTS, 0, this.getSplatCount());\r\n            gl.endTransformFeedback();\r\n\r\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);\r\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\r\n\r\n            gl.disable(gl.RASTERIZER_DISCARD);\r\n\r\n            const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\r\n            gl.flush();\r\n\r\n            const promise = new Promise((resolve) => {\r\n                const checkSync = () => {\r\n                    const timeout = 0;\r\n                    const bitflags = 0;\r\n                    const status = gl.clientWaitSync(sync, bitflags, timeout);\r\n                    switch (status) {\r\n                        case gl.TIMEOUT_EXPIRED:\r\n                            return setTimeout(checkSync);\r\n                        case gl.WAIT_FAILED:\r\n                            throw new Error('should never get here');\r\n                        default:\r\n                            gl.deleteSync(sync);\r\n                            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\r\n                            gl.bindVertexArray(this.distancesTransformFeedback.vao);\r\n                            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\r\n                            gl.getBufferSubData(gl.ARRAY_BUFFER, 0, outComputedDistances);\r\n                            gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n                            if (currentVao) gl.bindVertexArray(currentVao);\r\n\r\n                            // console.timeEnd(\"gpu_compute_distances\");\r\n\r\n                            resolve();\r\n                    }\r\n                };\r\n                setTimeout(checkSync);\r\n            });\r\n\r\n            if (currentProgram) gl.useProgram(currentProgram);\r\n            if (currentVao) gl.bindVertexArray(currentVao);\r\n\r\n            return promise;\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Given a global splat index, return corresponding local data (splat buffer, index of splat in that splat\r\n     * buffer, and the corresponding transform)\r\n     * @param {number} globalIndex Global splat index\r\n     * @param {object} paramsObj Object in which to store local data\r\n     * @param {boolean} returnSceneTransform By default, the transform of the scene to which the splat at 'globalIndex' belongs will be\r\n     *                                       returned via the 'sceneTransform' property of 'paramsObj' only if the splat mesh is static.\r\n     *                                       If 'returnSceneTransform' is true, the 'sceneTransform' property will always contain the scene\r\n     *                                       transform, and if 'returnSceneTransform' is false, the 'sceneTransform' property will always\r\n     *                                       be null.\r\n     */\r\n    getLocalSplatParameters(globalIndex, paramsObj, returnSceneTransform) {\r\n        if (returnSceneTransform === undefined || returnSceneTransform === null) {\r\n            returnSceneTransform = this.dynamicMode ? false : true;\r\n        }\r\n        paramsObj.splatBuffer = this.getSplatBufferForSplat(globalIndex);\r\n        paramsObj.localIndex = this.getSplatLocalIndex(globalIndex);\r\n        paramsObj.sceneTransform = returnSceneTransform ? this.getSceneTransformForSplat(globalIndex) : null;\r\n    }\r\n\r\n    /**\r\n     * Fill arrays with splat data and apply transforms if appropriate. Each array is optional.\r\n     * @param {Float32Array} covariances Target storage for splat covariances\r\n     * @param {Float32Array} centers Target storage for splat centers\r\n     * @param {Uint8Array} colors Target storage for splat colors\r\n     * @param {boolean} applySceneTransform By default, scene transforms are applied to relevant splat data only if the splat mesh is\r\n     *                                      static. If 'applySceneTransform' is true, scene transforms will always be applied and if\r\n     *                                      it is false, they will never be applied. If undefined, the default behavior will apply.\r\n     */\r\n    fillSplatDataArrays(covariances, centers, colors, applySceneTransform) {\r\n        let offset = 0;\r\n        for (let i = 0; i < this.scenes.length; i++) {\r\n            if (applySceneTransform === undefined || applySceneTransform === null) {\r\n                applySceneTransform = this.dynamicMode ? false : true;\r\n            }\r\n            const scene = this.getScene(i);\r\n            const splatBuffer = scene.splatBuffer;\r\n            const sceneTransform = applySceneTransform ? scene.transform : null;\r\n            if (covariances) splatBuffer.fillSplatCovarianceArray(covariances, offset, sceneTransform);\r\n            if (centers) splatBuffer.fillSplatCenterArray(centers, offset, sceneTransform);\r\n            if (colors) splatBuffer.fillSplatColorArray(colors, offset, sceneTransform);\r\n            offset += splatBuffer.getSplatCount();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert splat centers, which are floating point values, to an array of integers and multiply\r\n     * each by 1000. Centers will get transformed as appropriate before conversion to integer.\r\n     * @param {number} padFour Enforce alignement of 4 by inserting a 1000 after every 3 values\r\n     * @return {Int32Array}\r\n     */\r\n    getIntegerCenters(padFour) {\r\n        const splatCount = this.getSplatCount();\r\n        const floatCenters = new Float32Array(splatCount * 3);\r\n        this.fillSplatDataArrays(null, floatCenters, null);\r\n        let intCenters;\r\n        let componentCount = padFour ? 4 : 3;\r\n        intCenters = new Int32Array(splatCount * componentCount);\r\n        for (let i = 0; i < splatCount; i++) {\r\n            for (let t = 0; t < 3; t++) {\r\n                intCenters[i * componentCount + t] = Math.round(floatCenters[i * 3 + t] * 1000.0);\r\n            }\r\n            if (padFour) intCenters[i * componentCount + 3] = 1000;\r\n        }\r\n        return intCenters;\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns an array of splat centers, transformed as appropriate, optionally padded.\r\n     * @param {number} padFour Enforce alignement of 4 by inserting a 1 after every 3 values\r\n     * @return {Float32Array}\r\n     */\r\n    getFloatCenters(padFour) {\r\n        const splatCount = this.getSplatCount();\r\n        const floatCenters = new Float32Array(splatCount * 3);\r\n        this.fillSplatDataArrays(null, floatCenters, null);\r\n        if (!padFour) return floatCenters;\r\n        let paddedFloatCenters = new Float32Array(splatCount * 4);\r\n        for (let i = 0; i < splatCount; i++) {\r\n            for (let t = 0; t < 3; t++) {\r\n                paddedFloatCenters[i * 4 + t] = floatCenters[i * 3 + t];\r\n            }\r\n            paddedFloatCenters[i * 4 + 3] = 1;\r\n        }\r\n        return paddedFloatCenters;\r\n    }\r\n\r\n    /**\r\n     * Get the center for a splat, transformed as appropriate.\r\n     * @param {number} globalIndex Global index of splat\r\n     * @param {THREE.Vector3} outCenter THREE.Vector3 instance in which to store splat center\r\n     * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\r\n     *                                      'globalIndex' belongs will be applied to the splat center. If 'applySceneTransform' is true,\r\n     *                                      the scene transform will always be applied and if 'applySceneTransform' is false, the\r\n     *                                      scene transform will never be applied. If undefined, the default behavior will apply.\r\n     */\r\n    getSplatCenter = function() {\r\n\r\n        const paramsObj = {};\r\n\r\n        return function(globalIndex, outCenter, applySceneTransform) {\r\n            this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\r\n            paramsObj.splatBuffer.getSplatCenter(paramsObj.localIndex, outCenter, paramsObj.sceneTransform);\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Get the scale and rotation for a splat, transformed as appropriate.\r\n     * @param {number} globalIndex Global index of splat\r\n     * @param {THREE.Vector3} outScale THREE.Vector3 instance in which to store splat scale\r\n     * @param {THREE.Quaternion} outRotation THREE.Quaternion instance in which to store splat rotation\r\n     * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\r\n     *                                      'globalIndex' belongs will be applied to the splat scale and rotation. If\r\n     *                                      'applySceneTransform' is true, the scene transform will always be applied and if\r\n     *                                      'applySceneTransform' is false, the scene transform will never be applied. If undefined,\r\n     *                                      the default behavior will apply.\r\n     */\r\n    getSplatScaleAndRotation = function() {\r\n\r\n        const paramsObj = {};\r\n\r\n        return function(globalIndex, outScale, outRotation, applySceneTransform) {\r\n            this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\r\n            paramsObj.splatBuffer.getSplatScaleAndRotation(paramsObj.localIndex, outScale, outRotation, paramsObj.sceneTransform);\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Get the color for a splat.\r\n     * @param {number} globalIndex Global index of splat\r\n     * @param {THREE.Vector4} outColor THREE.Vector4 instance in which to store splat color\r\n     */\r\n    getSplatColor = function() {\r\n\r\n        const paramsObj = {};\r\n\r\n        return function(globalIndex, outColor) {\r\n            this.getLocalSplatParameters(globalIndex, paramsObj);\r\n            paramsObj.splatBuffer.getSplatColor(paramsObj.localIndex, outColor, paramsObj.sceneTransform);\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Store the transform of the scene at 'sceneIndex' in 'outTransform'.\r\n     * @param {number} sceneIndex Index of the desired scene\r\n     * @param {THREE.Matrix4} outTransform Instance of THREE.Matrix4 in which to store the scene's transform\r\n     */\r\n    getSceneTransform(sceneIndex, outTransform) {\r\n        const scene = this.getScene(sceneIndex);\r\n        scene.updateTransform();\r\n        outTransform.copy(scene.transform);\r\n    }\r\n\r\n    /**\r\n     * Get the scene at 'sceneIndex'.\r\n     * @param {number} sceneIndex Index of the desired scene\r\n     * @return {SplatScene}\r\n     */\r\n    getScene(sceneIndex) {\r\n        if (sceneIndex < 0 || sceneIndex >= this.scenes.length) {\r\n            throw new Error('SplatMesh::getScene() -> Invalid scene index.');\r\n        }\r\n        return this.scenes[sceneIndex];\r\n    }\r\n\r\n    getSplatBufferForSplat(globalIndex) {\r\n        return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex]).splatBuffer;\r\n    }\r\n\r\n    getSceneIndexForSplat(globalIndex) {\r\n        return this.globalSplatIndexToSceneIndexMap[globalIndex];\r\n    }\r\n\r\n    getSceneTransformForSplat(globalIndex) {\r\n        return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex]).transform;\r\n    }\r\n\r\n    getSplatLocalIndex(globalIndex) {\r\n        return this.globalSplatIndexToLocalSplatIndexMap[globalIndex];\r\n    }\r\n\r\n    static getIntegerMatrixArray(matrix) {\r\n        const matrixElements = matrix.elements;\r\n        const intMatrixArray = [];\r\n        for (let i = 0; i < 16; i++) {\r\n            intMatrixArray[i] = Math.round(matrixElements[i] * 1000.0);\r\n        }\r\n        return intMatrixArray;\r\n    }\r\n}\r\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\f\u0006dylink\u0000\u0000\u0000\u0000\u0000\u0001\u001b\u0003`\u0000\u0000`\u0010\u0000`\u0000\u0001\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0004\u0003\u0000\u0001\u0002\u00079\u0003\u0011__wasm_call_ctors\u0000\u0000\u000bsortIndexes\u0000\u0001\u0013emscripten_tls_init\u0000\u0002\n�\u0010\u0003\u0003\u0000\u0001\u000b�\u0010\u0005\u0001|\u0003{\u0002\u0003}\u0002~ \u000b \nk!\f\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\u000eA����x!\r \u000b \fM\r\u0002 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00056\u0002\u0000 \u0005 \u000e \u0005 \u000eH\u001b!\u000e \u0005 \r \u0005 \rJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0002\u000b \u000f\u0004@A����\u0007!\u000eA����x!\r \u000b \fM\r\u0002A!\u000f \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0014j(\u0002\u0000\"\u0015A\u0002tj(\u0002\u0000\"\nG\u0004@\u0002~ \u0005�\t\u0002\b \b \nA\u0006tj\"\u000f�\t\u0002\u0000 \u000f*\u0002\u0010� \u0001 \u000f*\u0002 � \u0002 \u000f*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000f�\t\u0002\u0004 \u000f*\u0002\u0014� \u0001 \u000f*\u0002$� \u0002 \u000f*\u00024� \u0003��\u0001��\u0001 \u0005�\t\u0002( \u000f�\t\u0002\b \u000f*\u0002\u0018� \u0001 \u000f*\u0002(� \u0002 \u000f*\u00028� \u0003��\u0001��\u0001 \u0005�\t\u00028 \u000f�\t\u0002\f \u000f*\u0002\u001c� \u0001 \u000f*\u0002,� \u0002 \u000f*\u0002<� \u0003��\u0001��\u0001\"\u0011�\u001f\u0002��\u0014 \u0011�\u001f\u0003��\"\u0001�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@\"\u0012��\u0001\"\u0013�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b!\u0019\u0002~ \u0013�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b�\u0012!\u0013\u0002~ \u0011�\u001f\u0000��\u0014 \u0011�\u001f\u0001��\"\u0001 \u0012��\u0001\"\u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b!\u001a \u0013 \u0019�\u001e\u0001!\u0012\u0002~ \u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b�\u0012 \u001a�\u001e\u0001 \u0012�\r\u0000\u0001\u0002\u0003\b\t\n\u000b\u0010\u0011\u0012\u0013\u0018\u0019\u001a\u001b!\u0012 \n!\u000f\u000b \u0003 \u0014j \u0001 \u0015A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j \u0011�\u001b\u0003j\"\n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0002\u000b\u0002 \u0005*\u0002\u0018�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\n\u0002 \u0005*\u0002\b�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0005A����\u0007!\u000eA����x!\r \u000b \fM\r\u0001 \u0002�\u0011 \n�\u001c\u0001 \u0005�\u001c\u0002!\u0012 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0002j \u0001 \u0000 \u0002j(\u0002\u0000A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j\"\u00026\u0002\u0000 \u0002 \u000e \u0002 \u000eH\u001b!\u000e \u0002 \r \u0002 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0001\u000b \r\u0004@A����\u0007!\u000eA����x!\r \u000b \fM\r\u0001 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j\u0002 \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0001\u000b\u0002@ \u000fE\u0004@ \u000b \fK\r\u0001A����x!\rA����\u0007!\u000e\f\u0002\u000bA����\u0007!\u000eA����x!\r \u000b \fM\r\u0001A!\u000f \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0014j(\u0002\u0000A\u0002t\"\u0015j(\u0002\u0000\"\nG\u0004@ \u0005�\t\u0002\b \b \nA\u0006tj\"\u000f�\t\u0002\u0000 \u000f*\u0002\u0010� \u0001 \u000f*\u0002 � \u0002 \u000f*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000f�\t\u0002\u0004 \u000f*\u0002\u0014� \u0001 \u000f*\u0002$� \u0002 \u000f*\u00024� \u0003��\u0001��\u0001 \u0005�\t\u0002( \u000f�\t\u0002\b \u000f*\u0002\u0018� \u0001 \u000f*\u0002(� \u0002 \u000f*\u00028� \u0003��\u0001��\u0001 \u0005�\t\u00028 \u000f�\t\u0002\f \u000f*\u0002\u001c� \u0001 \u000f*\u0002,� \u0002 \u000f*\u0002<� \u0003��\u0001��\u0001!\u0011 \n!\u000f\u000b \u0003 \u0014j\u0002 \u0011 \u0001 \u0015A\u0002t\"\nj)\u0002\u0000�\u0012��\u0001\"\u0012�\u001f\u0000 \u0012�\u001f\u0001� \u0011 \u0011�\r\b\t\n\u000b\f\r\u000e\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0001 \nA\brj)\u0002\u0000�\u0012��\u0001\"\u0012�\u001f\u0000� \u0012�\u001f\u0001��D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000b \u0005*\u0002(!\u0016 \u0005*\u0002\u0018!\u0017 \u0005*\u0002\b!\u0018A����\u0007!\u000eA����x!\r \f!\u0005\u0003@\u0002 \u0018 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\u0000� \u0017 \u0002*\u0002\u0004�� \u0016 \u0002*\u0002\b���D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\n \u0003 \u0007j \n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \u000e���!\u0016 \f!\r\u0003@\u0002 \u0016 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \u000ek��\"\u0017�C\u0000\u0000\u0000O]\u0004@ \u0017�\f\u0001\u000bA����x\u000b!\n \u0001 \n6\u0002\u0000 \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\u000e\u0003@ \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \u000eA\u0001j\"\u000e \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\u000e\u0003@ \u0006 \u000eA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \u000eA\u0001J!\u0002 \u0001!\u000e \u0002\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\u000e\u0003@ \u0006 \u000b \u0004 \u0003 \u000eA\u0001k\"\u000eA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \f \u000eH\r\u0000\u000b\u000b\u000b\u0004\u0000A\u0000\u000b","import SorterWasm from './sorter.wasm';\r\nimport { Constants } from '../Constants.js';\r\n\r\nfunction sortWorker(self) {\r\n\r\n    let wasmInstance;\r\n    let wasmMemory;\r\n    let useSharedMemory;\r\n    let integerBasedSort;\r\n    let dynamicMode;\r\n    let splatCount;\r\n    let indexesToSortOffset;\r\n    let sortedIndexesOffset;\r\n    let transformIndexesOffset;\r\n    let transformsOffset;\r\n    let precomputedDistancesOffset;\r\n    let mappedDistancesOffset;\r\n    let frequenciesOffset;\r\n    let centersOffset;\r\n    let modelViewProjOffset;\r\n    let countsZero;\r\n\r\n    let Constants;\r\n\r\n    function sort(splatSortCount, splatRenderCount, modelViewProj,\r\n                  usePrecomputedDistances, copyIndexesToSort, copyPrecomputedDistances, copyTransforms) {\r\n        const sortStartTime = performance.now();\r\n\r\n        if (!useSharedMemory) {\r\n            const indexesToSort = new Uint32Array(wasmMemory, indexesToSortOffset, copyIndexesToSort.byteLength / Constants.BytesPerInt);\r\n            indexesToSort.set(copyIndexesToSort);\r\n            const transforms = new Float32Array(wasmMemory, transformsOffset, copyTransforms.byteLength / Constants.BytesPerFloat);\r\n            transforms.set(copyTransforms);\r\n            if (usePrecomputedDistances) {\r\n                let precomputedDistances;\r\n                if (integerBasedSort) {\r\n                    precomputedDistances = new Int32Array(wasmMemory, precomputedDistancesOffset,\r\n                                                          copyPrecomputedDistances.byteLength / Constants.BytesPerInt);\r\n                } else {\r\n                    precomputedDistances = new Float32Array(wasmMemory, precomputedDistancesOffset,\r\n                                                            copyPrecomputedDistances.byteLength / Constants.BytesPerFloat);\r\n                }\r\n                precomputedDistances.set(copyPrecomputedDistances);\r\n            }\r\n        }\r\n\r\n        if (!countsZero) countsZero = new Uint32Array(Constants.DepthMapRange);\r\n        new Float32Array(wasmMemory, modelViewProjOffset, 16).set(modelViewProj);\r\n        new Uint32Array(wasmMemory, frequenciesOffset, Constants.DepthMapRange).set(countsZero);\r\n        wasmInstance.exports.sortIndexes(indexesToSortOffset, centersOffset, precomputedDistancesOffset,\r\n                                         mappedDistancesOffset, frequenciesOffset, modelViewProjOffset,\r\n                                         sortedIndexesOffset, transformIndexesOffset, transformsOffset, Constants.DepthMapRange,\r\n                                         splatSortCount, splatRenderCount, splatCount, usePrecomputedDistances, integerBasedSort,\r\n                                         dynamicMode);\r\n\r\n        const sortMessage = {\r\n            'sortDone': true,\r\n            'splatSortCount': splatSortCount,\r\n            'splatRenderCount': splatRenderCount,\r\n            'sortTime': 0\r\n        };\r\n        const transferBuffers = [];\r\n        if (!useSharedMemory) {\r\n            const sortedIndexes = new Uint32Array(wasmMemory, sortedIndexesOffset, splatRenderCount);\r\n            const sortedIndexesOut = new Uint32Array(splatRenderCount);\r\n            sortedIndexesOut.set(sortedIndexes);\r\n            sortMessage.sortedIndexes = sortedIndexesOut.buffer;\r\n            transferBuffers.push(sortedIndexesOut.buffer);\r\n        }\r\n        const sortEndTime = performance.now();\r\n\r\n        sortMessage.sortTime = sortEndTime - sortStartTime;\r\n\r\n        self.postMessage(sortMessage, transferBuffers);\r\n    }\r\n\r\n    self.onmessage = (e) => {\r\n        if (e.data.centers) {\r\n            centers = e.data.centers;\r\n            transformIndexes = e.data.transformIndexes;\r\n            if (integerBasedSort) {\r\n                new Int32Array(wasmMemory, centersOffset, splatCount * 4).set(new Int32Array(centers));\r\n            } else {\r\n                new Float32Array(wasmMemory, centersOffset, splatCount * 4).set(new Float32Array(centers));\r\n            }\r\n            if (dynamicMode) {\r\n                new Uint32Array(wasmMemory, transformIndexesOffset, splatCount).set(new Uint32Array(transformIndexes));\r\n            }\r\n            self.postMessage({\r\n                'sortSetupComplete': true,\r\n            });\r\n        } else if (e.data.sort) {\r\n            const renderCount = e.data.sort.splatRenderCount || 0;\r\n            const sortCount = e.data.sort.splatSortCount || 0;\r\n            const usePrecomputedDistances = e.data.sort.usePrecomputedDistances;\r\n\r\n            let copyIndexesToSort;\r\n            let copyPrecomputedDistances;\r\n            let copyTransforms;\r\n            if (!useSharedMemory) {\r\n                copyIndexesToSort = e.data.sort.indexesToSort;\r\n                copyTransforms = e.data.sort.transforms;\r\n                if (usePrecomputedDistances) copyPrecomputedDistances = e.data.sort.precomputedDistances;\r\n            }\r\n            sort(sortCount, renderCount, e.data.sort.modelViewProj, usePrecomputedDistances,\r\n                 copyIndexesToSort, copyPrecomputedDistances, copyTransforms);\r\n        } else if (e.data.init) {\r\n            // Yep, this is super hacky and gross :(\r\n            Constants = e.data.init.Constants;\r\n\r\n            splatCount = e.data.init.splatCount;\r\n            useSharedMemory = e.data.init.useSharedMemory;\r\n            integerBasedSort = e.data.init.integerBasedSort;\r\n            dynamicMode = e.data.init.dynamicMode;\r\n\r\n            const CENTERS_BYTES_PER_ENTRY = integerBasedSort ? (Constants.BytesPerInt * 4) : (Constants.BytesPerFloat * 4);\r\n\r\n            const sorterWasmBytes = new Uint8Array(e.data.init.sorterWasmBytes);\r\n\r\n            const matrixSize = 16 * Constants.BytesPerFloat;\r\n            const memoryRequiredForIndexesToSort = splatCount * Constants.BytesPerInt;\r\n            const memoryRequiredForCenters = splatCount * CENTERS_BYTES_PER_ENTRY;\r\n            const memoryRequiredForModelViewProjectionMatrix = matrixSize;\r\n            const memoryRequiredForPrecomputedDistances = integerBasedSort ?\r\n                                                          (splatCount * Constants.BytesPerInt) : (splatCount * Constants.BytesPerFloat);\r\n            const memoryRequiredForMappedDistances = splatCount * Constants.BytesPerInt;\r\n            const memoryRequiredForSortedIndexes = splatCount * Constants.BytesPerInt;\r\n            const memoryRequiredForIntermediateSortBuffers = Constants.DepthMapRange * Constants.BytesPerInt * 2;\r\n            const memoryRequiredforTransformIndexes = dynamicMode ? (splatCount * Constants.BytesPerInt) : 0;\r\n            const memoryRequiredforTransforms = dynamicMode ? (Constants.MaxScenes * matrixSize) : 0;\r\n            const extraMemory = Constants.MemoryPageSize * 32;\r\n\r\n            const totalRequiredMemory = memoryRequiredForIndexesToSort +\r\n                                        memoryRequiredForCenters +\r\n                                        memoryRequiredForModelViewProjectionMatrix +\r\n                                        memoryRequiredForPrecomputedDistances +\r\n                                        memoryRequiredForMappedDistances +\r\n                                        memoryRequiredForIntermediateSortBuffers +\r\n                                        memoryRequiredForSortedIndexes +\r\n                                        memoryRequiredforTransformIndexes +\r\n                                        memoryRequiredforTransforms +\r\n                                        extraMemory;\r\n            const totalPagesRequired = Math.floor(totalRequiredMemory / Constants.MemoryPageSize ) + 1;\r\n            const sorterWasmImport = {\r\n                module: {},\r\n                env: {\r\n                    memory: new WebAssembly.Memory({\r\n                        initial: totalPagesRequired * 2,\r\n                        maximum: totalPagesRequired * 4,\r\n                        shared: true,\r\n                    }),\r\n                }\r\n            };\r\n            WebAssembly.compile(sorterWasmBytes)\r\n            .then((wasmModule) => {\r\n                return WebAssembly.instantiate(wasmModule, sorterWasmImport);\r\n            })\r\n            .then((instance) => {\r\n                wasmInstance = instance;\r\n                indexesToSortOffset = 0;\r\n                centersOffset = indexesToSortOffset + memoryRequiredForIndexesToSort;\r\n                modelViewProjOffset = centersOffset + memoryRequiredForCenters;\r\n                precomputedDistancesOffset = modelViewProjOffset + memoryRequiredForModelViewProjectionMatrix;\r\n                mappedDistancesOffset = precomputedDistancesOffset + memoryRequiredForPrecomputedDistances;\r\n                frequenciesOffset = mappedDistancesOffset + memoryRequiredForMappedDistances;\r\n                sortedIndexesOffset = frequenciesOffset + memoryRequiredForIntermediateSortBuffers;\r\n                transformIndexesOffset = sortedIndexesOffset + memoryRequiredForSortedIndexes;\r\n                transformsOffset = transformIndexesOffset + memoryRequiredforTransformIndexes;\r\n                wasmMemory = sorterWasmImport.env.memory.buffer;\r\n                if (useSharedMemory) {\r\n                    self.postMessage({\r\n                        'sortSetupPhase1Complete': true,\r\n                        'indexesToSortBuffer': wasmMemory,\r\n                        'indexesToSortOffset': indexesToSortOffset,\r\n                        'sortedIndexesBuffer': wasmMemory,\r\n                        'sortedIndexesOffset': sortedIndexesOffset,\r\n                        'precomputedDistancesBuffer': wasmMemory,\r\n                        'precomputedDistancesOffset': precomputedDistancesOffset,\r\n                        'transformsBuffer': wasmMemory,\r\n                        'transformsOffset': transformsOffset\r\n                    });\r\n                } else {\r\n                    self.postMessage({\r\n                        'sortSetupPhase1Complete': true\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    };\r\n}\r\n\r\nexport function createSortWorker(splatCount, useSharedMemory, integerBasedSort, dynamicMode) {\r\n    const worker = new Worker(\r\n        URL.createObjectURL(\r\n            new Blob(['(', sortWorker.toString(), ')(self)'], {\r\n                type: 'application/javascript',\r\n            }),\r\n        ),\r\n    );\r\n\r\n    const sorterWasmBinaryString = atob(SorterWasm);\r\n    const sorterWasmBytes = new Uint8Array(sorterWasmBinaryString.length);\r\n    for (let i = 0; i < sorterWasmBinaryString.length; i++) {\r\n        sorterWasmBytes[i] = sorterWasmBinaryString.charCodeAt(i);\r\n    }\r\n\r\n    worker.postMessage({\r\n        'init': {\r\n            'sorterWasmBytes': sorterWasmBytes.buffer,\r\n            'splatCount': splatCount,\r\n            'useSharedMemory': useSharedMemory,\r\n            'integerBasedSort': integerBasedSort,\r\n            'dynamicMode': dynamicMode,\r\n            // Super hacky\r\n            'Constants': {\r\n                'BytesPerFloat': Constants.BytesPerFloat,\r\n                'BytesPerInt': Constants.BytesPerInt,\r\n                'DepthMapRange': Constants.DepthMapRange,\r\n                'MemoryPageSize': Constants.MemoryPageSize,\r\n                'MaxScenes': Constants.MaxScenes\r\n            }\r\n        }\r\n    });\r\n    return worker;\r\n}\r\n","export const WebXRMode = {\r\n    None: 0,\r\n    VR: 1,\r\n    AR: 2\r\n};\r\n","/*\r\nCopyright © 2010-2024 three.js authors & Mark Kellogg\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n*/\r\n\r\nexport class VRButton {\r\n\r\n    static createButton( renderer ) {\r\n\r\n        const button = document.createElement( 'button' );\r\n\r\n        function showEnterVR( /* device */ ) {\r\n\r\n            let currentSession = null;\r\n\r\n            async function onSessionStarted( session ) {\r\n\r\n                session.addEventListener( 'end', onSessionEnded );\r\n\r\n                await renderer.xr.setSession( session );\r\n                button.textContent = 'EXIT VR';\r\n\r\n                currentSession = session;\r\n\r\n            }\r\n\r\n            function onSessionEnded( /* event */ ) {\r\n\r\n                currentSession.removeEventListener( 'end', onSessionEnded );\r\n\r\n                button.textContent = 'ENTER VR';\r\n\r\n                currentSession = null;\r\n\r\n            }\r\n\r\n            //\r\n\r\n            button.style.display = '';\r\n\r\n            button.style.cursor = 'pointer';\r\n            button.style.left = 'calc(50% - 50px)';\r\n            button.style.width = '100px';\r\n\r\n            button.textContent = 'ENTER VR';\r\n\r\n            // WebXR's requestReferenceSpace only works if the corresponding feature\r\n            // was requested at session creation time. For simplicity, just ask for\r\n            // the interesting ones as optional features, but be aware that the\r\n            // requestReferenceSpace call will fail if it turns out to be unavailable.\r\n            // ('local' is always available for immersive sessions and doesn't need to\r\n            // be requested separately.)\r\n\r\n            const sessionInit = { optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking', 'layers'] };\r\n\r\n            button.onmouseenter = function() {\r\n\r\n                button.style.opacity = '1.0';\r\n\r\n            };\r\n\r\n            button.onmouseleave = function() {\r\n\r\n                button.style.opacity = '0.5';\r\n\r\n            };\r\n\r\n            button.onclick = function() {\r\n\r\n                if ( currentSession === null ) {\r\n\r\n                    navigator.xr.requestSession( 'immersive-vr', sessionInit ).then( onSessionStarted );\r\n\r\n                } else {\r\n\r\n                    currentSession.end();\r\n\r\n                    if ( navigator.xr.offerSession !== undefined ) {\r\n\r\n                        navigator.xr.offerSession( 'immersive-vr', sessionInit )\r\n                            .then( onSessionStarted )\r\n                            .catch( ( err ) => {\r\n\r\n                                console.warn( err );\r\n\r\n                            } );\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            };\r\n\r\n            if ( navigator.xr.offerSession !== undefined ) {\r\n\r\n                navigator.xr.offerSession( 'immersive-vr', sessionInit )\r\n                    .then( onSessionStarted )\r\n                    .catch( ( err ) => {\r\n\r\n                        console.warn( err );\r\n\r\n                    } );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function disableButton() {\r\n\r\n            button.style.display = '';\r\n\r\n            button.style.cursor = 'auto';\r\n            button.style.left = 'calc(50% - 75px)';\r\n            button.style.width = '150px';\r\n\r\n            button.onmouseenter = null;\r\n            button.onmouseleave = null;\r\n\r\n            button.onclick = null;\r\n\r\n        }\r\n\r\n        function showWebXRNotFound() {\r\n\r\n            disableButton();\r\n\r\n            button.textContent = 'VR NOT SUPPORTED';\r\n\r\n        }\r\n\r\n        function showVRNotAllowed( exception ) {\r\n\r\n            disableButton();\r\n\r\n            console.warn( 'Exception when trying to call xr.isSessionSupported', exception );\r\n\r\n            button.textContent = 'VR NOT ALLOWED';\r\n\r\n        }\r\n\r\n        function stylizeElement( element ) {\r\n\r\n            element.style.position = 'absolute';\r\n            element.style.bottom = '20px';\r\n            element.style.padding = '12px 6px';\r\n            element.style.border = '1px solid #fff';\r\n            element.style.borderRadius = '4px';\r\n            element.style.background = 'rgba(0,0,0,0.1)';\r\n            element.style.color = '#fff';\r\n            element.style.font = 'normal 13px sans-serif';\r\n            element.style.textAlign = 'center';\r\n            element.style.opacity = '0.5';\r\n            element.style.outline = 'none';\r\n            element.style.zIndex = '999';\r\n\r\n        }\r\n\r\n        if ( 'xr' in navigator ) {\r\n\r\n            button.id = 'VRButton';\r\n            button.style.display = 'none';\r\n\r\n            stylizeElement( button );\r\n\r\n            navigator.xr.isSessionSupported( 'immersive-vr' ).then( function( supported ) {\r\n\r\n                supported ? showEnterVR() : showWebXRNotFound();\r\n\r\n                if ( supported && VRButton.xrSessionIsGranted ) {\r\n\r\n                    button.click();\r\n\r\n                }\r\n\r\n            } ).catch( showVRNotAllowed );\r\n\r\n            return button;\r\n\r\n        } else {\r\n\r\n            const message = document.createElement( 'a' );\r\n\r\n            if ( window.isSecureContext === false ) {\r\n\r\n                message.href = document.location.href.replace( /^http:/, 'https:' );\r\n                message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\r\n\r\n            } else {\r\n\r\n                message.href = 'https://immersiveweb.dev/';\r\n                message.innerHTML = 'WEBXR NOT AVAILABLE';\r\n\r\n            }\r\n\r\n            message.style.left = 'calc(50% - 90px)';\r\n            message.style.width = '180px';\r\n            message.style.textDecoration = 'none';\r\n\r\n            stylizeElement( message );\r\n\r\n            return message;\r\n\r\n        }\r\n\r\n    }\r\n\r\n    static registerSessionGrantedListener() {\r\n\r\n        if ( typeof navigator !== 'undefined' && 'xr' in navigator ) {\r\n\r\n            // WebXRViewer (based on Firefox) has a bug where addEventListener\r\n            // throws a silent exception and aborts execution entirely.\r\n            if ( /WebXRViewer\\//i.test( navigator.userAgent ) ) return;\r\n\r\n            navigator.xr.addEventListener( 'sessiongranted', () => {\r\n\r\n                VRButton.xrSessionIsGranted = true;\r\n\r\n            } );\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nVRButton.xrSessionIsGranted = false;\r\nVRButton.registerSessionGrantedListener();\r\n","/*\r\nCopyright © 2010-2024 three.js authors & Mark Kellogg\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n*/\r\n\r\nexport class ARButton {\r\n\r\n    static createButton( renderer, sessionInit = {} ) {\r\n\r\n        const button = document.createElement( 'button' );\r\n\r\n        function showStartAR( /* device */ ) {\r\n\r\n            if ( sessionInit.domOverlay === undefined ) {\r\n\r\n                const overlay = document.createElement( 'div' );\r\n                overlay.style.display = 'none';\r\n                document.body.appendChild( overlay );\r\n\r\n                const svg = document.createElementNS( 'http://www.w3.org/2000/svg', 'svg' );\r\n                svg.setAttribute( 'width', 38 );\r\n                svg.setAttribute( 'height', 38 );\r\n                svg.style.position = 'absolute';\r\n                svg.style.right = '20px';\r\n                svg.style.top = '20px';\r\n                svg.addEventListener( 'click', function() {\r\n\r\n                    currentSession.end();\r\n\r\n                } );\r\n                overlay.appendChild( svg );\r\n\r\n                const path = document.createElementNS( 'http://www.w3.org/2000/svg', 'path' );\r\n                path.setAttribute( 'd', 'M 12,12 L 28,28 M 28,12 12,28' );\r\n                path.setAttribute( 'stroke', '#fff' );\r\n                path.setAttribute( 'stroke-width', 2 );\r\n                svg.appendChild( path );\r\n\r\n                if ( sessionInit.optionalFeatures === undefined ) {\r\n\r\n                    sessionInit.optionalFeatures = [];\r\n\r\n                }\r\n\r\n                sessionInit.optionalFeatures.push( 'dom-overlay' );\r\n                sessionInit.domOverlay = { root: overlay };\r\n\r\n            }\r\n\r\n            //\r\n\r\n            let currentSession = null;\r\n\r\n            async function onSessionStarted( session ) {\r\n\r\n                session.addEventListener( 'end', onSessionEnded );\r\n\r\n                renderer.xr.setReferenceSpaceType( 'local' );\r\n\r\n                await renderer.xr.setSession( session );\r\n\r\n                button.textContent = 'STOP AR';\r\n                sessionInit.domOverlay.root.style.display = '';\r\n\r\n                currentSession = session;\r\n\r\n            }\r\n\r\n            function onSessionEnded( /* event */ ) {\r\n\r\n                currentSession.removeEventListener( 'end', onSessionEnded );\r\n\r\n                button.textContent = 'START AR';\r\n                sessionInit.domOverlay.root.style.display = 'none';\r\n\r\n                currentSession = null;\r\n\r\n            }\r\n\r\n            //\r\n\r\n            button.style.display = '';\r\n\r\n            button.style.cursor = 'pointer';\r\n            button.style.left = 'calc(50% - 50px)';\r\n            button.style.width = '100px';\r\n\r\n            button.textContent = 'START AR';\r\n\r\n            button.onmouseenter = function() {\r\n\r\n                button.style.opacity = '1.0';\r\n\r\n            };\r\n\r\n            button.onmouseleave = function() {\r\n\r\n                button.style.opacity = '0.5';\r\n\r\n            };\r\n\r\n            button.onclick = function() {\r\n\r\n                if ( currentSession === null ) {\r\n\r\n                    navigator.xr.requestSession( 'immersive-ar', sessionInit ).then( onSessionStarted );\r\n\r\n                } else {\r\n\r\n                    currentSession.end();\r\n\r\n                    if ( navigator.xr.offerSession !== undefined ) {\r\n\r\n                        navigator.xr.offerSession( 'immersive-ar', sessionInit )\r\n                            .then( onSessionStarted )\r\n                            .catch( ( err ) => {\r\n\r\n                                console.warn( err );\r\n\r\n                            } );\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            };\r\n\r\n            if ( navigator.xr.offerSession !== undefined ) {\r\n\r\n                navigator.xr.offerSession( 'immersive-ar', sessionInit )\r\n                    .then( onSessionStarted )\r\n                    .catch( ( err ) => {\r\n\r\n                        console.warn( err );\r\n\r\n                    } );\r\n\r\n            }\r\n\r\n        }\r\n\r\n        function disableButton() {\r\n\r\n            button.style.display = '';\r\n\r\n            button.style.cursor = 'auto';\r\n            button.style.left = 'calc(50% - 75px)';\r\n            button.style.width = '150px';\r\n\r\n            button.onmouseenter = null;\r\n            button.onmouseleave = null;\r\n\r\n            button.onclick = null;\r\n\r\n        }\r\n\r\n        function showARNotSupported() {\r\n\r\n            disableButton();\r\n\r\n            button.textContent = 'AR NOT SUPPORTED';\r\n\r\n        }\r\n\r\n        function showARNotAllowed( exception ) {\r\n\r\n            disableButton();\r\n\r\n            console.warn( 'Exception when trying to call xr.isSessionSupported', exception );\r\n\r\n            button.textContent = 'AR NOT ALLOWED';\r\n\r\n        }\r\n\r\n        function stylizeElement( element ) {\r\n\r\n            element.style.position = 'absolute';\r\n            element.style.bottom = '20px';\r\n            element.style.padding = '12px 6px';\r\n            element.style.border = '1px solid #fff';\r\n            element.style.borderRadius = '4px';\r\n            element.style.background = 'rgba(0,0,0,0.1)';\r\n            element.style.color = '#fff';\r\n            element.style.font = 'normal 13px sans-serif';\r\n            element.style.textAlign = 'center';\r\n            element.style.opacity = '0.5';\r\n            element.style.outline = 'none';\r\n            element.style.zIndex = '999';\r\n\r\n        }\r\n\r\n        if ( 'xr' in navigator ) {\r\n\r\n            button.id = 'ARButton';\r\n            button.style.display = 'none';\r\n\r\n            stylizeElement( button );\r\n\r\n            navigator.xr.isSessionSupported( 'immersive-ar' ).then( function( supported ) {\r\n\r\n                supported ? showStartAR() : showARNotSupported();\r\n\r\n            } ).catch( showARNotAllowed );\r\n\r\n            return button;\r\n\r\n        } else {\r\n\r\n            const message = document.createElement( 'a' );\r\n\r\n            if ( window.isSecureContext === false ) {\r\n\r\n                message.href = document.location.href.replace( /^http:/, 'https:' );\r\n                message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\r\n\r\n            } else {\r\n\r\n                message.href = 'https://immersiveweb.dev/';\r\n                message.innerHTML = 'WEBXR NOT AVAILABLE';\r\n\r\n            }\r\n\r\n            message.style.left = 'calc(50% - 90px)';\r\n            message.style.width = '180px';\r\n            message.style.textDecoration = 'none';\r\n\r\n            stylizeElement( message );\r\n\r\n            return message;\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n","import * as THREE from 'three';\r\nimport { OrbitControls } from './OrbitControls.js';\r\nimport { PlyLoader } from './PlyLoader.js';\r\nimport { SplatLoader } from './SplatLoader.js';\r\nimport { LoadingSpinner } from './LoadingSpinner.js';\r\nimport { SceneHelper } from './SceneHelper.js';\r\nimport { Raycaster } from './raycaster/Raycaster.js';\r\nimport { SplatMesh } from './SplatMesh.js';\r\nimport { createSortWorker } from './worker/SortWorker.js';\r\nimport { Constants } from './Constants.js';\r\nimport { getCurrentTime } from './Util.js';\r\nimport { AbortablePromise } from './AbortablePromise.js';\r\nimport { SceneFormat } from './SceneFormat.js';\r\nimport { WebXRMode } from './webxr/WebXRMode.js';\r\nimport { VRButton } from './webxr/VRButton.js';\r\nimport { ARButton } from './webxr/ARButton.js';\r\n\r\n\r\nconst THREE_CAMERA_FOV = 50;\r\nconst MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT = .75;\r\n\r\n/**\r\n * Viewer: Manages the rendering of splat scenes. Manages an instance of SplatMesh as well as a web worker\r\n * that performs the sort for its splats.\r\n */\r\nexport class Viewer {\r\n\r\n    constructor(options = {}) {\r\n\r\n        // The natural 'up' vector for viewing the scene (only has an effect when used with orbit controls and\r\n        // when the viewer uses its own camera).\r\n        if (!options.cameraUp) options.cameraUp = [0, 1, 0];\r\n        this.cameraUp = new THREE.Vector3().fromArray(options.cameraUp);\r\n\r\n        // The camera's initial position (only used when the viewer uses its own camera).\r\n        if (!options.initialCameraPosition) options.initialCameraPosition = [0, 10, 15];\r\n        this.initialCameraPosition = new THREE.Vector3().fromArray(options.initialCameraPosition);\r\n\r\n        // The initial focal point of the camera and center of the camera's orbit (only used when the viewer uses its own camera).\r\n        if (!options.initialCameraLookAt) options.initialCameraLookAt = [0, 0, 0];\r\n        this.initialCameraLookAt = new THREE.Vector3().fromArray(options.initialCameraLookAt);\r\n\r\n        // 'dropInMode' is a flag that is used internally to support the usage of the viewer as a Three.js scene object\r\n        this.dropInMode = options.dropInMode || false;\r\n\r\n        // If 'selfDrivenMode' is true, the viewer manages its own update/animation loop via requestAnimationFrame()\r\n        if (options.selfDrivenMode === undefined || options.selfDrivenMode === null) options.selfDrivenMode = true;\r\n        this.selfDrivenMode = options.selfDrivenMode && !this.dropInMode;\r\n        this.selfDrivenUpdateFunc = this.selfDrivenUpdate.bind(this);\r\n\r\n        // If 'useBuiltInControls' is true, the viewer will create its own instance of OrbitControls and attach to the camera\r\n        if (options.useBuiltInControls === undefined) options.useBuiltInControls = true;\r\n        this.useBuiltInControls = options.useBuiltInControls;\r\n\r\n        // parent element of the Three.js renderer canvas\r\n        this.rootElement = options.rootElement;\r\n\r\n        // Tells the viewer to pretend the device pixel ratio is 1, which can boost performance on devices where it is larger,\r\n        // at a small cost to visual quality\r\n        this.ignoreDevicePixelRatio = options.ignoreDevicePixelRatio || false;\r\n        this.devicePixelRatio = this.ignoreDevicePixelRatio ? 1 : window.devicePixelRatio;\r\n\r\n        // Tells the viewer to use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\r\n        if (options.halfPrecisionCovariancesOnGPU === undefined || options.halfPrecisionCovariancesOnGPU === null) {\r\n            options.halfPrecisionCovariancesOnGPU = true;\r\n        }\r\n        this.halfPrecisionCovariancesOnGPU = options.halfPrecisionCovariancesOnGPU;\r\n\r\n        // If 'threeScene' is valid, it will be rendered by the viewer along with the splat mesh\r\n        this.threeScene = options.threeScene;\r\n        // Allows for usage of an external Three.js renderer\r\n        this.renderer = options.renderer;\r\n        // Allows for usage of an external Three.js camera\r\n        this.camera = options.camera;\r\n\r\n        // If 'gpuAcceleratedSort' is true, a partially GPU-accelerated approach to sorting splats will be used.\r\n        // Currently this means pre-computing splat distances from the camera on the GPU\r\n        this.gpuAcceleratedSort = options.gpuAcceleratedSort;\r\n        if (this.gpuAcceleratedSort !== true && this.gpuAcceleratedSort !== false) {\r\n            if (this.isMobile()) this.gpuAcceleratedSort = false;\r\n            else this.gpuAcceleratedSort = true;\r\n        }\r\n\r\n        // if 'integerBasedSort' is true, the integer version of splat centers as well as other values used to calculate\r\n        // splat distances are used instead of the float version. This speeds up computation, but introduces the possibility of\r\n        // overflow in larger scenes.\r\n        if (options.integerBasedSort === undefined || options.integerBasedSort === null) {\r\n            options.integerBasedSort = true;\r\n        }\r\n        this.integerBasedSort = options.integerBasedSort;\r\n\r\n        // If 'sharedMemoryForWorkers' is true, a SharedArrayBuffer will be used to communicate with web workers. This method\r\n        // is faster than copying memory to or from web workers, but comes with security implications as outlined here:\r\n        // https://web.dev/articles/cross-origin-isolation-guide\r\n        // If enabled, it requires specific CORS headers to be present in the response from the server that is sent when\r\n        // loading the application. More information is available in the README.\r\n        if (options.sharedMemoryForWorkers === undefined || options.sharedMemoryForWorkers === null) options.sharedMemoryForWorkers = true;\r\n        this.sharedMemoryForWorkers = options.sharedMemoryForWorkers;\r\n\r\n        // if 'dynamicScene' is true, it tells the viewer to assume scene elements are not stationary or that the number of splats in the\r\n        // scene may change. This prevents optimizations that depend on a static scene from being made. Additionally, if 'dynamicScene' is\r\n        // true it tells the splat mesh to not apply scene tranforms to splat data that is returned by functions like\r\n        // SplatMesh.getSplatCenter() by default.\r\n        const dynamicScene = !!options.dynamicScene;\r\n        this.splatMesh = new SplatMesh(dynamicScene, this.halfPrecisionCovariancesOnGPU, this.devicePixelRatio,\r\n                                       this.gpuAcceleratedSort, this.integerBasedSort);\r\n\r\n\r\n        this.webXRMode = options.webXRMode || WebXRMode.None;\r\n\r\n        this.controls = null;\r\n\r\n        this.showMeshCursor = false;\r\n        this.showControlPlane = false;\r\n        this.showInfo = false;\r\n\r\n        this.sceneHelper = null;\r\n\r\n        this.sortWorker = null;\r\n        this.sortRunning = false;\r\n        this.splatRenderCount = 0;\r\n        this.sortWorkerIndexesToSort = null;\r\n        this.sortWorkerSortedIndexes = null;\r\n        this.sortWorkerPrecomputedDistances = null;\r\n        this.sortWorkerTransforms = null;\r\n\r\n        this.selfDrivenModeRunning = false;\r\n        this.splatRenderingInitialized = false;\r\n\r\n        this.raycaster = new Raycaster();\r\n\r\n        this.infoPanel = null;\r\n        this.infoPanelCells = {};\r\n\r\n        this.currentFPS = 0;\r\n        this.lastSortTime = 0;\r\n\r\n        this.previousCameraTarget = new THREE.Vector3();\r\n        this.nextCameraTarget = new THREE.Vector3();\r\n\r\n        this.mousePosition = new THREE.Vector2();\r\n        this.mouseDownPosition = new THREE.Vector2();\r\n        this.mouseDownTime = null;\r\n\r\n        this.resizeObserver = null;\r\n        this.mouseMoveListener = null;\r\n        this.mouseDownListener = null;\r\n        this.mouseUpListener = null;\r\n        this.keyDownListener = null;\r\n\r\n        this.sortPromise = null;\r\n        this.sortPromiseResolver = null;\r\n\r\n        this.loadingSpinner = new LoadingSpinner(null, this.rootElement || document.body);\r\n        this.loadingSpinner.hide();\r\n\r\n        this.usingExternalCamera = (this.dropInMode || this.camera) ? true : false;\r\n        this.usingExternalRenderer = (this.dropInMode || this.renderer) ? true : false;\r\n\r\n        this.initialized = false;\r\n        if (!this.dropInMode) this.init();\r\n    }\r\n\r\n    init() {\r\n\r\n        if (this.initialized) return;\r\n\r\n        if (!this.rootElement) {\r\n            if (!this.usingExternalRenderer) {\r\n                this.rootElement = document.createElement('div');\r\n                this.rootElement.style.width = '100%';\r\n                this.rootElement.style.height = '100%';\r\n                this.rootElement.style.position = 'absolute';\r\n                document.body.appendChild(this.rootElement);\r\n            } else {\r\n                this.rootElement = this.renderer.domElement.parentElement || document.body;\r\n            }\r\n        }\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n        this.getRenderDimensions(renderDimensions);\r\n\r\n        if (!this.usingExternalCamera) {\r\n            this.camera = new THREE.PerspectiveCamera(THREE_CAMERA_FOV, renderDimensions.x / renderDimensions.y, 0.1, 500);\r\n            this.camera.position.copy(this.initialCameraPosition);\r\n            this.camera.up.copy(this.cameraUp).normalize();\r\n            this.camera.lookAt(this.initialCameraLookAt);\r\n        }\r\n\r\n        if (!this.usingExternalRenderer) {\r\n            this.renderer = new THREE.WebGLRenderer({\r\n                antialias: false,\r\n                precision: 'highp'\r\n            });\r\n            this.renderer.setPixelRatio(this.devicePixelRatio);\r\n            this.renderer.autoClear = true;\r\n            this.renderer.setClearColor(new THREE.Color( 0x000000 ), 0.0);\r\n            this.renderer.setSize(renderDimensions.x, renderDimensions.y);\r\n\r\n            this.resizeObserver = new ResizeObserver(() => {\r\n                this.getRenderDimensions(renderDimensions);\r\n                this.renderer.setSize(renderDimensions.x, renderDimensions.y);\r\n            });\r\n            this.resizeObserver.observe(this.rootElement);\r\n            this.rootElement.appendChild(this.renderer.domElement);\r\n        }\r\n\r\n        if (this.webXRMode) {\r\n            if (this.webXRMode === WebXRMode.VR) {\r\n                this.rootElement.appendChild(VRButton.createButton(this.renderer));\r\n            } else if (this.webXRMode === WebXRMode.AR) {\r\n                this.rootElement.appendChild(ARButton.createButton(this.renderer));\r\n            }\r\n            this.renderer.xr.enabled = true;\r\n            this.camera.up.copy(this.cameraUp).normalize();\r\n            this.camera.lookAt(this.initialCameraLookAt);\r\n        }\r\n\r\n        this.threeScene = this.threeScene || new THREE.Scene();\r\n        this.sceneHelper = new SceneHelper(this.threeScene);\r\n        this.sceneHelper.setupMeshCursor();\r\n        this.sceneHelper.setupFocusMarker();\r\n        this.sceneHelper.setupControlPlane();\r\n\r\n        if (this.useBuiltInControls && this.webXRMode === WebXRMode.None) {\r\n            this.controls = new OrbitControls(this.camera, this.renderer.domElement);\r\n            this.controls.listenToKeyEvents(window);\r\n            this.controls.rotateSpeed = 0.5;\r\n            this.controls.maxPolarAngle = Math.PI * .75;\r\n            this.controls.minPolarAngle = 0.1;\r\n            this.controls.enableDamping = true;\r\n            this.controls.dampingFactor = 0.05;\r\n            this.controls.target.copy(this.initialCameraLookAt);\r\n            this.mouseMoveListener = this.onMouseMove.bind(this);\r\n            this.rootElement.addEventListener('pointermove', this.mouseMoveListener, false);\r\n            this.mouseDownListener = this.onMouseDown.bind(this);\r\n            this.rootElement.addEventListener('pointerdown', this.mouseDownListener, false);\r\n            this.mouseUpListener = this.onMouseUp.bind(this);\r\n            this.rootElement.addEventListener('pointerup', this.mouseUpListener, false);\r\n            this.keyDownListener = this.onKeyDown.bind(this);\r\n            window.addEventListener('keydown', this.keyDownListener, false);\r\n        }\r\n\r\n        this.setupInfoPanel();\r\n        this.loadingSpinner.setContainer(this.rootElement);\r\n\r\n        this.initialized = true;\r\n    }\r\n\r\n    removeEventHandlers() {\r\n        if (this.useBuiltInControls) {\r\n            this.rootElement.removeEventListener('pointermove', this.mouseMoveListener);\r\n            this.mouseMoveListener = null;\r\n            this.rootElement.removeEventListener('pointerdown', this.mouseDownListener);\r\n            this.mouseDownListener = null;\r\n            this.rootElement.removeEventListener('pointerup', this.mouseUpListener);\r\n            this.mouseUpListener = null;\r\n            window.removeEventListener('keydown', this.keyDownListener);\r\n            this.keyDownListener = null;\r\n        }\r\n    }\r\n\r\n    onKeyDown = function() {\r\n\r\n        const forward = new THREE.Vector3();\r\n        const tempMatrixLeft = new THREE.Matrix4();\r\n        const tempMatrixRight = new THREE.Matrix4();\r\n\r\n        return function(e) {\r\n            forward.set(0, 0, -1);\r\n            forward.transformDirection(this.camera.matrixWorld);\r\n            tempMatrixLeft.makeRotationAxis(forward, Math.PI / 128);\r\n            tempMatrixRight.makeRotationAxis(forward, -Math.PI / 128);\r\n            switch (e.code) {\r\n                case 'ArrowLeft':\r\n                    this.camera.up.transformDirection(tempMatrixLeft);\r\n                break;\r\n                case 'ArrowRight':\r\n                    this.camera.up.transformDirection(tempMatrixRight);\r\n                break;\r\n                case 'KeyC':\r\n                    this.showMeshCursor = !this.showMeshCursor;\r\n                break;\r\n                case 'KeyP':\r\n                    this.showControlPlane = !this.showControlPlane;\r\n                break;\r\n                case 'KeyI':\r\n                    this.showInfo = !this.showInfo;\r\n                    if (this.showInfo) {\r\n                        this.infoPanel.style.display = 'block';\r\n                    } else {\r\n                        this.infoPanel.style.display = 'none';\r\n                    }\r\n                break;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    onMouseMove(mouse) {\r\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\r\n    }\r\n\r\n    onMouseDown() {\r\n        this.mouseDownPosition.copy(this.mousePosition);\r\n        this.mouseDownTime = getCurrentTime();\r\n    }\r\n\r\n    onMouseUp = function() {\r\n\r\n        const clickOffset = new THREE.Vector2();\r\n\r\n        return function(mouse) {\r\n            clickOffset.copy(this.mousePosition).sub(this.mouseDownPosition);\r\n            const mouseUpTime = getCurrentTime();\r\n            const wasClick = mouseUpTime - this.mouseDownTime < 0.5 && clickOffset.length() < 2;\r\n            if (wasClick) {\r\n                this.onMouseClick(mouse);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    onMouseClick(mouse) {\r\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\r\n        this.checkForFocalPointChange();\r\n    }\r\n\r\n    checkForFocalPointChange = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n        const toNewFocalPoint = new THREE.Vector3();\r\n        const outHits = [];\r\n\r\n        return function() {\r\n            if (!this.transitioningCameraTarget) {\r\n                this.getRenderDimensions(renderDimensions);\r\n                outHits.length = 0;\r\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\r\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\r\n                if (outHits.length > 0) {\r\n                    const hit = outHits[0];\r\n                    const intersectionPoint = hit.origin;\r\n                    toNewFocalPoint.copy(intersectionPoint).sub(this.camera.position);\r\n                    if (toNewFocalPoint.length() > MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT) {\r\n                        this.previousCameraTarget.copy(this.controls.target);\r\n                        this.nextCameraTarget.copy(intersectionPoint);\r\n                        this.transitioningCameraTarget = true;\r\n                        this.transitioningCameraTargetStartTime = getCurrentTime();\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    getRenderDimensions(outDimensions) {\r\n        if (this.rootElement) {\r\n            outDimensions.x = this.rootElement.offsetWidth;\r\n            outDimensions.y = this.rootElement.offsetHeight;\r\n        } else {\r\n            this.renderer.getSize(outDimensions);\r\n        }\r\n    }\r\n\r\n    setupInfoPanel() {\r\n        this.infoPanel = document.createElement('div');\r\n        this.infoPanel.style.position = 'absolute';\r\n        this.infoPanel.style.padding = '10px';\r\n        this.infoPanel.style.backgroundColor = '#cccccc';\r\n        this.infoPanel.style.border = '#aaaaaa 1px solid';\r\n        this.infoPanel.style.zIndex = 100;\r\n        this.infoPanel.style.width = '375px';\r\n        this.infoPanel.style.fontFamily = 'arial';\r\n        this.infoPanel.style.fontSize = '10pt';\r\n        this.infoPanel.style.textAlign = 'left';\r\n\r\n        const layout = [\r\n            ['Camera position', 'cameraPosition'],\r\n            ['Camera look-at', 'cameraLookAt'],\r\n            ['Camera up', 'cameraUp'],\r\n            ['Cursor position', 'cursorPosition'],\r\n            ['FPS', 'fps'],\r\n            ['Render window', 'renderWindow'],\r\n            ['Rendering:', 'renderSplatCount'],\r\n            ['Sort time', 'sortTime']\r\n        ];\r\n\r\n        const infoTable = document.createElement('div');\r\n        infoTable.style.display = 'table';\r\n\r\n        for (let layoutEntry of layout) {\r\n            const row = document.createElement('div');\r\n            row.style.display = 'table-row';\r\n\r\n            const labelCell = document.createElement('div');\r\n            labelCell.style.display = 'table-cell';\r\n            labelCell.style.width = '110px';\r\n            labelCell.innerHTML = `${layoutEntry[0]}: `;\r\n\r\n            const spacerCell = document.createElement('div');\r\n            spacerCell.style.display = 'table-cell';\r\n            spacerCell.style.width = '10px';\r\n            spacerCell.innerHTML = ' ';\r\n\r\n            const infoCell = document.createElement('div');\r\n            infoCell.style.display = 'table-cell';\r\n            infoCell.innerHTML = '';\r\n\r\n            this.infoPanelCells[layoutEntry[1]] = infoCell;\r\n\r\n            row.appendChild(labelCell);\r\n            row.appendChild(spacerCell);\r\n            row.appendChild(infoCell);\r\n\r\n            infoTable.appendChild(row);\r\n        }\r\n\r\n        this.infoPanel.appendChild(infoTable);\r\n        this.infoPanel.style.display = 'none';\r\n        this.renderer.domElement.parentElement.prepend(this.infoPanel);\r\n    }\r\n\r\n    updateSplatMesh = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n\r\n        return function() {\r\n            if (!this.splatMesh) return;\r\n            const splatCount = this.splatMesh.getSplatCount();\r\n            if (splatCount > 0) {\r\n                this.splatMesh.updateTransforms();\r\n                this.getRenderDimensions(renderDimensions);\r\n                this.cameraFocalLengthX = this.camera.projectionMatrix.elements[0] *\r\n                                          this.devicePixelRatio * renderDimensions.x * 0.45;\r\n                                          this.cameraFocalLengthY = this.camera.projectionMatrix.elements[5] *\r\n                                          this.devicePixelRatio * renderDimensions.y * 0.45;\r\n                this.splatMesh.updateUniforms(renderDimensions, this.cameraFocalLengthX, this.cameraFocalLengthY);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Add a splat scene to the viewer.\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {object} options {\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         showLoadingSpinner:         Display a loading spinner while the scene is loading, defaults to true\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     *\r\n     *         onProgress:                 Function to be called as file data are received\r\n     *\r\n     * }\r\n     * @return {AbortablePromise}\r\n     */\r\n    addSplatScene(path, options = {}) {\r\n        if (options.showLoadingSpinner !== false) options.showLoadingSpinner = true;\r\n        if (options.showLoadingSpinner) this.loadingSpinner.show();\r\n        const downloadProgress = (percent, percentLabel) => {\r\n            if (options.showLoadingSpinner) {\r\n                if (percent == 100) {\r\n                    this.loadingSpinner.setMessage(`Download complete!`);\r\n                } else {\r\n                    const suffix = percentLabel ? `: ${percentLabel}` : `...`;\r\n                    this.loadingSpinner.setMessage(`Downloading${suffix}`);\r\n                }\r\n            }\r\n            if (options.onProgress) options.onProgress(percent, percentLabel, 'downloading');\r\n        };\r\n        const loadPromise = this.loadFileToSplatBuffer(path, options.splatAlphaRemovalThreshold, downloadProgress, options.format);\r\n        return new AbortablePromise((resolve, reject) => {\r\n            loadPromise.then((splatBuffer) => {\r\n                if (options.showLoadingSpinner) this.loadingSpinner.hide();\r\n                if (options.onProgress) options.onProgress(0, '0%', 'processing');\r\n                const splatBufferOptions = {\r\n                    'rotation': options.rotation || options.orientation,\r\n                    'position': options.position,\r\n                    'scale': options.scale,\r\n                    'splatAlphaRemovalThreshold': options.splatAlphaRemovalThreshold,\r\n                };\r\n                this.addSplatBuffers([splatBuffer], [splatBufferOptions], options.showLoadingSpinner).then(() => {\r\n                    if (options.onProgress) options.onProgress(100, '100%', 'processing');\r\n                    resolve();\r\n                });\r\n            })\r\n            .catch(() => {\r\n                if (options.showLoadingSpinner) this.loadingSpinner.hide();\r\n                reject(new Error(`Viewer::addSplatScene -> Could not load file ${path}`));\r\n            });\r\n        }, loadPromise.abortHandler);\r\n    }\r\n\r\n    /**\r\n     * Add multiple splat scenes to the viewer.\r\n     * @param {Array<object>} sceneOptions Array of per-scene options: {\r\n     *\r\n     *         path: Path to splat scene to be loaded\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     * }\r\n     * @param {boolean} showLoadingSpinner Display a loading spinner while the scene is loading, defaults to true\r\n     * @param {function} onProgress Function to be called as file data are received\r\n     * @return {AbortablePromise}\r\n     */\r\n    addSplatScenes(sceneOptions, showLoadingSpinner = true, onProgress = undefined) {\r\n        const fileCount = sceneOptions.length;\r\n        const percentComplete = [];\r\n        if (showLoadingSpinner) this.loadingSpinner.show();\r\n        const downloadProgress = (fileIndex, percent, percentLabel) => {\r\n            percentComplete[fileIndex] = percent;\r\n            let totalPercent = 0;\r\n            for (let i = 0; i < fileCount; i++) totalPercent += percentComplete[i] || 0;\r\n            totalPercent = totalPercent / fileCount;\r\n            percentLabel = `${totalPercent.toFixed(2)}%`;\r\n            if (showLoadingSpinner) {\r\n                if (totalPercent == 100) {\r\n                    this.loadingSpinner.setMessage(`Download complete!`);\r\n                } else {\r\n                    this.loadingSpinner.setMessage(`Downloading: ${percentLabel}`);\r\n                }\r\n            }\r\n            if (onProgress) onProgress(totalPercent, percentLabel, 'downloading');\r\n        };\r\n\r\n        const loadPromises = [];\r\n        const abortHandlers = [];\r\n        for (let i = 0; i < sceneOptions.length; i++) {\r\n            const loadPromise = this.loadFileToSplatBuffer(sceneOptions[i].path, sceneOptions[i].splatAlphaRemovalThreshold,\r\n                                                           downloadProgress.bind(this, i), sceneOptions.format);\r\n            abortHandlers.push(loadPromise.abortHandler);\r\n            loadPromises.push(loadPromise.promise);\r\n        }\r\n        const abortHandler = () => {\r\n            for (let abortHandler of abortHandlers) {\r\n                abortHandler();\r\n            }\r\n        };\r\n        return new AbortablePromise((resolve, reject) => {\r\n            Promise.all(loadPromises)\r\n            .then((splatBuffers) => {\r\n                if (showLoadingSpinner) this.loadingSpinner.hide();\r\n                if (onProgress) options.onProgress(0, '0%', 'processing');\r\n                this.addSplatBuffers(splatBuffers, sceneOptions, showLoadingSpinner).then(() => {\r\n                    if (onProgress) onProgress(100, '100%', 'processing');\r\n                    resolve();\r\n                });\r\n            })\r\n            .catch(() => {\r\n                if (showLoadingSpinner) this.loadingSpinner.hide();\r\n                reject(new Error(`Viewer::addSplatScenes -> Could not load one or more splat scenes.`));\r\n            });\r\n        }, abortHandler);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified\r\n     *                                            value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     * @param {function} onProgress Function to be called as file data are received\r\n     * @param {string} format Optional format specifier, if not specified the format will be inferred from the file extension\r\n     * @return {AbortablePromise}\r\n     */\r\n    loadFileToSplatBuffer(path, splatAlphaRemovalThreshold = 1, onProgress = undefined, format = undefined) {\r\n        const downloadProgress = (percent, percentLabel) => {\r\n            if (onProgress) onProgress(percent, percentLabel, 'downloading');\r\n        };\r\n        if (format !== undefined && format !== null) {\r\n            if (format === SceneFormat.Splat || format === SceneFormat.KSplat) {\r\n                return new SplatLoader().loadFromURL(path, downloadProgress, 0, splatAlphaRemovalThreshold, undefined, undefined, format);\r\n            } else if (format === SceneFormat.Ply) {\r\n                return new PlyLoader().loadFromURL(path, downloadProgress, 0, splatAlphaRemovalThreshold);\r\n            }\r\n        } else {\r\n            if (SplatLoader.isFileSplatFormat(path)) {\r\n                return new SplatLoader().loadFromURL(path, downloadProgress, 0, splatAlphaRemovalThreshold);\r\n            } else if (path.endsWith('.ply')) {\r\n                return new PlyLoader().loadFromURL(path, downloadProgress, 0, splatAlphaRemovalThreshold);\r\n            }\r\n        }\r\n\r\n        return AbortablePromise.reject(new Error(`Viewer::loadFileToSplatBuffer -> File format not supported: ${path}`));\r\n    }\r\n\r\n    /**\r\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer and set up the sorting web worker.\r\n     * This function will terminate the existing sort worker (if there is one).\r\n     */\r\n    addSplatBuffers = function() {\r\n\r\n        let loadPromise;\r\n        let loadCount = 0;\r\n\r\n        return function(splatBuffers, splatBufferOptions = [], showLoadingSpinner = true) {\r\n            this.splatRenderingInitialized = false;\r\n            loadCount++;\r\n            const performLoad = () => {\r\n                return new Promise((resolve) => {\r\n                    if (showLoadingSpinner) {\r\n                        this.loadingSpinner.show();\r\n                        this.loadingSpinner.setMessage(`Processing splats...`);\r\n                    }\r\n                    window.setTimeout(() => {\r\n                        this.disposeSortWorker();\r\n                        this.addSplatBuffersToMesh(splatBuffers, splatBufferOptions);\r\n                        this.setupSortWorker(this.splatMesh).then(() => {\r\n                            loadCount--;\r\n                            if (loadCount === 0) {\r\n                                if (showLoadingSpinner) this.loadingSpinner.hide();\r\n                                this.splatRenderingInitialized = true;\r\n                            }\r\n                            resolve();\r\n                        });\r\n                    }, 1);\r\n                });\r\n            };\r\n            if (!loadPromise) {\r\n                loadPromise = performLoad();\r\n            } else {\r\n                loadPromise = loadPromise.then(() => {\r\n                    return performLoad();\r\n                });\r\n            }\r\n            return loadPromise;\r\n        };\r\n\r\n    }();\r\n\r\n    disposeSortWorker() {\r\n        if (this.sortWorker) this.sortWorker.terminate();\r\n        this.sortWorker = null;\r\n        this.sortRunning = false;\r\n    }\r\n\r\n    /**\r\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer. This function is additive; all splat\r\n     * buffers contained by the viewer's splat mesh before calling this function will be preserved.\r\n     * @param {Array<SplatBuffer>} splatBuffers SplatBuffer instances\r\n     * @param {Array<object>} splatBufferOptions Array of options objects: {\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     * }\r\n     */\r\n    addSplatBuffersToMesh(splatBuffers, splatBufferOptions) {\r\n        const allSplatBuffers = this.splatMesh.splatBuffers || [];\r\n        const allSplatBufferOptions = this.splatMesh.splatBufferOptions || [];\r\n        allSplatBuffers.push(...splatBuffers);\r\n        allSplatBufferOptions.push(...splatBufferOptions);\r\n        this.splatMesh.build(allSplatBuffers, allSplatBufferOptions, true);\r\n        if (this.renderer) this.splatMesh.setRenderer(this.renderer);\r\n        this.splatMesh.frustumCulled = false;\r\n    }\r\n\r\n    /**\r\n     * Set up the splat sorting web worker.\r\n     * @param {SplatMesh} splatMesh SplatMesh instance that contains the splats to be sorted\r\n     * @return {Promise}\r\n     */\r\n    setupSortWorker(splatMesh) {\r\n        return new Promise((resolve) => {\r\n            const DistancesArrayType = this.integerBasedSort ? Int32Array : Float32Array;\r\n            const splatCount = splatMesh.getSplatCount();\r\n            const sortWorker = createSortWorker(splatCount, this.sharedMemoryForWorkers, this.integerBasedSort, this.splatMesh.dynamicMode);\r\n            sortWorker.onmessage = (e) => {\r\n                if (e.data.sortDone) {\r\n                    this.sortRunning = false;\r\n                    if (this.sharedMemoryForWorkers) {\r\n                        this.splatMesh.updateRenderIndexes(this.sortWorkerSortedIndexes, e.data.splatRenderCount);\r\n                    } else {\r\n                        const sortedIndexes = new Uint32Array(e.data.sortedIndexes, 0, e.data.splatRenderCount);\r\n                        this.splatMesh.updateRenderIndexes(sortedIndexes, e.data.splatRenderCount);\r\n                    }\r\n                    this.lastSortTime = e.data.sortTime;\r\n                    this.sortPromiseResolver();\r\n                    this.sortPromise = null;\r\n                    this.sortPromiseResolver = null;\r\n                } else if (e.data.sortCanceled) {\r\n                    this.sortRunning = false;\r\n                } else if (e.data.sortSetupPhase1Complete) {\r\n                    console.log('Sorting web worker WASM setup complete.');\r\n                    const centers = this.integerBasedSort ? this.splatMesh.getIntegerCenters(true) : this.splatMesh.getFloatCenters(true);\r\n                    const transformIndexes = this.splatMesh.getTransformIndexes();\r\n                    sortWorker.postMessage({\r\n                        'centers': centers.buffer,\r\n                        'transformIndexes': transformIndexes.buffer\r\n                    });\r\n                    if (this.sharedMemoryForWorkers) {\r\n                        this.sortWorkerSortedIndexes = new Uint32Array(e.data.sortedIndexesBuffer,\r\n                                                                       e.data.sortedIndexesOffset, splatCount);\r\n                        this.sortWorkerIndexesToSort = new Uint32Array(e.data.indexesToSortBuffer,\r\n                                                                       e.data.indexesToSortOffset, splatCount);\r\n                        this.sortWorkerPrecomputedDistances = new DistancesArrayType(e.data.precomputedDistancesBuffer,\r\n                                                                                     e.data.precomputedDistancesOffset,\r\n                                                                                     splatCount);\r\n                         this.sortWorkerTransforms = new Float32Array(e.data.transformsBuffer,\r\n                                                                      e.data.transformsOffset, Constants.MaxScenes * 16);\r\n                    } else {\r\n                        this.sortWorkerIndexesToSort = new Uint32Array(splatCount);\r\n                        this.sortWorkerPrecomputedDistances = new DistancesArrayType(splatCount);\r\n                        this.sortWorkerTransforms = new Float32Array(Constants.MaxScenes * 16);\r\n                    }\r\n                    for (let i = 0; i < splatCount; i++) this.sortWorkerIndexesToSort[i] = i;\r\n                } else if (e.data.sortSetupComplete) {\r\n                    console.log('Sorting web worker ready.');\r\n                    const splatDataTextures = this.splatMesh.getSplatDataTextures();\r\n                    const covariancesTextureSize = splatDataTextures.covariances.size;\r\n                    const centersColorsTextureSize = splatDataTextures.centerColors.size;\r\n                    console.log('Covariances texture size: ' + covariancesTextureSize.x + ' x ' + covariancesTextureSize.y);\r\n                    console.log('Centers/colors texture size: ' + centersColorsTextureSize.x + ' x ' + centersColorsTextureSize.y);\r\n                    this.sortWorker = sortWorker;\r\n                    resolve();\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Start self-driven mode\r\n     */\r\n    start() {\r\n        if (this.selfDrivenMode) {\r\n            if (this.webXRMode) {\r\n                this.renderer.setAnimationLoop(this.selfDrivenUpdateFunc);\r\n            } else {\r\n                this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\r\n            }\r\n            this.selfDrivenModeRunning = true;\r\n        } else {\r\n            throw new Error('Cannot start viewer unless it is in self driven mode.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stop self-driven mode\r\n     */\r\n    stop() {\r\n        if (this.selfDrivenMode && this.selfDrivenModeRunning) {\r\n            if (!this.webXRMode) {\r\n                cancelAnimationFrame(this.requestFrameId);\r\n            }\r\n            this.selfDrivenModeRunning = false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispose of all resources held directly and indirectly by this viewer.\r\n     */\r\n    async dispose() {\r\n        if (this.sortPromise) {\r\n            await this.sortPromise;\r\n        }\r\n        this.stop();\r\n        if (this.controls) {\r\n            this.controls.dispose();\r\n            this.controls = null;\r\n        }\r\n        if (this.splatMesh) {\r\n            this.splatMesh.dispose();\r\n            this.splatMesh = null;\r\n        }\r\n        if (this.sceneHelper) {\r\n            this.sceneHelper.dispose();\r\n            this.sceneHelper = null;\r\n        }\r\n        if (this.resizeObserver) {\r\n            this.resizeObserver.unobserve(this.rootElement);\r\n            this.resizeObserver = null;\r\n        }\r\n        if (this.renderer) {\r\n            if (!this.usingExternalRenderer) this.renderer.dispose();\r\n            this.renderer = null;\r\n        }\r\n        this.disposeSortWorker();\r\n        this.removeEventHandlers();\r\n        this.camera = null;\r\n        this.threeScene = null;\r\n        this.splatRenderingInitialized = false;\r\n        this.initialized = false;\r\n    }\r\n\r\n    selfDrivenUpdate() {\r\n        if (this.selfDrivenMode && !this.webXRMode) {\r\n            this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\r\n        }\r\n        this.update();\r\n        this.render();\r\n    }\r\n\r\n    render = function() {\r\n\r\n        return function() {\r\n            if (!this.initialized || !this.splatRenderingInitialized) return;\r\n            const hasRenderables = (threeScene) => {\r\n                for (let child of threeScene.children) {\r\n                    if (child.visible) return true;\r\n                }\r\n                return false;\r\n            };\r\n            const savedAuoClear = this.renderer.autoClear;\r\n            this.renderer.autoClear = false;\r\n            if (hasRenderables(this.threeScene)) this.renderer.render(this.threeScene, this.camera);\r\n            this.renderer.render(this.splatMesh, this.camera);\r\n            if (this.sceneHelper.getFocusMarkerOpacity() > 0.0) this.renderer.render(this.sceneHelper.focusMarker, this.camera);\r\n            if (this.showControlPlane) this.renderer.render(this.sceneHelper.controlPlane, this.camera);\r\n            this.renderer.autoClear = savedAuoClear;\r\n        };\r\n\r\n    }();\r\n\r\n    update(renderer, camera) {\r\n        if (this.dropInMode) this.updateForDropInMode(renderer, camera);\r\n        if (!this.initialized || !this.splatRenderingInitialized) return;\r\n        if (this.controls) this.controls.update();\r\n        this.updateSplatSort();\r\n        this.updateForRendererSizeChanges();\r\n        this.updateSplatMesh();\r\n        this.updateMeshCursor();\r\n        this.updateFPS();\r\n        this.timingSensitiveUpdates();\r\n        this.updateInfoPanel();\r\n        this.updateControlPlane();\r\n    }\r\n\r\n    updateForDropInMode(renderer, camera) {\r\n        this.renderer = renderer;\r\n        if (this.splatMesh) this.splatMesh.setRenderer(this.renderer);\r\n        this.camera = camera;\r\n        if (this.controls) this.controls.object = camera;\r\n        this.init();\r\n    }\r\n\r\n    updateFPS = function() {\r\n\r\n        let lastCalcTime = getCurrentTime();\r\n        let frameCount = 0;\r\n\r\n        return function() {\r\n            const currentTime = getCurrentTime();\r\n            const calcDelta = currentTime - lastCalcTime;\r\n            if (calcDelta >= 1.0) {\r\n                this.currentFPS = frameCount;\r\n                frameCount = 0;\r\n                lastCalcTime = currentTime;\r\n            } else {\r\n                frameCount++;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateForRendererSizeChanges = function() {\r\n\r\n        const lastRendererSize = new THREE.Vector2();\r\n        const currentRendererSize = new THREE.Vector2();\r\n\r\n        return function() {\r\n            this.renderer.getSize(currentRendererSize);\r\n            if (currentRendererSize.x !== lastRendererSize.x || currentRendererSize.y !== lastRendererSize.y) {\r\n                if (!this.usingExternalCamera) {\r\n                    this.camera.aspect = currentRendererSize.x / currentRendererSize.y;\r\n                    this.camera.updateProjectionMatrix();\r\n                }\r\n                lastRendererSize.copy(currentRendererSize);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    timingSensitiveUpdates = function() {\r\n\r\n        let lastUpdateTime;\r\n\r\n        return function() {\r\n            const currentTime = getCurrentTime();\r\n            if (!lastUpdateTime) lastUpdateTime = currentTime;\r\n            const timeDelta = currentTime - lastUpdateTime;\r\n\r\n            this.updateCameraTransition(currentTime);\r\n            this.updateFocusMarker(timeDelta);\r\n\r\n            lastUpdateTime = currentTime;\r\n        };\r\n\r\n    }();\r\n\r\n    updateCameraTransition = function() {\r\n\r\n        let tempCameraTarget = new THREE.Vector3();\r\n        let toPreviousTarget = new THREE.Vector3();\r\n        let toNextTarget = new THREE.Vector3();\r\n\r\n        return function(currentTime) {\r\n            if (this.transitioningCameraTarget) {\r\n                toPreviousTarget.copy(this.previousCameraTarget).sub(this.camera.position).normalize();\r\n                toNextTarget.copy(this.nextCameraTarget).sub(this.camera.position).normalize();\r\n                const rotationAngle = Math.acos(toPreviousTarget.dot(toNextTarget));\r\n                const rotationSpeed = rotationAngle / (Math.PI / 3) * .65 + .3;\r\n                const t = (rotationSpeed / rotationAngle * (currentTime - this.transitioningCameraTargetStartTime));\r\n                tempCameraTarget.copy(this.previousCameraTarget).lerp(this.nextCameraTarget, t);\r\n                this.camera.lookAt(tempCameraTarget);\r\n                this.controls.target.copy(tempCameraTarget);\r\n                if (t >= 1.0) {\r\n                    this.transitioningCameraTarget = false;\r\n                }\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateFocusMarker = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n        let wasTransitioning = false;\r\n\r\n        return function(timeDelta) {\r\n            this.getRenderDimensions(renderDimensions);\r\n            const fadeInSpeed = 10.0;\r\n            const fadeOutSpeed = 2.5;\r\n            if (this.transitioningCameraTarget) {\r\n                this.sceneHelper.setFocusMarkerVisibility(true);\r\n                const currentFocusMarkerOpacity = Math.max(this.sceneHelper.getFocusMarkerOpacity(), 0.0);\r\n                let newFocusMarkerOpacity = Math.min(currentFocusMarkerOpacity + fadeInSpeed * timeDelta, 1.0);\r\n                this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\r\n                this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\r\n                wasTransitioning = true;\r\n            } else {\r\n                let currentFocusMarkerOpacity;\r\n                if (wasTransitioning) currentFocusMarkerOpacity = 1.0;\r\n                else currentFocusMarkerOpacity = Math.min(this.sceneHelper.getFocusMarkerOpacity(), 1.0);\r\n                if (currentFocusMarkerOpacity > 0) {\r\n                    this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\r\n                    let newFocusMarkerOpacity = Math.max(currentFocusMarkerOpacity - fadeOutSpeed * timeDelta, 0.0);\r\n                    this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\r\n                    if (newFocusMarkerOpacity === 0.0) this.sceneHelper.setFocusMarkerVisibility(false);\r\n                }\r\n                wasTransitioning = false;\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateMeshCursor = function() {\r\n\r\n        const outHits = [];\r\n        const renderDimensions = new THREE.Vector2();\r\n\r\n        return function() {\r\n            if (this.showMeshCursor) {\r\n                this.getRenderDimensions(renderDimensions);\r\n                outHits.length = 0;\r\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\r\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\r\n                if (outHits.length > 0) {\r\n                    this.sceneHelper.setMeshCursorVisibility(true);\r\n                    this.sceneHelper.positionAndOrientMeshCursor(outHits[0].origin, this.camera);\r\n                } else {\r\n                    this.sceneHelper.setMeshCursorVisibility(false);\r\n                }\r\n            } else {\r\n                this.sceneHelper.setMeshCursorVisibility(false);\r\n            }\r\n        };\r\n\r\n    }();\r\n\r\n    updateInfoPanel = function() {\r\n\r\n        const renderDimensions = new THREE.Vector2();\r\n\r\n        return function() {\r\n            if (!this.showInfo) return;\r\n            const splatCount = this.splatMesh.getSplatCount();\r\n            this.getRenderDimensions(renderDimensions);\r\n\r\n            const cameraPos = this.camera.position;\r\n            const cameraPosString = `[${cameraPos.x.toFixed(5)}, ${cameraPos.y.toFixed(5)}, ${cameraPos.z.toFixed(5)}]`;\r\n            this.infoPanelCells.cameraPosition.innerHTML = cameraPosString;\r\n\r\n            if (this.controls) {\r\n            const cameraLookAt = this.controls.target;\r\n            const cameraLookAtString = `[${cameraLookAt.x.toFixed(5)}, ${cameraLookAt.y.toFixed(5)}, ${cameraLookAt.z.toFixed(5)}]`;\r\n            this.infoPanelCells.cameraLookAt.innerHTML = cameraLookAtString;\r\n            }\r\n\r\n            const cameraUp = this.camera.up;\r\n            const cameraUpString = `[${cameraUp.x.toFixed(5)}, ${cameraUp.y.toFixed(5)}, ${cameraUp.z.toFixed(5)}]`;\r\n            this.infoPanelCells.cameraUp.innerHTML = cameraUpString;\r\n\r\n            if (this.showMeshCursor) {\r\n                const cursorPos = this.sceneHelper.meshCursor.position;\r\n                const cursorPosString = `[${cursorPos.x.toFixed(5)}, ${cursorPos.y.toFixed(5)}, ${cursorPos.z.toFixed(5)}]`;\r\n                this.infoPanelCells.cursorPosition.innerHTML = cursorPosString;\r\n            } else {\r\n                this.infoPanelCells.cursorPosition.innerHTML = 'N/A';\r\n            }\r\n\r\n            this.infoPanelCells.fps.innerHTML = this.currentFPS;\r\n            this.infoPanelCells.renderWindow.innerHTML = `${renderDimensions.x} x ${renderDimensions.y}`;\r\n\r\n            const renderPct = this.splatRenderCount / splatCount * 100;\r\n            this.infoPanelCells.renderSplatCount.innerHTML =\r\n                `${this.splatRenderCount} splats out of ${splatCount} (${renderPct.toFixed(2)}%)`;\r\n\r\n            this.infoPanelCells.sortTime.innerHTML = `${this.lastSortTime.toFixed(3)} ms`;\r\n        };\r\n\r\n    }();\r\n\r\n    updateControlPlane() {\r\n        if (this.showControlPlane) {\r\n            this.sceneHelper.setControlPlaneVisibility(true);\r\n            this.sceneHelper.positionAndOrientControlPlane(this.controls.target, this.camera.up);\r\n        } else {\r\n            this.sceneHelper.setControlPlaneVisibility(false);\r\n        }\r\n    }\r\n\r\n    updateSplatSort = function() {\r\n\r\n        const mvpMatrix = new THREE.Matrix4();\r\n        const cameraPositionArray = [];\r\n        const lastSortViewDir = new THREE.Vector3(0, 0, -1);\r\n        const sortViewDir = new THREE.Vector3(0, 0, -1);\r\n        const lastSortViewPos = new THREE.Vector3();\r\n        const sortViewOffset = new THREE.Vector3();\r\n        const queuedSorts = [];\r\n        let runCount = 0;\r\n\r\n        const partialSorts = [\r\n            {\r\n                'angleThreshold': 0.55,\r\n                'sortFractions': [0.125, 0.33333, 0.75]\r\n            },\r\n            {\r\n                'angleThreshold': 0.65,\r\n                'sortFractions': [0.33333, 0.66667]\r\n            },\r\n            {\r\n                'angleThreshold': 0.8,\r\n                'sortFractions': [0.5]\r\n            }\r\n        ];\r\n\r\n        return async function(force = false, gatherAllNodes = false) {\r\n            if (this.sortRunning) return;\r\n            if (!this.initialized || !this.splatRenderingInitialized) return;\r\n\r\n            let angleDiff = 0;\r\n            let positionDiff = 0;\r\n            let needsRefreshForRotation = false;\r\n            let needsRefreshForPosition = false;\r\n\r\n            sortViewDir.set(0, 0, -1).applyQuaternion(this.camera.quaternion);\r\n            angleDiff = sortViewDir.dot(lastSortViewDir);\r\n            positionDiff = sortViewOffset.copy(this.camera.position).sub(lastSortViewPos).length();\r\n\r\n            if (!force && !this.splatMesh.dynamicMode && queuedSorts.length === 0 && runCount > 0) {\r\n                if (angleDiff <= 0.95) needsRefreshForRotation = true;\r\n                if (positionDiff >= 1.0) needsRefreshForPosition = true;\r\n                if (!needsRefreshForRotation && !needsRefreshForPosition) return;\r\n            }\r\n\r\n            this.sortRunning = true;\r\n            this.splatRenderCount = this.gatherSceneNodesForSort(gatherAllNodes);\r\n            this.sortPromise = new Promise((resolve) => {\r\n                this.sortPromiseResolver = resolve;\r\n            });\r\n\r\n            mvpMatrix.copy(this.camera.matrixWorld).invert();\r\n            mvpMatrix.premultiply(this.camera.projectionMatrix);\r\n            mvpMatrix.multiply(this.splatMesh.matrixWorld);\r\n\r\n            if (this.gpuAcceleratedSort && (queuedSorts.length <= 1 || queuedSorts.length % 2 === 0)) {\r\n                await this.splatMesh.computeDistancesOnGPU(mvpMatrix, this.sortWorkerPrecomputedDistances);\r\n            }\r\n\r\n            if (this.splatMesh.dynamicMode) {\r\n                queuedSorts.push(this.splatRenderCount);\r\n            } else {\r\n                if (queuedSorts.length === 0) {\r\n                    for (let partialSort of partialSorts) {\r\n                        if (angleDiff < partialSort.angleThreshold) {\r\n                            for (let sortFraction of partialSort.sortFractions) {\r\n                                queuedSorts.push(Math.floor(this.splatRenderCount * sortFraction));\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    queuedSorts.push(this.splatRenderCount);\r\n                }\r\n            }\r\n            const sortCount = Math.min(queuedSorts.shift(), this.splatRenderCount);\r\n\r\n            cameraPositionArray[0] = this.camera.position.x;\r\n            cameraPositionArray[1] = this.camera.position.y;\r\n            cameraPositionArray[2] = this.camera.position.z;\r\n\r\n            const sortMessage = {\r\n                'modelViewProj': mvpMatrix.elements,\r\n                'cameraPosition': cameraPositionArray,\r\n                'splatRenderCount': this.splatRenderCount,\r\n                'splatSortCount': sortCount,\r\n                'usePrecomputedDistances': this.gpuAcceleratedSort\r\n            };\r\n            if (this.splatMesh.dynamicMode) {\r\n                this.splatMesh.fillTransformsArray(this.sortWorkerTransforms);\r\n            }\r\n            if (!this.sharedMemoryForWorkers) {\r\n                sortMessage.indexesToSort = this.sortWorkerIndexesToSort;\r\n                sortMessage.transforms = this.sortWorkerTransforms;\r\n                if (this.gpuAcceleratedSort) {\r\n                    sortMessage.precomputedDistances = this.sortWorkerPrecomputedDistances;\r\n                }\r\n            }\r\n            this.sortWorker.postMessage({\r\n                'sort': sortMessage\r\n            });\r\n\r\n            if (queuedSorts.length === 0) {\r\n                lastSortViewPos.copy(this.camera.position);\r\n                lastSortViewDir.copy(sortViewDir);\r\n            }\r\n            runCount++;\r\n        };\r\n\r\n    }();\r\n\r\n    /**\r\n     * Determine which splats to render by checking which are inside or close to the view frustum\r\n     */\r\n    gatherSceneNodesForSort = function() {\r\n\r\n        const nodeRenderList = [];\r\n        const tempVectorYZ = new THREE.Vector3();\r\n        const tempVectorXZ = new THREE.Vector3();\r\n        const tempVector = new THREE.Vector3();\r\n        const modelView = new THREE.Matrix4();\r\n        const baseModelView = new THREE.Matrix4();\r\n        const sceneTransform = new THREE.Matrix4();\r\n        const renderDimensions = new THREE.Vector3();\r\n        const forward = new THREE.Vector3(0, 0, -1);\r\n\r\n        const tempMax = new THREE.Vector3();\r\n        const nodeSize = (node) => {\r\n            return tempMax.copy(node.max).sub(node.min).length();\r\n        };\r\n\r\n        const MaximumDistanceToRender = 125;\r\n\r\n        return function(gatherAllNodes) {\r\n\r\n            this.getRenderDimensions(renderDimensions);\r\n            const cameraFocalLength = (renderDimensions.y / 2.0) / Math.tan(this.camera.fov / 2.0 * THREE.MathUtils.DEG2RAD);\r\n            const fovXOver2 = Math.atan(renderDimensions.x / 2.0 / cameraFocalLength);\r\n            const fovYOver2 = Math.atan(renderDimensions.y / 2.0 / cameraFocalLength);\r\n            const cosFovXOver2 = Math.cos(fovXOver2);\r\n            const cosFovYOver2 = Math.cos(fovYOver2);\r\n\r\n            const splatTree = this.splatMesh.getSplatTree();\r\n            baseModelView.copy(this.camera.matrixWorld).invert();\r\n            baseModelView.multiply(this.splatMesh.matrixWorld);\r\n\r\n            let nodeRenderCount = 0;\r\n            let splatRenderCount = 0;\r\n\r\n            for (let s = 0; s < splatTree.subTrees.length; s++) {\r\n                const subTree = splatTree.subTrees[s];\r\n                modelView.copy(baseModelView);\r\n                if (this.splatMesh.dynamicMode) {\r\n                    this.splatMesh.getSceneTransform(s, sceneTransform);\r\n                    modelView.multiply(sceneTransform);\r\n                }\r\n                const nodeCount = subTree.nodesWithIndexes.length;\r\n                for (let i = 0; i < nodeCount; i++) {\r\n                    const node = subTree.nodesWithIndexes[i];\r\n                    tempVector.copy(node.center).applyMatrix4(modelView);\r\n\r\n                    const distanceToNode = tempVector.length();\r\n                    tempVector.normalize();\r\n\r\n                    tempVectorYZ.copy(tempVector).setX(0).normalize();\r\n                    tempVectorXZ.copy(tempVector).setY(0).normalize();\r\n\r\n                    const cameraAngleXZDot = forward.dot(tempVectorXZ);\r\n                    const cameraAngleYZDot = forward.dot(tempVectorYZ);\r\n\r\n                    const ns = nodeSize(node);\r\n                    const outOfFovY = cameraAngleYZDot < (cosFovYOver2 - .6);\r\n                    const outOfFovX = cameraAngleXZDot < (cosFovXOver2 - .6);\r\n                    if (!gatherAllNodes && ((outOfFovX || outOfFovY || distanceToNode > MaximumDistanceToRender) && distanceToNode > ns)) {\r\n                        continue;\r\n                    }\r\n                    splatRenderCount += node.data.indexes.length;\r\n                    nodeRenderList[nodeRenderCount] = node;\r\n                    node.data.distanceToNode = distanceToNode;\r\n                    nodeRenderCount++;\r\n                }\r\n            }\r\n\r\n            nodeRenderList.length = nodeRenderCount;\r\n            nodeRenderList.sort((a, b) => {\r\n                if (a.data.distanceToNode < b.data.distanceToNode) return -1;\r\n                else return 1;\r\n            });\r\n\r\n            let currentByteOffset = splatRenderCount * Constants.BytesPerInt;\r\n            for (let i = 0; i < nodeRenderCount; i++) {\r\n                const node = nodeRenderList[i];\r\n                const windowSizeInts = node.data.indexes.length;\r\n                const windowSizeBytes = windowSizeInts * Constants.BytesPerInt;\r\n                let destView = new Uint32Array(this.sortWorkerIndexesToSort.buffer, currentByteOffset - windowSizeBytes, windowSizeInts);\r\n                destView.set(node.data.indexes);\r\n                currentByteOffset -= windowSizeBytes;\r\n            }\r\n\r\n            return splatRenderCount;\r\n        };\r\n\r\n    }();\r\n\r\n    getSplatMesh() {\r\n        return this.splatMesh;\r\n    }\r\n\r\n    /**\r\n     * Get a reference to a splat scene.\r\n     * @param {number} sceneIndex The index of the scene to which the reference will be returned\r\n     * @return {SplatScene}\r\n     */\r\n    getSplatScene(sceneIndex) {\r\n        return this.splatMesh.getScene(sceneIndex);\r\n    }\r\n\r\n    isMobile() {\r\n        return navigator.userAgent.includes('Mobi');\r\n    }\r\n}\r\n","import * as THREE from 'three';\r\nimport { Viewer } from './Viewer.js';\r\n\r\n/**\r\n * DropInViewer: Wrapper for a Viewer instance that enables it to be added to a Three.js scene like\r\n * any other Three.js scene object (Mesh, Object3D, etc.)\r\n */\r\nexport class DropInViewer extends THREE.Group {\r\n\r\n    constructor(options = {}) {\r\n        super();\r\n\r\n        options.selfDrivenMode = false;\r\n        options.useBuiltInControls = false;\r\n        options.rootElement = null;\r\n        options.ignoreDevicePixelRatio = false;\r\n        options.dropInMode = true;\r\n        options.camera = undefined;\r\n        options.renderer = undefined;\r\n\r\n        this.viewer = new Viewer(options);\r\n\r\n        this.callbackMesh = DropInViewer.createCallbackMesh();\r\n        this.add(this.callbackMesh);\r\n        this.callbackMesh.onBeforeRender = DropInViewer.onBeforeRender.bind(this, this.viewer);\r\n\r\n    }\r\n\r\n    /**\r\n     * Add a single splat scene to the viewer.\r\n     * @param {string} path Path to splat scene to be loaded\r\n     * @param {object} options {\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         showLoadingSpinner:         Display a loading spinner while the scene is loading, defaults to true\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     *\r\n     *         onProgress:                 Function to be called as file data are received\r\n     *\r\n     * }\r\n     * @return {AbortablePromise}\r\n     */\r\n    addSplatScene(path, options = {}) {\r\n        if (options.showLoadingSpinner !== false) options.showLoadingSpinner = true;\r\n        const loadPromise = this.viewer.addSplatScene(path, options);\r\n        loadPromise.then(() => {\r\n            this.add(this.viewer.splatMesh);\r\n        });\r\n        return loadPromise;\r\n    }\r\n\r\n    /**\r\n     * Add multiple splat scenes to the viewer.\r\n     * @param {Array<object>} sceneOptions Array of per-scene options: {\r\n     *\r\n     *         path: Path to splat scene to be loaded\r\n     *\r\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\r\n     *                                     value (valid range: 0 - 255), defaults to 1\r\n     *\r\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\r\n     *\r\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\r\n     *\r\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\r\n     * }\r\n     * @param {boolean} showLoadingSpinner Display a loading spinner while the scene is loading, defaults to true\r\n     * @return {AbortablePromise}\r\n     */\r\n    addSplatScenes(sceneOptions, showLoadingSpinner) {\r\n        if (showLoadingSpinner !== false) showLoadingSpinner = true;\r\n        const loadPromise = this.viewer.addSplatScenes(sceneOptions, showLoadingSpinner);\r\n        loadPromise.then(() => {\r\n            this.add(this.viewer.splatMesh);\r\n        });\r\n        return loadPromise;\r\n    }\r\n\r\n    /**\r\n     * Get a reference to a splat scene.\r\n     * @param {number} sceneIndex The index of the scene to which the reference will be returned\r\n     * @return {SplatScene}\r\n     */\r\n    getSplatScene(sceneIndex) {\r\n        return this.viewer.getSplatScene(sceneIndex);\r\n    }\r\n\r\n    dispose() {\r\n        return this.viewer.dispose();\r\n    }\r\n\r\n    static onBeforeRender(viewer, renderer, threeScene, camera) {\r\n        viewer.update(renderer, camera);\r\n    }\r\n\r\n    static createCallbackMesh() {\r\n        const geometry = new THREE.SphereGeometry(1, 8, 8);\r\n        const material = new THREE.MeshBasicMaterial();\r\n        material.colorWrite = false;\r\n        material.depthWrite = false;\r\n        const mesh = new THREE.Mesh(geometry, material);\r\n        mesh.frustumCulled = false;\r\n        return mesh;\r\n    }\r\n\r\n}\r\n"],"names":["Ray"],"mappings":"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AAC;AACV,QAAQ,IAAI,CAAC,oCAAoC,GAAG,EAAE,CAAC;AACvD,QAAQ,IAAI,CAAC,+BAA+B,GAAG,EAAE,CAAC;AAClD,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,OAAO,aAAa,CAAC,WAAW,GAAG,KAAK,EAAE;AAC9C;AACA;AACA;AACA,QAAQ,IAAI,kBAAkB,GAAG,CAAC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,CAAC,CAAC;AAC5D;AACA,QAAQ,IAAI,WAAW,EAAE;AACzB,YAAY,kBAAkB,IAAI,CAAC;AACnC;AACA,8CAA8C,EAAE,SAAS,CAAC,SAAS,CAAC;AACpE;AACA,YAAY,CAAC,CAAC;AACd,SAAS;AACT;AACA,QAAQ,kBAAkB,IAAI,CAAC;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,CAAC,CAAC;AACpF;AACA,YAAY,IAAI,WAAW,EAAE;AAC7B,gBAAgB,kBAAkB,IAAI,CAAC;AACvC;AACA;AACA;AACA,gBAAgB,CAAC,CAAC;AAClB,aAAa,MAAM;AACnB,gBAAgB,kBAAkB,IAAI,CAAC,gDAAgD,CAAC,CAAC;AACzF,aAAa;AACb;AACA,YAAY,kBAAkB,IAAI,CAAC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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"}